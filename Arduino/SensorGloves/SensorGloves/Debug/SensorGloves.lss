
SensorGloves.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000250  00800100  00002988  00002a1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002988  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000116  00800350  00800350  00002c6c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002c6c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000007a0  00000000  00000000  00002c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0001216c  00000000  00000000  0000343c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002842  00000000  00000000  000155a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000029ce  00000000  00000000  00017dea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001b44  00000000  00000000  0001a7b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000290c  00000000  00000000  0001c2fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00009181  00000000  00000000  0001ec08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000008e8  00000000  00000000  00027d89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__dtors_end>
       4:	0c 94 48 04 	jmp	0x890	; 0x890 <__vector_1>
       8:	0c 94 75 04 	jmp	0x8ea	; 0x8ea <__vector_2>
       c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      10:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      14:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      18:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      1c:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <__vector_7>
      20:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      24:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      28:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      2c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      30:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      34:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      38:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      3c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      40:	0c 94 a2 04 	jmp	0x944	; 0x944 <__vector_16>
      44:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      48:	0c 94 ca 01 	jmp	0x394	; 0x394 <__vector_18>
      4c:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__vector_19>
      50:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      54:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      58:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      5c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      60:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      64:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	02 00       	.word	0x0002	; ????

00000069 <digital_pin_to_timer_PGM>:
      69:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      79:	00 00 00 00                                         ....

0000007d <digital_pin_to_bit_mask_PGM>:
      7d:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8d:	04 08 10 20                                         ... 

00000091 <digital_pin_to_port_PGM>:
      91:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a1:	03 03 03 03                                         ....

000000a5 <port_to_output_PGM>:
      a5:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000af <port_to_mode_PGM>:
      af:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000000ba <__ctors_start>:
      ba:	2c 02       	muls	r18, r28
      bc:	aa 02       	muls	r26, r26
      be:	84 10       	cpse	r8, r4

000000c0 <__ctors_end>:
      c0:	96 10       	cpse	r9, r6

000000c2 <__dtors_end>:
      c2:	11 24       	eor	r1, r1
      c4:	1f be       	out	0x3f, r1	; 63
      c6:	cf ef       	ldi	r28, 0xFF	; 255
      c8:	d8 e0       	ldi	r29, 0x08	; 8
      ca:	de bf       	out	0x3e, r29	; 62
      cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
      ce:	13 e0       	ldi	r17, 0x03	; 3
      d0:	a0 e0       	ldi	r26, 0x00	; 0
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	e8 e8       	ldi	r30, 0x88	; 136
      d6:	f9 e2       	ldi	r31, 0x29	; 41
      d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
      da:	05 90       	lpm	r0, Z+
      dc:	0d 92       	st	X+, r0
      de:	a0 35       	cpi	r26, 0x50	; 80
      e0:	b1 07       	cpc	r27, r17
      e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
      e4:	24 e0       	ldi	r18, 0x04	; 4
      e6:	a0 e5       	ldi	r26, 0x50	; 80
      e8:	b3 e0       	ldi	r27, 0x03	; 3
      ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
      ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
      ee:	a6 36       	cpi	r26, 0x66	; 102
      f0:	b2 07       	cpc	r27, r18
      f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>

000000f4 <__do_global_ctors>:
      f4:	10 e0       	ldi	r17, 0x00	; 0
      f6:	c0 ec       	ldi	r28, 0xC0	; 192
      f8:	d0 e0       	ldi	r29, 0x00	; 0
      fa:	04 c0       	rjmp	.+8      	; 0x104 <__do_global_ctors+0x10>
      fc:	22 97       	sbiw	r28, 0x02	; 2
      fe:	fe 01       	movw	r30, r28
     100:	0e 94 55 12 	call	0x24aa	; 0x24aa <__tablejump__>
     104:	ca 3b       	cpi	r28, 0xBA	; 186
     106:	d1 07       	cpc	r29, r17
     108:	c9 f7       	brne	.-14     	; 0xfc <__do_global_ctors+0x8>
     10a:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <main>
     10e:	0c 94 b7 14 	jmp	0x296e	; 0x296e <__do_global_dtors>

00000112 <__bad_interrupt>:
     112:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000116 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     116:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     118:	81 8d       	ldd	r24, Z+25	; 0x19
     11a:	22 8d       	ldd	r18, Z+26	; 0x1a
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	80 5c       	subi	r24, 0xC0	; 192
     120:	9f 4f       	sbci	r25, 0xFF	; 255
     122:	82 1b       	sub	r24, r18
     124:	91 09       	sbc	r25, r1
}
     126:	8f 73       	andi	r24, 0x3F	; 63
     128:	99 27       	eor	r25, r25
     12a:	08 95       	ret

0000012c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     12c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     12e:	91 8d       	ldd	r25, Z+25	; 0x19
     130:	82 8d       	ldd	r24, Z+26	; 0x1a
     132:	98 17       	cp	r25, r24
     134:	31 f0       	breq	.+12     	; 0x142 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     136:	82 8d       	ldd	r24, Z+26	; 0x1a
     138:	e8 0f       	add	r30, r24
     13a:	f1 1d       	adc	r31, r1
     13c:	85 8d       	ldd	r24, Z+29	; 0x1d
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     142:	8f ef       	ldi	r24, 0xFF	; 255
     144:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     146:	08 95       	ret

00000148 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     148:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     14a:	91 8d       	ldd	r25, Z+25	; 0x19
     14c:	82 8d       	ldd	r24, Z+26	; 0x1a
     14e:	98 17       	cp	r25, r24
     150:	61 f0       	breq	.+24     	; 0x16a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     152:	82 8d       	ldd	r24, Z+26	; 0x1a
     154:	df 01       	movw	r26, r30
     156:	a8 0f       	add	r26, r24
     158:	b1 1d       	adc	r27, r1
     15a:	5d 96       	adiw	r26, 0x1d	; 29
     15c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     15e:	92 8d       	ldd	r25, Z+26	; 0x1a
     160:	9f 5f       	subi	r25, 0xFF	; 255
     162:	9f 73       	andi	r25, 0x3F	; 63
     164:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     16a:	8f ef       	ldi	r24, 0xFF	; 255
     16c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     16e:	08 95       	ret

00000170 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     170:	82 e2       	ldi	r24, 0x22	; 34
     172:	92 e0       	ldi	r25, 0x02	; 2
     174:	89 2b       	or	r24, r25
     176:	49 f0       	breq	.+18     	; 0x18a <_Z14serialEventRunv+0x1a>
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	89 2b       	or	r24, r25
     17e:	29 f0       	breq	.+10     	; 0x18a <_Z14serialEventRunv+0x1a>
     180:	0e 94 22 02 	call	0x444	; 0x444 <_Z17Serial0_availablev>
     184:	81 11       	cpse	r24, r1
     186:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     18a:	08 95       	ret

0000018c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     18c:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     18e:	84 8d       	ldd	r24, Z+28	; 0x1c
     190:	df 01       	movw	r26, r30
     192:	a8 0f       	add	r26, r24
     194:	b1 1d       	adc	r27, r1
     196:	a3 5a       	subi	r26, 0xA3	; 163
     198:	bf 4f       	sbci	r27, 0xFF	; 255
     19a:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     19c:	84 8d       	ldd	r24, Z+28	; 0x1c
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	01 96       	adiw	r24, 0x01	; 1
     1a2:	8f 73       	andi	r24, 0x3F	; 63
     1a4:	99 27       	eor	r25, r25
     1a6:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     1a8:	a6 89       	ldd	r26, Z+22	; 0x16
     1aa:	b7 89       	ldd	r27, Z+23	; 0x17
     1ac:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     1ae:	a0 89       	ldd	r26, Z+16	; 0x10
     1b0:	b1 89       	ldd	r27, Z+17	; 0x11
     1b2:	8c 91       	ld	r24, X
     1b4:	80 64       	ori	r24, 0x40	; 64
     1b6:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     1b8:	93 8d       	ldd	r25, Z+27	; 0x1b
     1ba:	84 8d       	ldd	r24, Z+28	; 0x1c
     1bc:	98 13       	cpse	r25, r24
     1be:	06 c0       	rjmp	.+12     	; 0x1cc <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     1c0:	02 88       	ldd	r0, Z+18	; 0x12
     1c2:	f3 89       	ldd	r31, Z+19	; 0x13
     1c4:	e0 2d       	mov	r30, r0
     1c6:	80 81       	ld	r24, Z
     1c8:	8f 7d       	andi	r24, 0xDF	; 223
     1ca:	80 83       	st	Z, r24
     1cc:	08 95       	ret

000001ce <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     1ce:	cf 93       	push	r28
     1d0:	df 93       	push	r29
     1d2:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     1d4:	88 8d       	ldd	r24, Y+24	; 0x18
     1d6:	88 23       	and	r24, r24
     1d8:	c9 f0       	breq	.+50     	; 0x20c <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     1da:	ea 89       	ldd	r30, Y+18	; 0x12
     1dc:	fb 89       	ldd	r31, Y+19	; 0x13
     1de:	80 81       	ld	r24, Z
     1e0:	85 fd       	sbrc	r24, 5
     1e2:	05 c0       	rjmp	.+10     	; 0x1ee <_ZN14HardwareSerial5flushEv+0x20>
     1e4:	a8 89       	ldd	r26, Y+16	; 0x10
     1e6:	b9 89       	ldd	r27, Y+17	; 0x11
     1e8:	8c 91       	ld	r24, X
     1ea:	86 fd       	sbrc	r24, 6
     1ec:	0f c0       	rjmp	.+30     	; 0x20c <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	07 fc       	sbrc	r0, 7
     1f2:	f5 cf       	rjmp	.-22     	; 0x1de <_ZN14HardwareSerial5flushEv+0x10>
     1f4:	80 81       	ld	r24, Z
     1f6:	85 ff       	sbrs	r24, 5
     1f8:	f2 cf       	rjmp	.-28     	; 0x1de <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     1fa:	a8 89       	ldd	r26, Y+16	; 0x10
     1fc:	b9 89       	ldd	r27, Y+17	; 0x11
     1fe:	8c 91       	ld	r24, X
     200:	85 ff       	sbrs	r24, 5
     202:	ed cf       	rjmp	.-38     	; 0x1de <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     204:	ce 01       	movw	r24, r28
     206:	0e 94 c6 00 	call	0x18c	; 0x18c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     20a:	e7 cf       	rjmp	.-50     	; 0x1da <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     20c:	df 91       	pop	r29
     20e:	cf 91       	pop	r28
     210:	08 95       	ret

00000212 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     212:	cf 92       	push	r12
     214:	df 92       	push	r13
     216:	ff 92       	push	r15
     218:	0f 93       	push	r16
     21a:	1f 93       	push	r17
     21c:	cf 93       	push	r28
     21e:	df 93       	push	r29
     220:	1f 92       	push	r1
     222:	cd b7       	in	r28, 0x3d	; 61
     224:	de b7       	in	r29, 0x3e	; 62
     226:	6c 01       	movw	r12, r24
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     228:	dc 01       	movw	r26, r24
     22a:	5b 96       	adiw	r26, 0x1b	; 27
     22c:	9c 91       	ld	r25, X
     22e:	5b 97       	sbiw	r26, 0x1b	; 27
     230:	5c 96       	adiw	r26, 0x1c	; 28
     232:	8c 91       	ld	r24, X
     234:	5c 97       	sbiw	r26, 0x1c	; 28
     236:	98 13       	cpse	r25, r24
     238:	07 c0       	rjmp	.+14     	; 0x248 <_ZN14HardwareSerial5writeEh+0x36>
     23a:	50 96       	adiw	r26, 0x10	; 16
     23c:	ed 91       	ld	r30, X+
     23e:	fc 91       	ld	r31, X
     240:	51 97       	sbiw	r26, 0x11	; 17
     242:	80 81       	ld	r24, Z
     244:	85 fd       	sbrc	r24, 5
     246:	32 c0       	rjmp	.+100    	; 0x2ac <_ZN14HardwareSerial5writeEh+0x9a>
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     248:	f6 01       	movw	r30, r12
     24a:	03 8d       	ldd	r16, Z+27	; 0x1b
     24c:	10 e0       	ldi	r17, 0x00	; 0
     24e:	0f 5f       	subi	r16, 0xFF	; 255
     250:	1f 4f       	sbci	r17, 0xFF	; 255
     252:	0f 73       	andi	r16, 0x3F	; 63
     254:	11 27       	eor	r17, r17
     256:	f0 2e       	mov	r15, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     258:	f6 01       	movw	r30, r12
     25a:	84 8d       	ldd	r24, Z+28	; 0x1c
     25c:	f8 12       	cpse	r15, r24
     25e:	11 c0       	rjmp	.+34     	; 0x282 <_ZN14HardwareSerial5writeEh+0x70>
    if (bit_is_clear(SREG, SREG_I)) {
     260:	0f b6       	in	r0, 0x3f	; 63
     262:	07 fc       	sbrc	r0, 7
     264:	f9 cf       	rjmp	.-14     	; 0x258 <_ZN14HardwareSerial5writeEh+0x46>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     266:	d6 01       	movw	r26, r12
     268:	50 96       	adiw	r26, 0x10	; 16
     26a:	ed 91       	ld	r30, X+
     26c:	fc 91       	ld	r31, X
     26e:	51 97       	sbiw	r26, 0x11	; 17
     270:	80 81       	ld	r24, Z
     272:	85 ff       	sbrs	r24, 5
     274:	f1 cf       	rjmp	.-30     	; 0x258 <_ZN14HardwareSerial5writeEh+0x46>
	_tx_udr_empty_irq();
     276:	c6 01       	movw	r24, r12
     278:	69 83       	std	Y+1, r22	; 0x01
     27a:	0e 94 c6 00 	call	0x18c	; 0x18c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     27e:	69 81       	ldd	r22, Y+1	; 0x01
     280:	eb cf       	rjmp	.-42     	; 0x258 <_ZN14HardwareSerial5writeEh+0x46>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     282:	83 8d       	ldd	r24, Z+27	; 0x1b
     284:	e8 0f       	add	r30, r24
     286:	f1 1d       	adc	r31, r1
     288:	e3 5a       	subi	r30, 0xA3	; 163
     28a:	ff 4f       	sbci	r31, 0xFF	; 255
     28c:	60 83       	st	Z, r22
  _tx_buffer_head = i;
     28e:	d6 01       	movw	r26, r12
     290:	5b 96       	adiw	r26, 0x1b	; 27
     292:	0c 93       	st	X, r16
     294:	5b 97       	sbiw	r26, 0x1b	; 27
	
  sbi(*_ucsrb, UDRIE0);
     296:	52 96       	adiw	r26, 0x12	; 18
     298:	ed 91       	ld	r30, X+
     29a:	fc 91       	ld	r31, X
     29c:	53 97       	sbiw	r26, 0x13	; 19
     29e:	80 81       	ld	r24, Z
     2a0:	80 62       	ori	r24, 0x20	; 32
     2a2:	80 83       	st	Z, r24
  _written = true;
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	58 96       	adiw	r26, 0x18	; 24
     2a8:	8c 93       	st	X, r24
     2aa:	0d c0       	rjmp	.+26     	; 0x2c6 <_ZN14HardwareSerial5writeEh+0xb4>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     2ac:	d6 01       	movw	r26, r12
     2ae:	56 96       	adiw	r26, 0x16	; 22
     2b0:	ed 91       	ld	r30, X+
     2b2:	fc 91       	ld	r31, X
     2b4:	57 97       	sbiw	r26, 0x17	; 23
     2b6:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     2b8:	50 96       	adiw	r26, 0x10	; 16
     2ba:	ed 91       	ld	r30, X+
     2bc:	fc 91       	ld	r31, X
     2be:	51 97       	sbiw	r26, 0x11	; 17
     2c0:	80 81       	ld	r24, Z
     2c2:	80 64       	ori	r24, 0x40	; 64
     2c4:	80 83       	st	Z, r24
	
  sbi(*_ucsrb, UDRIE0);
  _written = true;
  
  return 1;
}
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	0f 90       	pop	r0
     2cc:	df 91       	pop	r29
     2ce:	cf 91       	pop	r28
     2d0:	1f 91       	pop	r17
     2d2:	0f 91       	pop	r16
     2d4:	ff 90       	pop	r15
     2d6:	df 90       	pop	r13
     2d8:	cf 90       	pop	r12
     2da:	08 95       	ret

000002dc <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     2dc:	bf 92       	push	r11
     2de:	cf 92       	push	r12
     2e0:	df 92       	push	r13
     2e2:	ef 92       	push	r14
     2e4:	ff 92       	push	r15
     2e6:	cf 93       	push	r28
     2e8:	df 93       	push	r29
     2ea:	ec 01       	movw	r28, r24
     2ec:	6a 01       	movw	r12, r20
     2ee:	7b 01       	movw	r14, r22
     2f0:	b2 2e       	mov	r11, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     2f2:	60 e8       	ldi	r22, 0x80	; 128
     2f4:	74 e8       	ldi	r23, 0x84	; 132
     2f6:	8e e1       	ldi	r24, 0x1E	; 30
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	a7 01       	movw	r20, r14
     2fc:	96 01       	movw	r18, r12
     2fe:	0e 94 31 12 	call	0x2462	; 0x2462 <__udivmodsi4>
     302:	21 50       	subi	r18, 0x01	; 1
     304:	31 09       	sbc	r19, r1
     306:	41 09       	sbc	r20, r1
     308:	51 09       	sbc	r21, r1
     30a:	56 95       	lsr	r21
     30c:	47 95       	ror	r20
     30e:	37 95       	ror	r19
     310:	27 95       	ror	r18
  *_ucsra = 1 << U2X0;
     312:	e8 89       	ldd	r30, Y+16	; 0x10
     314:	f9 89       	ldd	r31, Y+17	; 0x11
     316:	82 e0       	ldi	r24, 0x02	; 2
     318:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     31a:	21 15       	cp	r18, r1
     31c:	80 e1       	ldi	r24, 0x10	; 16
     31e:	38 07       	cpc	r19, r24
     320:	98 f0       	brcs	.+38     	; 0x348 <_ZN14HardwareSerial5beginEmh+0x6c>
  {
    *_ucsra = 0;
     322:	e8 89       	ldd	r30, Y+16	; 0x10
     324:	f9 89       	ldd	r31, Y+17	; 0x11
     326:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     328:	60 e4       	ldi	r22, 0x40	; 64
     32a:	72 e4       	ldi	r23, 0x42	; 66
     32c:	8f e0       	ldi	r24, 0x0F	; 15
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	a7 01       	movw	r20, r14
     332:	96 01       	movw	r18, r12
     334:	0e 94 31 12 	call	0x2462	; 0x2462 <__udivmodsi4>
     338:	21 50       	subi	r18, 0x01	; 1
     33a:	31 09       	sbc	r19, r1
     33c:	41 09       	sbc	r20, r1
     33e:	51 09       	sbc	r21, r1
     340:	56 95       	lsr	r21
     342:	47 95       	ror	r20
     344:	37 95       	ror	r19
     346:	27 95       	ror	r18
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     348:	ec 85       	ldd	r30, Y+12	; 0x0c
     34a:	fd 85       	ldd	r31, Y+13	; 0x0d
     34c:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     34e:	ee 85       	ldd	r30, Y+14	; 0x0e
     350:	ff 85       	ldd	r31, Y+15	; 0x0f
     352:	20 83       	st	Z, r18

  _written = false;
     354:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     356:	ec 89       	ldd	r30, Y+20	; 0x14
     358:	fd 89       	ldd	r31, Y+21	; 0x15
     35a:	b0 82       	st	Z, r11
  
  sbi(*_ucsrb, RXEN0);
     35c:	ea 89       	ldd	r30, Y+18	; 0x12
     35e:	fb 89       	ldd	r31, Y+19	; 0x13
     360:	80 81       	ld	r24, Z
     362:	80 61       	ori	r24, 0x10	; 16
     364:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     366:	ea 89       	ldd	r30, Y+18	; 0x12
     368:	fb 89       	ldd	r31, Y+19	; 0x13
     36a:	80 81       	ld	r24, Z
     36c:	88 60       	ori	r24, 0x08	; 8
     36e:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     370:	ea 89       	ldd	r30, Y+18	; 0x12
     372:	fb 89       	ldd	r31, Y+19	; 0x13
     374:	80 81       	ld	r24, Z
     376:	80 68       	ori	r24, 0x80	; 128
     378:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     37a:	ea 89       	ldd	r30, Y+18	; 0x12
     37c:	fb 89       	ldd	r31, Y+19	; 0x13
     37e:	80 81       	ld	r24, Z
     380:	8f 7d       	andi	r24, 0xDF	; 223
     382:	80 83       	st	Z, r24
}
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	ff 90       	pop	r15
     38a:	ef 90       	pop	r14
     38c:	df 90       	pop	r13
     38e:	cf 90       	pop	r12
     390:	bf 90       	pop	r11
     392:	08 95       	ret

00000394 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     394:	1f 92       	push	r1
     396:	0f 92       	push	r0
     398:	0f b6       	in	r0, 0x3f	; 63
     39a:	0f 92       	push	r0
     39c:	11 24       	eor	r1, r1
     39e:	2f 93       	push	r18
     3a0:	8f 93       	push	r24
     3a2:	9f 93       	push	r25
     3a4:	ef 93       	push	r30
     3a6:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     3a8:	e0 91 60 03 	lds	r30, 0x0360
     3ac:	f0 91 61 03 	lds	r31, 0x0361
     3b0:	80 81       	ld	r24, Z
     3b2:	e0 91 66 03 	lds	r30, 0x0366
     3b6:	f0 91 67 03 	lds	r31, 0x0367
     3ba:	82 fd       	sbrc	r24, 2
     3bc:	12 c0       	rjmp	.+36     	; 0x3e2 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     3be:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     3c0:	80 91 69 03 	lds	r24, 0x0369
     3c4:	8f 5f       	subi	r24, 0xFF	; 255
     3c6:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     3c8:	20 91 6a 03 	lds	r18, 0x036A
     3cc:	82 17       	cp	r24, r18
     3ce:	51 f0       	breq	.+20     	; 0x3e4 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     3d0:	e0 91 69 03 	lds	r30, 0x0369
     3d4:	f0 e0       	ldi	r31, 0x00	; 0
     3d6:	e0 5b       	subi	r30, 0xB0	; 176
     3d8:	fc 4f       	sbci	r31, 0xFC	; 252
     3da:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     3dc:	80 93 69 03 	sts	0x0369, r24
     3e0:	01 c0       	rjmp	.+2      	; 0x3e4 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     3e2:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     3e4:	ff 91       	pop	r31
     3e6:	ef 91       	pop	r30
     3e8:	9f 91       	pop	r25
     3ea:	8f 91       	pop	r24
     3ec:	2f 91       	pop	r18
     3ee:	0f 90       	pop	r0
     3f0:	0f be       	out	0x3f, r0	; 63
     3f2:	0f 90       	pop	r0
     3f4:	1f 90       	pop	r1
     3f6:	18 95       	reti

000003f8 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     3f8:	1f 92       	push	r1
     3fa:	0f 92       	push	r0
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	0f 92       	push	r0
     400:	11 24       	eor	r1, r1
     402:	2f 93       	push	r18
     404:	3f 93       	push	r19
     406:	4f 93       	push	r20
     408:	5f 93       	push	r21
     40a:	6f 93       	push	r22
     40c:	7f 93       	push	r23
     40e:	8f 93       	push	r24
     410:	9f 93       	push	r25
     412:	af 93       	push	r26
     414:	bf 93       	push	r27
     416:	ef 93       	push	r30
     418:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     41a:	80 e5       	ldi	r24, 0x50	; 80
     41c:	93 e0       	ldi	r25, 0x03	; 3
     41e:	0e 94 c6 00 	call	0x18c	; 0x18c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     422:	ff 91       	pop	r31
     424:	ef 91       	pop	r30
     426:	bf 91       	pop	r27
     428:	af 91       	pop	r26
     42a:	9f 91       	pop	r25
     42c:	8f 91       	pop	r24
     42e:	7f 91       	pop	r23
     430:	6f 91       	pop	r22
     432:	5f 91       	pop	r21
     434:	4f 91       	pop	r20
     436:	3f 91       	pop	r19
     438:	2f 91       	pop	r18
     43a:	0f 90       	pop	r0
     43c:	0f be       	out	0x3f, r0	; 63
     43e:	0f 90       	pop	r0
     440:	1f 90       	pop	r1
     442:	18 95       	reti

00000444 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     444:	80 e5       	ldi	r24, 0x50	; 80
     446:	93 e0       	ldi	r25, 0x03	; 3
     448:	0e 94 8b 00 	call	0x116	; 0x116 <_ZN14HardwareSerial9availableEv>
     44c:	21 e0       	ldi	r18, 0x01	; 1
     44e:	89 2b       	or	r24, r25
     450:	09 f4       	brne	.+2      	; 0x454 <_Z17Serial0_availablev+0x10>
     452:	20 e0       	ldi	r18, 0x00	; 0
}
     454:	82 2f       	mov	r24, r18
     456:	08 95       	ret

00000458 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     458:	10 92 53 03 	sts	0x0353, r1
     45c:	10 92 52 03 	sts	0x0352, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     460:	88 ee       	ldi	r24, 0xE8	; 232
     462:	93 e0       	ldi	r25, 0x03	; 3
     464:	a0 e0       	ldi	r26, 0x00	; 0
     466:	b0 e0       	ldi	r27, 0x00	; 0
     468:	80 93 54 03 	sts	0x0354, r24
     46c:	90 93 55 03 	sts	0x0355, r25
     470:	a0 93 56 03 	sts	0x0356, r26
     474:	b0 93 57 03 	sts	0x0357, r27
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     478:	8c e0       	ldi	r24, 0x0C	; 12
     47a:	91 e0       	ldi	r25, 0x01	; 1
     47c:	90 93 51 03 	sts	0x0351, r25
     480:	80 93 50 03 	sts	0x0350, r24
     484:	85 ec       	ldi	r24, 0xC5	; 197
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	90 93 5d 03 	sts	0x035D, r25
     48c:	80 93 5c 03 	sts	0x035C, r24
     490:	84 ec       	ldi	r24, 0xC4	; 196
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	90 93 5f 03 	sts	0x035F, r25
     498:	80 93 5e 03 	sts	0x035E, r24
     49c:	80 ec       	ldi	r24, 0xC0	; 192
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	90 93 61 03 	sts	0x0361, r25
     4a4:	80 93 60 03 	sts	0x0360, r24
     4a8:	81 ec       	ldi	r24, 0xC1	; 193
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	90 93 63 03 	sts	0x0363, r25
     4b0:	80 93 62 03 	sts	0x0362, r24
     4b4:	82 ec       	ldi	r24, 0xC2	; 194
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	90 93 65 03 	sts	0x0365, r25
     4bc:	80 93 64 03 	sts	0x0364, r24
     4c0:	86 ec       	ldi	r24, 0xC6	; 198
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	90 93 67 03 	sts	0x0367, r25
     4c8:	80 93 66 03 	sts	0x0366, r24
     4cc:	10 92 69 03 	sts	0x0369, r1
     4d0:	10 92 6a 03 	sts	0x036A, r1
     4d4:	10 92 6b 03 	sts	0x036B, r1
     4d8:	10 92 6c 03 	sts	0x036C, r1
     4dc:	08 95       	ret

000004de <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
     4de:	08 95       	ret

000004e0 <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
     4e0:	af 92       	push	r10
     4e2:	bf 92       	push	r11
     4e4:	cf 92       	push	r12
     4e6:	df 92       	push	r13
     4e8:	ef 92       	push	r14
     4ea:	ff 92       	push	r15
     4ec:	0f 93       	push	r16
     4ee:	1f 93       	push	r17
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	6c 01       	movw	r12, r24
     4f6:	7b 01       	movw	r14, r22
    size_t n = 0;
    for (int i =0; i < 3; i++)
     4f8:	c0 e0       	ldi	r28, 0x00	; 0
     4fa:	d0 e0       	ldi	r29, 0x00	; 0
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
     4fc:	00 e0       	ldi	r16, 0x00	; 0
     4fe:	10 e0       	ldi	r17, 0x00	; 0
     500:	f6 01       	movw	r30, r12
     502:	ec 0f       	add	r30, r28
     504:	fd 1f       	adc	r31, r29
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
     506:	4a e0       	ldi	r20, 0x0A	; 10
     508:	50 e0       	ldi	r21, 0x00	; 0
     50a:	62 81       	ldd	r22, Z+2	; 0x02
     50c:	c7 01       	movw	r24, r14
     50e:	0e 94 b0 03 	call	0x760	; 0x760 <_ZN5Print5printEhi>
     512:	5c 01       	movw	r10, r24
        n += p.print('.');
     514:	6e e2       	ldi	r22, 0x2E	; 46
     516:	c7 01       	movw	r24, r14
     518:	0e 94 0b 03 	call	0x616	; 0x616 <_ZN5Print5printEc>
size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
     51c:	8a 0d       	add	r24, r10
     51e:	9b 1d       	adc	r25, r11
        n += p.print('.');
     520:	08 0f       	add	r16, r24
     522:	19 1f       	adc	r17, r25
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
     524:	21 96       	adiw	r28, 0x01	; 1
     526:	c3 30       	cpi	r28, 0x03	; 3
     528:	d1 05       	cpc	r29, r1
     52a:	51 f7       	brne	.-44     	; 0x500 <_ZNK9IPAddress7printToER5Print+0x20>
    {
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
     52c:	4a e0       	ldi	r20, 0x0A	; 10
     52e:	50 e0       	ldi	r21, 0x00	; 0
     530:	f6 01       	movw	r30, r12
     532:	65 81       	ldd	r22, Z+5	; 0x05
     534:	c7 01       	movw	r24, r14
     536:	0e 94 b0 03 	call	0x760	; 0x760 <_ZN5Print5printEhi>
    return n;
}
     53a:	80 0f       	add	r24, r16
     53c:	91 1f       	adc	r25, r17
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	1f 91       	pop	r17
     544:	0f 91       	pop	r16
     546:	ff 90       	pop	r15
     548:	ef 90       	pop	r14
     54a:	df 90       	pop	r13
     54c:	cf 90       	pop	r12
     54e:	bf 90       	pop	r11
     550:	af 90       	pop	r10
     552:	08 95       	ret

00000554 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
     554:	8c e1       	ldi	r24, 0x1C	; 28
     556:	91 e0       	ldi	r25, 0x01	; 1
     558:	90 93 ee 03 	sts	0x03EE, r25
     55c:	80 93 ed 03 	sts	0x03ED, r24
{
    _address.bytes[0] = first_octet;
     560:	10 92 ef 03 	sts	0x03EF, r1
    _address.bytes[1] = second_octet;
     564:	10 92 f0 03 	sts	0x03F0, r1
    _address.bytes[2] = third_octet;
     568:	10 92 f1 03 	sts	0x03F1, r1
    _address.bytes[3] = fourth_octet;
     56c:	10 92 f2 03 	sts	0x03F2, r1
     570:	08 95       	ret

00000572 <_Znaj>:
void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
  return malloc(size);
     572:	0c 94 59 12 	jmp	0x24b2	; 0x24b2 <malloc>

00000576 <_ZdlPv>:
}

void operator delete(void * ptr) {
  free(ptr);
     576:	0c 94 f1 12 	jmp	0x25e2	; 0x25e2 <free>

0000057a <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     57a:	cf 92       	push	r12
     57c:	df 92       	push	r13
     57e:	ef 92       	push	r14
     580:	ff 92       	push	r15
     582:	0f 93       	push	r16
     584:	1f 93       	push	r17
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	6c 01       	movw	r12, r24
     58c:	7a 01       	movw	r14, r20
     58e:	eb 01       	movw	r28, r22
     590:	e6 0e       	add	r14, r22
     592:	f7 1e       	adc	r15, r23
  size_t n = 0;
     594:	00 e0       	ldi	r16, 0x00	; 0
     596:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
     598:	ce 15       	cp	r28, r14
     59a:	df 05       	cpc	r29, r15
     59c:	61 f0       	breq	.+24     	; 0x5b6 <_ZN5Print5writeEPKhj+0x3c>
    n += write(*buffer++);
     59e:	69 91       	ld	r22, Y+
     5a0:	d6 01       	movw	r26, r12
     5a2:	ed 91       	ld	r30, X+
     5a4:	fc 91       	ld	r31, X
     5a6:	01 90       	ld	r0, Z+
     5a8:	f0 81       	ld	r31, Z
     5aa:	e0 2d       	mov	r30, r0
     5ac:	c6 01       	movw	r24, r12
     5ae:	09 95       	icall
     5b0:	08 0f       	add	r16, r24
     5b2:	19 1f       	adc	r17, r25
     5b4:	f1 cf       	rjmp	.-30     	; 0x598 <_ZN5Print5writeEPKhj+0x1e>
  }
  return n;
}
     5b6:	c8 01       	movw	r24, r16
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	1f 91       	pop	r17
     5be:	0f 91       	pop	r16
     5c0:	ff 90       	pop	r15
     5c2:	ef 90       	pop	r14
     5c4:	df 90       	pop	r13
     5c6:	cf 90       	pop	r12
     5c8:	08 95       	ret

000005ca <_ZN5Print5writeEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     5ca:	61 15       	cp	r22, r1
     5cc:	71 05       	cpc	r23, r1
     5ce:	81 f0       	breq	.+32     	; 0x5f0 <_ZN5Print5writeEPKc+0x26>
      return write((const uint8_t *)str, strlen(str));
     5d0:	db 01       	movw	r26, r22
     5d2:	0d 90       	ld	r0, X+
     5d4:	00 20       	and	r0, r0
     5d6:	e9 f7       	brne	.-6      	; 0x5d2 <_ZN5Print5writeEPKc+0x8>
     5d8:	ad 01       	movw	r20, r26
     5da:	41 50       	subi	r20, 0x01	; 1
     5dc:	51 09       	sbc	r21, r1
     5de:	46 1b       	sub	r20, r22
     5e0:	57 0b       	sbc	r21, r23
     5e2:	dc 01       	movw	r26, r24
     5e4:	ed 91       	ld	r30, X+
     5e6:	fc 91       	ld	r31, X
     5e8:	02 80       	ldd	r0, Z+2	; 0x02
     5ea:	f3 81       	ldd	r31, Z+3	; 0x03
     5ec:	e0 2d       	mov	r30, r0
     5ee:	09 94       	ijmp
    }
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	08 95       	ret

000005f6 <_ZN5Print5printERK6String>:
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
     5f6:	dc 01       	movw	r26, r24
     5f8:	ed 91       	ld	r30, X+
     5fa:	fc 91       	ld	r31, X
     5fc:	db 01       	movw	r26, r22
     5fe:	14 96       	adiw	r26, 0x04	; 4
     600:	4d 91       	ld	r20, X+
     602:	5c 91       	ld	r21, X
     604:	15 97       	sbiw	r26, 0x05	; 5
     606:	6d 91       	ld	r22, X+
     608:	7c 91       	ld	r23, X
     60a:	02 80       	ldd	r0, Z+2	; 0x02
     60c:	f3 81       	ldd	r31, Z+3	; 0x03
     60e:	e0 2d       	mov	r30, r0
     610:	09 94       	ijmp

00000612 <_ZN5Print5printEPKc>:
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     612:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <_ZN5Print5writeEPKc>

00000616 <_ZN5Print5printEc>:
}

size_t Print::print(char c)
{
  return write(c);
     616:	dc 01       	movw	r26, r24
     618:	ed 91       	ld	r30, X+
     61a:	fc 91       	ld	r31, X
     61c:	01 90       	ld	r0, Z+
     61e:	f0 81       	ld	r31, Z
     620:	e0 2d       	mov	r30, r0
     622:	09 94       	ijmp

00000624 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
     624:	0f 93       	push	r16
     626:	1f 93       	push	r17
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
     62c:	ec 01       	movw	r28, r24
  size_t n = print('\r');
     62e:	6d e0       	ldi	r22, 0x0D	; 13
     630:	0e 94 0b 03 	call	0x616	; 0x616 <_ZN5Print5printEc>
     634:	8c 01       	movw	r16, r24
  n += print('\n');
     636:	6a e0       	ldi	r22, 0x0A	; 10
     638:	ce 01       	movw	r24, r28
     63a:	0e 94 0b 03 	call	0x616	; 0x616 <_ZN5Print5printEc>
  return n;
}
     63e:	80 0f       	add	r24, r16
     640:	91 1f       	adc	r25, r17
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	1f 91       	pop	r17
     648:	0f 91       	pop	r16
     64a:	08 95       	ret

0000064c <_ZN5Print7printlnERK6String>:

size_t Print::println(const String &s)
{
     64c:	0f 93       	push	r16
     64e:	1f 93       	push	r17
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	ec 01       	movw	r28, r24
  size_t n = print(s);
     656:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printERK6String>
     65a:	8c 01       	movw	r16, r24
  n += println();
     65c:	ce 01       	movw	r24, r28
     65e:	0e 94 12 03 	call	0x624	; 0x624 <_ZN5Print7printlnEv>
  return n;
}
     662:	80 0f       	add	r24, r16
     664:	91 1f       	adc	r25, r17
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	1f 91       	pop	r17
     66c:	0f 91       	pop	r16
     66e:	08 95       	ret

00000670 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
     670:	0f 93       	push	r16
     672:	1f 93       	push	r17
     674:	cf 93       	push	r28
     676:	df 93       	push	r29
     678:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     67a:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN5Print5writeEPKc>
     67e:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
     680:	ce 01       	movw	r24, r28
     682:	0e 94 12 03 	call	0x624	; 0x624 <_ZN5Print7printlnEv>
  return n;
}
     686:	80 0f       	add	r24, r16
     688:	91 1f       	adc	r25, r17
     68a:	df 91       	pop	r29
     68c:	cf 91       	pop	r28
     68e:	1f 91       	pop	r17
     690:	0f 91       	pop	r16
     692:	08 95       	ret

00000694 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
     694:	8f 92       	push	r8
     696:	9f 92       	push	r9
     698:	af 92       	push	r10
     69a:	bf 92       	push	r11
     69c:	cf 92       	push	r12
     69e:	df 92       	push	r13
     6a0:	ef 92       	push	r14
     6a2:	ff 92       	push	r15
     6a4:	0f 93       	push	r16
     6a6:	1f 93       	push	r17
     6a8:	cf 93       	push	r28
     6aa:	df 93       	push	r29
     6ac:	cd b7       	in	r28, 0x3d	; 61
     6ae:	de b7       	in	r29, 0x3e	; 62
     6b0:	a1 97       	sbiw	r28, 0x21	; 33
     6b2:	0f b6       	in	r0, 0x3f	; 63
     6b4:	f8 94       	cli
     6b6:	de bf       	out	0x3e, r29	; 62
     6b8:	0f be       	out	0x3f, r0	; 63
     6ba:	cd bf       	out	0x3d, r28	; 61
     6bc:	7c 01       	movw	r14, r24
     6be:	c4 2e       	mov	r12, r20
     6c0:	e5 2f       	mov	r30, r21
     6c2:	cb 01       	movw	r24, r22
     6c4:	d2 2e       	mov	r13, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     6c6:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     6c8:	21 e0       	ldi	r18, 0x01	; 1
     6ca:	2d 15       	cp	r18, r13
     6cc:	10 f0       	brcs	.+4      	; 0x6d2 <_ZN5Print11printNumberEmh+0x3e>
     6ce:	2a e0       	ldi	r18, 0x0A	; 10
     6d0:	d2 2e       	mov	r13, r18
     6d2:	8e 01       	movw	r16, r28
     6d4:	0f 5d       	subi	r16, 0xDF	; 223
     6d6:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    unsigned long m = n;
    n /= base;
     6d8:	8d 2c       	mov	r8, r13
     6da:	91 2c       	mov	r9, r1
     6dc:	a1 2c       	mov	r10, r1
     6de:	b1 2c       	mov	r11, r1
     6e0:	6c 2d       	mov	r22, r12
     6e2:	7e 2f       	mov	r23, r30
     6e4:	a5 01       	movw	r20, r10
     6e6:	94 01       	movw	r18, r8
     6e8:	0e 94 31 12 	call	0x2462	; 0x2462 <__udivmodsi4>
    char c = m - base * n;
     6ec:	8c 2d       	mov	r24, r12
     6ee:	d2 9e       	mul	r13, r18
     6f0:	80 19       	sub	r24, r0
     6f2:	11 24       	eor	r1, r1
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     6f4:	01 50       	subi	r16, 0x01	; 1
     6f6:	11 09       	sbc	r17, r1
     6f8:	8a 30       	cpi	r24, 0x0A	; 10
     6fa:	10 f4       	brcc	.+4      	; 0x700 <_ZN5Print11printNumberEmh+0x6c>
     6fc:	80 5d       	subi	r24, 0xD0	; 208
     6fe:	01 c0       	rjmp	.+2      	; 0x702 <_ZN5Print11printNumberEmh+0x6e>
     700:	89 5c       	subi	r24, 0xC9	; 201
     702:	f8 01       	movw	r30, r16
     704:	80 83       	st	Z, r24
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
     706:	21 15       	cp	r18, r1
     708:	31 05       	cpc	r19, r1
     70a:	41 05       	cpc	r20, r1
     70c:	51 05       	cpc	r21, r1
     70e:	21 f0       	breq	.+8      	; 0x718 <_ZN5Print11printNumberEmh+0x84>
    unsigned long m = n;
    n /= base;
     710:	c2 2e       	mov	r12, r18
     712:	e3 2f       	mov	r30, r19
     714:	ca 01       	movw	r24, r20
     716:	e4 cf       	rjmp	.-56     	; 0x6e0 <_ZN5Print11printNumberEmh+0x4c>
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
     718:	b8 01       	movw	r22, r16
     71a:	c7 01       	movw	r24, r14
     71c:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN5Print5writeEPKc>
}
     720:	a1 96       	adiw	r28, 0x21	; 33
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	f8 94       	cli
     726:	de bf       	out	0x3e, r29	; 62
     728:	0f be       	out	0x3f, r0	; 63
     72a:	cd bf       	out	0x3d, r28	; 61
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	1f 91       	pop	r17
     732:	0f 91       	pop	r16
     734:	ff 90       	pop	r15
     736:	ef 90       	pop	r14
     738:	df 90       	pop	r13
     73a:	cf 90       	pop	r12
     73c:	bf 90       	pop	r11
     73e:	af 90       	pop	r10
     740:	9f 90       	pop	r9
     742:	8f 90       	pop	r8
     744:	08 95       	ret

00000746 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
     746:	21 15       	cp	r18, r1
     748:	31 05       	cpc	r19, r1
     74a:	41 f4       	brne	.+16     	; 0x75c <_ZN5Print5printEmi+0x16>
     74c:	dc 01       	movw	r26, r24
     74e:	ed 91       	ld	r30, X+
     750:	fc 91       	ld	r31, X
     752:	01 90       	ld	r0, Z+
     754:	f0 81       	ld	r31, Z
     756:	e0 2d       	mov	r30, r0
     758:	64 2f       	mov	r22, r20
     75a:	09 94       	ijmp
  else return printNumber(n, base);
     75c:	0c 94 4a 03 	jmp	0x694	; 0x694 <_ZN5Print11printNumberEmh>

00000760 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
     760:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
     762:	46 2f       	mov	r20, r22
     764:	50 e0       	ldi	r21, 0x00	; 0
     766:	60 e0       	ldi	r22, 0x00	; 0
     768:	70 e0       	ldi	r23, 0x00	; 0
     76a:	0c 94 a3 03 	jmp	0x746	; 0x746 <_ZN5Print5printEmi>

0000076e <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
     76e:	81 30       	cpi	r24, 0x01	; 1
     770:	39 f0       	breq	.+14     	; 0x780 <_Z12disableTimerh+0x12>
     772:	18 f0       	brcs	.+6      	; 0x77a <_Z12disableTimerh+0xc>
     774:	82 30       	cpi	r24, 0x02	; 2
     776:	51 f0       	breq	.+20     	; 0x78c <_Z12disableTimerh+0x1e>
     778:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
     77a:	10 92 6e 00 	sts	0x006E, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
     77e:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
     780:	80 91 6f 00 	lds	r24, 0x006F
     784:	8d 7f       	andi	r24, 0xFD	; 253
     786:	80 93 6f 00 	sts	0x006F, r24
      break;
     78a:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
     78c:	80 91 70 00 	lds	r24, 0x0070
     790:	8d 7f       	andi	r24, 0xFD	; 253
     792:	80 93 70 00 	sts	0x0070, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
     79c:	80 91 b1 00 	lds	r24, 0x00B1
     7a0:	88 7f       	andi	r24, 0xF8	; 248
     7a2:	84 60       	ori	r24, 0x04	; 4
     7a4:	80 93 b1 00 	sts	0x00B1, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
     7a8:	10 92 b3 00 	sts	0x00B3, r1
     7ac:	08 95       	ret

000007ae <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
     7ae:	cf 93       	push	r28
     7b0:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
     7b2:	80 91 06 01 	lds	r24, 0x0106
     7b6:	8c 13       	cpse	r24, r28
     7b8:	07 c0       	rjmp	.+14     	; 0x7c8 <_Z6noToneh+0x1a>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
     7ba:	e8 e6       	ldi	r30, 0x68	; 104
     7bc:	f0 e0       	ldi	r31, 0x00	; 0
     7be:	84 91       	lpm	r24, Z
      tone_pins[i] = 255;
     7c0:	9f ef       	ldi	r25, 0xFF	; 255
     7c2:	90 93 06 01 	sts	0x0106, r25
     7c6:	01 c0       	rjmp	.+2      	; 0x7ca <_Z6noToneh+0x1c>
}


void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
     7c8:	8f ef       	ldi	r24, 0xFF	; 255
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
      tone_pins[i] = 255;
    }
  }
  
  disableTimer(_timer);
     7ca:	0e 94 b7 03 	call	0x76e	; 0x76e <_Z12disableTimerh>

  digitalWrite(_pin, 0);
     7ce:	60 e0       	ldi	r22, 0x00	; 0
     7d0:	8c 2f       	mov	r24, r28
}
     7d2:	cf 91       	pop	r28
    }
  }
  
  disableTimer(_timer);

  digitalWrite(_pin, 0);
     7d4:	0c 94 fd 05 	jmp	0xbfa	; 0xbfa <digitalWrite>

000007d8 <__vector_7>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
     7d8:	1f 92       	push	r1
     7da:	0f 92       	push	r0
     7dc:	0f b6       	in	r0, 0x3f	; 63
     7de:	0f 92       	push	r0
     7e0:	11 24       	eor	r1, r1
     7e2:	2f 93       	push	r18
     7e4:	3f 93       	push	r19
     7e6:	4f 93       	push	r20
     7e8:	5f 93       	push	r21
     7ea:	6f 93       	push	r22
     7ec:	7f 93       	push	r23
     7ee:	8f 93       	push	r24
     7f0:	9f 93       	push	r25
     7f2:	af 93       	push	r26
     7f4:	bf 93       	push	r27
     7f6:	ef 93       	push	r30
     7f8:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
     7fa:	80 91 f6 03 	lds	r24, 0x03F6
     7fe:	90 91 f7 03 	lds	r25, 0x03F7
     802:	a0 91 f8 03 	lds	r26, 0x03F8
     806:	b0 91 f9 03 	lds	r27, 0x03F9
     80a:	89 2b       	or	r24, r25
     80c:	8a 2b       	or	r24, r26
     80e:	8b 2b       	or	r24, r27
     810:	51 f1       	breq	.+84     	; 0x866 <__vector_7+0x8e>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
     812:	90 91 f3 03 	lds	r25, 0x03F3
     816:	e0 91 f4 03 	lds	r30, 0x03F4
     81a:	f0 91 f5 03 	lds	r31, 0x03F5
     81e:	80 81       	ld	r24, Z
     820:	89 27       	eor	r24, r25
     822:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
     824:	80 91 f6 03 	lds	r24, 0x03F6
     828:	90 91 f7 03 	lds	r25, 0x03F7
     82c:	a0 91 f8 03 	lds	r26, 0x03F8
     830:	b0 91 f9 03 	lds	r27, 0x03F9
     834:	18 16       	cp	r1, r24
     836:	19 06       	cpc	r1, r25
     838:	1a 06       	cpc	r1, r26
     83a:	1b 06       	cpc	r1, r27
     83c:	c4 f4       	brge	.+48     	; 0x86e <__vector_7+0x96>
      timer2_toggle_count--;
     83e:	80 91 f6 03 	lds	r24, 0x03F6
     842:	90 91 f7 03 	lds	r25, 0x03F7
     846:	a0 91 f8 03 	lds	r26, 0x03F8
     84a:	b0 91 f9 03 	lds	r27, 0x03F9
     84e:	01 97       	sbiw	r24, 0x01	; 1
     850:	a1 09       	sbc	r26, r1
     852:	b1 09       	sbc	r27, r1
     854:	80 93 f6 03 	sts	0x03F6, r24
     858:	90 93 f7 03 	sts	0x03F7, r25
     85c:	a0 93 f8 03 	sts	0x03F8, r26
     860:	b0 93 f9 03 	sts	0x03F9, r27
     864:	04 c0       	rjmp	.+8      	; 0x86e <__vector_7+0x96>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
     866:	80 91 06 01 	lds	r24, 0x0106
     86a:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
     86e:	ff 91       	pop	r31
     870:	ef 91       	pop	r30
     872:	bf 91       	pop	r27
     874:	af 91       	pop	r26
     876:	9f 91       	pop	r25
     878:	8f 91       	pop	r24
     87a:	7f 91       	pop	r23
     87c:	6f 91       	pop	r22
     87e:	5f 91       	pop	r21
     880:	4f 91       	pop	r20
     882:	3f 91       	pop	r19
     884:	2f 91       	pop	r18
     886:	0f 90       	pop	r0
     888:	0f be       	out	0x3f, r0	; 63
     88a:	0f 90       	pop	r0
     88c:	1f 90       	pop	r1
     88e:	18 95       	reti

00000890 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

ISR(INT0_vect) {
     890:	1f 92       	push	r1
     892:	0f 92       	push	r0
     894:	0f b6       	in	r0, 0x3f	; 63
     896:	0f 92       	push	r0
     898:	11 24       	eor	r1, r1
     89a:	2f 93       	push	r18
     89c:	3f 93       	push	r19
     89e:	4f 93       	push	r20
     8a0:	5f 93       	push	r21
     8a2:	6f 93       	push	r22
     8a4:	7f 93       	push	r23
     8a6:	8f 93       	push	r24
     8a8:	9f 93       	push	r25
     8aa:	af 93       	push	r26
     8ac:	bf 93       	push	r27
     8ae:	ef 93       	push	r30
     8b0:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
     8b2:	80 91 fa 03 	lds	r24, 0x03FA
     8b6:	90 91 fb 03 	lds	r25, 0x03FB
     8ba:	89 2b       	or	r24, r25
     8bc:	29 f0       	breq	.+10     	; 0x8c8 <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
     8be:	e0 91 fa 03 	lds	r30, 0x03FA
     8c2:	f0 91 fb 03 	lds	r31, 0x03FB
     8c6:	09 95       	icall
}
     8c8:	ff 91       	pop	r31
     8ca:	ef 91       	pop	r30
     8cc:	bf 91       	pop	r27
     8ce:	af 91       	pop	r26
     8d0:	9f 91       	pop	r25
     8d2:	8f 91       	pop	r24
     8d4:	7f 91       	pop	r23
     8d6:	6f 91       	pop	r22
     8d8:	5f 91       	pop	r21
     8da:	4f 91       	pop	r20
     8dc:	3f 91       	pop	r19
     8de:	2f 91       	pop	r18
     8e0:	0f 90       	pop	r0
     8e2:	0f be       	out	0x3f, r0	; 63
     8e4:	0f 90       	pop	r0
     8e6:	1f 90       	pop	r1
     8e8:	18 95       	reti

000008ea <__vector_2>:

ISR(INT1_vect) {
     8ea:	1f 92       	push	r1
     8ec:	0f 92       	push	r0
     8ee:	0f b6       	in	r0, 0x3f	; 63
     8f0:	0f 92       	push	r0
     8f2:	11 24       	eor	r1, r1
     8f4:	2f 93       	push	r18
     8f6:	3f 93       	push	r19
     8f8:	4f 93       	push	r20
     8fa:	5f 93       	push	r21
     8fc:	6f 93       	push	r22
     8fe:	7f 93       	push	r23
     900:	8f 93       	push	r24
     902:	9f 93       	push	r25
     904:	af 93       	push	r26
     906:	bf 93       	push	r27
     908:	ef 93       	push	r30
     90a:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
     90c:	80 91 fc 03 	lds	r24, 0x03FC
     910:	90 91 fd 03 	lds	r25, 0x03FD
     914:	89 2b       	or	r24, r25
     916:	29 f0       	breq	.+10     	; 0x922 <__stack+0x23>
    intFunc[EXTERNAL_INT_1]();
     918:	e0 91 fc 03 	lds	r30, 0x03FC
     91c:	f0 91 fd 03 	lds	r31, 0x03FD
     920:	09 95       	icall
}
     922:	ff 91       	pop	r31
     924:	ef 91       	pop	r30
     926:	bf 91       	pop	r27
     928:	af 91       	pop	r26
     92a:	9f 91       	pop	r25
     92c:	8f 91       	pop	r24
     92e:	7f 91       	pop	r23
     930:	6f 91       	pop	r22
     932:	5f 91       	pop	r21
     934:	4f 91       	pop	r20
     936:	3f 91       	pop	r19
     938:	2f 91       	pop	r18
     93a:	0f 90       	pop	r0
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	0f 90       	pop	r0
     940:	1f 90       	pop	r1
     942:	18 95       	reti

00000944 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     944:	1f 92       	push	r1
     946:	0f 92       	push	r0
     948:	0f b6       	in	r0, 0x3f	; 63
     94a:	0f 92       	push	r0
     94c:	11 24       	eor	r1, r1
     94e:	2f 93       	push	r18
     950:	3f 93       	push	r19
     952:	8f 93       	push	r24
     954:	9f 93       	push	r25
     956:	af 93       	push	r26
     958:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     95a:	80 91 ff 03 	lds	r24, 0x03FF
     95e:	90 91 00 04 	lds	r25, 0x0400
     962:	a0 91 01 04 	lds	r26, 0x0401
     966:	b0 91 02 04 	lds	r27, 0x0402
	unsigned char f = timer0_fract;
     96a:	30 91 fe 03 	lds	r19, 0x03FE

	m += MILLIS_INC;
	f += FRACT_INC;
     96e:	26 e0       	ldi	r18, 0x06	; 6
     970:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     972:	2d 37       	cpi	r18, 0x7D	; 125
     974:	20 f4       	brcc	.+8      	; 0x97e <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     976:	02 96       	adiw	r24, 0x02	; 2
     978:	a1 1d       	adc	r26, r1
     97a:	b1 1d       	adc	r27, r1
     97c:	05 c0       	rjmp	.+10     	; 0x988 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     97e:	29 e8       	ldi	r18, 0x89	; 137
     980:	23 0f       	add	r18, r19
		m += 1;
     982:	03 96       	adiw	r24, 0x03	; 3
     984:	a1 1d       	adc	r26, r1
     986:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     988:	20 93 fe 03 	sts	0x03FE, r18
	timer0_millis = m;
     98c:	80 93 ff 03 	sts	0x03FF, r24
     990:	90 93 00 04 	sts	0x0400, r25
     994:	a0 93 01 04 	sts	0x0401, r26
     998:	b0 93 02 04 	sts	0x0402, r27
	timer0_overflow_count++;
     99c:	80 91 03 04 	lds	r24, 0x0403
     9a0:	90 91 04 04 	lds	r25, 0x0404
     9a4:	a0 91 05 04 	lds	r26, 0x0405
     9a8:	b0 91 06 04 	lds	r27, 0x0406
     9ac:	01 96       	adiw	r24, 0x01	; 1
     9ae:	a1 1d       	adc	r26, r1
     9b0:	b1 1d       	adc	r27, r1
     9b2:	80 93 03 04 	sts	0x0403, r24
     9b6:	90 93 04 04 	sts	0x0404, r25
     9ba:	a0 93 05 04 	sts	0x0405, r26
     9be:	b0 93 06 04 	sts	0x0406, r27
}
     9c2:	bf 91       	pop	r27
     9c4:	af 91       	pop	r26
     9c6:	9f 91       	pop	r25
     9c8:	8f 91       	pop	r24
     9ca:	3f 91       	pop	r19
     9cc:	2f 91       	pop	r18
     9ce:	0f 90       	pop	r0
     9d0:	0f be       	out	0x3f, r0	; 63
     9d2:	0f 90       	pop	r0
     9d4:	1f 90       	pop	r1
     9d6:	18 95       	reti

000009d8 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     9d8:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     9da:	f8 94       	cli
	m = timer0_millis;
     9dc:	60 91 ff 03 	lds	r22, 0x03FF
     9e0:	70 91 00 04 	lds	r23, 0x0400
     9e4:	80 91 01 04 	lds	r24, 0x0401
     9e8:	90 91 02 04 	lds	r25, 0x0402
	SREG = oldSREG;
     9ec:	2f bf       	out	0x3f, r18	; 63

	return m;
}
     9ee:	08 95       	ret

000009f0 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     9f0:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     9f2:	f8 94       	cli
	m = timer0_overflow_count;
     9f4:	80 91 03 04 	lds	r24, 0x0403
     9f8:	90 91 04 04 	lds	r25, 0x0404
     9fc:	a0 91 05 04 	lds	r26, 0x0405
     a00:	b0 91 06 04 	lds	r27, 0x0406
#if defined(TCNT0)
	t = TCNT0;
     a04:	26 b5       	in	r18, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     a06:	a8 9b       	sbis	0x15, 0	; 21
     a08:	05 c0       	rjmp	.+10     	; 0xa14 <micros+0x24>
     a0a:	2f 3f       	cpi	r18, 0xFF	; 255
     a0c:	19 f0       	breq	.+6      	; 0xa14 <micros+0x24>
		m++;
     a0e:	01 96       	adiw	r24, 0x01	; 1
     a10:	a1 1d       	adc	r26, r1
     a12:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     a14:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     a16:	66 27       	eor	r22, r22
     a18:	78 2f       	mov	r23, r24
     a1a:	89 2f       	mov	r24, r25
     a1c:	9a 2f       	mov	r25, r26
     a1e:	62 0f       	add	r22, r18
     a20:	71 1d       	adc	r23, r1
     a22:	81 1d       	adc	r24, r1
     a24:	91 1d       	adc	r25, r1
     a26:	43 e0       	ldi	r20, 0x03	; 3
     a28:	66 0f       	add	r22, r22
     a2a:	77 1f       	adc	r23, r23
     a2c:	88 1f       	adc	r24, r24
     a2e:	99 1f       	adc	r25, r25
     a30:	4a 95       	dec	r20
     a32:	d1 f7       	brne	.-12     	; 0xa28 <micros+0x38>
}
     a34:	08 95       	ret

00000a36 <delay>:

void delay(unsigned long ms)
{
     a36:	cf 92       	push	r12
     a38:	df 92       	push	r13
     a3a:	ef 92       	push	r14
     a3c:	ff 92       	push	r15
     a3e:	cf 93       	push	r28
     a40:	df 93       	push	r29
     a42:	6b 01       	movw	r12, r22
     a44:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
     a46:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <micros>
     a4a:	eb 01       	movw	r28, r22

	while (ms > 0) {
     a4c:	c1 14       	cp	r12, r1
     a4e:	d1 04       	cpc	r13, r1
     a50:	e1 04       	cpc	r14, r1
     a52:	f1 04       	cpc	r15, r1
     a54:	89 f0       	breq	.+34     	; 0xa78 <delay+0x42>
		yield();
     a56:	0e 94 6f 02 	call	0x4de	; 0x4de <yield>
		if (((uint16_t)micros() - start) >= 1000) {
     a5a:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <micros>
     a5e:	6c 1b       	sub	r22, r28
     a60:	7d 0b       	sbc	r23, r29
     a62:	68 3e       	cpi	r22, 0xE8	; 232
     a64:	73 40       	sbci	r23, 0x03	; 3
     a66:	90 f3       	brcs	.-28     	; 0xa4c <delay+0x16>
			ms--;
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	c8 1a       	sub	r12, r24
     a6c:	d1 08       	sbc	r13, r1
     a6e:	e1 08       	sbc	r14, r1
     a70:	f1 08       	sbc	r15, r1
			start += 1000;
     a72:	c8 51       	subi	r28, 0x18	; 24
     a74:	dc 4f       	sbci	r29, 0xFC	; 252
     a76:	ea cf       	rjmp	.-44     	; 0xa4c <delay+0x16>
		}
	}
}
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	ff 90       	pop	r15
     a7e:	ef 90       	pop	r14
     a80:	df 90       	pop	r13
     a82:	cf 90       	pop	r12
     a84:	08 95       	ret

00000a86 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     a86:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     a88:	84 b5       	in	r24, 0x24	; 36
     a8a:	82 60       	ori	r24, 0x02	; 2
     a8c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     a8e:	84 b5       	in	r24, 0x24	; 36
     a90:	81 60       	ori	r24, 0x01	; 1
     a92:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     a94:	85 b5       	in	r24, 0x25	; 37
     a96:	82 60       	ori	r24, 0x02	; 2
     a98:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     a9a:	85 b5       	in	r24, 0x25	; 37
     a9c:	81 60       	ori	r24, 0x01	; 1
     a9e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     aa0:	ee e6       	ldi	r30, 0x6E	; 110
     aa2:	f0 e0       	ldi	r31, 0x00	; 0
     aa4:	80 81       	ld	r24, Z
     aa6:	81 60       	ori	r24, 0x01	; 1
     aa8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     aaa:	e1 e8       	ldi	r30, 0x81	; 129
     aac:	f0 e0       	ldi	r31, 0x00	; 0
     aae:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     ab0:	80 81       	ld	r24, Z
     ab2:	82 60       	ori	r24, 0x02	; 2
     ab4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     ab6:	80 81       	ld	r24, Z
     ab8:	81 60       	ori	r24, 0x01	; 1
     aba:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     abc:	e0 e8       	ldi	r30, 0x80	; 128
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	80 81       	ld	r24, Z
     ac2:	81 60       	ori	r24, 0x01	; 1
     ac4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     ac6:	e1 eb       	ldi	r30, 0xB1	; 177
     ac8:	f0 e0       	ldi	r31, 0x00	; 0
     aca:	80 81       	ld	r24, Z
     acc:	84 60       	ori	r24, 0x04	; 4
     ace:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     ad0:	e0 eb       	ldi	r30, 0xB0	; 176
     ad2:	f0 e0       	ldi	r31, 0x00	; 0
     ad4:	80 81       	ld	r24, Z
     ad6:	81 60       	ori	r24, 0x01	; 1
     ad8:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
     ada:	ea e7       	ldi	r30, 0x7A	; 122
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	80 81       	ld	r24, Z
     ae0:	84 60       	ori	r24, 0x04	; 4
     ae2:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
     ae4:	80 81       	ld	r24, Z
     ae6:	82 60       	ori	r24, 0x02	; 2
     ae8:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
     aea:	80 81       	ld	r24, Z
     aec:	81 60       	ori	r24, 0x01	; 1
     aee:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     af0:	80 81       	ld	r24, Z
     af2:	80 68       	ori	r24, 0x80	; 128
     af4:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     af6:	10 92 c1 00 	sts	0x00C1, r1
     afa:	08 95       	ret

00000afc <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
     afc:	8e 30       	cpi	r24, 0x0E	; 14
     afe:	08 f0       	brcs	.+2      	; 0xb02 <analogRead+0x6>
     b00:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
     b02:	87 70       	andi	r24, 0x07	; 7
     b04:	20 91 07 01 	lds	r18, 0x0107
     b08:	90 e4       	ldi	r25, 0x40	; 64
     b0a:	29 9f       	mul	r18, r25
     b0c:	90 01       	movw	r18, r0
     b0e:	11 24       	eor	r1, r1
     b10:	82 2b       	or	r24, r18
     b12:	80 93 7c 00 	sts	0x007C, r24
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
     b16:	80 91 7a 00 	lds	r24, 0x007A
     b1a:	80 64       	ori	r24, 0x40	; 64
     b1c:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
     b20:	80 91 7a 00 	lds	r24, 0x007A
     b24:	86 fd       	sbrc	r24, 6
     b26:	fc cf       	rjmp	.-8      	; 0xb20 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
     b28:	80 91 78 00 	lds	r24, 0x0078
	high = ADCH;
     b2c:	20 91 79 00 	lds	r18, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
     b30:	90 e0       	ldi	r25, 0x00	; 0
}
     b32:	92 2b       	or	r25, r18
     b34:	08 95       	ret

00000b36 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     b36:	83 30       	cpi	r24, 0x03	; 3
     b38:	81 f0       	breq	.+32     	; 0xb5a <turnOffPWM+0x24>
     b3a:	28 f4       	brcc	.+10     	; 0xb46 <turnOffPWM+0x10>
     b3c:	81 30       	cpi	r24, 0x01	; 1
     b3e:	99 f0       	breq	.+38     	; 0xb66 <turnOffPWM+0x30>
     b40:	82 30       	cpi	r24, 0x02	; 2
     b42:	a1 f0       	breq	.+40     	; 0xb6c <turnOffPWM+0x36>
     b44:	08 95       	ret
     b46:	87 30       	cpi	r24, 0x07	; 7
     b48:	a9 f0       	breq	.+42     	; 0xb74 <turnOffPWM+0x3e>
     b4a:	88 30       	cpi	r24, 0x08	; 8
     b4c:	b9 f0       	breq	.+46     	; 0xb7c <turnOffPWM+0x46>
     b4e:	84 30       	cpi	r24, 0x04	; 4
     b50:	d1 f4       	brne	.+52     	; 0xb86 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     b52:	80 91 80 00 	lds	r24, 0x0080
     b56:	8f 7d       	andi	r24, 0xDF	; 223
     b58:	03 c0       	rjmp	.+6      	; 0xb60 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     b5a:	80 91 80 00 	lds	r24, 0x0080
     b5e:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     b60:	80 93 80 00 	sts	0x0080, r24
     b64:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     b66:	84 b5       	in	r24, 0x24	; 36
     b68:	8f 77       	andi	r24, 0x7F	; 127
     b6a:	02 c0       	rjmp	.+4      	; 0xb70 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     b6c:	84 b5       	in	r24, 0x24	; 36
     b6e:	8f 7d       	andi	r24, 0xDF	; 223
     b70:	84 bd       	out	0x24, r24	; 36
     b72:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     b74:	80 91 b0 00 	lds	r24, 0x00B0
     b78:	8f 77       	andi	r24, 0x7F	; 127
     b7a:	03 c0       	rjmp	.+6      	; 0xb82 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     b7c:	80 91 b0 00 	lds	r24, 0x00B0
     b80:	8f 7d       	andi	r24, 0xDF	; 223
     b82:	80 93 b0 00 	sts	0x00B0, r24
     b86:	08 95       	ret

00000b88 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     b88:	cf 93       	push	r28
     b8a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	fc 01       	movw	r30, r24
     b90:	e3 58       	subi	r30, 0x83	; 131
     b92:	ff 4f       	sbci	r31, 0xFF	; 255
     b94:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     b96:	fc 01       	movw	r30, r24
     b98:	ef 56       	subi	r30, 0x6F	; 111
     b9a:	ff 4f       	sbci	r31, 0xFF	; 255
     b9c:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     b9e:	88 23       	and	r24, r24
     ba0:	49 f1       	breq	.+82     	; 0xbf4 <pinMode+0x6c>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	88 0f       	add	r24, r24
     ba6:	99 1f       	adc	r25, r25
     ba8:	fc 01       	movw	r30, r24
     baa:	e1 55       	subi	r30, 0x51	; 81
     bac:	ff 4f       	sbci	r31, 0xFF	; 255
     bae:	a5 91       	lpm	r26, Z+
     bb0:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     bb2:	8b 55       	subi	r24, 0x5B	; 91
     bb4:	9f 4f       	sbci	r25, 0xFF	; 255
     bb6:	fc 01       	movw	r30, r24
     bb8:	c5 91       	lpm	r28, Z+
     bba:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
		uint8_t oldSREG = SREG;
     bbc:	9f b7       	in	r25, 0x3f	; 63

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
	out = portOutputRegister(port);

	if (mode == INPUT) { 
     bbe:	61 11       	cpse	r22, r1
     bc0:	08 c0       	rjmp	.+16     	; 0xbd2 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
                cli();
     bc2:	f8 94       	cli
		*reg &= ~bit;
     bc4:	8c 91       	ld	r24, X
     bc6:	20 95       	com	r18
     bc8:	82 23       	and	r24, r18
     bca:	8c 93       	st	X, r24
		*out &= ~bit;
     bcc:	88 81       	ld	r24, Y
     bce:	82 23       	and	r24, r18
     bd0:	0a c0       	rjmp	.+20     	; 0xbe6 <pinMode+0x5e>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     bd2:	62 30       	cpi	r22, 0x02	; 2
     bd4:	51 f4       	brne	.+20     	; 0xbea <pinMode+0x62>
		uint8_t oldSREG = SREG;
                cli();
     bd6:	f8 94       	cli
		*reg &= ~bit;
     bd8:	8c 91       	ld	r24, X
     bda:	32 2f       	mov	r19, r18
     bdc:	30 95       	com	r19
     bde:	83 23       	and	r24, r19
     be0:	8c 93       	st	X, r24
		*out |= bit;
     be2:	88 81       	ld	r24, Y
     be4:	82 2b       	or	r24, r18
     be6:	88 83       	st	Y, r24
     be8:	04 c0       	rjmp	.+8      	; 0xbf2 <pinMode+0x6a>
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
                cli();
     bea:	f8 94       	cli
		*reg |= bit;
     bec:	8c 91       	ld	r24, X
     bee:	82 2b       	or	r24, r18
     bf0:	8c 93       	st	X, r24
		SREG = oldSREG;
     bf2:	9f bf       	out	0x3f, r25	; 63
	}
}
     bf4:	df 91       	pop	r29
     bf6:	cf 91       	pop	r28
     bf8:	08 95       	ret

00000bfa <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     bfa:	0f 93       	push	r16
     bfc:	1f 93       	push	r17
     bfe:	cf 93       	push	r28
     c00:	df 93       	push	r29
     c02:	1f 92       	push	r1
     c04:	cd b7       	in	r28, 0x3d	; 61
     c06:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
     c08:	28 2f       	mov	r18, r24
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	f9 01       	movw	r30, r18
     c0e:	e7 59       	subi	r30, 0x97	; 151
     c10:	ff 4f       	sbci	r31, 0xFF	; 255
     c12:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     c14:	f9 01       	movw	r30, r18
     c16:	e3 58       	subi	r30, 0x83	; 131
     c18:	ff 4f       	sbci	r31, 0xFF	; 255
     c1a:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
     c1c:	f9 01       	movw	r30, r18
     c1e:	ef 56       	subi	r30, 0x6F	; 111
     c20:	ff 4f       	sbci	r31, 0xFF	; 255
     c22:	04 91       	lpm	r16, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     c24:	00 23       	and	r16, r16
     c26:	c9 f0       	breq	.+50     	; 0xc5a <digitalWrite+0x60>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     c28:	88 23       	and	r24, r24
     c2a:	21 f0       	breq	.+8      	; 0xc34 <digitalWrite+0x3a>
     c2c:	69 83       	std	Y+1, r22	; 0x01
     c2e:	0e 94 9b 05 	call	0xb36	; 0xb36 <turnOffPWM>
     c32:	69 81       	ldd	r22, Y+1	; 0x01

	out = portOutputRegister(port);
     c34:	e0 2f       	mov	r30, r16
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	ee 0f       	add	r30, r30
     c3a:	ff 1f       	adc	r31, r31
     c3c:	eb 55       	subi	r30, 0x5B	; 91
     c3e:	ff 4f       	sbci	r31, 0xFF	; 255
     c40:	a5 91       	lpm	r26, Z+
     c42:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     c44:	9f b7       	in	r25, 0x3f	; 63
	cli();
     c46:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
     c48:	8c 91       	ld	r24, X
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
     c4a:	61 11       	cpse	r22, r1
     c4c:	03 c0       	rjmp	.+6      	; 0xc54 <digitalWrite+0x5a>
		*out &= ~bit;
     c4e:	10 95       	com	r17
     c50:	81 23       	and	r24, r17
     c52:	01 c0       	rjmp	.+2      	; 0xc56 <digitalWrite+0x5c>
	} else {
		*out |= bit;
     c54:	81 2b       	or	r24, r17
     c56:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
     c58:	9f bf       	out	0x3f, r25	; 63
}
     c5a:	0f 90       	pop	r0
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	1f 91       	pop	r17
     c62:	0f 91       	pop	r16
     c64:	08 95       	ret

00000c66 <_ZN6StringD1Ev>:
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	free(buffer);
     c66:	fc 01       	movw	r30, r24
     c68:	80 81       	ld	r24, Z
     c6a:	91 81       	ldd	r25, Z+1	; 0x01
     c6c:	0c 94 f1 12 	jmp	0x25e2	; 0x25e2 <free>

00000c70 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
     c70:	cf 93       	push	r28
     c72:	df 93       	push	r29
     c74:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
     c76:	88 81       	ld	r24, Y
     c78:	99 81       	ldd	r25, Y+1	; 0x01
     c7a:	00 97       	sbiw	r24, 0x00	; 0
     c7c:	11 f0       	breq	.+4      	; 0xc82 <_ZN6String10invalidateEv+0x12>
     c7e:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <free>
	buffer = NULL;
     c82:	19 82       	std	Y+1, r1	; 0x01
     c84:	18 82       	st	Y, r1
	capacity = len = 0;
     c86:	1d 82       	std	Y+5, r1	; 0x05
     c88:	1c 82       	std	Y+4, r1	; 0x04
     c8a:	1b 82       	std	Y+3, r1	; 0x03
     c8c:	1a 82       	std	Y+2, r1	; 0x02
}
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	08 95       	ret

00000c94 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
     c94:	0f 93       	push	r16
     c96:	1f 93       	push	r17
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29
     c9c:	ec 01       	movw	r28, r24
     c9e:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     ca0:	6f 5f       	subi	r22, 0xFF	; 255
     ca2:	7f 4f       	sbci	r23, 0xFF	; 255
     ca4:	88 81       	ld	r24, Y
     ca6:	99 81       	ldd	r25, Y+1	; 0x01
     ca8:	0e 94 80 13 	call	0x2700	; 0x2700 <realloc>
	if (newbuffer) {
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	31 f0       	breq	.+12     	; 0xcbc <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
     cb0:	99 83       	std	Y+1, r25	; 0x01
     cb2:	88 83       	st	Y, r24
		capacity = maxStrLen;
     cb4:	1b 83       	std	Y+3, r17	; 0x03
     cb6:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	01 c0       	rjmp	.+2      	; 0xcbe <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
     cbc:	80 e0       	ldi	r24, 0x00	; 0
}
     cbe:	df 91       	pop	r29
     cc0:	cf 91       	pop	r28
     cc2:	1f 91       	pop	r17
     cc4:	0f 91       	pop	r16
     cc6:	08 95       	ret

00000cc8 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
     cc8:	cf 93       	push	r28
     cca:	df 93       	push	r29
     ccc:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
     cce:	88 81       	ld	r24, Y
     cd0:	99 81       	ldd	r25, Y+1	; 0x01
     cd2:	89 2b       	or	r24, r25
     cd4:	29 f0       	breq	.+10     	; 0xce0 <_ZN6String7reserveEj+0x18>
     cd6:	8a 81       	ldd	r24, Y+2	; 0x02
     cd8:	9b 81       	ldd	r25, Y+3	; 0x03
     cda:	86 17       	cp	r24, r22
     cdc:	97 07       	cpc	r25, r23
     cde:	60 f4       	brcc	.+24     	; 0xcf8 <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
     ce0:	ce 01       	movw	r24, r28
     ce2:	0e 94 4a 06 	call	0xc94	; 0xc94 <_ZN6String12changeBufferEj>
     ce6:	88 23       	and	r24, r24
     ce8:	41 f0       	breq	.+16     	; 0xcfa <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
     cea:	8c 81       	ldd	r24, Y+4	; 0x04
     cec:	9d 81       	ldd	r25, Y+5	; 0x05
     cee:	89 2b       	or	r24, r25
     cf0:	19 f4       	brne	.+6      	; 0xcf8 <_ZN6String7reserveEj+0x30>
     cf2:	e8 81       	ld	r30, Y
     cf4:	f9 81       	ldd	r31, Y+1	; 0x01
     cf6:	10 82       	st	Z, r1
     cf8:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	08 95       	ret

00000d00 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
     d00:	ef 92       	push	r14
     d02:	ff 92       	push	r15
     d04:	0f 93       	push	r16
     d06:	1f 93       	push	r17
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	ec 01       	movw	r28, r24
     d0e:	7b 01       	movw	r14, r22
     d10:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
     d12:	ba 01       	movw	r22, r20
     d14:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN6String7reserveEj>
     d18:	81 11       	cpse	r24, r1
     d1a:	04 c0       	rjmp	.+8      	; 0xd24 <_ZN6String4copyEPKcj+0x24>
		invalidate();
     d1c:	ce 01       	movw	r24, r28
     d1e:	0e 94 38 06 	call	0xc70	; 0xc70 <_ZN6String10invalidateEv>
		return *this;
     d22:	07 c0       	rjmp	.+14     	; 0xd32 <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
     d24:	1d 83       	std	Y+5, r17	; 0x05
     d26:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
     d28:	b7 01       	movw	r22, r14
     d2a:	88 81       	ld	r24, Y
     d2c:	99 81       	ldd	r25, Y+1	; 0x01
     d2e:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <strcpy>
	return *this;
}
     d32:	ce 01       	movw	r24, r28
     d34:	df 91       	pop	r29
     d36:	cf 91       	pop	r28
     d38:	1f 91       	pop	r17
     d3a:	0f 91       	pop	r16
     d3c:	ff 90       	pop	r15
     d3e:	ef 90       	pop	r14
     d40:	08 95       	ret

00000d42 <_ZN6StringC1EPKc>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
     d42:	fc 01       	movw	r30, r24
     d44:	11 82       	std	Z+1, r1	; 0x01
     d46:	10 82       	st	Z, r1
	capacity = 0;
     d48:	13 82       	std	Z+3, r1	; 0x03
     d4a:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
     d4c:	15 82       	std	Z+5, r1	; 0x05
     d4e:	14 82       	std	Z+4, r1	; 0x04
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
     d50:	61 15       	cp	r22, r1
     d52:	71 05       	cpc	r23, r1
     d54:	59 f0       	breq	.+22     	; 0xd6c <_ZN6StringC1EPKc+0x2a>
     d56:	fb 01       	movw	r30, r22
     d58:	01 90       	ld	r0, Z+
     d5a:	00 20       	and	r0, r0
     d5c:	e9 f7       	brne	.-6      	; 0xd58 <_ZN6StringC1EPKc+0x16>
     d5e:	af 01       	movw	r20, r30
     d60:	41 50       	subi	r20, 0x01	; 1
     d62:	51 09       	sbc	r21, r1
     d64:	46 1b       	sub	r20, r22
     d66:	57 0b       	sbc	r21, r23
     d68:	0c 94 80 06 	jmp	0xd00	; 0xd00 <_ZN6String4copyEPKcj>
     d6c:	08 95       	ret

00000d6e <_ZN6StringaSERKS_>:
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
     d6e:	cf 93       	push	r28
     d70:	df 93       	push	r29
     d72:	ec 01       	movw	r28, r24
     d74:	fb 01       	movw	r30, r22
	if (this == &rhs) return *this;
     d76:	86 17       	cp	r24, r22
     d78:	97 07       	cpc	r25, r23
     d7a:	61 f0       	breq	.+24     	; 0xd94 <_ZN6StringaSERKS_+0x26>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
     d7c:	60 81       	ld	r22, Z
     d7e:	71 81       	ldd	r23, Z+1	; 0x01
     d80:	61 15       	cp	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	29 f0       	breq	.+10     	; 0xd90 <_ZN6StringaSERKS_+0x22>
     d86:	44 81       	ldd	r20, Z+4	; 0x04
     d88:	55 81       	ldd	r21, Z+5	; 0x05
     d8a:	0e 94 80 06 	call	0xd00	; 0xd00 <_ZN6String4copyEPKcj>
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <_ZN6StringaSERKS_+0x26>
	else invalidate();
     d90:	0e 94 38 06 	call	0xc70	; 0xc70 <_ZN6String10invalidateEv>
	
	return *this;
}
     d94:	ce 01       	movw	r24, r28
     d96:	df 91       	pop	r29
     d98:	cf 91       	pop	r28
     d9a:	08 95       	ret

00000d9c <_ZN6StringC1ERKS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
     d9c:	fc 01       	movw	r30, r24
     d9e:	11 82       	std	Z+1, r1	; 0x01
     da0:	10 82       	st	Z, r1
	capacity = 0;
     da2:	13 82       	std	Z+3, r1	; 0x03
     da4:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
     da6:	15 82       	std	Z+5, r1	; 0x05
     da8:	14 82       	std	Z+4, r1	; 0x04
}

String::String(const String &value)
{
	init();
	*this = value;
     daa:	0c 94 b7 06 	jmp	0xd6e	; 0xd6e <_ZN6StringaSERKS_>

00000dae <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
     dae:	cf 93       	push	r28
     db0:	df 93       	push	r29
     db2:	ec 01       	movw	r28, r24
	if (cstr) copy(cstr, strlen(cstr));
     db4:	61 15       	cp	r22, r1
     db6:	71 05       	cpc	r23, r1
     db8:	61 f0       	breq	.+24     	; 0xdd2 <_ZN6StringaSEPKc+0x24>
     dba:	fb 01       	movw	r30, r22
     dbc:	01 90       	ld	r0, Z+
     dbe:	00 20       	and	r0, r0
     dc0:	e9 f7       	brne	.-6      	; 0xdbc <_ZN6StringaSEPKc+0xe>
     dc2:	af 01       	movw	r20, r30
     dc4:	41 50       	subi	r20, 0x01	; 1
     dc6:	51 09       	sbc	r21, r1
     dc8:	46 1b       	sub	r20, r22
     dca:	57 0b       	sbc	r21, r23
     dcc:	0e 94 80 06 	call	0xd00	; 0xd00 <_ZN6String4copyEPKcj>
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <_ZN6StringaSEPKc+0x28>
	else invalidate();
     dd2:	0e 94 38 06 	call	0xc70	; 0xc70 <_ZN6String10invalidateEv>
	
	return *this;
}
     dd6:	ce 01       	movw	r24, r28
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	08 95       	ret

00000dde <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
     dde:	ef 92       	push	r14
     de0:	ff 92       	push	r15
     de2:	0f 93       	push	r16
     de4:	1f 93       	push	r17
     de6:	cf 93       	push	r28
     de8:	df 93       	push	r29
     dea:	ec 01       	movw	r28, r24
     dec:	7b 01       	movw	r14, r22
	unsigned int newlen = len + length;
     dee:	0c 81       	ldd	r16, Y+4	; 0x04
     df0:	1d 81       	ldd	r17, Y+5	; 0x05
	if (!cstr) return 0;
     df2:	61 15       	cp	r22, r1
     df4:	71 05       	cpc	r23, r1
     df6:	11 f4       	brne	.+4      	; 0xdfc <_ZN6String6concatEPKcj+0x1e>
     df8:	80 e0       	ldi	r24, 0x00	; 0
     dfa:	16 c0       	rjmp	.+44     	; 0xe28 <_ZN6String6concatEPKcj+0x4a>
	if (length == 0) return 1;
     dfc:	41 15       	cp	r20, r1
     dfe:	51 05       	cpc	r21, r1
     e00:	91 f0       	breq	.+36     	; 0xe26 <_ZN6String6concatEPKcj+0x48>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
     e02:	04 0f       	add	r16, r20
     e04:	15 1f       	adc	r17, r21
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
     e06:	b8 01       	movw	r22, r16
     e08:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN6String7reserveEj>
     e0c:	88 23       	and	r24, r24
     e0e:	a1 f3       	breq	.-24     	; 0xdf8 <_ZN6String6concatEPKcj+0x1a>
	strcpy(buffer + len, cstr);
     e10:	28 81       	ld	r18, Y
     e12:	39 81       	ldd	r19, Y+1	; 0x01
     e14:	8c 81       	ldd	r24, Y+4	; 0x04
     e16:	9d 81       	ldd	r25, Y+5	; 0x05
     e18:	b7 01       	movw	r22, r14
     e1a:	82 0f       	add	r24, r18
     e1c:	93 1f       	adc	r25, r19
     e1e:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <strcpy>
	len = newlen;
     e22:	1d 83       	std	Y+5, r17	; 0x05
     e24:	0c 83       	std	Y+4, r16	; 0x04

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
     e26:	81 e0       	ldi	r24, 0x01	; 1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	1f 91       	pop	r17
     e2e:	0f 91       	pop	r16
     e30:	ff 90       	pop	r15
     e32:	ef 90       	pop	r14
     e34:	08 95       	ret

00000e36 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
     e36:	61 15       	cp	r22, r1
     e38:	71 05       	cpc	r23, r1
     e3a:	59 f0       	breq	.+22     	; 0xe52 <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
     e3c:	fb 01       	movw	r30, r22
     e3e:	01 90       	ld	r0, Z+
     e40:	00 20       	and	r0, r0
     e42:	e9 f7       	brne	.-6      	; 0xe3e <_ZN6String6concatEPKc+0x8>
     e44:	af 01       	movw	r20, r30
     e46:	41 50       	subi	r20, 0x01	; 1
     e48:	51 09       	sbc	r21, r1
     e4a:	46 1b       	sub	r20, r22
     e4c:	57 0b       	sbc	r21, r23
     e4e:	0c 94 ef 06 	jmp	0xdde	; 0xdde <_ZN6String6concatEPKcj>
}
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	08 95       	ret

00000e56 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
     e56:	cf 93       	push	r28
     e58:	df 93       	push	r29
     e5a:	00 d0       	rcall	.+0      	; 0xe5c <_ZN6String6concatEc+0x6>
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
	char buf[2];
	buf[0] = c;
     e60:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
     e62:	1a 82       	std	Y+2, r1	; 0x02
	return concat(buf, 1);
     e64:	41 e0       	ldi	r20, 0x01	; 1
     e66:	50 e0       	ldi	r21, 0x00	; 0
     e68:	be 01       	movw	r22, r28
     e6a:	6f 5f       	subi	r22, 0xFF	; 255
     e6c:	7f 4f       	sbci	r23, 0xFF	; 255
     e6e:	0e 94 ef 06 	call	0xdde	; 0xdde <_ZN6String6concatEPKcj>
}
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	df 91       	pop	r29
     e78:	cf 91       	pop	r28
     e7a:	08 95       	ret

00000e7c <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
     e7c:	cf 93       	push	r28
     e7e:	df 93       	push	r29
     e80:	ec 01       	movw	r28, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
     e82:	fb 01       	movw	r30, r22
     e84:	44 81       	ldd	r20, Z+4	; 0x04
     e86:	55 81       	ldd	r21, Z+5	; 0x05
     e88:	60 81       	ld	r22, Z
     e8a:	71 81       	ldd	r23, Z+1	; 0x01
     e8c:	0e 94 ef 06 	call	0xdde	; 0xdde <_ZN6String6concatEPKcj>
     e90:	81 11       	cpse	r24, r1
     e92:	03 c0       	rjmp	.+6      	; 0xe9a <_ZplRK15StringSumHelperRK6String+0x1e>
     e94:	ce 01       	movw	r24, r28
     e96:	0e 94 38 06 	call	0xc70	; 0xc70 <_ZN6String10invalidateEv>
	return a;
}
     e9a:	ce 01       	movw	r24, r28
     e9c:	df 91       	pop	r29
     e9e:	cf 91       	pop	r28
     ea0:	08 95       	ret

00000ea2 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
     ea2:	cf 93       	push	r28
     ea4:	df 93       	push	r29
     ea6:	ec 01       	movw	r28, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
     ea8:	61 15       	cp	r22, r1
     eaa:	71 05       	cpc	r23, r1
     eac:	69 f0       	breq	.+26     	; 0xec8 <_ZplRK15StringSumHelperPKc+0x26>
     eae:	fb 01       	movw	r30, r22
     eb0:	01 90       	ld	r0, Z+
     eb2:	00 20       	and	r0, r0
     eb4:	e9 f7       	brne	.-6      	; 0xeb0 <_ZplRK15StringSumHelperPKc+0xe>
     eb6:	af 01       	movw	r20, r30
     eb8:	41 50       	subi	r20, 0x01	; 1
     eba:	51 09       	sbc	r21, r1
     ebc:	46 1b       	sub	r20, r22
     ebe:	57 0b       	sbc	r21, r23
     ec0:	0e 94 ef 06 	call	0xdde	; 0xdde <_ZN6String6concatEPKcj>
     ec4:	81 11       	cpse	r24, r1
     ec6:	03 c0       	rjmp	.+6      	; 0xece <_ZplRK15StringSumHelperPKc+0x2c>
     ec8:	ce 01       	movw	r24, r28
     eca:	0e 94 38 06 	call	0xc70	; 0xc70 <_ZN6String10invalidateEv>
	return a;
}
     ece:	ce 01       	movw	r24, r28
     ed0:	df 91       	pop	r29
     ed2:	cf 91       	pop	r28
     ed4:	08 95       	ret

00000ed6 <_ZNK6String9compareToERKS_>:
/*********************************************/
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
	if (!buffer || !s.buffer) {
     eda:	dc 01       	movw	r26, r24
     edc:	ed 91       	ld	r30, X+
     ede:	fc 91       	ld	r31, X
     ee0:	eb 01       	movw	r28, r22
     ee2:	a8 81       	ld	r26, Y
     ee4:	b9 81       	ldd	r27, Y+1	; 0x01
     ee6:	30 97       	sbiw	r30, 0x00	; 0
     ee8:	11 f0       	breq	.+4      	; 0xeee <_ZNK6String9compareToERKS_+0x18>
     eea:	10 97       	sbiw	r26, 0x00	; 0
     eec:	c9 f4       	brne	.+50     	; 0xf20 <_ZNK6String9compareToERKS_+0x4a>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
     eee:	10 97       	sbiw	r26, 0x00	; 0
     ef0:	59 f0       	breq	.+22     	; 0xf08 <_ZNK6String9compareToERKS_+0x32>
     ef2:	eb 01       	movw	r28, r22
     ef4:	2c 81       	ldd	r18, Y+4	; 0x04
     ef6:	3d 81       	ldd	r19, Y+5	; 0x05
     ef8:	23 2b       	or	r18, r19
     efa:	31 f0       	breq	.+12     	; 0xf08 <_ZNK6String9compareToERKS_+0x32>
     efc:	8c 91       	ld	r24, X
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	91 95       	neg	r25
     f02:	81 95       	neg	r24
     f04:	91 09       	sbc	r25, r1
     f06:	14 c0       	rjmp	.+40     	; 0xf30 <_ZNK6String9compareToERKS_+0x5a>
		if (buffer && len > 0) return *(unsigned char *)buffer;
     f08:	30 97       	sbiw	r30, 0x00	; 0
     f0a:	81 f0       	breq	.+32     	; 0xf2c <_ZNK6String9compareToERKS_+0x56>
     f0c:	dc 01       	movw	r26, r24
     f0e:	14 96       	adiw	r26, 0x04	; 4
     f10:	8d 91       	ld	r24, X+
     f12:	9c 91       	ld	r25, X
     f14:	15 97       	sbiw	r26, 0x05	; 5
     f16:	89 2b       	or	r24, r25
     f18:	49 f0       	breq	.+18     	; 0xf2c <_ZNK6String9compareToERKS_+0x56>
     f1a:	80 81       	ld	r24, Z
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	08 c0       	rjmp	.+16     	; 0xf30 <_ZNK6String9compareToERKS_+0x5a>
		return 0;
	}
	return strcmp(buffer, s.buffer);
     f20:	bd 01       	movw	r22, r26
     f22:	cf 01       	movw	r24, r30
}
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
		return 0;
	}
	return strcmp(buffer, s.buffer);
     f28:	0c 94 53 14 	jmp	0x28a6	; 0x28a6 <strcmp>
int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
		return 0;
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	90 e0       	ldi	r25, 0x00	; 0
	}
	return strcmp(buffer, s.buffer);
}
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	08 95       	ret

00000f36 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
     f36:	fc 01       	movw	r30, r24
     f38:	44 81       	ldd	r20, Z+4	; 0x04
     f3a:	55 81       	ldd	r21, Z+5	; 0x05
     f3c:	fb 01       	movw	r30, r22
     f3e:	24 81       	ldd	r18, Z+4	; 0x04
     f40:	35 81       	ldd	r19, Z+5	; 0x05
     f42:	42 17       	cp	r20, r18
     f44:	53 07       	cpc	r21, r19
     f46:	41 f4       	brne	.+16     	; 0xf58 <_ZNK6String6equalsERKS_+0x22>
     f48:	0e 94 6b 07 	call	0xed6	; 0xed6 <_ZNK6String9compareToERKS_>
     f4c:	21 e0       	ldi	r18, 0x01	; 1
     f4e:	89 2b       	or	r24, r25
     f50:	09 f0       	breq	.+2      	; 0xf54 <_ZNK6String6equalsERKS_+0x1e>
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	82 2f       	mov	r24, r18
     f56:	08 95       	ret
     f58:	80 e0       	ldi	r24, 0x00	; 0
}
     f5a:	08 95       	ret

00000f5c <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
     f5c:	fc 01       	movw	r30, r24
     f5e:	24 81       	ldd	r18, Z+4	; 0x04
     f60:	35 81       	ldd	r19, Z+5	; 0x05
     f62:	23 2b       	or	r18, r19
     f64:	31 f4       	brne	.+12     	; 0xf72 <_ZNK6String6equalsEPKc+0x16>
     f66:	21 e0       	ldi	r18, 0x01	; 1
     f68:	61 15       	cp	r22, r1
     f6a:	71 05       	cpc	r23, r1
     f6c:	a1 f0       	breq	.+40     	; 0xf96 <_ZNK6String6equalsEPKc+0x3a>
     f6e:	fb 01       	movw	r30, r22
     f70:	08 c0       	rjmp	.+16     	; 0xf82 <_ZNK6String6equalsEPKc+0x26>
     f72:	fc 01       	movw	r30, r24
     f74:	80 81       	ld	r24, Z
     f76:	91 81       	ldd	r25, Z+1	; 0x01
	if (cstr == NULL) return buffer[0] == 0;
     f78:	61 15       	cp	r22, r1
     f7a:	71 05       	cpc	r23, r1
     f7c:	31 f4       	brne	.+12     	; 0xf8a <_ZNK6String6equalsEPKc+0x2e>
     f7e:	21 e0       	ldi	r18, 0x01	; 1
     f80:	fc 01       	movw	r30, r24
     f82:	80 81       	ld	r24, Z
     f84:	88 23       	and	r24, r24
     f86:	39 f0       	breq	.+14     	; 0xf96 <_ZNK6String6equalsEPKc+0x3a>
     f88:	05 c0       	rjmp	.+10     	; 0xf94 <_ZNK6String6equalsEPKc+0x38>
	return strcmp(buffer, cstr) == 0;
     f8a:	0e 94 53 14 	call	0x28a6	; 0x28a6 <strcmp>
     f8e:	21 e0       	ldi	r18, 0x01	; 1
     f90:	89 2b       	or	r24, r25
     f92:	09 f0       	breq	.+2      	; 0xf96 <_ZNK6String6equalsEPKc+0x3a>
     f94:	20 e0       	ldi	r18, 0x00	; 0
}
     f96:	82 2f       	mov	r24, r18
     f98:	08 95       	ret

00000f9a <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
     f9a:	fa 01       	movw	r30, r20
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
     f9c:	db 01       	movw	r26, r22
     f9e:	14 96       	adiw	r26, 0x04	; 4
     fa0:	4d 91       	ld	r20, X+
     fa2:	5c 91       	ld	r21, X
     fa4:	15 97       	sbiw	r26, 0x05	; 5
     fa6:	dc 01       	movw	r26, r24
     fa8:	14 96       	adiw	r26, 0x04	; 4
     faa:	2d 91       	ld	r18, X+
     fac:	3c 91       	ld	r19, X
     fae:	15 97       	sbiw	r26, 0x05	; 5
     fb0:	24 1b       	sub	r18, r20
     fb2:	35 0b       	sbc	r19, r21
     fb4:	2e 17       	cp	r18, r30
     fb6:	3f 07       	cpc	r19, r31
     fb8:	88 f0       	brcs	.+34     	; 0xfdc <_ZNK6String10startsWithERKS_j+0x42>
     fba:	8d 91       	ld	r24, X+
     fbc:	9c 91       	ld	r25, X
     fbe:	00 97       	sbiw	r24, 0x00	; 0
     fc0:	69 f0       	breq	.+26     	; 0xfdc <_ZNK6String10startsWithERKS_j+0x42>
     fc2:	db 01       	movw	r26, r22
     fc4:	6d 91       	ld	r22, X+
     fc6:	7c 91       	ld	r23, X
     fc8:	61 15       	cp	r22, r1
     fca:	71 05       	cpc	r23, r1
     fcc:	39 f0       	breq	.+14     	; 0xfdc <_ZNK6String10startsWithERKS_j+0x42>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
     fce:	8e 0f       	add	r24, r30
     fd0:	9f 1f       	adc	r25, r31
     fd2:	0e 94 63 14 	call	0x28c6	; 0x28c6 <strncmp>
     fd6:	21 e0       	ldi	r18, 0x01	; 1
     fd8:	89 2b       	or	r24, r25
     fda:	09 f0       	breq	.+2      	; 0xfde <_ZNK6String10startsWithERKS_j+0x44>
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
     fdc:	20 e0       	ldi	r18, 0x00	; 0
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}
     fde:	82 2f       	mov	r24, r18
     fe0:	08 95       	ret

00000fe2 <_ZNK6String10startsWithERKS_>:
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
     fe2:	fc 01       	movw	r30, r24
     fe4:	44 81       	ldd	r20, Z+4	; 0x04
     fe6:	55 81       	ldd	r21, Z+5	; 0x05
     fe8:	fb 01       	movw	r30, r22
     fea:	24 81       	ldd	r18, Z+4	; 0x04
     fec:	35 81       	ldd	r19, Z+5	; 0x05
     fee:	42 17       	cp	r20, r18
     ff0:	53 07       	cpc	r21, r19
     ff2:	20 f0       	brcs	.+8      	; 0xffc <_ZNK6String10startsWithERKS_+0x1a>
	return startsWith(s2, 0);
     ff4:	40 e0       	ldi	r20, 0x00	; 0
     ff6:	50 e0       	ldi	r21, 0x00	; 0
     ff8:	0c 94 cd 07 	jmp	0xf9a	; 0xf9a <_ZNK6String10startsWithERKS_j>
}
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	08 95       	ret

00001000 <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
    1000:	fc 01       	movw	r30, r24
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    1002:	84 81       	ldd	r24, Z+4	; 0x04
    1004:	95 81       	ldd	r25, Z+5	; 0x05
    1006:	db 01       	movw	r26, r22
    1008:	14 96       	adiw	r26, 0x04	; 4
    100a:	4d 91       	ld	r20, X+
    100c:	5c 91       	ld	r21, X
    100e:	15 97       	sbiw	r26, 0x05	; 5
    1010:	84 17       	cp	r24, r20
    1012:	95 07       	cpc	r25, r21
    1014:	98 f0       	brcs	.+38     	; 0x103c <_ZNK6String8endsWithERKS_+0x3c>
    1016:	20 81       	ld	r18, Z
    1018:	31 81       	ldd	r19, Z+1	; 0x01
    101a:	21 15       	cp	r18, r1
    101c:	31 05       	cpc	r19, r1
    101e:	71 f0       	breq	.+28     	; 0x103c <_ZNK6String8endsWithERKS_+0x3c>
    1020:	6d 91       	ld	r22, X+
    1022:	7c 91       	ld	r23, X
    1024:	61 15       	cp	r22, r1
    1026:	71 05       	cpc	r23, r1
    1028:	49 f0       	breq	.+18     	; 0x103c <_ZNK6String8endsWithERKS_+0x3c>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
    102a:	84 1b       	sub	r24, r20
    102c:	95 0b       	sbc	r25, r21
    102e:	82 0f       	add	r24, r18
    1030:	93 1f       	adc	r25, r19
    1032:	0e 94 53 14 	call	0x28a6	; 0x28a6 <strcmp>
    1036:	21 e0       	ldi	r18, 0x01	; 1
    1038:	89 2b       	or	r24, r25
    103a:	09 f0       	breq	.+2      	; 0x103e <_ZNK6String8endsWithERKS_+0x3e>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    103c:	20 e0       	ldi	r18, 0x00	; 0
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
}
    103e:	82 2f       	mov	r24, r18
    1040:	08 95       	ret

00001042 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
    1042:	fc 01       	movw	r30, r24
    1044:	24 81       	ldd	r18, Z+4	; 0x04
    1046:	35 81       	ldd	r19, Z+5	; 0x05
    1048:	62 17       	cp	r22, r18
    104a:	73 07       	cpc	r23, r19
    104c:	48 f4       	brcc	.+18     	; 0x1060 <_ZNK6StringixEj+0x1e>
    104e:	80 81       	ld	r24, Z
    1050:	91 81       	ldd	r25, Z+1	; 0x01
    1052:	00 97       	sbiw	r24, 0x00	; 0
    1054:	29 f0       	breq	.+10     	; 0x1060 <_ZNK6StringixEj+0x1e>
	return buffer[index];
    1056:	fc 01       	movw	r30, r24
    1058:	e6 0f       	add	r30, r22
    105a:	f7 1f       	adc	r31, r23
    105c:	80 81       	ld	r24, Z
    105e:	08 95       	ret
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
    1060:	80 e0       	ldi	r24, 0x00	; 0
	return buffer[index];
}
    1062:	08 95       	ret

00001064 <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
    1064:	0c 94 21 08 	jmp	0x1042	; 0x1042 <_ZNK6StringixEj>

00001068 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    1068:	0f 93       	push	r16
    106a:	1f 93       	push	r17
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
    1070:	eb 01       	movw	r28, r22
	if (!bufsize || !buf) return;
    1072:	41 15       	cp	r20, r1
    1074:	51 05       	cpc	r21, r1
    1076:	e9 f0       	breq	.+58     	; 0x10b2 <_ZNK6String8getBytesEPhjj+0x4a>
    1078:	20 97       	sbiw	r28, 0x00	; 0
    107a:	d9 f0       	breq	.+54     	; 0x10b2 <_ZNK6String8getBytesEPhjj+0x4a>
	if (index >= len) {
    107c:	fc 01       	movw	r30, r24
    107e:	64 81       	ldd	r22, Z+4	; 0x04
    1080:	75 81       	ldd	r23, Z+5	; 0x05
    1082:	26 17       	cp	r18, r22
    1084:	37 07       	cpc	r19, r23
    1086:	a0 f4       	brcc	.+40     	; 0x10b0 <_ZNK6String8getBytesEPhjj+0x48>
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
    1088:	62 1b       	sub	r22, r18
    108a:	73 0b       	sbc	r23, r19
    108c:	8a 01       	movw	r16, r20
    108e:	01 50       	subi	r16, 0x01	; 1
    1090:	11 09       	sbc	r17, r1
    1092:	60 17       	cp	r22, r16
    1094:	71 07       	cpc	r23, r17
    1096:	08 f4       	brcc	.+2      	; 0x109a <_ZNK6String8getBytesEPhjj+0x32>
    1098:	8b 01       	movw	r16, r22
	strncpy((char *)buf, buffer + index, n);
    109a:	fc 01       	movw	r30, r24
    109c:	60 81       	ld	r22, Z
    109e:	71 81       	ldd	r23, Z+1	; 0x01
    10a0:	62 0f       	add	r22, r18
    10a2:	73 1f       	adc	r23, r19
    10a4:	a8 01       	movw	r20, r16
    10a6:	ce 01       	movw	r24, r28
    10a8:	0e 94 71 14 	call	0x28e2	; 0x28e2 <strncpy>
	buf[n] = 0;
    10ac:	c0 0f       	add	r28, r16
    10ae:	d1 1f       	adc	r29, r17
    10b0:	18 82       	st	Y, r1
}
    10b2:	df 91       	pop	r29
    10b4:	cf 91       	pop	r28
    10b6:	1f 91       	pop	r17
    10b8:	0f 91       	pop	r16
    10ba:	08 95       	ret

000010bc <_ZNK6String9substringEjj>:
	}
	return found;
}

String String::substring(unsigned int left, unsigned int right) const
{
    10bc:	bf 92       	push	r11
    10be:	cf 92       	push	r12
    10c0:	df 92       	push	r13
    10c2:	ef 92       	push	r14
    10c4:	ff 92       	push	r15
    10c6:	0f 93       	push	r16
    10c8:	1f 93       	push	r17
    10ca:	cf 93       	push	r28
    10cc:	df 93       	push	r29
    10ce:	6c 01       	movw	r12, r24
    10d0:	7b 01       	movw	r14, r22
    10d2:	ea 01       	movw	r28, r20
    10d4:	89 01       	movw	r16, r18
	if (left > right) {
    10d6:	24 17       	cp	r18, r20
    10d8:	35 07       	cpc	r19, r21
    10da:	20 f4       	brcc	.+8      	; 0x10e4 <_ZNK6String9substringEjj+0x28>
    10dc:	8d 2f       	mov	r24, r29
    10de:	e9 01       	movw	r28, r18
    10e0:	04 2f       	mov	r16, r20
    10e2:	18 2f       	mov	r17, r24
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
    10e4:	60 e2       	ldi	r22, 0x20	; 32
    10e6:	71 e0       	ldi	r23, 0x01	; 1
    10e8:	c6 01       	movw	r24, r12
    10ea:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
	if (left >= len) return out;
    10ee:	d7 01       	movw	r26, r14
    10f0:	14 96       	adiw	r26, 0x04	; 4
    10f2:	8d 91       	ld	r24, X+
    10f4:	9c 91       	ld	r25, X
    10f6:	15 97       	sbiw	r26, 0x05	; 5
    10f8:	c8 17       	cp	r28, r24
    10fa:	d9 07       	cpc	r29, r25
    10fc:	c8 f4       	brcc	.+50     	; 0x1130 <_ZNK6String9substringEjj+0x74>
    10fe:	80 17       	cp	r24, r16
    1100:	91 07       	cpc	r25, r17
    1102:	08 f4       	brcc	.+2      	; 0x1106 <_ZNK6String9substringEjj+0x4a>
    1104:	8c 01       	movw	r16, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    1106:	d7 01       	movw	r26, r14
    1108:	ed 91       	ld	r30, X+
    110a:	fc 91       	ld	r31, X
    110c:	11 97       	sbiw	r26, 0x01	; 1
    110e:	e0 0f       	add	r30, r16
    1110:	f1 1f       	adc	r31, r17
    1112:	b0 80       	ld	r11, Z
	buffer[right] = '\0';	
    1114:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    1116:	6d 91       	ld	r22, X+
    1118:	7c 91       	ld	r23, X
    111a:	6c 0f       	add	r22, r28
    111c:	7d 1f       	adc	r23, r29
    111e:	c6 01       	movw	r24, r12
    1120:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    1124:	d7 01       	movw	r26, r14
    1126:	ed 91       	ld	r30, X+
    1128:	fc 91       	ld	r31, X
    112a:	e0 0f       	add	r30, r16
    112c:	f1 1f       	adc	r31, r17
    112e:	b0 82       	st	Z, r11
	return out;
}
    1130:	c6 01       	movw	r24, r12
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	1f 91       	pop	r17
    1138:	0f 91       	pop	r16
    113a:	ff 90       	pop	r15
    113c:	ef 90       	pop	r14
    113e:	df 90       	pop	r13
    1140:	cf 90       	pop	r12
    1142:	bf 90       	pop	r11
    1144:	08 95       	ret

00001146 <_ZN6String6removeEjj>:
	// below will take care of truncating it at the end of the
	// string.
	remove(index, (unsigned int)-1);
}

void String::remove(unsigned int index, unsigned int count){
    1146:	cf 93       	push	r28
    1148:	df 93       	push	r29
    114a:	ec 01       	movw	r28, r24
    114c:	cb 01       	movw	r24, r22
	if (index >= len) { return; }
    114e:	2c 81       	ldd	r18, Y+4	; 0x04
    1150:	3d 81       	ldd	r19, Y+5	; 0x05
    1152:	62 17       	cp	r22, r18
    1154:	73 07       	cpc	r23, r19
    1156:	10 f5       	brcc	.+68     	; 0x119c <_ZN6String6removeEjj+0x56>
	if (count <= 0) { return; }
    1158:	41 15       	cp	r20, r1
    115a:	51 05       	cpc	r21, r1
    115c:	f9 f0       	breq	.+62     	; 0x119c <_ZN6String6removeEjj+0x56>
    115e:	b9 01       	movw	r22, r18
    1160:	68 1b       	sub	r22, r24
    1162:	79 0b       	sbc	r23, r25
    1164:	46 17       	cp	r20, r22
    1166:	57 07       	cpc	r21, r23
    1168:	08 f4       	brcc	.+2      	; 0x116c <_ZN6String6removeEjj+0x26>
    116a:	ba 01       	movw	r22, r20
	if (count > len - index) { count = len - index; }
	char *writeTo = buffer + index;
    116c:	e8 81       	ld	r30, Y
    116e:	f9 81       	ldd	r31, Y+1	; 0x01
	len = len - count;
    1170:	26 1b       	sub	r18, r22
    1172:	37 0b       	sbc	r19, r23
    1174:	3d 83       	std	Y+5, r19	; 0x05
    1176:	2c 83       	std	Y+4, r18	; 0x04
	strncpy(writeTo, buffer + index + count,len - index);
    1178:	a9 01       	movw	r20, r18
    117a:	48 1b       	sub	r20, r24
    117c:	59 0b       	sbc	r21, r25
    117e:	68 0f       	add	r22, r24
    1180:	79 1f       	adc	r23, r25
    1182:	6e 0f       	add	r22, r30
    1184:	7f 1f       	adc	r23, r31
    1186:	8e 0f       	add	r24, r30
    1188:	9f 1f       	adc	r25, r31
    118a:	0e 94 71 14 	call	0x28e2	; 0x28e2 <strncpy>
	buffer[len] = 0;
    118e:	e8 81       	ld	r30, Y
    1190:	f9 81       	ldd	r31, Y+1	; 0x01
    1192:	8c 81       	ldd	r24, Y+4	; 0x04
    1194:	9d 81       	ldd	r25, Y+5	; 0x05
    1196:	e8 0f       	add	r30, r24
    1198:	f9 1f       	adc	r31, r25
    119a:	10 82       	st	Z, r1
}
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	08 95       	ret

000011a2 <_ZN6String6removeEj>:

void String::remove(unsigned int index){
	// Pass the biggest integer as the count. The remove method
	// below will take care of truncating it at the end of the
	// string.
	remove(index, (unsigned int)-1);
    11a2:	4f ef       	ldi	r20, 0xFF	; 255
    11a4:	5f ef       	ldi	r21, 0xFF	; 255
    11a6:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <_ZN6String6removeEjj>

000011aa <_ZN8BLEMate2C1EP6Stream>:
#include "SparkFun_BLEMate2.h"
#include "../Arduino/Arduino.h"

// Constructor. All we really need to do is link the user's Stream instance to
//  our local reference.
BLEMate2::BLEMate2(Stream *sp)
    11aa:	cf 92       	push	r12
    11ac:	df 92       	push	r13
    11ae:	ef 92       	push	r14
    11b0:	ff 92       	push	r15
    11b2:	0f 93       	push	r16
    11b4:	1f 93       	push	r17
    11b6:	cf 93       	push	r28
    11b8:	df 93       	push	r29
    11ba:	ec 01       	movw	r28, r24
    11bc:	7b 01       	movw	r14, r22
    11be:	8c 01       	movw	r16, r24
    11c0:	0e 5f       	subi	r16, 0xFE	; 254
    11c2:	1f 4f       	sbci	r17, 0xFF	; 255
    11c4:	6c 01       	movw	r12, r24
    11c6:	80 e2       	ldi	r24, 0x20	; 32
    11c8:	c8 0e       	add	r12, r24
    11ca:	d1 1c       	adc	r13, r1
    11cc:	60 e2       	ldi	r22, 0x20	; 32
    11ce:	71 e0       	ldi	r23, 0x01	; 1
    11d0:	c8 01       	movw	r24, r16
    11d2:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
    11d6:	0a 5f       	subi	r16, 0xFA	; 250
    11d8:	1f 4f       	sbci	r17, 0xFF	; 255
    11da:	0c 15       	cp	r16, r12
    11dc:	1d 05       	cpc	r17, r13
    11de:	b1 f7       	brne	.-20     	; 0x11cc <_ZN8BLEMate2C1EP6Stream+0x22>
{
  _serialPort = sp;
    11e0:	fa a2       	std	Y+34, r15	; 0x22
    11e2:	e9 a2       	std	Y+33, r14	; 0x21
  _numAddresses = 0;
    11e4:	18 a2       	std	Y+32, r1	; 0x20
}
    11e6:	df 91       	pop	r29
    11e8:	cf 91       	pop	r28
    11ea:	1f 91       	pop	r17
    11ec:	0f 91       	pop	r16
    11ee:	ff 90       	pop	r15
    11f0:	ef 90       	pop	r14
    11f2:	df 90       	pop	r13
    11f4:	cf 90       	pop	r12
    11f6:	08 95       	ret

000011f8 <_ZN8BLEMate210knownStartEv>:

// Create a known state for the module to start from. If a partial command is
//  already in the module's buffer, we can purge it by sending an EOL to the
//  the module. If not, we'll just get an error.
BLEMate2::opResult BLEMate2::knownStart()
{
    11f8:	8f 92       	push	r8
    11fa:	9f 92       	push	r9
    11fc:	af 92       	push	r10
    11fe:	bf 92       	push	r11
    1200:	cf 92       	push	r12
    1202:	df 92       	push	r13
    1204:	ef 92       	push	r14
    1206:	ff 92       	push	r15
    1208:	0f 93       	push	r16
    120a:	1f 93       	push	r17
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	62 97       	sbiw	r28, 0x12	; 18
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	f8 94       	cli
    121a:	de bf       	out	0x3e, r29	; 62
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	cd bf       	out	0x3d, r28	; 61
    1220:	8c 01       	movw	r16, r24
  String EOL = String("\n\r");
    1222:	6e e1       	ldi	r22, 0x1E	; 30
    1224:	71 e0       	ldi	r23, 0x01	; 1
    1226:	ce 01       	movw	r24, r28
    1228:	0d 96       	adiw	r24, 0x0d	; 13
    122a:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
  String buffer = "";
    122e:	60 e2       	ldi	r22, 0x20	; 32
    1230:	71 e0       	ldi	r23, 0x01	; 1
    1232:	ce 01       	movw	r24, r28
    1234:	07 96       	adiw	r24, 0x07	; 7
    1236:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
  
  _serialPort->print("\r");
    123a:	6f e1       	ldi	r22, 0x1F	; 31
    123c:	71 e0       	ldi	r23, 0x01	; 1
    123e:	d8 01       	movw	r26, r16
    1240:	91 96       	adiw	r26, 0x21	; 33
    1242:	8d 91       	ld	r24, X+
    1244:	9c 91       	ld	r25, X
    1246:	92 97       	sbiw	r26, 0x22	; 34
    1248:	0e 94 09 03 	call	0x612	; 0x612 <_ZN5Print5printEPKc>
  _serialPort->flush();
    124c:	f8 01       	movw	r30, r16
    124e:	81 a1       	ldd	r24, Z+33	; 0x21
    1250:	92 a1       	ldd	r25, Z+34	; 0x22
    1252:	dc 01       	movw	r26, r24
    1254:	ed 91       	ld	r30, X+
    1256:	fc 91       	ld	r31, X
    1258:	02 84       	ldd	r0, Z+10	; 0x0a
    125a:	f3 85       	ldd	r31, Z+11	; 0x0b
    125c:	e0 2d       	mov	r30, r0
    125e:	09 95       	icall
  
  // We're going to use the internal timer to track the elapsed time since we
  //  issued the reset. Bog-standard Arduino stuff.
  unsigned long startTime = millis();
    1260:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <millis>
    1264:	6b 01       	movw	r12, r22
    1266:	7c 01       	movw	r14, r24
  
  // This is our timeout loop. We're going to give our module 1s to come up
  //  with a new character, and return with a timeout failure otherwise.
  while (buffer.endsWith(EOL) != true)
    1268:	be 01       	movw	r22, r28
    126a:	63 5f       	subi	r22, 0xF3	; 243
    126c:	7f 4f       	sbci	r23, 0xFF	; 255
    126e:	ce 01       	movw	r24, r28
    1270:	07 96       	adiw	r24, 0x07	; 7
    1272:	0e 94 00 08 	call	0x1000	; 0x1000 <_ZNK6String8endsWithERKS_>
    1276:	81 30       	cpi	r24, 0x01	; 1
    1278:	89 f1       	breq	.+98     	; 0x12dc <_ZN8BLEMate210knownStartEv+0xe4>
  {
    // Purge the serial data received from the module, along with any data in
    //  the buffer at the time this command was sent.
    if (_serialPort->available() > 0) 
    127a:	f8 01       	movw	r30, r16
    127c:	81 a1       	ldd	r24, Z+33	; 0x21
    127e:	92 a1       	ldd	r25, Z+34	; 0x22
    1280:	dc 01       	movw	r26, r24
    1282:	ed 91       	ld	r30, X+
    1284:	fc 91       	ld	r31, X
    1286:	04 80       	ldd	r0, Z+4	; 0x04
    1288:	f5 81       	ldd	r31, Z+5	; 0x05
    128a:	e0 2d       	mov	r30, r0
    128c:	09 95       	icall
    128e:	18 16       	cp	r1, r24
    1290:	19 06       	cpc	r1, r25
    1292:	9c f4       	brge	.+38     	; 0x12ba <_ZN8BLEMate210knownStartEv+0xc2>
    {
      buffer.concat(char(_serialPort->read()));
    1294:	f8 01       	movw	r30, r16
    1296:	81 a1       	ldd	r24, Z+33	; 0x21
    1298:	92 a1       	ldd	r25, Z+34	; 0x22
    129a:	dc 01       	movw	r26, r24
    129c:	ed 91       	ld	r30, X+
    129e:	fc 91       	ld	r31, X
    12a0:	06 80       	ldd	r0, Z+6	; 0x06
    12a2:	f7 81       	ldd	r31, Z+7	; 0x07
    12a4:	e0 2d       	mov	r30, r0
    12a6:	09 95       	icall
    12a8:	68 2f       	mov	r22, r24
    12aa:	ce 01       	movw	r24, r28
    12ac:	07 96       	adiw	r24, 0x07	; 7
    12ae:	0e 94 2b 07 	call	0xe56	; 0xe56 <_ZN6String6concatEc>
      startTime = millis();
    12b2:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <millis>
    12b6:	6b 01       	movw	r12, r22
    12b8:	7c 01       	movw	r14, r24
    }
    if ((startTime + 1000) < millis()) return TIMEOUT_ERROR;
    12ba:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <millis>
    12be:	46 01       	movw	r8, r12
    12c0:	57 01       	movw	r10, r14
    12c2:	b8 ee       	ldi	r27, 0xE8	; 232
    12c4:	8b 0e       	add	r8, r27
    12c6:	b3 e0       	ldi	r27, 0x03	; 3
    12c8:	9b 1e       	adc	r9, r27
    12ca:	a1 1c       	adc	r10, r1
    12cc:	b1 1c       	adc	r11, r1
    12ce:	86 16       	cp	r8, r22
    12d0:	97 06       	cpc	r9, r23
    12d2:	a8 06       	cpc	r10, r24
    12d4:	b9 06       	cpc	r11, r25
    12d6:	40 f6       	brcc	.-112    	; 0x1268 <_ZN8BLEMate210knownStartEv+0x70>
    12d8:	1e ef       	ldi	r17, 0xFE	; 254
    12da:	12 c0       	rjmp	.+36     	; 0x1300 <_ZN8BLEMate210knownStartEv+0x108>
  }
  if (buffer.startsWith("ERR")) return SUCCESS;
    12dc:	61 e2       	ldi	r22, 0x21	; 33
    12de:	71 e0       	ldi	r23, 0x01	; 1
    12e0:	ce 01       	movw	r24, r28
    12e2:	01 96       	adiw	r24, 0x01	; 1
    12e4:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
    12e8:	be 01       	movw	r22, r28
    12ea:	6f 5f       	subi	r22, 0xFF	; 255
    12ec:	7f 4f       	sbci	r23, 0xFF	; 255
    12ee:	ce 01       	movw	r24, r28
    12f0:	07 96       	adiw	r24, 0x07	; 7
    12f2:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZNK6String10startsWithERKS_>
    12f6:	ce 01       	movw	r24, r28
    12f8:	01 96       	adiw	r24, 0x01	; 1
    12fa:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
    12fe:	11 e0       	ldi	r17, 0x01	; 1
//  already in the module's buffer, we can purge it by sending an EOL to the
//  the module. If not, we'll just get an error.
BLEMate2::opResult BLEMate2::knownStart()
{
  String EOL = String("\n\r");
  String buffer = "";
    1300:	ce 01       	movw	r24, r28
    1302:	07 96       	adiw	r24, 0x07	; 7
    1304:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
      startTime = millis();
    }
    if ((startTime + 1000) < millis()) return TIMEOUT_ERROR;
  }
  if (buffer.startsWith("ERR")) return SUCCESS;
  else return SUCCESS;
    1308:	ce 01       	movw	r24, r28
    130a:	0d 96       	adiw	r24, 0x0d	; 13
    130c:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
}
    1310:	81 2f       	mov	r24, r17
    1312:	62 96       	adiw	r28, 0x12	; 18
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	f8 94       	cli
    1318:	de bf       	out	0x3e, r29	; 62
    131a:	0f be       	out	0x3f, r0	; 63
    131c:	cd bf       	out	0x3d, r28	; 61
    131e:	df 91       	pop	r29
    1320:	cf 91       	pop	r28
    1322:	1f 91       	pop	r17
    1324:	0f 91       	pop	r16
    1326:	ff 90       	pop	r15
    1328:	ef 90       	pop	r14
    132a:	df 90       	pop	r13
    132c:	cf 90       	pop	r12
    132e:	bf 90       	pop	r11
    1330:	af 90       	pop	r10
    1332:	9f 90       	pop	r9
    1334:	8f 90       	pop	r8
    1336:	08 95       	ret

00001338 <_ZN8BLEMate26stdCmdE6String>:
}

// There are several commands that look for either OK or ERROR; let's abstract
//  support for those commands to one single private function, to save memory.
BLEMate2::opResult BLEMate2::stdCmd(String command)
{
    1338:	bf 92       	push	r11
    133a:	cf 92       	push	r12
    133c:	df 92       	push	r13
    133e:	ef 92       	push	r14
    1340:	ff 92       	push	r15
    1342:	0f 93       	push	r16
    1344:	1f 93       	push	r17
    1346:	cf 93       	push	r28
    1348:	df 93       	push	r29
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	62 97       	sbiw	r28, 0x12	; 18
    1350:	0f b6       	in	r0, 0x3f	; 63
    1352:	f8 94       	cli
    1354:	de bf       	out	0x3e, r29	; 62
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	cd bf       	out	0x3d, r28	; 61
    135a:	8c 01       	movw	r16, r24
    135c:	7b 01       	movw	r14, r22
  String buffer;
    135e:	60 e2       	ldi	r22, 0x20	; 32
    1360:	71 e0       	ldi	r23, 0x01	; 1
    1362:	ce 01       	movw	r24, r28
    1364:	0d 96       	adiw	r24, 0x0d	; 13
    1366:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
  String EOL = String("\n\r");
    136a:	6e e1       	ldi	r22, 0x1E	; 30
    136c:	71 e0       	ldi	r23, 0x01	; 1
    136e:	ce 01       	movw	r24, r28
    1370:	07 96       	adiw	r24, 0x07	; 7
    1372:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
  
  knownStart(); // Clear the serial buffer in the module and the Arduino.
    1376:	c8 01       	movw	r24, r16
    1378:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <_ZN8BLEMate210knownStartEv>
  
  _serialPort->print(command);
    137c:	b7 01       	movw	r22, r14
    137e:	d8 01       	movw	r26, r16
    1380:	91 96       	adiw	r26, 0x21	; 33
    1382:	8d 91       	ld	r24, X+
    1384:	9c 91       	ld	r25, X
    1386:	92 97       	sbiw	r26, 0x22	; 34
    1388:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printERK6String>
  _serialPort->print("\r");
    138c:	6f e1       	ldi	r22, 0x1F	; 31
    138e:	71 e0       	ldi	r23, 0x01	; 1
    1390:	f8 01       	movw	r30, r16
    1392:	81 a1       	ldd	r24, Z+33	; 0x21
    1394:	92 a1       	ldd	r25, Z+34	; 0x22
    1396:	0e 94 09 03 	call	0x612	; 0x612 <_ZN5Print5printEPKc>
  _serialPort->flush();
    139a:	d8 01       	movw	r26, r16
    139c:	91 96       	adiw	r26, 0x21	; 33
    139e:	8d 91       	ld	r24, X+
    13a0:	9c 91       	ld	r25, X
    13a2:	92 97       	sbiw	r26, 0x22	; 34
    13a4:	dc 01       	movw	r26, r24
    13a6:	ed 91       	ld	r30, X+
    13a8:	fc 91       	ld	r31, X
    13aa:	02 84       	ldd	r0, Z+10	; 0x0a
    13ac:	f3 85       	ldd	r31, Z+11	; 0x0b
    13ae:	e0 2d       	mov	r30, r0
    13b0:	09 95       	icall
  
  // We're going to use the internal timer to track the elapsed time since we
  //  issued the command. Bog-standard Arduino stuff.
  unsigned long startTime = millis();
    13b2:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <millis>
    13b6:	6b 01       	movw	r12, r22
    13b8:	7c 01       	movw	r14, r24
    
  // This is our timeout loop. We'll give the module 3 seconds.
  while ((startTime + 3000) > millis())
    13ba:	b8 eb       	ldi	r27, 0xB8	; 184
    13bc:	cb 0e       	add	r12, r27
    13be:	bb e0       	ldi	r27, 0x0B	; 11
    13c0:	db 1e       	adc	r13, r27
    13c2:	e1 1c       	adc	r14, r1
    13c4:	f1 1c       	adc	r15, r1
    13c6:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <millis>
    13ca:	6c 15       	cp	r22, r12
    13cc:	7d 05       	cpc	r23, r13
    13ce:	8e 05       	cpc	r24, r14
    13d0:	9f 05       	cpc	r25, r15
    13d2:	08 f0       	brcs	.+2      	; 0x13d6 <_ZN8BLEMate26stdCmdE6String+0x9e>
    13d4:	54 c0       	rjmp	.+168    	; 0x147e <_ZN8BLEMate26stdCmdE6String+0x146>
  {
    // Grow the current buffered data, until we receive the EOL string.    
    if (_serialPort->available() > 0) buffer.concat(char(_serialPort->read()));
    13d6:	f8 01       	movw	r30, r16
    13d8:	81 a1       	ldd	r24, Z+33	; 0x21
    13da:	92 a1       	ldd	r25, Z+34	; 0x22
    13dc:	dc 01       	movw	r26, r24
    13de:	ed 91       	ld	r30, X+
    13e0:	fc 91       	ld	r31, X
    13e2:	04 80       	ldd	r0, Z+4	; 0x04
    13e4:	f5 81       	ldd	r31, Z+5	; 0x05
    13e6:	e0 2d       	mov	r30, r0
    13e8:	09 95       	icall
    13ea:	18 16       	cp	r1, r24
    13ec:	19 06       	cpc	r1, r25
    13ee:	7c f4       	brge	.+30     	; 0x140e <_ZN8BLEMate26stdCmdE6String+0xd6>
    13f0:	f8 01       	movw	r30, r16
    13f2:	81 a1       	ldd	r24, Z+33	; 0x21
    13f4:	92 a1       	ldd	r25, Z+34	; 0x22
    13f6:	dc 01       	movw	r26, r24
    13f8:	ed 91       	ld	r30, X+
    13fa:	fc 91       	ld	r31, X
    13fc:	06 80       	ldd	r0, Z+6	; 0x06
    13fe:	f7 81       	ldd	r31, Z+7	; 0x07
    1400:	e0 2d       	mov	r30, r0
    1402:	09 95       	icall
    1404:	68 2f       	mov	r22, r24
    1406:	ce 01       	movw	r24, r28
    1408:	0d 96       	adiw	r24, 0x0d	; 13
    140a:	0e 94 2b 07 	call	0xe56	; 0xe56 <_ZN6String6concatEc>

    if (buffer.endsWith(EOL))
    140e:	be 01       	movw	r22, r28
    1410:	69 5f       	subi	r22, 0xF9	; 249
    1412:	7f 4f       	sbci	r23, 0xFF	; 255
    1414:	ce 01       	movw	r24, r28
    1416:	0d 96       	adiw	r24, 0x0d	; 13
    1418:	0e 94 00 08 	call	0x1000	; 0x1000 <_ZNK6String8endsWithERKS_>
    141c:	88 23       	and	r24, r24
    141e:	99 f2       	breq	.-90     	; 0x13c6 <_ZN8BLEMate26stdCmdE6String+0x8e>
    {
      if (buffer.startsWith("ER")) return MODULE_ERROR;
    1420:	6a e2       	ldi	r22, 0x2A	; 42
    1422:	71 e0       	ldi	r23, 0x01	; 1
    1424:	ce 01       	movw	r24, r28
    1426:	01 96       	adiw	r24, 0x01	; 1
    1428:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
    142c:	be 01       	movw	r22, r28
    142e:	6f 5f       	subi	r22, 0xFF	; 255
    1430:	7f 4f       	sbci	r23, 0xFF	; 255
    1432:	ce 01       	movw	r24, r28
    1434:	0d 96       	adiw	r24, 0x0d	; 13
    1436:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZNK6String10startsWithERKS_>
    143a:	b8 2e       	mov	r11, r24
    143c:	ce 01       	movw	r24, r28
    143e:	01 96       	adiw	r24, 0x01	; 1
    1440:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
    1444:	b1 10       	cpse	r11, r1
    1446:	1d c0       	rjmp	.+58     	; 0x1482 <_ZN8BLEMate26stdCmdE6String+0x14a>
      if (buffer.startsWith("OK")) return SUCCESS;
    1448:	63 e3       	ldi	r22, 0x33	; 51
    144a:	71 e0       	ldi	r23, 0x01	; 1
    144c:	ce 01       	movw	r24, r28
    144e:	01 96       	adiw	r24, 0x01	; 1
    1450:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
    1454:	be 01       	movw	r22, r28
    1456:	6f 5f       	subi	r22, 0xFF	; 255
    1458:	7f 4f       	sbci	r23, 0xFF	; 255
    145a:	ce 01       	movw	r24, r28
    145c:	0d 96       	adiw	r24, 0x0d	; 13
    145e:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZNK6String10startsWithERKS_>
    1462:	b8 2e       	mov	r11, r24
    1464:	ce 01       	movw	r24, r28
    1466:	01 96       	adiw	r24, 0x01	; 1
    1468:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
    146c:	b1 10       	cpse	r11, r1
    146e:	0b c0       	rjmp	.+22     	; 0x1486 <_ZN8BLEMate26stdCmdE6String+0x14e>
      buffer = "";
    1470:	60 e2       	ldi	r22, 0x20	; 32
    1472:	71 e0       	ldi	r23, 0x01	; 1
    1474:	ce 01       	movw	r24, r28
    1476:	0d 96       	adiw	r24, 0x0d	; 13
    1478:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZN6StringaSEPKc>
    147c:	a4 cf       	rjmp	.-184    	; 0x13c6 <_ZN8BLEMate26stdCmdE6String+0x8e>
    }    
  }
  return TIMEOUT_ERROR;
    147e:	1e ef       	ldi	r17, 0xFE	; 254
    1480:	03 c0       	rjmp	.+6      	; 0x1488 <_ZN8BLEMate26stdCmdE6String+0x150>
    // Grow the current buffered data, until we receive the EOL string.    
    if (_serialPort->available() > 0) buffer.concat(char(_serialPort->read()));

    if (buffer.endsWith(EOL))
    {
      if (buffer.startsWith("ER")) return MODULE_ERROR;
    1482:	1f ef       	ldi	r17, 0xFF	; 255
    1484:	01 c0       	rjmp	.+2      	; 0x1488 <_ZN8BLEMate26stdCmdE6String+0x150>
      if (buffer.startsWith("OK")) return SUCCESS;
    1486:	11 e0       	ldi	r17, 0x01	; 1
// There are several commands that look for either OK or ERROR; let's abstract
//  support for those commands to one single private function, to save memory.
BLEMate2::opResult BLEMate2::stdCmd(String command)
{
  String buffer;
  String EOL = String("\n\r");
    1488:	ce 01       	movw	r24, r28
    148a:	07 96       	adiw	r24, 0x07	; 7
    148c:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
      if (buffer.startsWith("ER")) return MODULE_ERROR;
      if (buffer.startsWith("OK")) return SUCCESS;
      buffer = "";
    }    
  }
  return TIMEOUT_ERROR;
    1490:	ce 01       	movw	r24, r28
    1492:	0d 96       	adiw	r24, 0x0d	; 13
    1494:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
}
    1498:	81 2f       	mov	r24, r17
    149a:	62 96       	adiw	r28, 0x12	; 18
    149c:	0f b6       	in	r0, 0x3f	; 63
    149e:	f8 94       	cli
    14a0:	de bf       	out	0x3e, r29	; 62
    14a2:	0f be       	out	0x3f, r0	; 63
    14a4:	cd bf       	out	0x3d, r28	; 61
    14a6:	df 91       	pop	r29
    14a8:	cf 91       	pop	r28
    14aa:	1f 91       	pop	r17
    14ac:	0f 91       	pop	r16
    14ae:	ff 90       	pop	r15
    14b0:	ef 90       	pop	r14
    14b2:	df 90       	pop	r13
    14b4:	cf 90       	pop	r12
    14b6:	bf 90       	pop	r11
    14b8:	08 95       	ret

000014ba <_ZN8BLEMate27restoreEv>:

// Issue the "RESTORE" command over the serial port to the BC118. This will
//  reset the device to factory default settings, which is a good thing to do
//  once in a while.
BLEMate2::opResult BLEMate2::restore()
{
    14ba:	0f 93       	push	r16
    14bc:	1f 93       	push	r17
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	00 d0       	rcall	.+0      	; 0x14c4 <_ZN8BLEMate27restoreEv+0xa>
    14c4:	00 d0       	rcall	.+0      	; 0x14c6 <_ZN8BLEMate27restoreEv+0xc>
    14c6:	00 d0       	rcall	.+0      	; 0x14c8 <_ZN8BLEMate27restoreEv+0xe>
    14c8:	cd b7       	in	r28, 0x3d	; 61
    14ca:	de b7       	in	r29, 0x3e	; 62
    14cc:	8c 01       	movw	r16, r24
  return stdCmd("RTR");
    14ce:	66 e3       	ldi	r22, 0x36	; 54
    14d0:	71 e0       	ldi	r23, 0x01	; 1
    14d2:	ce 01       	movw	r24, r28
    14d4:	01 96       	adiw	r24, 0x01	; 1
    14d6:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
    14da:	be 01       	movw	r22, r28
    14dc:	6f 5f       	subi	r22, 0xFF	; 255
    14de:	7f 4f       	sbci	r23, 0xFF	; 255
    14e0:	c8 01       	movw	r24, r16
    14e2:	0e 94 9c 09 	call	0x1338	; 0x1338 <_ZN8BLEMate26stdCmdE6String>
    14e6:	18 2f       	mov	r17, r24
    14e8:	ce 01       	movw	r24, r28
    14ea:	01 96       	adiw	r24, 0x01	; 1
    14ec:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
}
    14f0:	81 2f       	mov	r24, r17
    14f2:	26 96       	adiw	r28, 0x06	; 6
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	f8 94       	cli
    14f8:	de bf       	out	0x3e, r29	; 62
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	cd bf       	out	0x3d, r28	; 61
    14fe:	df 91       	pop	r29
    1500:	cf 91       	pop	r28
    1502:	1f 91       	pop	r17
    1504:	0f 91       	pop	r16
    1506:	08 95       	ret

00001508 <_ZN8BLEMate211writeConfigEv>:

// Issue the "WRITE" command over the serial port to the BC118. This will
//  save the current settings to NVM, so they will be applied after a reset
//  or power cycle.
BLEMate2::opResult BLEMate2::writeConfig()
{
    1508:	0f 93       	push	r16
    150a:	1f 93       	push	r17
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
    1510:	00 d0       	rcall	.+0      	; 0x1512 <_ZN8BLEMate211writeConfigEv+0xa>
    1512:	00 d0       	rcall	.+0      	; 0x1514 <_ZN8BLEMate211writeConfigEv+0xc>
    1514:	00 d0       	rcall	.+0      	; 0x1516 <_ZN8BLEMate211writeConfigEv+0xe>
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62
    151a:	8c 01       	movw	r16, r24
  return stdCmd("WRT");
    151c:	6a e3       	ldi	r22, 0x3A	; 58
    151e:	71 e0       	ldi	r23, 0x01	; 1
    1520:	ce 01       	movw	r24, r28
    1522:	01 96       	adiw	r24, 0x01	; 1
    1524:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
    1528:	be 01       	movw	r22, r28
    152a:	6f 5f       	subi	r22, 0xFF	; 255
    152c:	7f 4f       	sbci	r23, 0xFF	; 255
    152e:	c8 01       	movw	r24, r16
    1530:	0e 94 9c 09 	call	0x1338	; 0x1338 <_ZN8BLEMate26stdCmdE6String>
    1534:	18 2f       	mov	r17, r24
    1536:	ce 01       	movw	r24, r28
    1538:	01 96       	adiw	r24, 0x01	; 1
    153a:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
}
    153e:	81 2f       	mov	r24, r17
    1540:	26 96       	adiw	r28, 0x06	; 6
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	f8 94       	cli
    1546:	de bf       	out	0x3e, r29	; 62
    1548:	0f be       	out	0x3f, r0	; 63
    154a:	cd bf       	out	0x3d, r28	; 61
    154c:	df 91       	pop	r29
    154e:	cf 91       	pop	r28
    1550:	1f 91       	pop	r17
    1552:	0f 91       	pop	r16
    1554:	08 95       	ret

00001556 <_ZN8BLEMate25resetEv>:
//    READY
// If there is some sort of error, the module will respond with
//    ERR
// We'll buffer characters until we see an EOL (\n\r), then check the string.
BLEMate2::opResult BLEMate2::reset()
{
    1556:	bf 92       	push	r11
    1558:	cf 92       	push	r12
    155a:	df 92       	push	r13
    155c:	ef 92       	push	r14
    155e:	ff 92       	push	r15
    1560:	0f 93       	push	r16
    1562:	1f 93       	push	r17
    1564:	cf 93       	push	r28
    1566:	df 93       	push	r29
    1568:	cd b7       	in	r28, 0x3d	; 61
    156a:	de b7       	in	r29, 0x3e	; 62
    156c:	62 97       	sbiw	r28, 0x12	; 18
    156e:	0f b6       	in	r0, 0x3f	; 63
    1570:	f8 94       	cli
    1572:	de bf       	out	0x3e, r29	; 62
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	cd bf       	out	0x3d, r28	; 61
    1578:	8c 01       	movw	r16, r24
  String buffer;
    157a:	60 e2       	ldi	r22, 0x20	; 32
    157c:	71 e0       	ldi	r23, 0x01	; 1
    157e:	ce 01       	movw	r24, r28
    1580:	0d 96       	adiw	r24, 0x0d	; 13
    1582:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
  String EOL = String("\n\r");
    1586:	6e e1       	ldi	r22, 0x1E	; 30
    1588:	71 e0       	ldi	r23, 0x01	; 1
    158a:	ce 01       	movw	r24, r28
    158c:	07 96       	adiw	r24, 0x07	; 7
    158e:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
  
  knownStart();
    1592:	c8 01       	movw	r24, r16
    1594:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <_ZN8BLEMate210knownStartEv>
  
  // Now issue the reset command.
  _serialPort->print("RST");
    1598:	6b e6       	ldi	r22, 0x6B	; 107
    159a:	71 e0       	ldi	r23, 0x01	; 1
    159c:	d8 01       	movw	r26, r16
    159e:	91 96       	adiw	r26, 0x21	; 33
    15a0:	8d 91       	ld	r24, X+
    15a2:	9c 91       	ld	r25, X
    15a4:	92 97       	sbiw	r26, 0x22	; 34
    15a6:	0e 94 09 03 	call	0x612	; 0x612 <_ZN5Print5printEPKc>
  _serialPort->print("\r");
    15aa:	6f e1       	ldi	r22, 0x1F	; 31
    15ac:	71 e0       	ldi	r23, 0x01	; 1
    15ae:	f8 01       	movw	r30, r16
    15b0:	81 a1       	ldd	r24, Z+33	; 0x21
    15b2:	92 a1       	ldd	r25, Z+34	; 0x22
    15b4:	0e 94 09 03 	call	0x612	; 0x612 <_ZN5Print5printEPKc>
  _serialPort->flush();
    15b8:	d8 01       	movw	r26, r16
    15ba:	91 96       	adiw	r26, 0x21	; 33
    15bc:	8d 91       	ld	r24, X+
    15be:	9c 91       	ld	r25, X
    15c0:	92 97       	sbiw	r26, 0x22	; 34
    15c2:	dc 01       	movw	r26, r24
    15c4:	ed 91       	ld	r30, X+
    15c6:	fc 91       	ld	r31, X
    15c8:	02 84       	ldd	r0, Z+10	; 0x0a
    15ca:	f3 85       	ldd	r31, Z+11	; 0x0b
    15cc:	e0 2d       	mov	r30, r0
    15ce:	09 95       	icall
  
  // We're going to use the internal timer to track the elapsed time since we
  //  issued the reset. Bog-standard Arduino stuff.
  unsigned long resetStart = millis();
    15d0:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <millis>
    15d4:	6b 01       	movw	r12, r22
    15d6:	7c 01       	movw	r14, r24
  
  // This is our timeout loop. We'll give the module 6 seconds to reset.
  while ((resetStart + 6000) > millis())
    15d8:	b0 e7       	ldi	r27, 0x70	; 112
    15da:	cb 0e       	add	r12, r27
    15dc:	b7 e1       	ldi	r27, 0x17	; 23
    15de:	db 1e       	adc	r13, r27
    15e0:	e1 1c       	adc	r14, r1
    15e2:	f1 1c       	adc	r15, r1
    15e4:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <millis>
    15e8:	6c 15       	cp	r22, r12
    15ea:	7d 05       	cpc	r23, r13
    15ec:	8e 05       	cpc	r24, r14
    15ee:	9f 05       	cpc	r25, r15
    15f0:	08 f0       	brcs	.+2      	; 0x15f4 <_ZN8BLEMate25resetEv+0x9e>
    15f2:	83 c0       	rjmp	.+262    	; 0x16fa <_ZN8BLEMate25resetEv+0x1a4>
  {
    // Grow the current buffered data, until we receive the EOL string.    
    if (_serialPort->available() > 0) 
    15f4:	f8 01       	movw	r30, r16
    15f6:	81 a1       	ldd	r24, Z+33	; 0x21
    15f8:	92 a1       	ldd	r25, Z+34	; 0x22
    15fa:	dc 01       	movw	r26, r24
    15fc:	ed 91       	ld	r30, X+
    15fe:	fc 91       	ld	r31, X
    1600:	04 80       	ldd	r0, Z+4	; 0x04
    1602:	f5 81       	ldd	r31, Z+5	; 0x05
    1604:	e0 2d       	mov	r30, r0
    1606:	09 95       	icall
    1608:	18 16       	cp	r1, r24
    160a:	19 06       	cpc	r1, r25
    160c:	7c f4       	brge	.+30     	; 0x162c <_ZN8BLEMate25resetEv+0xd6>
    {
      char temp = _serialPort->read();
    160e:	f8 01       	movw	r30, r16
    1610:	81 a1       	ldd	r24, Z+33	; 0x21
    1612:	92 a1       	ldd	r25, Z+34	; 0x22
    1614:	dc 01       	movw	r26, r24
    1616:	ed 91       	ld	r30, X+
    1618:	fc 91       	ld	r31, X
    161a:	06 80       	ldd	r0, Z+6	; 0x06
    161c:	f7 81       	ldd	r31, Z+7	; 0x07
    161e:	e0 2d       	mov	r30, r0
    1620:	09 95       	icall
      buffer.concat(temp);
    1622:	68 2f       	mov	r22, r24
    1624:	ce 01       	movw	r24, r28
    1626:	0d 96       	adiw	r24, 0x0d	; 13
    1628:	0e 94 2b 07 	call	0xe56	; 0xe56 <_ZN6String6concatEc>
    }
    
    if (buffer.endsWith(EOL))
    162c:	be 01       	movw	r22, r28
    162e:	69 5f       	subi	r22, 0xF9	; 249
    1630:	7f 4f       	sbci	r23, 0xFF	; 255
    1632:	ce 01       	movw	r24, r28
    1634:	0d 96       	adiw	r24, 0x0d	; 13
    1636:	0e 94 00 08 	call	0x1000	; 0x1000 <_ZNK6String8endsWithERKS_>
    163a:	88 23       	and	r24, r24
    163c:	99 f2       	breq	.-90     	; 0x15e4 <_ZN8BLEMate25resetEv+0x8e>
    {
      // If ERR or READY, we've finished the reset. Otherwise, just discard
      //  the data and wait for the next EOL.
      if (buffer.startsWith("ER")) return MODULE_ERROR;
    163e:	6a e2       	ldi	r22, 0x2A	; 42
    1640:	71 e0       	ldi	r23, 0x01	; 1
    1642:	ce 01       	movw	r24, r28
    1644:	01 96       	adiw	r24, 0x01	; 1
    1646:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
    164a:	be 01       	movw	r22, r28
    164c:	6f 5f       	subi	r22, 0xFF	; 255
    164e:	7f 4f       	sbci	r23, 0xFF	; 255
    1650:	ce 01       	movw	r24, r28
    1652:	0d 96       	adiw	r24, 0x0d	; 13
    1654:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZNK6String10startsWithERKS_>
    1658:	b8 2e       	mov	r11, r24
    165a:	ce 01       	movw	r24, r28
    165c:	01 96       	adiw	r24, 0x01	; 1
    165e:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
    1662:	b1 10       	cpse	r11, r1
    1664:	4c c0       	rjmp	.+152    	; 0x16fe <_ZN8BLEMate25resetEv+0x1a8>
      if (buffer.startsWith("RE")) 
    1666:	6f e6       	ldi	r22, 0x6F	; 111
    1668:	71 e0       	ldi	r23, 0x01	; 1
    166a:	ce 01       	movw	r24, r28
    166c:	01 96       	adiw	r24, 0x01	; 1
    166e:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
    1672:	be 01       	movw	r22, r28
    1674:	6f 5f       	subi	r22, 0xFF	; 255
    1676:	7f 4f       	sbci	r23, 0xFF	; 255
    1678:	ce 01       	movw	r24, r28
    167a:	0d 96       	adiw	r24, 0x0d	; 13
    167c:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZNK6String10startsWithERKS_>
    1680:	b8 2e       	mov	r11, r24
    1682:	ce 01       	movw	r24, r28
    1684:	01 96       	adiw	r24, 0x01	; 1
    1686:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
    168a:	bb 20       	and	r11, r11
    168c:	79 f1       	breq	.+94     	; 0x16ec <_ZN8BLEMate25resetEv+0x196>
      {
        stdCmd("SCN OFF"); // When we come out of reset, we *could* be
    168e:	62 e7       	ldi	r22, 0x72	; 114
    1690:	71 e0       	ldi	r23, 0x01	; 1
    1692:	ce 01       	movw	r24, r28
    1694:	01 96       	adiw	r24, 0x01	; 1
    1696:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
    169a:	be 01       	movw	r22, r28
    169c:	6f 5f       	subi	r22, 0xFF	; 255
    169e:	7f 4f       	sbci	r23, 0xFF	; 255
    16a0:	c8 01       	movw	r24, r16
    16a2:	0e 94 9c 09 	call	0x1338	; 0x1338 <_ZN8BLEMate26stdCmdE6String>
    16a6:	ce 01       	movw	r24, r28
    16a8:	01 96       	adiw	r24, 0x01	; 1
    16aa:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
                           //  in scan mode. We don't want that; it's too
                           //  random and noisy.
        delay(500);        // Let the scanning noise complete.
    16ae:	64 ef       	ldi	r22, 0xF4	; 244
    16b0:	71 e0       	ldi	r23, 0x01	; 1
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	0e 94 1b 05 	call	0xa36	; 0xa36 <delay>
        while(_serialPort->available())
    16ba:	f8 01       	movw	r30, r16
    16bc:	81 a1       	ldd	r24, Z+33	; 0x21
    16be:	92 a1       	ldd	r25, Z+34	; 0x22
    16c0:	dc 01       	movw	r26, r24
    16c2:	ed 91       	ld	r30, X+
    16c4:	fc 91       	ld	r31, X
    16c6:	04 80       	ldd	r0, Z+4	; 0x04
    16c8:	f5 81       	ldd	r31, Z+5	; 0x05
    16ca:	e0 2d       	mov	r30, r0
    16cc:	09 95       	icall
    16ce:	89 2b       	or	r24, r25
    16d0:	59 f0       	breq	.+22     	; 0x16e8 <_ZN8BLEMate25resetEv+0x192>
        {
          _serialPort->read();
    16d2:	f8 01       	movw	r30, r16
    16d4:	81 a1       	ldd	r24, Z+33	; 0x21
    16d6:	92 a1       	ldd	r25, Z+34	; 0x22
    16d8:	dc 01       	movw	r26, r24
    16da:	ed 91       	ld	r30, X+
    16dc:	fc 91       	ld	r31, X
    16de:	06 80       	ldd	r0, Z+6	; 0x06
    16e0:	f7 81       	ldd	r31, Z+7	; 0x07
    16e2:	e0 2d       	mov	r30, r0
    16e4:	09 95       	icall
    16e6:	e9 cf       	rjmp	.-46     	; 0x16ba <_ZN8BLEMate25resetEv+0x164>
        } 
        return SUCCESS;
    16e8:	11 e0       	ldi	r17, 0x01	; 1
    16ea:	0a c0       	rjmp	.+20     	; 0x1700 <_ZN8BLEMate25resetEv+0x1aa>
      }
      buffer = "";
    16ec:	60 e2       	ldi	r22, 0x20	; 32
    16ee:	71 e0       	ldi	r23, 0x01	; 1
    16f0:	ce 01       	movw	r24, r28
    16f2:	0d 96       	adiw	r24, 0x0d	; 13
    16f4:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZN6StringaSEPKc>
    16f8:	75 cf       	rjmp	.-278    	; 0x15e4 <_ZN8BLEMate25resetEv+0x8e>
    }    
  }
  return TIMEOUT_ERROR;
    16fa:	1e ef       	ldi	r17, 0xFE	; 254
    16fc:	01 c0       	rjmp	.+2      	; 0x1700 <_ZN8BLEMate25resetEv+0x1aa>
    
    if (buffer.endsWith(EOL))
    {
      // If ERR or READY, we've finished the reset. Otherwise, just discard
      //  the data and wait for the next EOL.
      if (buffer.startsWith("ER")) return MODULE_ERROR;
    16fe:	1f ef       	ldi	r17, 0xFF	; 255
//    ERR
// We'll buffer characters until we see an EOL (\n\r), then check the string.
BLEMate2::opResult BLEMate2::reset()
{
  String buffer;
  String EOL = String("\n\r");
    1700:	ce 01       	movw	r24, r28
    1702:	07 96       	adiw	r24, 0x07	; 7
    1704:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
        return SUCCESS;
      }
      buffer = "";
    }    
  }
  return TIMEOUT_ERROR;
    1708:	ce 01       	movw	r24, r28
    170a:	0d 96       	adiw	r24, 0x0d	; 13
    170c:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
}
    1710:	81 2f       	mov	r24, r17
    1712:	62 96       	adiw	r28, 0x12	; 18
    1714:	0f b6       	in	r0, 0x3f	; 63
    1716:	f8 94       	cli
    1718:	de bf       	out	0x3e, r29	; 62
    171a:	0f be       	out	0x3f, r0	; 63
    171c:	cd bf       	out	0x3d, r28	; 61
    171e:	df 91       	pop	r29
    1720:	cf 91       	pop	r28
    1722:	1f 91       	pop	r17
    1724:	0f 91       	pop	r16
    1726:	ff 90       	pop	r15
    1728:	ef 90       	pop	r14
    172a:	df 90       	pop	r13
    172c:	cf 90       	pop	r12
    172e:	bf 90       	pop	r11
    1730:	08 95       	ret

00001732 <_ZN8BLEMate29amCentralERb>:
//  device; that's important information, so we should be able to query
//  the module regarding that. We're not going to store that info, however, 
//  since the whole point is to get it "from the horse's mouth" rather than
//  trusting that our software is in sync with the state of the module.
BLEMate2::opResult BLEMate2::amCentral(boolean &inCentralMode)
{
    1732:	8f 92       	push	r8
    1734:	9f 92       	push	r9
    1736:	af 92       	push	r10
    1738:	bf 92       	push	r11
    173a:	cf 92       	push	r12
    173c:	df 92       	push	r13
    173e:	ef 92       	push	r14
    1740:	ff 92       	push	r15
    1742:	0f 93       	push	r16
    1744:	1f 93       	push	r17
    1746:	cf 93       	push	r28
    1748:	df 93       	push	r29
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
    174e:	62 97       	sbiw	r28, 0x12	; 18
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	f8 94       	cli
    1754:	de bf       	out	0x3e, r29	; 62
    1756:	0f be       	out	0x3f, r0	; 63
    1758:	cd bf       	out	0x3d, r28	; 61
    175a:	8c 01       	movw	r16, r24
    175c:	5b 01       	movw	r10, r22
  String buffer;
    175e:	60 e2       	ldi	r22, 0x20	; 32
    1760:	71 e0       	ldi	r23, 0x01	; 1
    1762:	ce 01       	movw	r24, r28
    1764:	0d 96       	adiw	r24, 0x0d	; 13
    1766:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
  String EOL = String("\n\r");
    176a:	6e e1       	ldi	r22, 0x1E	; 30
    176c:	71 e0       	ldi	r23, 0x01	; 1
    176e:	ce 01       	movw	r24, r28
    1770:	07 96       	adiw	r24, 0x07	; 7
    1772:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
  
  knownStart(); // Clear the serial buffer in the module and the Arduino.
    1776:	c8 01       	movw	r24, r16
    1778:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <_ZN8BLEMate210knownStartEv>
  
  _serialPort->print("STS\r");
    177c:	6a e7       	ldi	r22, 0x7A	; 122
    177e:	71 e0       	ldi	r23, 0x01	; 1
    1780:	d8 01       	movw	r26, r16
    1782:	91 96       	adiw	r26, 0x21	; 33
    1784:	8d 91       	ld	r24, X+
    1786:	9c 91       	ld	r25, X
    1788:	92 97       	sbiw	r26, 0x22	; 34
    178a:	0e 94 09 03 	call	0x612	; 0x612 <_ZN5Print5printEPKc>
  _serialPort->flush();
    178e:	f8 01       	movw	r30, r16
    1790:	81 a1       	ldd	r24, Z+33	; 0x21
    1792:	92 a1       	ldd	r25, Z+34	; 0x22
    1794:	dc 01       	movw	r26, r24
    1796:	ed 91       	ld	r30, X+
    1798:	fc 91       	ld	r31, X
    179a:	02 84       	ldd	r0, Z+10	; 0x0a
    179c:	f3 85       	ldd	r31, Z+11	; 0x0b
    179e:	e0 2d       	mov	r30, r0
    17a0:	09 95       	icall
  
  // We're going to use the internal timer to track the elapsed time since we
  //  issued the command. Bog-standard Arduino stuff.
  unsigned long startTime = millis();
    17a2:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <millis>
    17a6:	6b 01       	movw	r12, r22
    17a8:	7c 01       	movw	r14, r24
    
  // This is our timeout loop. We'll give the module 3 seconds.
  while ((startTime + 3000) > millis())
    17aa:	b8 eb       	ldi	r27, 0xB8	; 184
    17ac:	cb 0e       	add	r12, r27
    17ae:	bb e0       	ldi	r27, 0x0B	; 11
    17b0:	db 1e       	adc	r13, r27
    17b2:	e1 1c       	adc	r14, r1
    17b4:	f1 1c       	adc	r15, r1
      }
      else if (buffer.startsWith("STS")) 
      {
        if (buffer.charAt(4) == 'C')
        {
          inCentralMode = true;
    17b6:	99 24       	eor	r9, r9
    17b8:	93 94       	inc	r9
  // We're going to use the internal timer to track the elapsed time since we
  //  issued the command. Bog-standard Arduino stuff.
  unsigned long startTime = millis();
    
  // This is our timeout loop. We'll give the module 3 seconds.
  while ((startTime + 3000) > millis())
    17ba:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <millis>
    17be:	6c 15       	cp	r22, r12
    17c0:	7d 05       	cpc	r23, r13
    17c2:	8e 05       	cpc	r24, r14
    17c4:	9f 05       	cpc	r25, r15
    17c6:	08 f0       	brcs	.+2      	; 0x17ca <_ZN8BLEMate29amCentralERb+0x98>
    17c8:	75 c0       	rjmp	.+234    	; 0x18b4 <_ZN8BLEMate29amCentralERb+0x182>
  {
    // Grow the current buffered data, until we receive the EOL string.    
    if (_serialPort->available() > 0) 
    17ca:	f8 01       	movw	r30, r16
    17cc:	81 a1       	ldd	r24, Z+33	; 0x21
    17ce:	92 a1       	ldd	r25, Z+34	; 0x22
    17d0:	dc 01       	movw	r26, r24
    17d2:	ed 91       	ld	r30, X+
    17d4:	fc 91       	ld	r31, X
    17d6:	04 80       	ldd	r0, Z+4	; 0x04
    17d8:	f5 81       	ldd	r31, Z+5	; 0x05
    17da:	e0 2d       	mov	r30, r0
    17dc:	09 95       	icall
    17de:	18 16       	cp	r1, r24
    17e0:	19 06       	cpc	r1, r25
    17e2:	7c f4       	brge	.+30     	; 0x1802 <_ZN8BLEMate29amCentralERb+0xd0>
    {
      buffer.concat(char(_serialPort->read()));
    17e4:	f8 01       	movw	r30, r16
    17e6:	81 a1       	ldd	r24, Z+33	; 0x21
    17e8:	92 a1       	ldd	r25, Z+34	; 0x22
    17ea:	dc 01       	movw	r26, r24
    17ec:	ed 91       	ld	r30, X+
    17ee:	fc 91       	ld	r31, X
    17f0:	06 80       	ldd	r0, Z+6	; 0x06
    17f2:	f7 81       	ldd	r31, Z+7	; 0x07
    17f4:	e0 2d       	mov	r30, r0
    17f6:	09 95       	icall
    17f8:	68 2f       	mov	r22, r24
    17fa:	ce 01       	movw	r24, r28
    17fc:	0d 96       	adiw	r24, 0x0d	; 13
    17fe:	0e 94 2b 07 	call	0xe56	; 0xe56 <_ZN6String6concatEc>
    }
    if (buffer.endsWith(EOL))
    1802:	be 01       	movw	r22, r28
    1804:	69 5f       	subi	r22, 0xF9	; 249
    1806:	7f 4f       	sbci	r23, 0xFF	; 255
    1808:	ce 01       	movw	r24, r28
    180a:	0d 96       	adiw	r24, 0x0d	; 13
    180c:	0e 94 00 08 	call	0x1000	; 0x1000 <_ZNK6String8endsWithERKS_>
    1810:	88 23       	and	r24, r24
    1812:	99 f2       	breq	.-90     	; 0x17ba <_ZN8BLEMate29amCentralERb+0x88>
    {
      if (buffer.startsWith("ER")) 
    1814:	6a e2       	ldi	r22, 0x2A	; 42
    1816:	71 e0       	ldi	r23, 0x01	; 1
    1818:	ce 01       	movw	r24, r28
    181a:	01 96       	adiw	r24, 0x01	; 1
    181c:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
    1820:	be 01       	movw	r22, r28
    1822:	6f 5f       	subi	r22, 0xFF	; 255
    1824:	7f 4f       	sbci	r23, 0xFF	; 255
    1826:	ce 01       	movw	r24, r28
    1828:	0d 96       	adiw	r24, 0x0d	; 13
    182a:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZNK6String10startsWithERKS_>
    182e:	88 2e       	mov	r8, r24
    1830:	ce 01       	movw	r24, r28
    1832:	01 96       	adiw	r24, 0x01	; 1
    1834:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
    1838:	81 10       	cpse	r8, r1
    183a:	3e c0       	rjmp	.+124    	; 0x18b8 <_ZN8BLEMate29amCentralERb+0x186>
      {
        return MODULE_ERROR;
      }
      else if (buffer.startsWith("OK")) 
    183c:	63 e3       	ldi	r22, 0x33	; 51
    183e:	71 e0       	ldi	r23, 0x01	; 1
    1840:	ce 01       	movw	r24, r28
    1842:	01 96       	adiw	r24, 0x01	; 1
    1844:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
    1848:	be 01       	movw	r22, r28
    184a:	6f 5f       	subi	r22, 0xFF	; 255
    184c:	7f 4f       	sbci	r23, 0xFF	; 255
    184e:	ce 01       	movw	r24, r28
    1850:	0d 96       	adiw	r24, 0x0d	; 13
    1852:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZNK6String10startsWithERKS_>
    1856:	88 2e       	mov	r8, r24
    1858:	ce 01       	movw	r24, r28
    185a:	01 96       	adiw	r24, 0x01	; 1
    185c:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
    1860:	81 10       	cpse	r8, r1
    1862:	2c c0       	rjmp	.+88     	; 0x18bc <_ZN8BLEMate29amCentralERb+0x18a>
      {
        return SUCCESS;
      }
      else if (buffer.startsWith("STS")) 
    1864:	6f e7       	ldi	r22, 0x7F	; 127
    1866:	71 e0       	ldi	r23, 0x01	; 1
    1868:	ce 01       	movw	r24, r28
    186a:	01 96       	adiw	r24, 0x01	; 1
    186c:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
    1870:	be 01       	movw	r22, r28
    1872:	6f 5f       	subi	r22, 0xFF	; 255
    1874:	7f 4f       	sbci	r23, 0xFF	; 255
    1876:	ce 01       	movw	r24, r28
    1878:	0d 96       	adiw	r24, 0x0d	; 13
    187a:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_ZNK6String10startsWithERKS_>
    187e:	88 2e       	mov	r8, r24
    1880:	ce 01       	movw	r24, r28
    1882:	01 96       	adiw	r24, 0x01	; 1
    1884:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
    1888:	88 20       	and	r8, r8
    188a:	69 f0       	breq	.+26     	; 0x18a6 <_ZN8BLEMate29amCentralERb+0x174>
      {
        if (buffer.charAt(4) == 'C')
    188c:	64 e0       	ldi	r22, 0x04	; 4
    188e:	70 e0       	ldi	r23, 0x00	; 0
    1890:	ce 01       	movw	r24, r28
    1892:	0d 96       	adiw	r24, 0x0d	; 13
    1894:	0e 94 32 08 	call	0x1064	; 0x1064 <_ZNK6String6charAtEj>
    1898:	83 34       	cpi	r24, 0x43	; 67
    189a:	19 f4       	brne	.+6      	; 0x18a2 <_ZN8BLEMate29amCentralERb+0x170>
        {
          inCentralMode = true;
    189c:	f5 01       	movw	r30, r10
    189e:	90 82       	st	Z, r9
    18a0:	02 c0       	rjmp	.+4      	; 0x18a6 <_ZN8BLEMate29amCentralERb+0x174>
        }
        else
        {
          inCentralMode = false;
    18a2:	d5 01       	movw	r26, r10
    18a4:	1c 92       	st	X, r1
        }
      } 
      buffer = "";
    18a6:	60 e2       	ldi	r22, 0x20	; 32
    18a8:	71 e0       	ldi	r23, 0x01	; 1
    18aa:	ce 01       	movw	r24, r28
    18ac:	0d 96       	adiw	r24, 0x0d	; 13
    18ae:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZN6StringaSEPKc>
    18b2:	83 cf       	rjmp	.-250    	; 0x17ba <_ZN8BLEMate29amCentralERb+0x88>
    }    
  }
  return TIMEOUT_ERROR;
    18b4:	1e ef       	ldi	r17, 0xFE	; 254
    18b6:	03 c0       	rjmp	.+6      	; 0x18be <_ZN8BLEMate29amCentralERb+0x18c>
    }
    if (buffer.endsWith(EOL))
    {
      if (buffer.startsWith("ER")) 
      {
        return MODULE_ERROR;
    18b8:	1f ef       	ldi	r17, 0xFF	; 255
    18ba:	01 c0       	rjmp	.+2      	; 0x18be <_ZN8BLEMate29amCentralERb+0x18c>
      }
      else if (buffer.startsWith("OK")) 
      {
        return SUCCESS;
    18bc:	11 e0       	ldi	r17, 0x01	; 1
//  since the whole point is to get it "from the horse's mouth" rather than
//  trusting that our software is in sync with the state of the module.
BLEMate2::opResult BLEMate2::amCentral(boolean &inCentralMode)
{
  String buffer;
  String EOL = String("\n\r");
    18be:	ce 01       	movw	r24, r28
    18c0:	07 96       	adiw	r24, 0x07	; 7
    18c2:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
        }
      } 
      buffer = "";
    }    
  }
  return TIMEOUT_ERROR;
    18c6:	ce 01       	movw	r24, r28
    18c8:	0d 96       	adiw	r24, 0x0d	; 13
    18ca:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
}
    18ce:	81 2f       	mov	r24, r17
    18d0:	62 96       	adiw	r28, 0x12	; 18
    18d2:	0f b6       	in	r0, 0x3f	; 63
    18d4:	f8 94       	cli
    18d6:	de bf       	out	0x3e, r29	; 62
    18d8:	0f be       	out	0x3f, r0	; 63
    18da:	cd bf       	out	0x3d, r28	; 61
    18dc:	df 91       	pop	r29
    18de:	cf 91       	pop	r28
    18e0:	1f 91       	pop	r17
    18e2:	0f 91       	pop	r16
    18e4:	ff 90       	pop	r15
    18e6:	ef 90       	pop	r14
    18e8:	df 90       	pop	r13
    18ea:	cf 90       	pop	r12
    18ec:	bf 90       	pop	r11
    18ee:	af 90       	pop	r10
    18f0:	9f 90       	pop	r9
    18f2:	8f 90       	pop	r8
    18f4:	08 95       	ret

000018f6 <_ZN8BLEMate28sendDataEPch>:
  return result;
}

// Now, byte array.
BLEMate2::opResult BLEMate2::sendData(char *dataBuffer, byte dataLen)
{
    18f6:	8f 92       	push	r8
    18f8:	9f 92       	push	r9
    18fa:	af 92       	push	r10
    18fc:	bf 92       	push	r11
    18fe:	cf 92       	push	r12
    1900:	df 92       	push	r13
    1902:	ef 92       	push	r14
    1904:	ff 92       	push	r15
    1906:	0f 93       	push	r16
    1908:	1f 93       	push	r17
    190a:	cf 93       	push	r28
    190c:	df 93       	push	r29
    190e:	cd b7       	in	r28, 0x3d	; 61
    1910:	de b7       	in	r29, 0x3e	; 62
    1912:	63 97       	sbiw	r28, 0x13	; 19
    1914:	0f b6       	in	r0, 0x3f	; 63
    1916:	f8 94       	cli
    1918:	de bf       	out	0x3e, r29	; 62
    191a:	0f be       	out	0x3f, r0	; 63
    191c:	cd bf       	out	0x3d, r28	; 61
    191e:	8c 01       	movw	r16, r24
    1920:	7b 01       	movw	r14, r22
    1922:	94 2e       	mov	r9, r20
  String EOL = String("\n\r");
    1924:	6e e1       	ldi	r22, 0x1E	; 30
    1926:	71 e0       	ldi	r23, 0x01	; 1
    1928:	ce 01       	movw	r24, r28
    192a:	0d 96       	adiw	r24, 0x0d	; 13
    192c:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
  //  I don't want to burden the user with that, unduly, so I'm going to chop
  //  up their data and send it out in smaller blocks.
   
  // Thus, the first quetion is: am I in central mode, or not?
  boolean inCentralMode;
  amCentral(inCentralMode);
    1930:	be 01       	movw	r22, r28
    1932:	6d 5e       	subi	r22, 0xED	; 237
    1934:	7f 4f       	sbci	r23, 0xFF	; 255
    1936:	c8 01       	movw	r24, r16
    1938:	0e 94 99 0b 	call	0x1732	; 0x1732 <_ZN8BLEMate29amCentralERb>
  // What we're now going to do is to build a String object with our buffer
  //  contents and then hit send on that buffer when it reaches a the length
  //  limited by the mode.

  byte outBufLenLimit = 20;
  if (!inCentralMode)
    193c:	8b 89       	ldd	r24, Y+19	; 0x13
    193e:	88 23       	and	r24, r24
    1940:	19 f0       	breq	.+6      	; 0x1948 <_ZN8BLEMate28sendDataEPch+0x52>

  // What we're now going to do is to build a String object with our buffer
  //  contents and then hit send on that buffer when it reaches a the length
  //  limited by the mode.

  byte outBufLenLimit = 20;
    1942:	94 e1       	ldi	r25, 0x14	; 20
    1944:	c9 2e       	mov	r12, r25
    1946:	02 c0       	rjmp	.+4      	; 0x194c <_ZN8BLEMate28sendDataEPch+0x56>
  if (!inCentralMode)
  {
    outBufLenLimit = 125;
    1948:	8d e7       	ldi	r24, 0x7D	; 125
    194a:	c8 2e       	mov	r12, r24
    }
    dataLeft -= outBufLenLimit;
    String outBuf;
    while (outBufLen < outBufLenLimit)
    {
      outBuf.concat(dataBuffer[inBufPtr++]);
    194c:	b9 2c       	mov	r11, r9
    194e:	aa 24       	eor	r10, r10
    1950:	a3 94       	inc	r10
    1952:	d1 2c       	mov	r13, r1
  byte inBufPtr = 0;
  byte outBufLen = 0;
  byte dataLeft = dataLen;

  opResult result = SUCCESS;
  while (inBufPtr < dataLen)
    1954:	d9 14       	cp	r13, r9
    1956:	08 f0       	brcs	.+2      	; 0x195a <_ZN8BLEMate28sendDataEPch+0x64>
    1958:	4c c0       	rjmp	.+152    	; 0x19f2 <_ZN8BLEMate28sendDataEPch+0xfc>
    195a:	bc 14       	cp	r11, r12
    195c:	08 f4       	brcc	.+2      	; 0x1960 <_ZN8BLEMate28sendDataEPch+0x6a>
    195e:	cb 2c       	mov	r12, r11
  {
    if (dataLeft < outBufLenLimit)
    {
      outBufLenLimit = dataLeft;
    }
    dataLeft -= outBufLenLimit;
    1960:	bc 18       	sub	r11, r12
    String outBuf;
    1962:	60 e2       	ldi	r22, 0x20	; 32
    1964:	71 e0       	ldi	r23, 0x01	; 1
    1966:	ce 01       	movw	r24, r28
    1968:	07 96       	adiw	r24, 0x07	; 7
    196a:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
    196e:	ac 2c       	mov	r10, r12
    1970:	ad 0c       	add	r10, r13
    while (outBufLen < outBufLenLimit)
    1972:	da 14       	cp	r13, r10
    1974:	69 f0       	breq	.+26     	; 0x1990 <_ZN8BLEMate28sendDataEPch+0x9a>
    {
      outBuf.concat(dataBuffer[inBufPtr++]);
    1976:	88 24       	eor	r8, r8
    1978:	83 94       	inc	r8
    197a:	8d 0c       	add	r8, r13
    197c:	f7 01       	movw	r30, r14
    197e:	ed 0d       	add	r30, r13
    1980:	f1 1d       	adc	r31, r1
    1982:	60 81       	ld	r22, Z
    1984:	ce 01       	movw	r24, r28
    1986:	07 96       	adiw	r24, 0x07	; 7
    1988:	0e 94 2b 07 	call	0xe56	; 0xe56 <_ZN6String6concatEc>
    198c:	d8 2c       	mov	r13, r8
    198e:	f1 cf       	rjmp	.-30     	; 0x1972 <_ZN8BLEMate28sendDataEPch+0x7c>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1990:	63 e8       	ldi	r22, 0x83	; 131
    1992:	71 e0       	ldi	r23, 0x01	; 1
    1994:	ce 01       	movw	r24, r28
    1996:	01 96       	adiw	r24, 0x01	; 1
    1998:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
      outBufLen++;
    }
    outBuf = "SND " + outBuf + "\r";
    199c:	be 01       	movw	r22, r28
    199e:	69 5f       	subi	r22, 0xF9	; 249
    19a0:	7f 4f       	sbci	r23, 0xFF	; 255
    19a2:	ce 01       	movw	r24, r28
    19a4:	01 96       	adiw	r24, 0x01	; 1
    19a6:	0e 94 3e 07 	call	0xe7c	; 0xe7c <_ZplRK15StringSumHelperRK6String>
    19aa:	6f e1       	ldi	r22, 0x1F	; 31
    19ac:	71 e0       	ldi	r23, 0x01	; 1
    19ae:	0e 94 51 07 	call	0xea2	; 0xea2 <_ZplRK15StringSumHelperPKc>
    19b2:	bc 01       	movw	r22, r24
    19b4:	ce 01       	movw	r24, r28
    19b6:	07 96       	adiw	r24, 0x07	; 7
    19b8:	0e 94 b7 06 	call	0xd6e	; 0xd6e <_ZN6StringaSERKS_>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    19bc:	ce 01       	movw	r24, r28
    19be:	01 96       	adiw	r24, 0x01	; 1
    19c0:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
    result = stdCmd(outBuf);
    19c4:	be 01       	movw	r22, r28
    19c6:	69 5f       	subi	r22, 0xF9	; 249
    19c8:	7f 4f       	sbci	r23, 0xFF	; 255
    19ca:	ce 01       	movw	r24, r28
    19cc:	01 96       	adiw	r24, 0x01	; 1
    19ce:	0e 94 ce 06 	call	0xd9c	; 0xd9c <_ZN6StringC1ERKS_>
    19d2:	be 01       	movw	r22, r28
    19d4:	6f 5f       	subi	r22, 0xFF	; 255
    19d6:	7f 4f       	sbci	r23, 0xFF	; 255
    19d8:	c8 01       	movw	r24, r16
    19da:	0e 94 9c 09 	call	0x1338	; 0x1338 <_ZN8BLEMate26stdCmdE6String>
    19de:	a8 2e       	mov	r10, r24
    19e0:	ce 01       	movw	r24, r28
    19e2:	01 96       	adiw	r24, 0x01	; 1
    19e4:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
    outBufLen = 0;
  }
    19e8:	ce 01       	movw	r24, r28
    19ea:	07 96       	adiw	r24, 0x07	; 7
    19ec:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
    19f0:	b1 cf       	rjmp	.-158    	; 0x1954 <_ZN8BLEMate28sendDataEPch+0x5e>
  return result;
    19f2:	ce 01       	movw	r24, r28
    19f4:	0d 96       	adiw	r24, 0x0d	; 13
    19f6:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
}
    19fa:	8a 2d       	mov	r24, r10
    19fc:	63 96       	adiw	r28, 0x13	; 19
    19fe:	0f b6       	in	r0, 0x3f	; 63
    1a00:	f8 94       	cli
    1a02:	de bf       	out	0x3e, r29	; 62
    1a04:	0f be       	out	0x3f, r0	; 63
    1a06:	cd bf       	out	0x3d, r28	; 61
    1a08:	df 91       	pop	r29
    1a0a:	cf 91       	pop	r28
    1a0c:	1f 91       	pop	r17
    1a0e:	0f 91       	pop	r16
    1a10:	ff 90       	pop	r15
    1a12:	ef 90       	pop	r14
    1a14:	df 90       	pop	r13
    1a16:	cf 90       	pop	r12
    1a18:	bf 90       	pop	r11
    1a1a:	af 90       	pop	r10
    1a1c:	9f 90       	pop	r9
    1a1e:	8f 90       	pop	r8
    1a20:	08 95       	ret

00001a22 <_ZN8BLEMate28sendDataER6String>:
  String newBuffer = dataBuffer;
  return sendData(newBuffer);
}

BLEMate2::opResult BLEMate2::sendData(String &dataBuffer)
{
    1a22:	cf 92       	push	r12
    1a24:	df 92       	push	r13
    1a26:	ef 92       	push	r14
    1a28:	ff 92       	push	r15
    1a2a:	0f 93       	push	r16
    1a2c:	1f 93       	push	r17
    1a2e:	cf 93       	push	r28
    1a30:	df 93       	push	r29
    1a32:	6c 01       	movw	r12, r24
    1a34:	7b 01       	movw	r14, r22
  // First, we'll need to figure out the length of the string.
  int bufLength = dataBuffer.length()+1;
    1a36:	fb 01       	movw	r30, r22
    1a38:	c4 81       	ldd	r28, Z+4	; 0x04
    1a3a:	d5 81       	ldd	r29, Z+5	; 0x05
    1a3c:	21 96       	adiw	r28, 0x01	; 1

  // Now dynamically allocate an array of the appropriate size.
  char *charArray = new char [bufLength];
    1a3e:	ce 01       	movw	r24, r28
    1a40:	0e 94 b9 02 	call	0x572	; 0x572 <_Znaj>
    1a44:	8c 01       	movw	r16, r24
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	ae 01       	movw	r20, r28
    1a4c:	bc 01       	movw	r22, r24
    1a4e:	c7 01       	movw	r24, r14
    1a50:	0e 94 34 08 	call	0x1068	; 0x1068 <_ZNK6String8getBytesEPhjj>

  // Copy over the data.
  dataBuffer.toCharArray(charArray, bufLength);

  // Call the byte array function
  opResult result = sendData(charArray, bufLength);
    1a54:	4c 2f       	mov	r20, r28
    1a56:	b8 01       	movw	r22, r16
    1a58:	c6 01       	movw	r24, r12
    1a5a:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <_ZN8BLEMate28sendDataEPch>
    1a5e:	c8 2f       	mov	r28, r24

  // de-allocate the memory.
  delete charArray;
    1a60:	c8 01       	movw	r24, r16
    1a62:	0e 94 bb 02 	call	0x576	; 0x576 <_ZdlPv>

  return result;
}
    1a66:	8c 2f       	mov	r24, r28
    1a68:	df 91       	pop	r29
    1a6a:	cf 91       	pop	r28
    1a6c:	1f 91       	pop	r17
    1a6e:	0f 91       	pop	r16
    1a70:	ff 90       	pop	r15
    1a72:	ef 90       	pop	r14
    1a74:	df 90       	pop	r13
    1a76:	cf 90       	pop	r12
    1a78:	08 95       	ret

00001a7a <setup_leds>:
unsigned long timer_top_arrow;
unsigned long timer_right_arrow;
unsigned long timer_status_led;

void setup_leds()
{
    1a7a:	cf 93       	push	r28
    1a7c:	c2 e0       	ldi	r28, 0x02	; 2
    for (int i = 2; i < 12; i++) {
        pinMode(i, OUTPUT);
    1a7e:	61 e0       	ldi	r22, 0x01	; 1
    1a80:	8c 2f       	mov	r24, r28
    1a82:	0e 94 c4 05 	call	0xb88	; 0xb88 <pinMode>
    1a86:	cf 5f       	subi	r28, 0xFF	; 255
unsigned long timer_right_arrow;
unsigned long timer_status_led;

void setup_leds()
{
    for (int i = 2; i < 12; i++) {
    1a88:	cc 30       	cpi	r28, 0x0C	; 12
    1a8a:	c9 f7       	brne	.-14     	; 0x1a7e <setup_leds+0x4>
    1a8c:	c2 e0       	ldi	r28, 0x02	; 2
        pinMode(i, OUTPUT);
    }
    for (int i = 2; i < 12; i++) {
        digitalWrite(i, HIGH);
    1a8e:	61 e0       	ldi	r22, 0x01	; 1
    1a90:	8c 2f       	mov	r24, r28
    1a92:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
        delay(20);
    1a96:	64 e1       	ldi	r22, 0x14	; 20
    1a98:	70 e0       	ldi	r23, 0x00	; 0
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	0e 94 1b 05 	call	0xa36	; 0xa36 <delay>
        digitalWrite(i, LOW);
    1aa2:	60 e0       	ldi	r22, 0x00	; 0
    1aa4:	8c 2f       	mov	r24, r28
    1aa6:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
    1aaa:	cf 5f       	subi	r28, 0xFF	; 255
void setup_leds()
{
    for (int i = 2; i < 12; i++) {
        pinMode(i, OUTPUT);
    }
    for (int i = 2; i < 12; i++) {
    1aac:	cc 30       	cpi	r28, 0x0C	; 12
    1aae:	79 f7       	brne	.-34     	; 0x1a8e <setup_leds+0x14>
        digitalWrite(i, HIGH);
        delay(20);
        digitalWrite(i, LOW);
    }
}
    1ab0:	cf 91       	pop	r28
    1ab2:	08 95       	ret

00001ab4 <blink_left_arrow>:

void blink_left_arrow ()
{
    1ab4:	0f 93       	push	r16
    1ab6:	1f 93       	push	r17
    if (!left_arrow_on && (millis() - timer_left_arrow > 500)) {
    1ab8:	80 91 45 04 	lds	r24, 0x0445
    1abc:	81 11       	cpse	r24, r1
    1abe:	2c c0       	rjmp	.+88     	; 0x1b18 <blink_left_arrow+0x64>
    1ac0:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <millis>
    1ac4:	00 91 5e 04 	lds	r16, 0x045E
    1ac8:	10 91 5f 04 	lds	r17, 0x045F
    1acc:	20 91 60 04 	lds	r18, 0x0460
    1ad0:	30 91 61 04 	lds	r19, 0x0461
    1ad4:	60 1b       	sub	r22, r16
    1ad6:	71 0b       	sbc	r23, r17
    1ad8:	82 0b       	sbc	r24, r18
    1ada:	93 0b       	sbc	r25, r19
    1adc:	65 3f       	cpi	r22, 0xF5	; 245
    1ade:	71 40       	sbci	r23, 0x01	; 1
    1ae0:	81 05       	cpc	r24, r1
    1ae2:	91 05       	cpc	r25, r1
    1ae4:	c8 f0       	brcs	.+50     	; 0x1b18 <blink_left_arrow+0x64>
            digitalWrite(7, HIGH);
    1ae6:	61 e0       	ldi	r22, 0x01	; 1
    1ae8:	87 e0       	ldi	r24, 0x07	; 7
    1aea:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
            digitalWrite(3, HIGH);
    1aee:	61 e0       	ldi	r22, 0x01	; 1
    1af0:	83 e0       	ldi	r24, 0x03	; 3
    1af2:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
            digitalWrite(2, HIGH);
    1af6:	61 e0       	ldi	r22, 0x01	; 1
    1af8:	82 e0       	ldi	r24, 0x02	; 2
    1afa:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
            timer_left_arrow = millis();
    1afe:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <millis>
    1b02:	60 93 5e 04 	sts	0x045E, r22
    1b06:	70 93 5f 04 	sts	0x045F, r23
    1b0a:	80 93 60 04 	sts	0x0460, r24
    1b0e:	90 93 61 04 	sts	0x0461, r25
            left_arrow_on = true;
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	80 93 45 04 	sts	0x0445, r24
    }
    if (left_arrow_on && (millis() - timer_left_arrow > 500)) {
    1b18:	80 91 45 04 	lds	r24, 0x0445
    1b1c:	88 23       	and	r24, r24
    1b1e:	59 f1       	breq	.+86     	; 0x1b76 <blink_left_arrow+0xc2>
    1b20:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <millis>
    1b24:	00 91 5e 04 	lds	r16, 0x045E
    1b28:	10 91 5f 04 	lds	r17, 0x045F
    1b2c:	20 91 60 04 	lds	r18, 0x0460
    1b30:	30 91 61 04 	lds	r19, 0x0461
    1b34:	60 1b       	sub	r22, r16
    1b36:	71 0b       	sbc	r23, r17
    1b38:	82 0b       	sbc	r24, r18
    1b3a:	93 0b       	sbc	r25, r19
    1b3c:	65 3f       	cpi	r22, 0xF5	; 245
    1b3e:	71 40       	sbci	r23, 0x01	; 1
    1b40:	81 05       	cpc	r24, r1
    1b42:	91 05       	cpc	r25, r1
    1b44:	c0 f0       	brcs	.+48     	; 0x1b76 <blink_left_arrow+0xc2>
            digitalWrite(7, LOW);
    1b46:	60 e0       	ldi	r22, 0x00	; 0
    1b48:	87 e0       	ldi	r24, 0x07	; 7
    1b4a:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
            digitalWrite(3, LOW);
    1b4e:	60 e0       	ldi	r22, 0x00	; 0
    1b50:	83 e0       	ldi	r24, 0x03	; 3
    1b52:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
            digitalWrite(2, LOW);
    1b56:	60 e0       	ldi	r22, 0x00	; 0
    1b58:	82 e0       	ldi	r24, 0x02	; 2
    1b5a:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
            timer_left_arrow = millis();
    1b5e:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <millis>
    1b62:	60 93 5e 04 	sts	0x045E, r22
    1b66:	70 93 5f 04 	sts	0x045F, r23
    1b6a:	80 93 60 04 	sts	0x0460, r24
    1b6e:	90 93 61 04 	sts	0x0461, r25
            left_arrow_on = false;
    1b72:	10 92 45 04 	sts	0x0445, r1
    }
}
    1b76:	1f 91       	pop	r17
    1b78:	0f 91       	pop	r16
    1b7a:	08 95       	ret

00001b7c <turn_off_left_arrow>:

void turn_off_left_arrow()
{
    digitalWrite(7, LOW);
    1b7c:	60 e0       	ldi	r22, 0x00	; 0
    1b7e:	87 e0       	ldi	r24, 0x07	; 7
    1b80:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
    digitalWrite(3, LOW);
    1b84:	60 e0       	ldi	r22, 0x00	; 0
    1b86:	83 e0       	ldi	r24, 0x03	; 3
    1b88:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
    digitalWrite(2, LOW);
    1b8c:	60 e0       	ldi	r22, 0x00	; 0
    1b8e:	82 e0       	ldi	r24, 0x02	; 2
    1b90:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
    timer_left_arrow = 0;
    1b94:	10 92 5e 04 	sts	0x045E, r1
    1b98:	10 92 5f 04 	sts	0x045F, r1
    1b9c:	10 92 60 04 	sts	0x0460, r1
    1ba0:	10 92 61 04 	sts	0x0461, r1
    left_arrow_on = false;
    1ba4:	10 92 45 04 	sts	0x0445, r1
    1ba8:	08 95       	ret

00001baa <blink_right_arrow>:
}

void blink_right_arrow ()
{
    1baa:	0f 93       	push	r16
    1bac:	1f 93       	push	r17
    if (!right_arrow_on && (millis() - timer_right_arrow > 500)) {
    1bae:	80 91 44 04 	lds	r24, 0x0444
    1bb2:	81 11       	cpse	r24, r1
    1bb4:	2c c0       	rjmp	.+88     	; 0x1c0e <blink_right_arrow+0x64>
    1bb6:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <millis>
    1bba:	00 91 56 04 	lds	r16, 0x0456
    1bbe:	10 91 57 04 	lds	r17, 0x0457
    1bc2:	20 91 58 04 	lds	r18, 0x0458
    1bc6:	30 91 59 04 	lds	r19, 0x0459
    1bca:	60 1b       	sub	r22, r16
    1bcc:	71 0b       	sbc	r23, r17
    1bce:	82 0b       	sbc	r24, r18
    1bd0:	93 0b       	sbc	r25, r19
    1bd2:	65 3f       	cpi	r22, 0xF5	; 245
    1bd4:	71 40       	sbci	r23, 0x01	; 1
    1bd6:	81 05       	cpc	r24, r1
    1bd8:	91 05       	cpc	r25, r1
    1bda:	c8 f0       	brcs	.+50     	; 0x1c0e <blink_right_arrow+0x64>
        digitalWrite(8, HIGH);
    1bdc:	61 e0       	ldi	r22, 0x01	; 1
    1bde:	88 e0       	ldi	r24, 0x08	; 8
    1be0:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
        digitalWrite(10, HIGH);
    1be4:	61 e0       	ldi	r22, 0x01	; 1
    1be6:	8a e0       	ldi	r24, 0x0A	; 10
    1be8:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
        digitalWrite(5, HIGH);
    1bec:	61 e0       	ldi	r22, 0x01	; 1
    1bee:	85 e0       	ldi	r24, 0x05	; 5
    1bf0:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
        timer_right_arrow = millis();
    1bf4:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <millis>
    1bf8:	60 93 56 04 	sts	0x0456, r22
    1bfc:	70 93 57 04 	sts	0x0457, r23
    1c00:	80 93 58 04 	sts	0x0458, r24
    1c04:	90 93 59 04 	sts	0x0459, r25
        right_arrow_on = true;
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	80 93 44 04 	sts	0x0444, r24
    }
    if (right_arrow_on && (millis() - timer_right_arrow > 500)) {
    1c0e:	80 91 44 04 	lds	r24, 0x0444
    1c12:	88 23       	and	r24, r24
    1c14:	59 f1       	breq	.+86     	; 0x1c6c <blink_right_arrow+0xc2>
    1c16:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <millis>
    1c1a:	00 91 56 04 	lds	r16, 0x0456
    1c1e:	10 91 57 04 	lds	r17, 0x0457
    1c22:	20 91 58 04 	lds	r18, 0x0458
    1c26:	30 91 59 04 	lds	r19, 0x0459
    1c2a:	60 1b       	sub	r22, r16
    1c2c:	71 0b       	sbc	r23, r17
    1c2e:	82 0b       	sbc	r24, r18
    1c30:	93 0b       	sbc	r25, r19
    1c32:	65 3f       	cpi	r22, 0xF5	; 245
    1c34:	71 40       	sbci	r23, 0x01	; 1
    1c36:	81 05       	cpc	r24, r1
    1c38:	91 05       	cpc	r25, r1
    1c3a:	c0 f0       	brcs	.+48     	; 0x1c6c <blink_right_arrow+0xc2>
        digitalWrite(8, LOW);
    1c3c:	60 e0       	ldi	r22, 0x00	; 0
    1c3e:	88 e0       	ldi	r24, 0x08	; 8
    1c40:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
        digitalWrite(10, LOW);
    1c44:	60 e0       	ldi	r22, 0x00	; 0
    1c46:	8a e0       	ldi	r24, 0x0A	; 10
    1c48:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
        digitalWrite(5, LOW);
    1c4c:	60 e0       	ldi	r22, 0x00	; 0
    1c4e:	85 e0       	ldi	r24, 0x05	; 5
    1c50:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
        timer_right_arrow = millis();
    1c54:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <millis>
    1c58:	60 93 56 04 	sts	0x0456, r22
    1c5c:	70 93 57 04 	sts	0x0457, r23
    1c60:	80 93 58 04 	sts	0x0458, r24
    1c64:	90 93 59 04 	sts	0x0459, r25
        right_arrow_on = false;
    1c68:	10 92 44 04 	sts	0x0444, r1
    }
}
    1c6c:	1f 91       	pop	r17
    1c6e:	0f 91       	pop	r16
    1c70:	08 95       	ret

00001c72 <turn_off_right_arrow>:

void turn_off_right_arrow()
{
    digitalWrite(8, LOW);
    1c72:	60 e0       	ldi	r22, 0x00	; 0
    1c74:	88 e0       	ldi	r24, 0x08	; 8
    1c76:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
    digitalWrite(10, LOW);
    1c7a:	60 e0       	ldi	r22, 0x00	; 0
    1c7c:	8a e0       	ldi	r24, 0x0A	; 10
    1c7e:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
    digitalWrite(5, LOW);
    1c82:	60 e0       	ldi	r22, 0x00	; 0
    1c84:	85 e0       	ldi	r24, 0x05	; 5
    1c86:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
    timer_right_arrow = 0;
    1c8a:	10 92 56 04 	sts	0x0456, r1
    1c8e:	10 92 57 04 	sts	0x0457, r1
    1c92:	10 92 58 04 	sts	0x0458, r1
    1c96:	10 92 59 04 	sts	0x0459, r1
    right_arrow_on = false;
    1c9a:	10 92 44 04 	sts	0x0444, r1
    1c9e:	08 95       	ret

00001ca0 <blink_top_arrow>:
}

void blink_top_arrow ()
{
    1ca0:	0f 93       	push	r16
    1ca2:	1f 93       	push	r17
    if (!top_arrow_on && (millis() - timer_top_arrow > 500)) {
    1ca4:	80 91 43 04 	lds	r24, 0x0443
    1ca8:	81 11       	cpse	r24, r1
    1caa:	2c c0       	rjmp	.+88     	; 0x1d04 <blink_top_arrow+0x64>
    1cac:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <millis>
    1cb0:	00 91 5a 04 	lds	r16, 0x045A
    1cb4:	10 91 5b 04 	lds	r17, 0x045B
    1cb8:	20 91 5c 04 	lds	r18, 0x045C
    1cbc:	30 91 5d 04 	lds	r19, 0x045D
    1cc0:	60 1b       	sub	r22, r16
    1cc2:	71 0b       	sbc	r23, r17
    1cc4:	82 0b       	sbc	r24, r18
    1cc6:	93 0b       	sbc	r25, r19
    1cc8:	65 3f       	cpi	r22, 0xF5	; 245
    1cca:	71 40       	sbci	r23, 0x01	; 1
    1ccc:	81 05       	cpc	r24, r1
    1cce:	91 05       	cpc	r25, r1
    1cd0:	c8 f0       	brcs	.+50     	; 0x1d04 <blink_top_arrow+0x64>
        digitalWrite(4, HIGH);
    1cd2:	61 e0       	ldi	r22, 0x01	; 1
    1cd4:	84 e0       	ldi	r24, 0x04	; 4
    1cd6:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
        digitalWrite(9, HIGH);
    1cda:	61 e0       	ldi	r22, 0x01	; 1
    1cdc:	89 e0       	ldi	r24, 0x09	; 9
    1cde:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
        digitalWrite(6, HIGH);
    1ce2:	61 e0       	ldi	r22, 0x01	; 1
    1ce4:	86 e0       	ldi	r24, 0x06	; 6
    1ce6:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
        timer_top_arrow = millis();
    1cea:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <millis>
    1cee:	60 93 5a 04 	sts	0x045A, r22
    1cf2:	70 93 5b 04 	sts	0x045B, r23
    1cf6:	80 93 5c 04 	sts	0x045C, r24
    1cfa:	90 93 5d 04 	sts	0x045D, r25
        top_arrow_on = true;
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	80 93 43 04 	sts	0x0443, r24
    }
    if (top_arrow_on && (millis() - timer_top_arrow > 500)) {
    1d04:	80 91 43 04 	lds	r24, 0x0443
    1d08:	88 23       	and	r24, r24
    1d0a:	59 f1       	breq	.+86     	; 0x1d62 <blink_top_arrow+0xc2>
    1d0c:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <millis>
    1d10:	00 91 5a 04 	lds	r16, 0x045A
    1d14:	10 91 5b 04 	lds	r17, 0x045B
    1d18:	20 91 5c 04 	lds	r18, 0x045C
    1d1c:	30 91 5d 04 	lds	r19, 0x045D
    1d20:	60 1b       	sub	r22, r16
    1d22:	71 0b       	sbc	r23, r17
    1d24:	82 0b       	sbc	r24, r18
    1d26:	93 0b       	sbc	r25, r19
    1d28:	65 3f       	cpi	r22, 0xF5	; 245
    1d2a:	71 40       	sbci	r23, 0x01	; 1
    1d2c:	81 05       	cpc	r24, r1
    1d2e:	91 05       	cpc	r25, r1
    1d30:	c0 f0       	brcs	.+48     	; 0x1d62 <blink_top_arrow+0xc2>
        digitalWrite(4, LOW);
    1d32:	60 e0       	ldi	r22, 0x00	; 0
    1d34:	84 e0       	ldi	r24, 0x04	; 4
    1d36:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
        digitalWrite(9, LOW);
    1d3a:	60 e0       	ldi	r22, 0x00	; 0
    1d3c:	89 e0       	ldi	r24, 0x09	; 9
    1d3e:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
        digitalWrite(6, LOW);
    1d42:	60 e0       	ldi	r22, 0x00	; 0
    1d44:	86 e0       	ldi	r24, 0x06	; 6
    1d46:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
        timer_top_arrow = millis();
    1d4a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <millis>
    1d4e:	60 93 5a 04 	sts	0x045A, r22
    1d52:	70 93 5b 04 	sts	0x045B, r23
    1d56:	80 93 5c 04 	sts	0x045C, r24
    1d5a:	90 93 5d 04 	sts	0x045D, r25
        top_arrow_on = false;
    1d5e:	10 92 43 04 	sts	0x0443, r1
    }
}
    1d62:	1f 91       	pop	r17
    1d64:	0f 91       	pop	r16
    1d66:	08 95       	ret

00001d68 <turn_off_top_arrow>:

void turn_off_top_arrow()
{
    digitalWrite(4, LOW);
    1d68:	60 e0       	ldi	r22, 0x00	; 0
    1d6a:	84 e0       	ldi	r24, 0x04	; 4
    1d6c:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
    digitalWrite(9, LOW);
    1d70:	60 e0       	ldi	r22, 0x00	; 0
    1d72:	89 e0       	ldi	r24, 0x09	; 9
    1d74:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
    digitalWrite(6, LOW);
    1d78:	60 e0       	ldi	r22, 0x00	; 0
    1d7a:	86 e0       	ldi	r24, 0x06	; 6
    1d7c:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
    timer_top_arrow = 0;
    1d80:	10 92 5a 04 	sts	0x045A, r1
    1d84:	10 92 5b 04 	sts	0x045B, r1
    1d88:	10 92 5c 04 	sts	0x045C, r1
    1d8c:	10 92 5d 04 	sts	0x045D, r1
    top_arrow_on = false;
    1d90:	10 92 43 04 	sts	0x0443, r1
    1d94:	08 95       	ret

00001d96 <blink_status_led>:
}

void blink_status_led()
{
    1d96:	0f 93       	push	r16
    1d98:	1f 93       	push	r17

    if (!status_led_on && (millis() - timer_status_led > 500)) {
    1d9a:	80 91 42 04 	lds	r24, 0x0442
    1d9e:	81 11       	cpse	r24, r1
    1da0:	24 c0       	rjmp	.+72     	; 0x1dea <blink_status_led+0x54>
    1da2:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <millis>
    1da6:	00 91 52 04 	lds	r16, 0x0452
    1daa:	10 91 53 04 	lds	r17, 0x0453
    1dae:	20 91 54 04 	lds	r18, 0x0454
    1db2:	30 91 55 04 	lds	r19, 0x0455
    1db6:	60 1b       	sub	r22, r16
    1db8:	71 0b       	sbc	r23, r17
    1dba:	82 0b       	sbc	r24, r18
    1dbc:	93 0b       	sbc	r25, r19
    1dbe:	65 3f       	cpi	r22, 0xF5	; 245
    1dc0:	71 40       	sbci	r23, 0x01	; 1
    1dc2:	81 05       	cpc	r24, r1
    1dc4:	91 05       	cpc	r25, r1
    1dc6:	88 f0       	brcs	.+34     	; 0x1dea <blink_status_led+0x54>
        digitalWrite(11, HIGH);
    1dc8:	61 e0       	ldi	r22, 0x01	; 1
    1dca:	8b e0       	ldi	r24, 0x0B	; 11
    1dcc:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
        timer_status_led = millis();
    1dd0:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <millis>
    1dd4:	60 93 52 04 	sts	0x0452, r22
    1dd8:	70 93 53 04 	sts	0x0453, r23
    1ddc:	80 93 54 04 	sts	0x0454, r24
    1de0:	90 93 55 04 	sts	0x0455, r25
        status_led_on = true;
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	80 93 42 04 	sts	0x0442, r24
    }
    if (status_led_on && (millis() - timer_status_led > 500)) {
    1dea:	80 91 42 04 	lds	r24, 0x0442
    1dee:	88 23       	and	r24, r24
    1df0:	19 f1       	breq	.+70     	; 0x1e38 <blink_status_led+0xa2>
    1df2:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <millis>
    1df6:	00 91 52 04 	lds	r16, 0x0452
    1dfa:	10 91 53 04 	lds	r17, 0x0453
    1dfe:	20 91 54 04 	lds	r18, 0x0454
    1e02:	30 91 55 04 	lds	r19, 0x0455
    1e06:	60 1b       	sub	r22, r16
    1e08:	71 0b       	sbc	r23, r17
    1e0a:	82 0b       	sbc	r24, r18
    1e0c:	93 0b       	sbc	r25, r19
    1e0e:	65 3f       	cpi	r22, 0xF5	; 245
    1e10:	71 40       	sbci	r23, 0x01	; 1
    1e12:	81 05       	cpc	r24, r1
    1e14:	91 05       	cpc	r25, r1
    1e16:	80 f0       	brcs	.+32     	; 0x1e38 <blink_status_led+0xa2>
        digitalWrite(11, LOW);
    1e18:	60 e0       	ldi	r22, 0x00	; 0
    1e1a:	8b e0       	ldi	r24, 0x0B	; 11
    1e1c:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
        timer_status_led = millis();
    1e20:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <millis>
    1e24:	60 93 52 04 	sts	0x0452, r22
    1e28:	70 93 53 04 	sts	0x0453, r23
    1e2c:	80 93 54 04 	sts	0x0454, r24
    1e30:	90 93 55 04 	sts	0x0455, r25
        status_led_on = false;
    1e34:	10 92 42 04 	sts	0x0442, r1
    }
      
}
    1e38:	1f 91       	pop	r17
    1e3a:	0f 91       	pop	r16
    1e3c:	08 95       	ret

00001e3e <turn_off_status_led>:

void turn_off_status_led()
{
    digitalWrite(11, LOW);
    1e3e:	60 e0       	ldi	r22, 0x00	; 0
    1e40:	8b e0       	ldi	r24, 0x0B	; 11
    1e42:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
    timer_status_led = 0;
    1e46:	10 92 52 04 	sts	0x0452, r1
    1e4a:	10 92 53 04 	sts	0x0453, r1
    1e4e:	10 92 54 04 	sts	0x0454, r1
    1e52:	10 92 55 04 	sts	0x0455, r1
    status_led_on = false;
    1e56:	10 92 42 04 	sts	0x0442, r1
    1e5a:	08 95       	ret

00001e5c <initVariant>:
int atexit(void (*func)()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    1e5c:	08 95       	ret

00001e5e <main>:

int main(void)
{
	init();
    1e5e:	0e 94 43 05 	call	0xa86	; 0xa86 <init>

	initVariant();
    1e62:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1e66:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_Z5setupv>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1e6a:	c8 eb       	ldi	r28, 0xB8	; 184
    1e6c:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    1e6e:	0e 94 bb 11 	call	0x2376	; 0x2376 <_Z4loopv>
		if (serialEventRun) serialEventRun();
    1e72:	20 97       	sbiw	r28, 0x00	; 0
    1e74:	e1 f3       	breq	.-8      	; 0x1e6e <main+0x10>
    1e76:	0e 94 b8 00 	call	0x170	; 0x170 <_Z14serialEventRunv>
    1e7a:	f9 cf       	rjmp	.-14     	; 0x1e6e <main+0x10>

00001e7c <_Z41__static_initialization_and_destruction_0ii.part.1>:
    if (status_led_on) {
        blink_status_led();
    } else {
        turn_off_status_led();
    }
    1e7c:	cf 93       	push	r28
    1e7e:	df 93       	push	r29
#ifndef BLEMate2_h
#define BLEMate2_h

#include "../Arduino/Arduino.h"

class BLEMate2
    1e80:	81 e2       	ldi	r24, 0x21	; 33
    1e82:	94 e0       	ldi	r25, 0x04	; 4
    1e84:	89 2b       	or	r24, r25
    1e86:	51 f4       	brne	.+20     	; 0x1e9c <_Z41__static_initialization_and_destruction_0ii.part.1+0x20>
#include "../lib/SparkFun_BLEMate2/SparkFun_BLEMate2.h"
#include <avr/io.h>
#include <util/delay.h>

String inputBuffer;
String sendBuffer;
    1e88:	86 e4       	ldi	r24, 0x46	; 70
    1e8a:	94 e0       	ldi	r25, 0x04	; 4
    1e8c:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
#include "../lib/Arduino/Arduino.h"
#include "../lib/SparkFun_BLEMate2/SparkFun_BLEMate2.h"
#include <avr/io.h>
#include <util/delay.h>

String inputBuffer;
    1e90:	8c e4       	ldi	r24, 0x4C	; 76
    1e92:	94 e0       	ldi	r25, 0x04	; 4
    if (status_led_on) {
        blink_status_led();
    } else {
        turn_off_status_led();
    }
    1e94:	df 91       	pop	r29
    1e96:	cf 91       	pop	r28
#include "../lib/Arduino/Arduino.h"
#include "../lib/SparkFun_BLEMate2/SparkFun_BLEMate2.h"
#include <avr/io.h>
#include <util/delay.h>

String inputBuffer;
    1e98:	0c 94 33 06 	jmp	0xc66	; 0xc66 <_ZN6StringD1Ev>
    1e9c:	cf e3       	ldi	r28, 0x3F	; 63
    1e9e:	d4 e0       	ldi	r29, 0x04	; 4
    1ea0:	26 97       	sbiw	r28, 0x06	; 6
    1ea2:	ce 01       	movw	r24, r28
    1ea4:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
    1ea8:	84 e0       	ldi	r24, 0x04	; 4
    1eaa:	c1 32       	cpi	r28, 0x21	; 33
    1eac:	d8 07       	cpc	r29, r24
    1eae:	c1 f7       	brne	.-16     	; 0x1ea0 <_Z41__static_initialization_and_destruction_0ii.part.1+0x24>
    1eb0:	eb cf       	rjmp	.-42     	; 0x1e88 <_Z41__static_initialization_and_destruction_0ii.part.1+0xc>

00001eb2 <_Z5setupv>:
unsigned long flex_sensor_read_task_last_run = 0;
unsigned long led_blink_task_last_run = 0;


void setup()
{
    1eb2:	ff 92       	push	r15
    1eb4:	0f 93       	push	r16
    1eb6:	1f 93       	push	r17
    1eb8:	cf 93       	push	r28
    1eba:	df 93       	push	r29
    init();
    1ebc:	0e 94 43 05 	call	0xa86	; 0xa86 <init>
    setup_leds();
    1ec0:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <setup_leds>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    1ec4:	26 e0       	ldi	r18, 0x06	; 6
    1ec6:	40 e8       	ldi	r20, 0x80	; 128
    1ec8:	55 e2       	ldi	r21, 0x25	; 37
    1eca:	60 e0       	ldi	r22, 0x00	; 0
    1ecc:	70 e0       	ldi	r23, 0x00	; 0
    1ece:	80 e5       	ldi	r24, 0x50	; 80
    1ed0:	93 e0       	ldi	r25, 0x03	; 3
    1ed2:	0e 94 6e 01 	call	0x2dc	; 0x2dc <_ZN14HardwareSerial5beginEmh>
    
    Serial.begin(9600);           // This is the BC118 default baud rate.

    #ifdef DEBUG
    Serial.println("Serial has started...");
    1ed6:	68 e8       	ldi	r22, 0x88	; 136
    1ed8:	71 e0       	ldi	r23, 0x01	; 1
    1eda:	80 e5       	ldi	r24, 0x50	; 80
    1edc:	93 e0       	ldi	r25, 0x03	; 3
    1ede:	0e 94 38 03 	call	0x670	; 0x670 <_ZN5Print7printlnEPKc>
    1ee2:	ca e0       	ldi	r28, 0x0A	; 10
    1ee4:	d0 e0       	ldi	r29, 0x00	; 0
    //  SUCCESS - What it says.


    boolean firstResetSuccess = false;
    boolean restoreSuccess = false;
    boolean writeConfigSuccess = false;
    1ee6:	f1 2c       	mov	r15, r1
    //                  commands and parameters outside the built-ins.
    //  SUCCESS - What it says.


    boolean firstResetSuccess = false;
    boolean restoreSuccess = false;
    1ee8:	00 e0       	ldi	r16, 0x00	; 0
    //                  This will probably only occur when you attempt to send
    //                  commands and parameters outside the built-ins.
    //  SUCCESS - What it says.


    boolean firstResetSuccess = false;
    1eea:	10 e0       	ldi	r17, 0x00	; 0
        //  the "SCN OFF" command after the reset is completed. Why is this important?
        //  Because if the device is in central mode, it *will* be scanning on reset.
        //  No way to change that. The text traffic generated by the scanning will
        //  interfere with the firmware on the Arduino properly identifying response
        //  strings from the BC118.
        if (BTModu.reset() == BLEMate2::SUCCESS)
    1eec:	8f e1       	ldi	r24, 0x1F	; 31
    1eee:	94 e0       	ldi	r25, 0x04	; 4
    1ef0:	0e 94 ab 0a 	call	0x1556	; 0x1556 <_ZN8BLEMate25resetEv>
    1ef4:	81 30       	cpi	r24, 0x01	; 1
    1ef6:	b1 f4       	brne	.+44     	; 0x1f24 <_Z5setupv+0x72>
        // restore() resets the module to factory defaults; you'll need to perform
        //  a writeConfig() and reset() to make those settings take effect. We don't
        //  do that automatically because there may be things the user wants to
        //  change before committing the settings to non-volatile memory and
        //  resetting.
        if (BTModu.restore() == BLEMate2::SUCCESS)
    1ef8:	8f e1       	ldi	r24, 0x1F	; 31
    1efa:	94 e0       	ldi	r25, 0x04	; 4
    1efc:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <_ZN8BLEMate27restoreEv>
    1f00:	81 30       	cpi	r24, 0x01	; 1
    1f02:	c9 f4       	brne	.+50     	; 0x1f36 <_Z5setupv+0x84>
        }
        // writeConfig() stores the current settings in non-volatile memory, so they
        //  will be in place on the next reboot of the module. Note that some, but
        //  not all, settings changes require a reboot. It's probably in general best
        //  to write/reset when changing anything.
        if (BTModu.writeConfig() == BLEMate2::SUCCESS)
    1f04:	8f e1       	ldi	r24, 0x1F	; 31
    1f06:	94 e0       	ldi	r25, 0x04	; 4
    1f08:	0e 94 84 0a 	call	0x1508	; 0x1508 <_ZN8BLEMate211writeConfigEv>
    1f0c:	81 30       	cpi	r24, 0x01	; 1
    1f0e:	c1 f4       	brne	.+48     	; 0x1f40 <_Z5setupv+0x8e>
        // One more reset, to make the changes take effect.
        // NB!!!!!!!!!!!!! This write/reset thing is *really* important.
        //  The status command (STS) and the LEDs *will* lie to you and tell you that
        //  you are e.g. advertising or in central mode when in fact that is not the
        //  case and the module still needs to be reset before that is actually true.
        if (BTModu.reset() == BLEMate2::SUCCESS)
    1f10:	8f e1       	ldi	r24, 0x1F	; 31
    1f12:	94 e0       	ldi	r25, 0x04	; 4
    1f14:	0e 94 ab 0a 	call	0x1556	; 0x1556 <_ZN8BLEMate25resetEv>
    1f18:	81 30       	cpi	r24, 0x01	; 1
    1f1a:	01 f1       	breq	.+64     	; 0x1f5c <_Z5setupv+0xaa>
        //  will be in place on the next reboot of the module. Note that some, but
        //  not all, settings changes require a reboot. It's probably in general best
        //  to write/reset when changing anything.
        if (BTModu.writeConfig() == BLEMate2::SUCCESS)
        {
            writeConfigSuccess = true;
    1f1c:	ff 24       	eor	r15, r15
    1f1e:	f3 94       	inc	r15
        //  do that automatically because there may be things the user wants to
        //  change before committing the settings to non-volatile memory and
        //  resetting.
        if (BTModu.restore() == BLEMate2::SUCCESS)
        {
            restoreSuccess = true;
    1f20:	01 e0       	ldi	r16, 0x01	; 1
    1f22:	14 c0       	rjmp	.+40     	; 0x1f4c <_Z5setupv+0x9a>
            goto setup_try_again;
        }

        setup_try_again:
        //#ifdef DEBUG
        if (!firstResetSuccess) {
    1f24:	11 11       	cpse	r17, r1
    1f26:	07 c0       	rjmp	.+14     	; 0x1f36 <_Z5setupv+0x84>
            Serial.println("Module reset error!");
    1f28:	6e e9       	ldi	r22, 0x9E	; 158
    1f2a:	71 e0       	ldi	r23, 0x01	; 1
    1f2c:	80 e5       	ldi	r24, 0x50	; 80
    1f2e:	93 e0       	ldi	r25, 0x03	; 3
    1f30:	0e 94 38 03 	call	0x670	; 0x670 <_ZN5Print7printlnEPKc>
    1f34:	2a c0       	rjmp	.+84     	; 0x1f8a <_Z5setupv+0xd8>
            } else if (!restoreSuccess) {
    1f36:	01 11       	cpse	r16, r1
    1f38:	04 c0       	rjmp	.+8      	; 0x1f42 <_Z5setupv+0x90>
            Serial.println("Module restore error!");
    1f3a:	62 eb       	ldi	r22, 0xB2	; 178
    1f3c:	71 e0       	ldi	r23, 0x01	; 1
    1f3e:	08 c0       	rjmp	.+16     	; 0x1f50 <_Z5setupv+0x9e>
        //  do that automatically because there may be things the user wants to
        //  change before committing the settings to non-volatile memory and
        //  resetting.
        if (BTModu.restore() == BLEMate2::SUCCESS)
        {
            restoreSuccess = true;
    1f40:	01 e0       	ldi	r16, 0x01	; 1
        //#ifdef DEBUG
        if (!firstResetSuccess) {
            Serial.println("Module reset error!");
            } else if (!restoreSuccess) {
            Serial.println("Module restore error!");
            } else if (!writeConfigSuccess) {
    1f42:	f1 10       	cpse	r15, r1
    1f44:	03 c0       	rjmp	.+6      	; 0x1f4c <_Z5setupv+0x9a>
            Serial.println("Module write config error!");
    1f46:	68 ec       	ldi	r22, 0xC8	; 200
    1f48:	71 e0       	ldi	r23, 0x01	; 1
    1f4a:	02 c0       	rjmp	.+4      	; 0x1f50 <_Z5setupv+0x9e>
            } else if (!secondResetSuccess) {
            Serial.println("Second module reset error!");
    1f4c:	63 ee       	ldi	r22, 0xE3	; 227
    1f4e:	71 e0       	ldi	r23, 0x01	; 1
    1f50:	80 e5       	ldi	r24, 0x50	; 80
    1f52:	93 e0       	ldi	r25, 0x03	; 3
    1f54:	0e 94 38 03 	call	0x670	; 0x670 <_ZN5Print7printlnEPKc>
    1f58:	11 e0       	ldi	r17, 0x01	; 1
    1f5a:	17 c0       	rjmp	.+46     	; 0x1f8a <_Z5setupv+0xd8>
            } else {
            Serial.println("Reset/Restore/Write Config PASSED...");
    1f5c:	6e ef       	ldi	r22, 0xFE	; 254
    1f5e:	71 e0       	ldi	r23, 0x01	; 1
    1f60:	80 e5       	ldi	r24, 0x50	; 80
    1f62:	93 e0       	ldi	r25, 0x03	; 3
    1f64:	0e 94 38 03 	call	0x670	; 0x670 <_ZN5Print7printlnEPKc>
        #endif
        while(1) {}
    }
    
    #ifdef DEBUG
    Serial.println("Reset/Restore/Write Config DONE!");
    1f68:	61 e6       	ldi	r22, 0x61	; 97
    1f6a:	72 e0       	ldi	r23, 0x02	; 2
    1f6c:	80 e5       	ldi	r24, 0x50	; 80
    1f6e:	93 e0       	ldi	r25, 0x03	; 3
    1f70:	0e 94 38 03 	call	0x670	; 0x670 <_ZN5Print7printlnEPKc>
    #endif
    delay(1000);
    1f74:	68 ee       	ldi	r22, 0xE8	; 232
    1f76:	73 e0       	ldi	r23, 0x03	; 3
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
}
    1f7c:	df 91       	pop	r29
    1f7e:	cf 91       	pop	r28
    1f80:	1f 91       	pop	r17
    1f82:	0f 91       	pop	r16
    1f84:	ff 90       	pop	r15
    }
    
    #ifdef DEBUG
    Serial.println("Reset/Restore/Write Config DONE!");
    #endif
    delay(1000);
    1f86:	0c 94 1b 05 	jmp	0xa36	; 0xa36 <delay>
    1f8a:	21 97       	sbiw	r28, 0x01	; 1

    boolean firstResetSuccess = false;
    boolean restoreSuccess = false;
    boolean writeConfigSuccess = false;
    boolean secondResetSuccess = false;
    for (int i = 0; i < 10; i++) {
    1f8c:	20 97       	sbiw	r28, 0x00	; 0
    1f8e:	09 f0       	breq	.+2      	; 0x1f92 <_Z5setupv+0xe0>
    1f90:	ad cf       	rjmp	.-166    	; 0x1eec <_Z5setupv+0x3a>
        //#endif
    }
    if (!(firstResetSuccess && restoreSuccess && writeConfigSuccess && secondResetSuccess)) {
        // Setup failed after 10 tries
        #ifdef DEBUG
        Serial.println("Reset/Restore/Write Config FAILED 10 TIMES. STOP EXECUTION...");
    1f92:	63 e2       	ldi	r22, 0x23	; 35
    1f94:	72 e0       	ldi	r23, 0x02	; 2
    1f96:	80 e5       	ldi	r24, 0x50	; 80
    1f98:	93 e0       	ldi	r25, 0x03	; 3
    1f9a:	0e 94 38 03 	call	0x670	; 0x670 <_ZN5Print7printlnEPKc>
    1f9e:	ff cf       	rjmp	.-2      	; 0x1f9e <_Z5setupv+0xec>

00001fa0 <_Z9find_text6StringS_>:
    Serial.println("Reset/Restore/Write Config DONE!");
    #endif
    delay(1000);
}

int find_text(String needle, String haystack) {
    1fa0:	9f 92       	push	r9
    1fa2:	af 92       	push	r10
    1fa4:	bf 92       	push	r11
    1fa6:	cf 92       	push	r12
    1fa8:	df 92       	push	r13
    1faa:	ef 92       	push	r14
    1fac:	ff 92       	push	r15
    1fae:	0f 93       	push	r16
    1fb0:	1f 93       	push	r17
    1fb2:	cf 93       	push	r28
    1fb4:	df 93       	push	r29
    1fb6:	00 d0       	rcall	.+0      	; 0x1fb8 <_Z9find_text6StringS_+0x18>
    1fb8:	00 d0       	rcall	.+0      	; 0x1fba <_Z9find_text6StringS_+0x1a>
    1fba:	00 d0       	rcall	.+0      	; 0x1fbc <_Z9find_text6StringS_+0x1c>
    1fbc:	cd b7       	in	r28, 0x3d	; 61
    1fbe:	de b7       	in	r29, 0x3e	; 62
    1fc0:	6c 01       	movw	r12, r24
    1fc2:	7b 01       	movw	r14, r22
    int foundpos = -1;
    for (int i = 0; (i < haystack.length() - needle.length()); i++) {
    1fc4:	00 e0       	ldi	r16, 0x00	; 0
    1fc6:	10 e0       	ldi	r17, 0x00	; 0
    #endif
    delay(1000);
}

int find_text(String needle, String haystack) {
    int foundpos = -1;
    1fc8:	aa 24       	eor	r10, r10
    1fca:	aa 94       	dec	r10
    1fcc:	bb 24       	eor	r11, r11
    1fce:	ba 94       	dec	r11
    Serial.println("Reset/Restore/Write Config DONE!");
    #endif
    delay(1000);
}

int find_text(String needle, String haystack) {
    1fd0:	f6 01       	movw	r30, r12
    1fd2:	24 81       	ldd	r18, Z+4	; 0x04
    1fd4:	35 81       	ldd	r19, Z+5	; 0x05
    int foundpos = -1;
    for (int i = 0; (i < haystack.length() - needle.length()); i++) {
    1fd6:	f7 01       	movw	r30, r14
    1fd8:	44 81       	ldd	r20, Z+4	; 0x04
    1fda:	55 81       	ldd	r21, Z+5	; 0x05
    1fdc:	42 1b       	sub	r20, r18
    1fde:	53 0b       	sbc	r21, r19
    1fe0:	04 17       	cp	r16, r20
    1fe2:	15 07       	cpc	r17, r21
    1fe4:	b8 f4       	brcc	.+46     	; 0x2014 <_Z9find_text6StringS_+0x74>
        if (haystack.substring(i,needle.length()+i) == needle) {
    1fe6:	20 0f       	add	r18, r16
    1fe8:	31 1f       	adc	r19, r17
    1fea:	a8 01       	movw	r20, r16
    1fec:	b7 01       	movw	r22, r14
    1fee:	ce 01       	movw	r24, r28
    1ff0:	01 96       	adiw	r24, 0x01	; 1
    1ff2:	0e 94 5e 08 	call	0x10bc	; 0x10bc <_ZNK6String9substringEjj>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
    1ff6:	b6 01       	movw	r22, r12
    1ff8:	ce 01       	movw	r24, r28
    1ffa:	01 96       	adiw	r24, 0x01	; 1
    1ffc:	0e 94 9b 07 	call	0xf36	; 0xf36 <_ZNK6String6equalsERKS_>
    2000:	98 2e       	mov	r9, r24
    2002:	ce 01       	movw	r24, r28
    2004:	01 96       	adiw	r24, 0x01	; 1
    2006:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
    200a:	91 10       	cpse	r9, r1
            foundpos = i;
    200c:	58 01       	movw	r10, r16
    delay(1000);
}

int find_text(String needle, String haystack) {
    int foundpos = -1;
    for (int i = 0; (i < haystack.length() - needle.length()); i++) {
    200e:	0f 5f       	subi	r16, 0xFF	; 255
    2010:	1f 4f       	sbci	r17, 0xFF	; 255
    2012:	de cf       	rjmp	.-68     	; 0x1fd0 <_Z9find_text6StringS_+0x30>
        if (haystack.substring(i,needle.length()+i) == needle) {
            foundpos = i;
        }
    }
    return foundpos;
}
    2014:	c5 01       	movw	r24, r10
    2016:	26 96       	adiw	r28, 0x06	; 6
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	f8 94       	cli
    201c:	de bf       	out	0x3e, r29	; 62
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	cd bf       	out	0x3d, r28	; 61
    2022:	df 91       	pop	r29
    2024:	cf 91       	pop	r28
    2026:	1f 91       	pop	r17
    2028:	0f 91       	pop	r16
    202a:	ff 90       	pop	r15
    202c:	ef 90       	pop	r14
    202e:	df 90       	pop	r13
    2030:	cf 90       	pop	r12
    2032:	bf 90       	pop	r11
    2034:	af 90       	pop	r10
    2036:	9f 90       	pop	r9
    2038:	08 95       	ret

0000203a <_Z24do_flex_sensor_read_taskv>:

void do_flex_sensor_read_task()
{
    //read them flex sensors here
    #ifdef LEFTGLOVE
    leftThumbReading = analogRead(LEFTTHUMBPIN);
    203a:	80 e0       	ldi	r24, 0x00	; 0
    203c:	0e 94 7e 05 	call	0xafc	; 0xafc <analogRead>
    2040:	90 93 1c 04 	sts	0x041C, r25
    2044:	80 93 1b 04 	sts	0x041B, r24
    leftIndexReading = analogRead(LEFTINDEXPIN);
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	0e 94 7e 05 	call	0xafc	; 0xafc <analogRead>
    204e:	90 93 1a 04 	sts	0x041A, r25
    2052:	80 93 19 04 	sts	0x0419, r24
    leftMiddleReading = analogRead(LEFTMIDDLEPIN);
    2056:	82 e0       	ldi	r24, 0x02	; 2
    2058:	0e 94 7e 05 	call	0xafc	; 0xafc <analogRead>
    205c:	90 93 18 04 	sts	0x0418, r25
    2060:	80 93 17 04 	sts	0x0417, r24
    //Serial.println("Right Flex Reading (T, I, M): ");
    //Serial.println(leftThumbReading);
    //Serial.println(leftIndexReading);
    //Serial.println(leftMiddleReading);
    if ((leftThumbReading > 530) && (leftIndexReading > 530) && (leftMiddleReading > 530) && (turnSignalSent == 0)) {
    2064:	20 91 1b 04 	lds	r18, 0x041B
    2068:	30 91 1c 04 	lds	r19, 0x041C
    206c:	23 31       	cpi	r18, 0x13	; 19
    206e:	32 40       	sbci	r19, 0x02	; 2
    2070:	44 f1       	brlt	.+80     	; 0x20c2 <_Z24do_flex_sensor_read_taskv+0x88>
    2072:	20 91 19 04 	lds	r18, 0x0419
    2076:	30 91 1a 04 	lds	r19, 0x041A
    207a:	23 31       	cpi	r18, 0x13	; 19
    207c:	32 40       	sbci	r19, 0x02	; 2
    207e:	0c f1       	brlt	.+66     	; 0x20c2 <_Z24do_flex_sensor_read_taskv+0x88>
    2080:	83 31       	cpi	r24, 0x13	; 19
    2082:	92 40       	sbci	r25, 0x02	; 2
    2084:	f4 f0       	brlt	.+60     	; 0x20c2 <_Z24do_flex_sensor_read_taskv+0x88>
    2086:	80 91 1d 04 	lds	r24, 0x041D
    208a:	90 91 1e 04 	lds	r25, 0x041E
    208e:	89 2b       	or	r24, r25
    2090:	c1 f4       	brne	.+48     	; 0x20c2 <_Z24do_flex_sensor_read_taskv+0x88>
        //Serial.flush();
        sendBuffer.concat(BPLGHEADER);
    2092:	68 ea       	ldi	r22, 0xA8	; 168
    2094:	72 e0       	ldi	r23, 0x02	; 2
    2096:	86 e4       	ldi	r24, 0x46	; 70
    2098:	94 e0       	ldi	r25, 0x04	; 4
    209a:	0e 94 1b 07 	call	0xe36	; 0xe36 <_ZN6String6concatEPKc>
        sendBuffer.concat("1");
    209e:	6d e1       	ldi	r22, 0x1D	; 29
    20a0:	73 e0       	ldi	r23, 0x03	; 3
    20a2:	86 e4       	ldi	r24, 0x46	; 70
    20a4:	94 e0       	ldi	r25, 0x04	; 4
    20a6:	0e 94 1b 07 	call	0xe36	; 0xe36 <_ZN6String6concatEPKc>
        //BTModu.sendData(sendBuffer);
        sendBuffer = "";
    20aa:	60 e2       	ldi	r22, 0x20	; 32
    20ac:	71 e0       	ldi	r23, 0x01	; 1
    20ae:	86 e4       	ldi	r24, 0x46	; 70
    20b0:	94 e0       	ldi	r25, 0x04	; 4
    20b2:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZN6StringaSEPKc>
        turnSignalSent = 1;
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	90 93 1e 04 	sts	0x041E, r25
    20be:	80 93 1d 04 	sts	0x041D, r24
    20c2:	08 95       	ret

000020c4 <_Z17do_led_blink_taskv>:
    #endif
}

void do_led_blink_task()
{
    if (left_arrow_on) {
    20c4:	80 91 45 04 	lds	r24, 0x0445
    20c8:	88 23       	and	r24, r24
    20ca:	19 f0       	breq	.+6      	; 0x20d2 <_Z17do_led_blink_taskv+0xe>
        blink_left_arrow();
    20cc:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <blink_left_arrow>
    20d0:	02 c0       	rjmp	.+4      	; 0x20d6 <_Z17do_led_blink_taskv+0x12>
    } else {
        turn_off_left_arrow();
    20d2:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <turn_off_left_arrow>
    }
    
    if (right_arrow_on) {
    20d6:	80 91 44 04 	lds	r24, 0x0444
    20da:	88 23       	and	r24, r24
    20dc:	19 f0       	breq	.+6      	; 0x20e4 <_Z17do_led_blink_taskv+0x20>
        blink_right_arrow();
    20de:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <blink_right_arrow>
    20e2:	02 c0       	rjmp	.+4      	; 0x20e8 <_Z17do_led_blink_taskv+0x24>
    } else {
        turn_off_right_arrow();
    20e4:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <turn_off_right_arrow>
    }
    
    if (top_arrow_on) {
    20e8:	80 91 43 04 	lds	r24, 0x0443
    20ec:	88 23       	and	r24, r24
    20ee:	19 f0       	breq	.+6      	; 0x20f6 <_Z17do_led_blink_taskv+0x32>
        blink_top_arrow();
    20f0:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <blink_top_arrow>
    20f4:	02 c0       	rjmp	.+4      	; 0x20fa <_Z17do_led_blink_taskv+0x36>
    } else {
        turn_off_top_arrow();
    20f6:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <turn_off_top_arrow>
    }
    
    if (status_led_on) {
    20fa:	80 91 42 04 	lds	r24, 0x0442
    20fe:	81 11       	cpse	r24, r1
        blink_status_led();
    2100:	0c 94 cb 0e 	jmp	0x1d96	; 0x1d96 <blink_status_led>
    } else {
        turn_off_status_led();
    2104:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <turn_off_status_led>

00002108 <_GLOBAL__sub_I_inputBuffer>:
#include "../lib/Arduino/Arduino.h"
#include "../lib/SparkFun_BLEMate2/SparkFun_BLEMate2.h"
#include <avr/io.h>
#include <util/delay.h>

String inputBuffer;
    2108:	60 e2       	ldi	r22, 0x20	; 32
    210a:	71 e0       	ldi	r23, 0x01	; 1
    210c:	8c e4       	ldi	r24, 0x4C	; 76
    210e:	94 e0       	ldi	r25, 0x04	; 4
    2110:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
String sendBuffer;
    2114:	60 e2       	ldi	r22, 0x20	; 32
    2116:	71 e0       	ldi	r23, 0x01	; 1
    2118:	86 e4       	ldi	r24, 0x46	; 70
    211a:	94 e0       	ldi	r25, 0x04	; 4
    211c:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
boolean left_arrow_on;
boolean right_arrow_on;
boolean top_arrow_on;
boolean status_led_on;

BLEMate2 BTModu(&Serial);
    2120:	60 e5       	ldi	r22, 0x50	; 80
    2122:	73 e0       	ldi	r23, 0x03	; 3
    2124:	8f e1       	ldi	r24, 0x1F	; 31
    2126:	94 e0       	ldi	r25, 0x04	; 4
    2128:	0c 94 d5 08 	jmp	0x11aa	; 0x11aa <_ZN8BLEMate2C1EP6Stream>

0000212c <_GLOBAL__sub_D_inputBuffer>:
    if (status_led_on) {
        blink_status_led();
    } else {
        turn_off_status_led();
    }
    212c:	0c 94 3e 0f 	jmp	0x1e7c	; 0x1e7c <_Z41__static_initialization_and_destruction_0ii.part.1>

00002130 <_Z14do_serial_taskv>:

    // We're set up to allow anything to connect to us now.
}

void do_serial_task()
{
    2130:	cf 92       	push	r12
    2132:	df 92       	push	r13
    2134:	ef 92       	push	r14
    2136:	ff 92       	push	r15
    2138:	1f 93       	push	r17
    213a:	cf 93       	push	r28
    213c:	df 93       	push	r29
    213e:	cd b7       	in	r28, 0x3d	; 61
    2140:	de b7       	in	r29, 0x3e	; 62
    2142:	2c 97       	sbiw	r28, 0x0c	; 12
    2144:	0f b6       	in	r0, 0x3f	; 63
    2146:	f8 94       	cli
    2148:	de bf       	out	0x3e, r29	; 62
    214a:	0f be       	out	0x3f, r0	; 63
    214c:	cd bf       	out	0x3d, r28	; 61
    unsigned long serial_task_start = millis();
    214e:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <millis>
    2152:	6b 01       	movw	r12, r22
    2154:	7c 01       	movw	r14, r24
    digitalWrite(11,HIGH);
    2156:	61 e0       	ldi	r22, 0x01	; 1
    2158:	8b e0       	ldi	r24, 0x0B	; 11
    215a:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
    while ((millis() - serial_task_start) < 500)
    215e:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <millis>
    2162:	6c 19       	sub	r22, r12
    2164:	7d 09       	sbc	r23, r13
    2166:	8e 09       	sbc	r24, r14
    2168:	9f 09       	sbc	r25, r15
    216a:	64 3f       	cpi	r22, 0xF4	; 244
    216c:	71 40       	sbci	r23, 0x01	; 1
    216e:	81 05       	cpc	r24, r1
    2170:	91 05       	cpc	r25, r1
    2172:	50 f4       	brcc	.+20     	; 0x2188 <_Z14do_serial_taskv+0x58>
    {
        // Keep reading for 10 ms.
        
        inputBuffer.concat((char)Serial.read());
    2174:	80 e5       	ldi	r24, 0x50	; 80
    2176:	93 e0       	ldi	r25, 0x03	; 3
    2178:	0e 94 a4 00 	call	0x148	; 0x148 <_ZN14HardwareSerial4readEv>
    217c:	68 2f       	mov	r22, r24
    217e:	8c e4       	ldi	r24, 0x4C	; 76
    2180:	94 e0       	ldi	r25, 0x04	; 4
    2182:	0e 94 2b 07 	call	0xe56	; 0xe56 <_ZN6String6concatEc>
    2186:	eb cf       	rjmp	.-42     	; 0x215e <_Z14do_serial_taskv+0x2e>
        
    }
    digitalWrite(11,LOW);
    2188:	60 e0       	ldi	r22, 0x00	; 0
    218a:	8b e0       	ldi	r24, 0x0B	; 11
    218c:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
    // We'll probably see a lot of lines that end with \n\r- that's the default
    //  line ending for all the connect info messages, for instance. We can
    //  ignore all of them that don't start with "RCV=". Remember to clear your
    //  String object after you find \n\r!!!

    int rcv_pos = find_text(String("RCV="), inputBuffer);
    2190:	6c e4       	ldi	r22, 0x4C	; 76
    2192:	74 e0       	ldi	r23, 0x04	; 4
    2194:	ce 01       	movw	r24, r28
    2196:	01 96       	adiw	r24, 0x01	; 1
    2198:	0e 94 ce 06 	call	0xd9c	; 0xd9c <_ZN6StringC1ERKS_>
    219c:	6b ea       	ldi	r22, 0xAB	; 171
    219e:	72 e0       	ldi	r23, 0x02	; 2
    21a0:	ce 01       	movw	r24, r28
    21a2:	07 96       	adiw	r24, 0x07	; 7
    21a4:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
    21a8:	be 01       	movw	r22, r28
    21aa:	6f 5f       	subi	r22, 0xFF	; 255
    21ac:	7f 4f       	sbci	r23, 0xFF	; 255
    21ae:	ce 01       	movw	r24, r28
    21b0:	07 96       	adiw	r24, 0x07	; 7
    21b2:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <_Z9find_text6StringS_>
    21b6:	7c 01       	movw	r14, r24
    21b8:	ce 01       	movw	r24, r28
    21ba:	07 96       	adiw	r24, 0x07	; 7
    21bc:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
    21c0:	ce 01       	movw	r24, r28
    21c2:	01 96       	adiw	r24, 0x01	; 1
    21c4:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
    if (rcv_pos != -1) {
    21c8:	8f ef       	ldi	r24, 0xFF	; 255
    21ca:	e8 16       	cp	r14, r24
    21cc:	f8 06       	cpc	r15, r24
    21ce:	09 f4       	brne	.+2      	; 0x21d2 <_Z14do_serial_taskv+0xa2>
    21d0:	b0 c0       	rjmp	.+352    	; 0x2332 <_Z14do_serial_taskv+0x202>
        left_arrow_on = true;
    21d2:	11 e0       	ldi	r17, 0x01	; 1
    21d4:	10 93 45 04 	sts	0x0445, r17
        inputBuffer.remove(rcv_pos,4); // Remove RCV= from front.
    21d8:	44 e0       	ldi	r20, 0x04	; 4
    21da:	50 e0       	ldi	r21, 0x00	; 0
    21dc:	b7 01       	movw	r22, r14
    21de:	8c e4       	ldi	r24, 0x4C	; 76
    21e0:	94 e0       	ldi	r25, 0x04	; 4
    21e2:	0e 94 a3 08 	call	0x1146	; 0x1146 <_ZN6String6removeEjj>
        int line_end_pos = find_text(String("\n\r"), inputBuffer);
    21e6:	6c e4       	ldi	r22, 0x4C	; 76
    21e8:	74 e0       	ldi	r23, 0x04	; 4
    21ea:	ce 01       	movw	r24, r28
    21ec:	01 96       	adiw	r24, 0x01	; 1
    21ee:	0e 94 ce 06 	call	0xd9c	; 0xd9c <_ZN6StringC1ERKS_>
    21f2:	6e e1       	ldi	r22, 0x1E	; 30
    21f4:	71 e0       	ldi	r23, 0x01	; 1
    21f6:	ce 01       	movw	r24, r28
    21f8:	07 96       	adiw	r24, 0x07	; 7
    21fa:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
    21fe:	be 01       	movw	r22, r28
    2200:	6f 5f       	subi	r22, 0xFF	; 255
    2202:	7f 4f       	sbci	r23, 0xFF	; 255
    2204:	ce 01       	movw	r24, r28
    2206:	07 96       	adiw	r24, 0x07	; 7
    2208:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <_Z9find_text6StringS_>
    220c:	7c 01       	movw	r14, r24
    220e:	ce 01       	movw	r24, r28
    2210:	07 96       	adiw	r24, 0x07	; 7
    2212:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
    2216:	ce 01       	movw	r24, r28
    2218:	01 96       	adiw	r24, 0x01	; 1
    221a:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
        inputBuffer.remove((unsigned int)line_end_pos);
    221e:	b7 01       	movw	r22, r14
    2220:	8c e4       	ldi	r24, 0x4C	; 76
    2222:	94 e0       	ldi	r25, 0x04	; 4
    2224:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <_ZN6String6removeEj>
        #ifdef DEBUG
        Serial.println(inputBuffer);
    2228:	6c e4       	ldi	r22, 0x4C	; 76
    222a:	74 e0       	ldi	r23, 0x04	; 4
    222c:	80 e5       	ldi	r24, 0x50	; 80
    222e:	93 e0       	ldi	r25, 0x03	; 3
    2230:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN5Print7printlnERK6String>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    2234:	60 eb       	ldi	r22, 0xB0	; 176
    2236:	72 e0       	ldi	r23, 0x02	; 2
    2238:	8c e4       	ldi	r24, 0x4C	; 76
    223a:	94 e0       	ldi	r25, 0x04	; 4
    223c:	0e 94 ae 07 	call	0xf5c	; 0xf5c <_ZNK6String6equalsEPKc>
        // then check flex sensors for any special readings for sending to backpack

        //for acknowledgement: if there's already been an acknowledgment for
        
        #ifdef LEFTGLOVE
        if (inputBuffer == "LP1") {
    2240:	88 23       	and	r24, r24
    2242:	a9 f0       	breq	.+42     	; 0x226e <_Z14do_serial_taskv+0x13e>
            Serial.println("TO LEFT GLOVE: NAV SAYS LEFT");
    2244:	64 eb       	ldi	r22, 0xB4	; 180
    2246:	72 e0       	ldi	r23, 0x02	; 2
    2248:	80 e5       	ldi	r24, 0x50	; 80
    224a:	93 e0       	ldi	r25, 0x03	; 3
    224c:	0e 94 38 03 	call	0x670	; 0x670 <_ZN5Print7printlnEPKc>
            left_arrow_on = true;
    2250:	10 93 45 04 	sts	0x0445, r17
            //do some ack stuff here
            Serial.flush();
    2254:	80 e5       	ldi	r24, 0x50	; 80
    2256:	93 e0       	ldi	r25, 0x03	; 3
    2258:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_ZN14HardwareSerial5flushEv>
            sendBuffer.concat(PLGHEADER);
    225c:	61 ed       	ldi	r22, 0xD1	; 209
    225e:	72 e0       	ldi	r23, 0x02	; 2
    2260:	86 e4       	ldi	r24, 0x46	; 70
    2262:	94 e0       	ldi	r25, 0x04	; 4
    2264:	0e 94 1b 07 	call	0xe36	; 0xe36 <_ZN6String6concatEPKc>
            sendBuffer.concat("1");
    2268:	6d e1       	ldi	r22, 0x1D	; 29
    226a:	73 e0       	ldi	r23, 0x03	; 3
    226c:	1c c0       	rjmp	.+56     	; 0x22a6 <_Z14do_serial_taskv+0x176>
    226e:	64 ed       	ldi	r22, 0xD4	; 212
    2270:	72 e0       	ldi	r23, 0x02	; 2
    2272:	8c e4       	ldi	r24, 0x4C	; 76
    2274:	94 e0       	ldi	r25, 0x04	; 4
    2276:	0e 94 ae 07 	call	0xf5c	; 0xf5c <_ZNK6String6equalsEPKc>
            BTModu.sendData(sendBuffer);
            sendBuffer = "";
        } else if (inputBuffer == "LP2") {
    227a:	88 23       	and	r24, r24
    227c:	29 f1       	breq	.+74     	; 0x22c8 <_Z14do_serial_taskv+0x198>
            Serial.println("TO LEFT GLOVE: NAV SAYS RIGHT");
    227e:	68 ed       	ldi	r22, 0xD8	; 216
    2280:	72 e0       	ldi	r23, 0x02	; 2
    2282:	80 e5       	ldi	r24, 0x50	; 80
    2284:	93 e0       	ldi	r25, 0x03	; 3
    2286:	0e 94 38 03 	call	0x670	; 0x670 <_ZN5Print7printlnEPKc>
            right_arrow_on = true;
    228a:	10 93 44 04 	sts	0x0444, r17
            //do some ack stuff here
            Serial.flush();
    228e:	80 e5       	ldi	r24, 0x50	; 80
    2290:	93 e0       	ldi	r25, 0x03	; 3
    2292:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_ZN14HardwareSerial5flushEv>
            sendBuffer.concat(PLGHEADER);
    2296:	61 ed       	ldi	r22, 0xD1	; 209
    2298:	72 e0       	ldi	r23, 0x02	; 2
    229a:	86 e4       	ldi	r24, 0x46	; 70
    229c:	94 e0       	ldi	r25, 0x04	; 4
    229e:	0e 94 1b 07 	call	0xe36	; 0xe36 <_ZN6String6concatEPKc>
            sendBuffer.concat("2");
    22a2:	61 e2       	ldi	r22, 0x21	; 33
    22a4:	73 e0       	ldi	r23, 0x03	; 3
    22a6:	86 e4       	ldi	r24, 0x46	; 70
    22a8:	94 e0       	ldi	r25, 0x04	; 4
    22aa:	0e 94 1b 07 	call	0xe36	; 0xe36 <_ZN6String6concatEPKc>
            BTModu.sendData(sendBuffer);
    22ae:	66 e4       	ldi	r22, 0x46	; 70
    22b0:	74 e0       	ldi	r23, 0x04	; 4
    22b2:	8f e1       	ldi	r24, 0x1F	; 31
    22b4:	94 e0       	ldi	r25, 0x04	; 4
    22b6:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <_ZN8BLEMate28sendDataER6String>
            sendBuffer = "";
    22ba:	60 e2       	ldi	r22, 0x20	; 32
    22bc:	71 e0       	ldi	r23, 0x01	; 1
    22be:	86 e4       	ldi	r24, 0x46	; 70
    22c0:	94 e0       	ldi	r25, 0x04	; 4
    22c2:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZN6StringaSEPKc>
    22c6:	35 c0       	rjmp	.+106    	; 0x2332 <_Z14do_serial_taskv+0x202>
    22c8:	66 ef       	ldi	r22, 0xF6	; 246
    22ca:	72 e0       	ldi	r23, 0x02	; 2
    22cc:	8c e4       	ldi	r24, 0x4C	; 76
    22ce:	94 e0       	ldi	r25, 0x04	; 4
    22d0:	0e 94 ae 07 	call	0xf5c	; 0xf5c <_ZNK6String6equalsEPKc>
        } else if (inputBuffer == "LP3") {
    22d4:	88 23       	and	r24, r24
    22d6:	a9 f0       	breq	.+42     	; 0x2302 <_Z14do_serial_taskv+0x1d2>
            Serial.println("TO LEFT GLOVE: NAV SAYS STRAIGHT");
    22d8:	6a ef       	ldi	r22, 0xFA	; 250
    22da:	72 e0       	ldi	r23, 0x02	; 2
    22dc:	80 e5       	ldi	r24, 0x50	; 80
    22de:	93 e0       	ldi	r25, 0x03	; 3
    22e0:	0e 94 38 03 	call	0x670	; 0x670 <_ZN5Print7printlnEPKc>
            top_arrow_on = true;
    22e4:	10 93 43 04 	sts	0x0443, r17
            //do some ack stuff here
            Serial.flush();
    22e8:	80 e5       	ldi	r24, 0x50	; 80
    22ea:	93 e0       	ldi	r25, 0x03	; 3
    22ec:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_ZN14HardwareSerial5flushEv>
            sendBuffer.concat(PLGHEADER);
    22f0:	61 ed       	ldi	r22, 0xD1	; 209
    22f2:	72 e0       	ldi	r23, 0x02	; 2
    22f4:	86 e4       	ldi	r24, 0x46	; 70
    22f6:	94 e0       	ldi	r25, 0x04	; 4
    22f8:	0e 94 1b 07 	call	0xe36	; 0xe36 <_ZN6String6concatEPKc>
            sendBuffer.concat("3");
    22fc:	65 e2       	ldi	r22, 0x25	; 37
    22fe:	73 e0       	ldi	r23, 0x03	; 3
    2300:	d2 cf       	rjmp	.-92     	; 0x22a6 <_Z14do_serial_taskv+0x176>
    2302:	6b e1       	ldi	r22, 0x1B	; 27
    2304:	73 e0       	ldi	r23, 0x03	; 3
    2306:	8c e4       	ldi	r24, 0x4C	; 76
    2308:	94 e0       	ldi	r25, 0x04	; 4
    230a:	0e 94 ae 07 	call	0xf5c	; 0xf5c <_ZNK6String6equalsEPKc>
            BTModu.sendData(sendBuffer);
            sendBuffer = "";
        } else if (inputBuffer == "LB1" || inputBuffer == "LB2" || inputBuffer == "LB3") {
    230e:	81 11       	cpse	r24, r1
    2310:	24 c0       	rjmp	.+72     	; 0x235a <_Z14do_serial_taskv+0x22a>
    2312:	6f e1       	ldi	r22, 0x1F	; 31
    2314:	73 e0       	ldi	r23, 0x03	; 3
    2316:	8c e4       	ldi	r24, 0x4C	; 76
    2318:	94 e0       	ldi	r25, 0x04	; 4
    231a:	0e 94 ae 07 	call	0xf5c	; 0xf5c <_ZNK6String6equalsEPKc>
    231e:	81 11       	cpse	r24, r1
    2320:	1c c0       	rjmp	.+56     	; 0x235a <_Z14do_serial_taskv+0x22a>
    2322:	63 e2       	ldi	r22, 0x23	; 35
    2324:	73 e0       	ldi	r23, 0x03	; 3
    2326:	8c e4       	ldi	r24, 0x4C	; 76
    2328:	94 e0       	ldi	r25, 0x04	; 4
    232a:	0e 94 ae 07 	call	0xf5c	; 0xf5c <_ZNK6String6equalsEPKc>
    232e:	81 11       	cpse	r24, r1
    2330:	14 c0       	rjmp	.+40     	; 0x235a <_Z14do_serial_taskv+0x22a>
            blink_indicator(10);
            turnSignalSent = 0;
        }
        #endif
        
        inputBuffer = "";
    2332:	60 e2       	ldi	r22, 0x20	; 32
    2334:	71 e0       	ldi	r23, 0x01	; 1
    2336:	8c e4       	ldi	r24, 0x4C	; 76
    2338:	94 e0       	ldi	r25, 0x04	; 4
    233a:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZN6StringaSEPKc>
    } else {
        inputBuffer = "";
    }
}
    233e:	2c 96       	adiw	r28, 0x0c	; 12
    2340:	0f b6       	in	r0, 0x3f	; 63
    2342:	f8 94       	cli
    2344:	de bf       	out	0x3e, r29	; 62
    2346:	0f be       	out	0x3f, r0	; 63
    2348:	cd bf       	out	0x3d, r28	; 61
    234a:	df 91       	pop	r29
    234c:	cf 91       	pop	r28
    234e:	1f 91       	pop	r17
    2350:	ff 90       	pop	r15
    2352:	ef 90       	pop	r14
    2354:	df 90       	pop	r13
    2356:	cf 90       	pop	r12
    2358:	08 95       	ret
            sendBuffer.concat(PLGHEADER);
            sendBuffer.concat("3");
            BTModu.sendData(sendBuffer);
            sendBuffer = "";
        } else if (inputBuffer == "LB1" || inputBuffer == "LB2" || inputBuffer == "LB3") {
            Serial.println("TO LEFT GLOVE: BACKPACK KNOWS WHAT'S UP");
    235a:	67 e2       	ldi	r22, 0x27	; 39
    235c:	73 e0       	ldi	r23, 0x03	; 3
    235e:	80 e5       	ldi	r24, 0x50	; 80
    2360:	93 e0       	ldi	r25, 0x03	; 3
    2362:	0e 94 38 03 	call	0x670	; 0x670 <_ZN5Print7printlnEPKc>
            status_led_on = true;
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	80 93 42 04 	sts	0x0442, r24
            turnSignalSent = 0;
    236c:	10 92 1e 04 	sts	0x041E, r1
    2370:	10 92 1d 04 	sts	0x041D, r1
    2374:	de cf       	rjmp	.-68     	; 0x2332 <_Z14do_serial_taskv+0x202>

00002376 <_Z4loopv>:
    }
    return foundpos;
}

void loop()
{
    2376:	0f 93       	push	r16
    2378:	1f 93       	push	r17
    // The state machine for capturing that can be pretty easy: when we've read
    //  in \n\r, check to see if the string began with "RCV=". If yes, do
    //  something. If no, discard it.

    static unsigned long main_loop_timer;
    main_loop_timer = millis();
    237a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <millis>
    237e:	60 93 07 04 	sts	0x0407, r22
    2382:	70 93 08 04 	sts	0x0408, r23
    2386:	80 93 09 04 	sts	0x0409, r24
    238a:	90 93 0a 04 	sts	0x040A, r25
    
    if (main_loop_timer > (serial_task_last_run + SERIAL_READ_TASK_PERIOD)) {
    238e:	00 91 13 04 	lds	r16, 0x0413
    2392:	10 91 14 04 	lds	r17, 0x0414
    2396:	20 91 15 04 	lds	r18, 0x0415
    239a:	30 91 16 04 	lds	r19, 0x0416
    239e:	08 51       	subi	r16, 0x18	; 24
    23a0:	1c 4f       	sbci	r17, 0xFC	; 252
    23a2:	2f 4f       	sbci	r18, 0xFF	; 255
    23a4:	3f 4f       	sbci	r19, 0xFF	; 255
    23a6:	06 17       	cp	r16, r22
    23a8:	17 07       	cpc	r17, r23
    23aa:	28 07       	cpc	r18, r24
    23ac:	39 07       	cpc	r19, r25
    23ae:	60 f4       	brcc	.+24     	; 0x23c8 <_Z4loopv+0x52>
        //Serial.println("Serial runs");
        do_serial_task();
    23b0:	0e 94 98 10 	call	0x2130	; 0x2130 <_Z14do_serial_taskv>
        
        serial_task_last_run = millis();
    23b4:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <millis>
    23b8:	60 93 13 04 	sts	0x0413, r22
    23bc:	70 93 14 04 	sts	0x0414, r23
    23c0:	80 93 15 04 	sts	0x0415, r24
    23c4:	90 93 16 04 	sts	0x0416, r25
    }

    if (main_loop_timer > (flex_sensor_read_task_last_run + FLEX_SENSOR_READ_TASK_PERIOD)) {
    23c8:	80 91 0f 04 	lds	r24, 0x040F
    23cc:	90 91 10 04 	lds	r25, 0x0410
    23d0:	a0 91 11 04 	lds	r26, 0x0411
    23d4:	b0 91 12 04 	lds	r27, 0x0412
    23d8:	8c 59       	subi	r24, 0x9C	; 156
    23da:	9f 4f       	sbci	r25, 0xFF	; 255
    23dc:	af 4f       	sbci	r26, 0xFF	; 255
    23de:	bf 4f       	sbci	r27, 0xFF	; 255
    23e0:	40 91 07 04 	lds	r20, 0x0407
    23e4:	50 91 08 04 	lds	r21, 0x0408
    23e8:	60 91 09 04 	lds	r22, 0x0409
    23ec:	70 91 0a 04 	lds	r23, 0x040A
    23f0:	84 17       	cp	r24, r20
    23f2:	95 07       	cpc	r25, r21
    23f4:	a6 07       	cpc	r26, r22
    23f6:	b7 07       	cpc	r27, r23
    23f8:	60 f4       	brcc	.+24     	; 0x2412 <_Z4loopv+0x9c>
        //Serial.println("Flex read runs");
        do_flex_sensor_read_task();
    23fa:	0e 94 1d 10 	call	0x203a	; 0x203a <_Z24do_flex_sensor_read_taskv>
        flex_sensor_read_task_last_run = millis();
    23fe:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <millis>
    2402:	60 93 0f 04 	sts	0x040F, r22
    2406:	70 93 10 04 	sts	0x0410, r23
    240a:	80 93 11 04 	sts	0x0411, r24
    240e:	90 93 12 04 	sts	0x0412, r25
    }
        

    if (main_loop_timer > (led_blink_task_last_run + LED_BLINK_TASK_PERIOD)) {
    2412:	80 91 0b 04 	lds	r24, 0x040B
    2416:	90 91 0c 04 	lds	r25, 0x040C
    241a:	a0 91 0d 04 	lds	r26, 0x040D
    241e:	b0 91 0e 04 	lds	r27, 0x040E
    2422:	88 53       	subi	r24, 0x38	; 56
    2424:	9f 4f       	sbci	r25, 0xFF	; 255
    2426:	af 4f       	sbci	r26, 0xFF	; 255
    2428:	bf 4f       	sbci	r27, 0xFF	; 255
    242a:	40 91 07 04 	lds	r20, 0x0407
    242e:	50 91 08 04 	lds	r21, 0x0408
    2432:	60 91 09 04 	lds	r22, 0x0409
    2436:	70 91 0a 04 	lds	r23, 0x040A
    243a:	84 17       	cp	r24, r20
    243c:	95 07       	cpc	r25, r21
    243e:	a6 07       	cpc	r26, r22
    2440:	b7 07       	cpc	r27, r23
    2442:	60 f4       	brcc	.+24     	; 0x245c <_Z4loopv+0xe6>
        //Serial.println("LED blink runs");
        do_led_blink_task();
    2444:	0e 94 62 10 	call	0x20c4	; 0x20c4 <_Z17do_led_blink_taskv>
        led_blink_task_last_run = millis();
    2448:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <millis>
    244c:	60 93 0b 04 	sts	0x040B, r22
    2450:	70 93 0c 04 	sts	0x040C, r23
    2454:	80 93 0d 04 	sts	0x040D, r24
    2458:	90 93 0e 04 	sts	0x040E, r25
    }
}
    245c:	1f 91       	pop	r17
    245e:	0f 91       	pop	r16
    2460:	08 95       	ret

00002462 <__udivmodsi4>:
    2462:	a1 e2       	ldi	r26, 0x21	; 33
    2464:	1a 2e       	mov	r1, r26
    2466:	aa 1b       	sub	r26, r26
    2468:	bb 1b       	sub	r27, r27
    246a:	fd 01       	movw	r30, r26
    246c:	0d c0       	rjmp	.+26     	; 0x2488 <__udivmodsi4_ep>

0000246e <__udivmodsi4_loop>:
    246e:	aa 1f       	adc	r26, r26
    2470:	bb 1f       	adc	r27, r27
    2472:	ee 1f       	adc	r30, r30
    2474:	ff 1f       	adc	r31, r31
    2476:	a2 17       	cp	r26, r18
    2478:	b3 07       	cpc	r27, r19
    247a:	e4 07       	cpc	r30, r20
    247c:	f5 07       	cpc	r31, r21
    247e:	20 f0       	brcs	.+8      	; 0x2488 <__udivmodsi4_ep>
    2480:	a2 1b       	sub	r26, r18
    2482:	b3 0b       	sbc	r27, r19
    2484:	e4 0b       	sbc	r30, r20
    2486:	f5 0b       	sbc	r31, r21

00002488 <__udivmodsi4_ep>:
    2488:	66 1f       	adc	r22, r22
    248a:	77 1f       	adc	r23, r23
    248c:	88 1f       	adc	r24, r24
    248e:	99 1f       	adc	r25, r25
    2490:	1a 94       	dec	r1
    2492:	69 f7       	brne	.-38     	; 0x246e <__udivmodsi4_loop>
    2494:	60 95       	com	r22
    2496:	70 95       	com	r23
    2498:	80 95       	com	r24
    249a:	90 95       	com	r25
    249c:	9b 01       	movw	r18, r22
    249e:	ac 01       	movw	r20, r24
    24a0:	bd 01       	movw	r22, r26
    24a2:	cf 01       	movw	r24, r30
    24a4:	08 95       	ret

000024a6 <__tablejump2__>:
    24a6:	ee 0f       	add	r30, r30
    24a8:	ff 1f       	adc	r31, r31

000024aa <__tablejump__>:
    24aa:	05 90       	lpm	r0, Z+
    24ac:	f4 91       	lpm	r31, Z
    24ae:	e0 2d       	mov	r30, r0
    24b0:	09 94       	ijmp

000024b2 <malloc>:
    24b2:	cf 93       	push	r28
    24b4:	df 93       	push	r29
    24b6:	82 30       	cpi	r24, 0x02	; 2
    24b8:	91 05       	cpc	r25, r1
    24ba:	10 f4       	brcc	.+4      	; 0x24c0 <malloc+0xe>
    24bc:	82 e0       	ldi	r24, 0x02	; 2
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	e0 91 64 04 	lds	r30, 0x0464
    24c4:	f0 91 65 04 	lds	r31, 0x0465
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	a0 e0       	ldi	r26, 0x00	; 0
    24ce:	b0 e0       	ldi	r27, 0x00	; 0
    24d0:	30 97       	sbiw	r30, 0x00	; 0
    24d2:	39 f1       	breq	.+78     	; 0x2522 <malloc+0x70>
    24d4:	40 81       	ld	r20, Z
    24d6:	51 81       	ldd	r21, Z+1	; 0x01
    24d8:	48 17       	cp	r20, r24
    24da:	59 07       	cpc	r21, r25
    24dc:	b8 f0       	brcs	.+46     	; 0x250c <malloc+0x5a>
    24de:	48 17       	cp	r20, r24
    24e0:	59 07       	cpc	r21, r25
    24e2:	71 f4       	brne	.+28     	; 0x2500 <malloc+0x4e>
    24e4:	82 81       	ldd	r24, Z+2	; 0x02
    24e6:	93 81       	ldd	r25, Z+3	; 0x03
    24e8:	10 97       	sbiw	r26, 0x00	; 0
    24ea:	29 f0       	breq	.+10     	; 0x24f6 <malloc+0x44>
    24ec:	13 96       	adiw	r26, 0x03	; 3
    24ee:	9c 93       	st	X, r25
    24f0:	8e 93       	st	-X, r24
    24f2:	12 97       	sbiw	r26, 0x02	; 2
    24f4:	2c c0       	rjmp	.+88     	; 0x254e <malloc+0x9c>
    24f6:	90 93 65 04 	sts	0x0465, r25
    24fa:	80 93 64 04 	sts	0x0464, r24
    24fe:	27 c0       	rjmp	.+78     	; 0x254e <malloc+0x9c>
    2500:	21 15       	cp	r18, r1
    2502:	31 05       	cpc	r19, r1
    2504:	31 f0       	breq	.+12     	; 0x2512 <malloc+0x60>
    2506:	42 17       	cp	r20, r18
    2508:	53 07       	cpc	r21, r19
    250a:	18 f0       	brcs	.+6      	; 0x2512 <malloc+0x60>
    250c:	a9 01       	movw	r20, r18
    250e:	db 01       	movw	r26, r22
    2510:	01 c0       	rjmp	.+2      	; 0x2514 <malloc+0x62>
    2512:	ef 01       	movw	r28, r30
    2514:	9a 01       	movw	r18, r20
    2516:	bd 01       	movw	r22, r26
    2518:	df 01       	movw	r26, r30
    251a:	02 80       	ldd	r0, Z+2	; 0x02
    251c:	f3 81       	ldd	r31, Z+3	; 0x03
    251e:	e0 2d       	mov	r30, r0
    2520:	d7 cf       	rjmp	.-82     	; 0x24d0 <malloc+0x1e>
    2522:	21 15       	cp	r18, r1
    2524:	31 05       	cpc	r19, r1
    2526:	f9 f0       	breq	.+62     	; 0x2566 <malloc+0xb4>
    2528:	28 1b       	sub	r18, r24
    252a:	39 0b       	sbc	r19, r25
    252c:	24 30       	cpi	r18, 0x04	; 4
    252e:	31 05       	cpc	r19, r1
    2530:	80 f4       	brcc	.+32     	; 0x2552 <malloc+0xa0>
    2532:	8a 81       	ldd	r24, Y+2	; 0x02
    2534:	9b 81       	ldd	r25, Y+3	; 0x03
    2536:	61 15       	cp	r22, r1
    2538:	71 05       	cpc	r23, r1
    253a:	21 f0       	breq	.+8      	; 0x2544 <malloc+0x92>
    253c:	fb 01       	movw	r30, r22
    253e:	93 83       	std	Z+3, r25	; 0x03
    2540:	82 83       	std	Z+2, r24	; 0x02
    2542:	04 c0       	rjmp	.+8      	; 0x254c <malloc+0x9a>
    2544:	90 93 65 04 	sts	0x0465, r25
    2548:	80 93 64 04 	sts	0x0464, r24
    254c:	fe 01       	movw	r30, r28
    254e:	32 96       	adiw	r30, 0x02	; 2
    2550:	44 c0       	rjmp	.+136    	; 0x25da <malloc+0x128>
    2552:	fe 01       	movw	r30, r28
    2554:	e2 0f       	add	r30, r18
    2556:	f3 1f       	adc	r31, r19
    2558:	81 93       	st	Z+, r24
    255a:	91 93       	st	Z+, r25
    255c:	22 50       	subi	r18, 0x02	; 2
    255e:	31 09       	sbc	r19, r1
    2560:	39 83       	std	Y+1, r19	; 0x01
    2562:	28 83       	st	Y, r18
    2564:	3a c0       	rjmp	.+116    	; 0x25da <malloc+0x128>
    2566:	20 91 62 04 	lds	r18, 0x0462
    256a:	30 91 63 04 	lds	r19, 0x0463
    256e:	23 2b       	or	r18, r19
    2570:	41 f4       	brne	.+16     	; 0x2582 <malloc+0xd0>
    2572:	20 91 02 01 	lds	r18, 0x0102
    2576:	30 91 03 01 	lds	r19, 0x0103
    257a:	30 93 63 04 	sts	0x0463, r19
    257e:	20 93 62 04 	sts	0x0462, r18
    2582:	20 91 00 01 	lds	r18, 0x0100
    2586:	30 91 01 01 	lds	r19, 0x0101
    258a:	21 15       	cp	r18, r1
    258c:	31 05       	cpc	r19, r1
    258e:	41 f4       	brne	.+16     	; 0x25a0 <malloc+0xee>
    2590:	2d b7       	in	r18, 0x3d	; 61
    2592:	3e b7       	in	r19, 0x3e	; 62
    2594:	40 91 04 01 	lds	r20, 0x0104
    2598:	50 91 05 01 	lds	r21, 0x0105
    259c:	24 1b       	sub	r18, r20
    259e:	35 0b       	sbc	r19, r21
    25a0:	e0 91 62 04 	lds	r30, 0x0462
    25a4:	f0 91 63 04 	lds	r31, 0x0463
    25a8:	e2 17       	cp	r30, r18
    25aa:	f3 07       	cpc	r31, r19
    25ac:	a0 f4       	brcc	.+40     	; 0x25d6 <malloc+0x124>
    25ae:	2e 1b       	sub	r18, r30
    25b0:	3f 0b       	sbc	r19, r31
    25b2:	28 17       	cp	r18, r24
    25b4:	39 07       	cpc	r19, r25
    25b6:	78 f0       	brcs	.+30     	; 0x25d6 <malloc+0x124>
    25b8:	ac 01       	movw	r20, r24
    25ba:	4e 5f       	subi	r20, 0xFE	; 254
    25bc:	5f 4f       	sbci	r21, 0xFF	; 255
    25be:	24 17       	cp	r18, r20
    25c0:	35 07       	cpc	r19, r21
    25c2:	48 f0       	brcs	.+18     	; 0x25d6 <malloc+0x124>
    25c4:	4e 0f       	add	r20, r30
    25c6:	5f 1f       	adc	r21, r31
    25c8:	50 93 63 04 	sts	0x0463, r21
    25cc:	40 93 62 04 	sts	0x0462, r20
    25d0:	81 93       	st	Z+, r24
    25d2:	91 93       	st	Z+, r25
    25d4:	02 c0       	rjmp	.+4      	; 0x25da <malloc+0x128>
    25d6:	e0 e0       	ldi	r30, 0x00	; 0
    25d8:	f0 e0       	ldi	r31, 0x00	; 0
    25da:	cf 01       	movw	r24, r30
    25dc:	df 91       	pop	r29
    25de:	cf 91       	pop	r28
    25e0:	08 95       	ret

000025e2 <free>:
    25e2:	cf 93       	push	r28
    25e4:	df 93       	push	r29
    25e6:	00 97       	sbiw	r24, 0x00	; 0
    25e8:	09 f4       	brne	.+2      	; 0x25ec <free+0xa>
    25ea:	87 c0       	rjmp	.+270    	; 0x26fa <free+0x118>
    25ec:	fc 01       	movw	r30, r24
    25ee:	32 97       	sbiw	r30, 0x02	; 2
    25f0:	13 82       	std	Z+3, r1	; 0x03
    25f2:	12 82       	std	Z+2, r1	; 0x02
    25f4:	c0 91 64 04 	lds	r28, 0x0464
    25f8:	d0 91 65 04 	lds	r29, 0x0465
    25fc:	20 97       	sbiw	r28, 0x00	; 0
    25fe:	81 f4       	brne	.+32     	; 0x2620 <free+0x3e>
    2600:	20 81       	ld	r18, Z
    2602:	31 81       	ldd	r19, Z+1	; 0x01
    2604:	28 0f       	add	r18, r24
    2606:	39 1f       	adc	r19, r25
    2608:	80 91 62 04 	lds	r24, 0x0462
    260c:	90 91 63 04 	lds	r25, 0x0463
    2610:	82 17       	cp	r24, r18
    2612:	93 07       	cpc	r25, r19
    2614:	79 f5       	brne	.+94     	; 0x2674 <free+0x92>
    2616:	f0 93 63 04 	sts	0x0463, r31
    261a:	e0 93 62 04 	sts	0x0462, r30
    261e:	6d c0       	rjmp	.+218    	; 0x26fa <free+0x118>
    2620:	de 01       	movw	r26, r28
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	ae 17       	cp	r26, r30
    2628:	bf 07       	cpc	r27, r31
    262a:	50 f4       	brcc	.+20     	; 0x2640 <free+0x5e>
    262c:	12 96       	adiw	r26, 0x02	; 2
    262e:	4d 91       	ld	r20, X+
    2630:	5c 91       	ld	r21, X
    2632:	13 97       	sbiw	r26, 0x03	; 3
    2634:	9d 01       	movw	r18, r26
    2636:	41 15       	cp	r20, r1
    2638:	51 05       	cpc	r21, r1
    263a:	09 f1       	breq	.+66     	; 0x267e <free+0x9c>
    263c:	da 01       	movw	r26, r20
    263e:	f3 cf       	rjmp	.-26     	; 0x2626 <free+0x44>
    2640:	b3 83       	std	Z+3, r27	; 0x03
    2642:	a2 83       	std	Z+2, r26	; 0x02
    2644:	40 81       	ld	r20, Z
    2646:	51 81       	ldd	r21, Z+1	; 0x01
    2648:	84 0f       	add	r24, r20
    264a:	95 1f       	adc	r25, r21
    264c:	8a 17       	cp	r24, r26
    264e:	9b 07       	cpc	r25, r27
    2650:	71 f4       	brne	.+28     	; 0x266e <free+0x8c>
    2652:	8d 91       	ld	r24, X+
    2654:	9c 91       	ld	r25, X
    2656:	11 97       	sbiw	r26, 0x01	; 1
    2658:	84 0f       	add	r24, r20
    265a:	95 1f       	adc	r25, r21
    265c:	02 96       	adiw	r24, 0x02	; 2
    265e:	91 83       	std	Z+1, r25	; 0x01
    2660:	80 83       	st	Z, r24
    2662:	12 96       	adiw	r26, 0x02	; 2
    2664:	8d 91       	ld	r24, X+
    2666:	9c 91       	ld	r25, X
    2668:	13 97       	sbiw	r26, 0x03	; 3
    266a:	93 83       	std	Z+3, r25	; 0x03
    266c:	82 83       	std	Z+2, r24	; 0x02
    266e:	21 15       	cp	r18, r1
    2670:	31 05       	cpc	r19, r1
    2672:	29 f4       	brne	.+10     	; 0x267e <free+0x9c>
    2674:	f0 93 65 04 	sts	0x0465, r31
    2678:	e0 93 64 04 	sts	0x0464, r30
    267c:	3e c0       	rjmp	.+124    	; 0x26fa <free+0x118>
    267e:	d9 01       	movw	r26, r18
    2680:	13 96       	adiw	r26, 0x03	; 3
    2682:	fc 93       	st	X, r31
    2684:	ee 93       	st	-X, r30
    2686:	12 97       	sbiw	r26, 0x02	; 2
    2688:	4d 91       	ld	r20, X+
    268a:	5d 91       	ld	r21, X+
    268c:	a4 0f       	add	r26, r20
    268e:	b5 1f       	adc	r27, r21
    2690:	ea 17       	cp	r30, r26
    2692:	fb 07       	cpc	r31, r27
    2694:	79 f4       	brne	.+30     	; 0x26b4 <free+0xd2>
    2696:	80 81       	ld	r24, Z
    2698:	91 81       	ldd	r25, Z+1	; 0x01
    269a:	84 0f       	add	r24, r20
    269c:	95 1f       	adc	r25, r21
    269e:	02 96       	adiw	r24, 0x02	; 2
    26a0:	d9 01       	movw	r26, r18
    26a2:	11 96       	adiw	r26, 0x01	; 1
    26a4:	9c 93       	st	X, r25
    26a6:	8e 93       	st	-X, r24
    26a8:	82 81       	ldd	r24, Z+2	; 0x02
    26aa:	93 81       	ldd	r25, Z+3	; 0x03
    26ac:	13 96       	adiw	r26, 0x03	; 3
    26ae:	9c 93       	st	X, r25
    26b0:	8e 93       	st	-X, r24
    26b2:	12 97       	sbiw	r26, 0x02	; 2
    26b4:	e0 e0       	ldi	r30, 0x00	; 0
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ba:	9b 81       	ldd	r25, Y+3	; 0x03
    26bc:	00 97       	sbiw	r24, 0x00	; 0
    26be:	19 f0       	breq	.+6      	; 0x26c6 <free+0xe4>
    26c0:	fe 01       	movw	r30, r28
    26c2:	ec 01       	movw	r28, r24
    26c4:	f9 cf       	rjmp	.-14     	; 0x26b8 <free+0xd6>
    26c6:	ce 01       	movw	r24, r28
    26c8:	02 96       	adiw	r24, 0x02	; 2
    26ca:	28 81       	ld	r18, Y
    26cc:	39 81       	ldd	r19, Y+1	; 0x01
    26ce:	82 0f       	add	r24, r18
    26d0:	93 1f       	adc	r25, r19
    26d2:	20 91 62 04 	lds	r18, 0x0462
    26d6:	30 91 63 04 	lds	r19, 0x0463
    26da:	28 17       	cp	r18, r24
    26dc:	39 07       	cpc	r19, r25
    26de:	69 f4       	brne	.+26     	; 0x26fa <free+0x118>
    26e0:	30 97       	sbiw	r30, 0x00	; 0
    26e2:	29 f4       	brne	.+10     	; 0x26ee <free+0x10c>
    26e4:	10 92 65 04 	sts	0x0465, r1
    26e8:	10 92 64 04 	sts	0x0464, r1
    26ec:	02 c0       	rjmp	.+4      	; 0x26f2 <free+0x110>
    26ee:	13 82       	std	Z+3, r1	; 0x03
    26f0:	12 82       	std	Z+2, r1	; 0x02
    26f2:	d0 93 63 04 	sts	0x0463, r29
    26f6:	c0 93 62 04 	sts	0x0462, r28
    26fa:	df 91       	pop	r29
    26fc:	cf 91       	pop	r28
    26fe:	08 95       	ret

00002700 <realloc>:
    2700:	a0 e0       	ldi	r26, 0x00	; 0
    2702:	b0 e0       	ldi	r27, 0x00	; 0
    2704:	e6 e8       	ldi	r30, 0x86	; 134
    2706:	f3 e1       	ldi	r31, 0x13	; 19
    2708:	0c 94 84 14 	jmp	0x2908	; 0x2908 <__prologue_saves__+0x8>
    270c:	ec 01       	movw	r28, r24
    270e:	cb 01       	movw	r24, r22
    2710:	20 97       	sbiw	r28, 0x00	; 0
    2712:	19 f4       	brne	.+6      	; 0x271a <realloc+0x1a>
    2714:	0e 94 59 12 	call	0x24b2	; 0x24b2 <malloc>
    2718:	b8 c0       	rjmp	.+368    	; 0x288a <realloc+0x18a>
    271a:	fe 01       	movw	r30, r28
    271c:	e6 0f       	add	r30, r22
    271e:	f7 1f       	adc	r31, r23
    2720:	9e 01       	movw	r18, r28
    2722:	22 50       	subi	r18, 0x02	; 2
    2724:	31 09       	sbc	r19, r1
    2726:	e2 17       	cp	r30, r18
    2728:	f3 07       	cpc	r31, r19
    272a:	08 f4       	brcc	.+2      	; 0x272e <realloc+0x2e>
    272c:	ac c0       	rjmp	.+344    	; 0x2886 <realloc+0x186>
    272e:	d9 01       	movw	r26, r18
    2730:	0d 91       	ld	r16, X+
    2732:	1c 91       	ld	r17, X
    2734:	11 97       	sbiw	r26, 0x01	; 1
    2736:	06 17       	cp	r16, r22
    2738:	17 07       	cpc	r17, r23
    273a:	b8 f0       	brcs	.+46     	; 0x276a <realloc+0x6a>
    273c:	05 30       	cpi	r16, 0x05	; 5
    273e:	11 05       	cpc	r17, r1
    2740:	08 f4       	brcc	.+2      	; 0x2744 <realloc+0x44>
    2742:	9f c0       	rjmp	.+318    	; 0x2882 <realloc+0x182>
    2744:	a8 01       	movw	r20, r16
    2746:	44 50       	subi	r20, 0x04	; 4
    2748:	51 09       	sbc	r21, r1
    274a:	46 17       	cp	r20, r22
    274c:	57 07       	cpc	r21, r23
    274e:	08 f4       	brcc	.+2      	; 0x2752 <realloc+0x52>
    2750:	98 c0       	rjmp	.+304    	; 0x2882 <realloc+0x182>
    2752:	02 50       	subi	r16, 0x02	; 2
    2754:	11 09       	sbc	r17, r1
    2756:	06 1b       	sub	r16, r22
    2758:	17 0b       	sbc	r17, r23
    275a:	01 93       	st	Z+, r16
    275c:	11 93       	st	Z+, r17
    275e:	6d 93       	st	X+, r22
    2760:	7c 93       	st	X, r23
    2762:	cf 01       	movw	r24, r30
    2764:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <free>
    2768:	8c c0       	rjmp	.+280    	; 0x2882 <realloc+0x182>
    276a:	5b 01       	movw	r10, r22
    276c:	a0 1a       	sub	r10, r16
    276e:	b1 0a       	sbc	r11, r17
    2770:	4e 01       	movw	r8, r28
    2772:	80 0e       	add	r8, r16
    2774:	91 1e       	adc	r9, r17
    2776:	a0 91 64 04 	lds	r26, 0x0464
    277a:	b0 91 65 04 	lds	r27, 0x0465
    277e:	61 2c       	mov	r6, r1
    2780:	71 2c       	mov	r7, r1
    2782:	60 e0       	ldi	r22, 0x00	; 0
    2784:	70 e0       	ldi	r23, 0x00	; 0
    2786:	10 97       	sbiw	r26, 0x00	; 0
    2788:	09 f4       	brne	.+2      	; 0x278c <realloc+0x8c>
    278a:	49 c0       	rjmp	.+146    	; 0x281e <realloc+0x11e>
    278c:	a8 15       	cp	r26, r8
    278e:	b9 05       	cpc	r27, r9
    2790:	c9 f5       	brne	.+114    	; 0x2804 <realloc+0x104>
    2792:	ed 90       	ld	r14, X+
    2794:	fc 90       	ld	r15, X
    2796:	11 97       	sbiw	r26, 0x01	; 1
    2798:	67 01       	movw	r12, r14
    279a:	42 e0       	ldi	r20, 0x02	; 2
    279c:	c4 0e       	add	r12, r20
    279e:	d1 1c       	adc	r13, r1
    27a0:	ca 14       	cp	r12, r10
    27a2:	db 04       	cpc	r13, r11
    27a4:	78 f1       	brcs	.+94     	; 0x2804 <realloc+0x104>
    27a6:	47 01       	movw	r8, r14
    27a8:	8a 18       	sub	r8, r10
    27aa:	9b 08       	sbc	r9, r11
    27ac:	64 01       	movw	r12, r8
    27ae:	42 e0       	ldi	r20, 0x02	; 2
    27b0:	c4 0e       	add	r12, r20
    27b2:	d1 1c       	adc	r13, r1
    27b4:	12 96       	adiw	r26, 0x02	; 2
    27b6:	bc 90       	ld	r11, X
    27b8:	12 97       	sbiw	r26, 0x02	; 2
    27ba:	13 96       	adiw	r26, 0x03	; 3
    27bc:	ac 91       	ld	r26, X
    27be:	b5 e0       	ldi	r27, 0x05	; 5
    27c0:	cb 16       	cp	r12, r27
    27c2:	d1 04       	cpc	r13, r1
    27c4:	40 f0       	brcs	.+16     	; 0x27d6 <realloc+0xd6>
    27c6:	b2 82       	std	Z+2, r11	; 0x02
    27c8:	a3 83       	std	Z+3, r26	; 0x03
    27ca:	91 82       	std	Z+1, r9	; 0x01
    27cc:	80 82       	st	Z, r8
    27ce:	d9 01       	movw	r26, r18
    27d0:	8d 93       	st	X+, r24
    27d2:	9c 93       	st	X, r25
    27d4:	09 c0       	rjmp	.+18     	; 0x27e8 <realloc+0xe8>
    27d6:	0e 5f       	subi	r16, 0xFE	; 254
    27d8:	1f 4f       	sbci	r17, 0xFF	; 255
    27da:	0e 0d       	add	r16, r14
    27dc:	1f 1d       	adc	r17, r15
    27de:	f9 01       	movw	r30, r18
    27e0:	11 83       	std	Z+1, r17	; 0x01
    27e2:	00 83       	st	Z, r16
    27e4:	eb 2d       	mov	r30, r11
    27e6:	fa 2f       	mov	r31, r26
    27e8:	61 15       	cp	r22, r1
    27ea:	71 05       	cpc	r23, r1
    27ec:	31 f0       	breq	.+12     	; 0x27fa <realloc+0xfa>
    27ee:	db 01       	movw	r26, r22
    27f0:	13 96       	adiw	r26, 0x03	; 3
    27f2:	fc 93       	st	X, r31
    27f4:	ee 93       	st	-X, r30
    27f6:	12 97       	sbiw	r26, 0x02	; 2
    27f8:	44 c0       	rjmp	.+136    	; 0x2882 <realloc+0x182>
    27fa:	f0 93 65 04 	sts	0x0465, r31
    27fe:	e0 93 64 04 	sts	0x0464, r30
    2802:	3f c0       	rjmp	.+126    	; 0x2882 <realloc+0x182>
    2804:	6d 91       	ld	r22, X+
    2806:	7c 91       	ld	r23, X
    2808:	11 97       	sbiw	r26, 0x01	; 1
    280a:	66 16       	cp	r6, r22
    280c:	77 06       	cpc	r7, r23
    280e:	08 f4       	brcc	.+2      	; 0x2812 <realloc+0x112>
    2810:	3b 01       	movw	r6, r22
    2812:	bd 01       	movw	r22, r26
    2814:	12 96       	adiw	r26, 0x02	; 2
    2816:	0d 90       	ld	r0, X+
    2818:	bc 91       	ld	r27, X
    281a:	a0 2d       	mov	r26, r0
    281c:	b4 cf       	rjmp	.-152    	; 0x2786 <realloc+0x86>
    281e:	60 91 62 04 	lds	r22, 0x0462
    2822:	70 91 63 04 	lds	r23, 0x0463
    2826:	68 15       	cp	r22, r8
    2828:	79 05       	cpc	r23, r9
    282a:	e9 f4       	brne	.+58     	; 0x2866 <realloc+0x166>
    282c:	68 16       	cp	r6, r24
    282e:	79 06       	cpc	r7, r25
    2830:	d0 f4       	brcc	.+52     	; 0x2866 <realloc+0x166>
    2832:	40 91 00 01 	lds	r20, 0x0100
    2836:	50 91 01 01 	lds	r21, 0x0101
    283a:	41 15       	cp	r20, r1
    283c:	51 05       	cpc	r21, r1
    283e:	41 f4       	brne	.+16     	; 0x2850 <realloc+0x150>
    2840:	4d b7       	in	r20, 0x3d	; 61
    2842:	5e b7       	in	r21, 0x3e	; 62
    2844:	60 91 04 01 	lds	r22, 0x0104
    2848:	70 91 05 01 	lds	r23, 0x0105
    284c:	46 1b       	sub	r20, r22
    284e:	57 0b       	sbc	r21, r23
    2850:	e4 17       	cp	r30, r20
    2852:	f5 07       	cpc	r31, r21
    2854:	c0 f4       	brcc	.+48     	; 0x2886 <realloc+0x186>
    2856:	f0 93 63 04 	sts	0x0463, r31
    285a:	e0 93 62 04 	sts	0x0462, r30
    285e:	f9 01       	movw	r30, r18
    2860:	91 83       	std	Z+1, r25	; 0x01
    2862:	80 83       	st	Z, r24
    2864:	0e c0       	rjmp	.+28     	; 0x2882 <realloc+0x182>
    2866:	0e 94 59 12 	call	0x24b2	; 0x24b2 <malloc>
    286a:	7c 01       	movw	r14, r24
    286c:	00 97       	sbiw	r24, 0x00	; 0
    286e:	59 f0       	breq	.+22     	; 0x2886 <realloc+0x186>
    2870:	a8 01       	movw	r20, r16
    2872:	be 01       	movw	r22, r28
    2874:	0e 94 4a 14 	call	0x2894	; 0x2894 <memcpy>
    2878:	ce 01       	movw	r24, r28
    287a:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <free>
    287e:	c7 01       	movw	r24, r14
    2880:	04 c0       	rjmp	.+8      	; 0x288a <realloc+0x18a>
    2882:	ce 01       	movw	r24, r28
    2884:	02 c0       	rjmp	.+4      	; 0x288a <realloc+0x18a>
    2886:	80 e0       	ldi	r24, 0x00	; 0
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	cd b7       	in	r28, 0x3d	; 61
    288c:	de b7       	in	r29, 0x3e	; 62
    288e:	ee e0       	ldi	r30, 0x0E	; 14
    2890:	0c 94 a0 14 	jmp	0x2940	; 0x2940 <__epilogue_restores__+0x8>

00002894 <memcpy>:
    2894:	fb 01       	movw	r30, r22
    2896:	dc 01       	movw	r26, r24
    2898:	02 c0       	rjmp	.+4      	; 0x289e <memcpy+0xa>
    289a:	01 90       	ld	r0, Z+
    289c:	0d 92       	st	X+, r0
    289e:	41 50       	subi	r20, 0x01	; 1
    28a0:	50 40       	sbci	r21, 0x00	; 0
    28a2:	d8 f7       	brcc	.-10     	; 0x289a <memcpy+0x6>
    28a4:	08 95       	ret

000028a6 <strcmp>:
    28a6:	fb 01       	movw	r30, r22
    28a8:	dc 01       	movw	r26, r24
    28aa:	8d 91       	ld	r24, X+
    28ac:	01 90       	ld	r0, Z+
    28ae:	80 19       	sub	r24, r0
    28b0:	01 10       	cpse	r0, r1
    28b2:	d9 f3       	breq	.-10     	; 0x28aa <strcmp+0x4>
    28b4:	99 0b       	sbc	r25, r25
    28b6:	08 95       	ret

000028b8 <strcpy>:
    28b8:	fb 01       	movw	r30, r22
    28ba:	dc 01       	movw	r26, r24
    28bc:	01 90       	ld	r0, Z+
    28be:	0d 92       	st	X+, r0
    28c0:	00 20       	and	r0, r0
    28c2:	e1 f7       	brne	.-8      	; 0x28bc <strcpy+0x4>
    28c4:	08 95       	ret

000028c6 <strncmp>:
    28c6:	fb 01       	movw	r30, r22
    28c8:	dc 01       	movw	r26, r24
    28ca:	41 50       	subi	r20, 0x01	; 1
    28cc:	50 40       	sbci	r21, 0x00	; 0
    28ce:	30 f0       	brcs	.+12     	; 0x28dc <strncmp+0x16>
    28d0:	8d 91       	ld	r24, X+
    28d2:	01 90       	ld	r0, Z+
    28d4:	80 19       	sub	r24, r0
    28d6:	19 f4       	brne	.+6      	; 0x28de <strncmp+0x18>
    28d8:	00 20       	and	r0, r0
    28da:	b9 f7       	brne	.-18     	; 0x28ca <strncmp+0x4>
    28dc:	88 1b       	sub	r24, r24
    28de:	99 0b       	sbc	r25, r25
    28e0:	08 95       	ret

000028e2 <strncpy>:
    28e2:	fb 01       	movw	r30, r22
    28e4:	dc 01       	movw	r26, r24
    28e6:	41 50       	subi	r20, 0x01	; 1
    28e8:	50 40       	sbci	r21, 0x00	; 0
    28ea:	48 f0       	brcs	.+18     	; 0x28fe <strncpy+0x1c>
    28ec:	01 90       	ld	r0, Z+
    28ee:	0d 92       	st	X+, r0
    28f0:	00 20       	and	r0, r0
    28f2:	c9 f7       	brne	.-14     	; 0x28e6 <strncpy+0x4>
    28f4:	01 c0       	rjmp	.+2      	; 0x28f8 <strncpy+0x16>
    28f6:	1d 92       	st	X+, r1
    28f8:	41 50       	subi	r20, 0x01	; 1
    28fa:	50 40       	sbci	r21, 0x00	; 0
    28fc:	e0 f7       	brcc	.-8      	; 0x28f6 <strncpy+0x14>
    28fe:	08 95       	ret

00002900 <__prologue_saves__>:
    2900:	2f 92       	push	r2
    2902:	3f 92       	push	r3
    2904:	4f 92       	push	r4
    2906:	5f 92       	push	r5
    2908:	6f 92       	push	r6
    290a:	7f 92       	push	r7
    290c:	8f 92       	push	r8
    290e:	9f 92       	push	r9
    2910:	af 92       	push	r10
    2912:	bf 92       	push	r11
    2914:	cf 92       	push	r12
    2916:	df 92       	push	r13
    2918:	ef 92       	push	r14
    291a:	ff 92       	push	r15
    291c:	0f 93       	push	r16
    291e:	1f 93       	push	r17
    2920:	cf 93       	push	r28
    2922:	df 93       	push	r29
    2924:	cd b7       	in	r28, 0x3d	; 61
    2926:	de b7       	in	r29, 0x3e	; 62
    2928:	ca 1b       	sub	r28, r26
    292a:	db 0b       	sbc	r29, r27
    292c:	0f b6       	in	r0, 0x3f	; 63
    292e:	f8 94       	cli
    2930:	de bf       	out	0x3e, r29	; 62
    2932:	0f be       	out	0x3f, r0	; 63
    2934:	cd bf       	out	0x3d, r28	; 61
    2936:	09 94       	ijmp

00002938 <__epilogue_restores__>:
    2938:	2a 88       	ldd	r2, Y+18	; 0x12
    293a:	39 88       	ldd	r3, Y+17	; 0x11
    293c:	48 88       	ldd	r4, Y+16	; 0x10
    293e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2940:	6e 84       	ldd	r6, Y+14	; 0x0e
    2942:	7d 84       	ldd	r7, Y+13	; 0x0d
    2944:	8c 84       	ldd	r8, Y+12	; 0x0c
    2946:	9b 84       	ldd	r9, Y+11	; 0x0b
    2948:	aa 84       	ldd	r10, Y+10	; 0x0a
    294a:	b9 84       	ldd	r11, Y+9	; 0x09
    294c:	c8 84       	ldd	r12, Y+8	; 0x08
    294e:	df 80       	ldd	r13, Y+7	; 0x07
    2950:	ee 80       	ldd	r14, Y+6	; 0x06
    2952:	fd 80       	ldd	r15, Y+5	; 0x05
    2954:	0c 81       	ldd	r16, Y+4	; 0x04
    2956:	1b 81       	ldd	r17, Y+3	; 0x03
    2958:	aa 81       	ldd	r26, Y+2	; 0x02
    295a:	b9 81       	ldd	r27, Y+1	; 0x01
    295c:	ce 0f       	add	r28, r30
    295e:	d1 1d       	adc	r29, r1
    2960:	0f b6       	in	r0, 0x3f	; 63
    2962:	f8 94       	cli
    2964:	de bf       	out	0x3e, r29	; 62
    2966:	0f be       	out	0x3f, r0	; 63
    2968:	cd bf       	out	0x3d, r28	; 61
    296a:	ed 01       	movw	r28, r26
    296c:	08 95       	ret

0000296e <__do_global_dtors>:
    296e:	10 e0       	ldi	r17, 0x00	; 0
    2970:	c0 ec       	ldi	r28, 0xC0	; 192
    2972:	d0 e0       	ldi	r29, 0x00	; 0
    2974:	04 c0       	rjmp	.+8      	; 0x297e <__do_global_dtors+0x10>
    2976:	fe 01       	movw	r30, r28
    2978:	0e 94 55 12 	call	0x24aa	; 0x24aa <__tablejump__>
    297c:	22 96       	adiw	r28, 0x02	; 2
    297e:	c2 3c       	cpi	r28, 0xC2	; 194
    2980:	d1 07       	cpc	r29, r17
    2982:	c9 f7       	brne	.-14     	; 0x2976 <__do_global_dtors+0x8>
    2984:	f8 94       	cli

00002986 <__stop_program>:
    2986:	ff cf       	rjmp	.-2      	; 0x2986 <__stop_program>
