
SensorGloves.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000298  00800100  00002a80  00002b14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011c  00800398  00800398  00002dac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002dac  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000778  00000000  00000000  00002ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00012186  00000000  00000000  00003554  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000282a  00000000  00000000  000156da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002963  00000000  00000000  00017f04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001aa4  00000000  00000000  0001a868  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002898  00000000  00000000  0001c30c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00008faf  00000000  00000000  0001eba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000890  00000000  00000000  00027b53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__dtors_end>
       4:	0c 94 aa 04 	jmp	0x954	; 0x954 <__vector_1>
       8:	0c 94 d7 04 	jmp	0x9ae	; 0x9ae <__vector_2>
       c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      10:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      14:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      18:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      1c:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__vector_7>
      20:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      24:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      28:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      2c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      30:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      34:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      38:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      3c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      40:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__vector_16>
      44:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      48:	0c 94 ca 01 	jmp	0x394	; 0x394 <__vector_18>
      4c:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__vector_19>
      50:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      54:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      58:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      5c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      60:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      64:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	02 00       	.word	0x0002	; ????

00000069 <digital_pin_to_timer_PGM>:
      69:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      79:	00 00 00 00                                         ....

0000007d <digital_pin_to_bit_mask_PGM>:
      7d:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8d:	04 08 10 20                                         ... 

00000091 <digital_pin_to_port_PGM>:
      91:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a1:	03 03 03 03                                         ....

000000a5 <port_to_output_PGM>:
      a5:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000af <port_to_mode_PGM>:
      af:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000000ba <__ctors_start>:
      ba:	2c 02       	muls	r18, r28
      bc:	aa 02       	muls	r26, r26
      be:	4e 10       	cpse	r4, r14

000000c0 <__ctors_end>:
      c0:	66 10       	cpse	r6, r6

000000c2 <__dtors_end>:
      c2:	11 24       	eor	r1, r1
      c4:	1f be       	out	0x3f, r1	; 63
      c6:	cf ef       	ldi	r28, 0xFF	; 255
      c8:	d8 e0       	ldi	r29, 0x08	; 8
      ca:	de bf       	out	0x3e, r29	; 62
      cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
      ce:	13 e0       	ldi	r17, 0x03	; 3
      d0:	a0 e0       	ldi	r26, 0x00	; 0
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	e0 e8       	ldi	r30, 0x80	; 128
      d6:	fa e2       	ldi	r31, 0x2A	; 42
      d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
      da:	05 90       	lpm	r0, Z+
      dc:	0d 92       	st	X+, r0
      de:	a8 39       	cpi	r26, 0x98	; 152
      e0:	b1 07       	cpc	r27, r17
      e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
      e4:	24 e0       	ldi	r18, 0x04	; 4
      e6:	a8 e9       	ldi	r26, 0x98	; 152
      e8:	b3 e0       	ldi	r27, 0x03	; 3
      ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
      ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
      ee:	a4 3b       	cpi	r26, 0xB4	; 180
      f0:	b2 07       	cpc	r27, r18
      f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>

000000f4 <__do_global_ctors>:
      f4:	10 e0       	ldi	r17, 0x00	; 0
      f6:	c0 ec       	ldi	r28, 0xC0	; 192
      f8:	d0 e0       	ldi	r29, 0x00	; 0
      fa:	04 c0       	rjmp	.+8      	; 0x104 <__do_global_ctors+0x10>
      fc:	22 97       	sbiw	r28, 0x02	; 2
      fe:	fe 01       	movw	r30, r28
     100:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__tablejump__>
     104:	ca 3b       	cpi	r28, 0xBA	; 186
     106:	d1 07       	cpc	r29, r17
     108:	c9 f7       	brne	.-14     	; 0xfc <__do_global_ctors+0x8>
     10a:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <main>
     10e:	0c 94 33 15 	jmp	0x2a66	; 0x2a66 <__do_global_dtors>

00000112 <__bad_interrupt>:
     112:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000116 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     116:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     118:	81 8d       	ldd	r24, Z+25	; 0x19
     11a:	22 8d       	ldd	r18, Z+26	; 0x1a
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	80 5c       	subi	r24, 0xC0	; 192
     120:	9f 4f       	sbci	r25, 0xFF	; 255
     122:	82 1b       	sub	r24, r18
     124:	91 09       	sbc	r25, r1
}
     126:	8f 73       	andi	r24, 0x3F	; 63
     128:	99 27       	eor	r25, r25
     12a:	08 95       	ret

0000012c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     12c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     12e:	91 8d       	ldd	r25, Z+25	; 0x19
     130:	82 8d       	ldd	r24, Z+26	; 0x1a
     132:	98 17       	cp	r25, r24
     134:	31 f0       	breq	.+12     	; 0x142 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     136:	82 8d       	ldd	r24, Z+26	; 0x1a
     138:	e8 0f       	add	r30, r24
     13a:	f1 1d       	adc	r31, r1
     13c:	85 8d       	ldd	r24, Z+29	; 0x1d
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     142:	8f ef       	ldi	r24, 0xFF	; 255
     144:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     146:	08 95       	ret

00000148 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     148:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     14a:	91 8d       	ldd	r25, Z+25	; 0x19
     14c:	82 8d       	ldd	r24, Z+26	; 0x1a
     14e:	98 17       	cp	r25, r24
     150:	61 f0       	breq	.+24     	; 0x16a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     152:	82 8d       	ldd	r24, Z+26	; 0x1a
     154:	df 01       	movw	r26, r30
     156:	a8 0f       	add	r26, r24
     158:	b1 1d       	adc	r27, r1
     15a:	5d 96       	adiw	r26, 0x1d	; 29
     15c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     15e:	92 8d       	ldd	r25, Z+26	; 0x1a
     160:	9f 5f       	subi	r25, 0xFF	; 255
     162:	9f 73       	andi	r25, 0x3F	; 63
     164:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     16a:	8f ef       	ldi	r24, 0xFF	; 255
     16c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     16e:	08 95       	ret

00000170 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     170:	82 e2       	ldi	r24, 0x22	; 34
     172:	92 e0       	ldi	r25, 0x02	; 2
     174:	89 2b       	or	r24, r25
     176:	49 f0       	breq	.+18     	; 0x18a <_Z14serialEventRunv+0x1a>
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	89 2b       	or	r24, r25
     17e:	29 f0       	breq	.+10     	; 0x18a <_Z14serialEventRunv+0x1a>
     180:	0e 94 22 02 	call	0x444	; 0x444 <_Z17Serial0_availablev>
     184:	81 11       	cpse	r24, r1
     186:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     18a:	08 95       	ret

0000018c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     18c:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     18e:	84 8d       	ldd	r24, Z+28	; 0x1c
     190:	df 01       	movw	r26, r30
     192:	a8 0f       	add	r26, r24
     194:	b1 1d       	adc	r27, r1
     196:	a3 5a       	subi	r26, 0xA3	; 163
     198:	bf 4f       	sbci	r27, 0xFF	; 255
     19a:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     19c:	84 8d       	ldd	r24, Z+28	; 0x1c
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	01 96       	adiw	r24, 0x01	; 1
     1a2:	8f 73       	andi	r24, 0x3F	; 63
     1a4:	99 27       	eor	r25, r25
     1a6:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     1a8:	a6 89       	ldd	r26, Z+22	; 0x16
     1aa:	b7 89       	ldd	r27, Z+23	; 0x17
     1ac:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     1ae:	a0 89       	ldd	r26, Z+16	; 0x10
     1b0:	b1 89       	ldd	r27, Z+17	; 0x11
     1b2:	8c 91       	ld	r24, X
     1b4:	80 64       	ori	r24, 0x40	; 64
     1b6:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     1b8:	93 8d       	ldd	r25, Z+27	; 0x1b
     1ba:	84 8d       	ldd	r24, Z+28	; 0x1c
     1bc:	98 13       	cpse	r25, r24
     1be:	06 c0       	rjmp	.+12     	; 0x1cc <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     1c0:	02 88       	ldd	r0, Z+18	; 0x12
     1c2:	f3 89       	ldd	r31, Z+19	; 0x13
     1c4:	e0 2d       	mov	r30, r0
     1c6:	80 81       	ld	r24, Z
     1c8:	8f 7d       	andi	r24, 0xDF	; 223
     1ca:	80 83       	st	Z, r24
     1cc:	08 95       	ret

000001ce <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     1ce:	cf 93       	push	r28
     1d0:	df 93       	push	r29
     1d2:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     1d4:	88 8d       	ldd	r24, Y+24	; 0x18
     1d6:	88 23       	and	r24, r24
     1d8:	c9 f0       	breq	.+50     	; 0x20c <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     1da:	ea 89       	ldd	r30, Y+18	; 0x12
     1dc:	fb 89       	ldd	r31, Y+19	; 0x13
     1de:	80 81       	ld	r24, Z
     1e0:	85 fd       	sbrc	r24, 5
     1e2:	05 c0       	rjmp	.+10     	; 0x1ee <_ZN14HardwareSerial5flushEv+0x20>
     1e4:	a8 89       	ldd	r26, Y+16	; 0x10
     1e6:	b9 89       	ldd	r27, Y+17	; 0x11
     1e8:	8c 91       	ld	r24, X
     1ea:	86 fd       	sbrc	r24, 6
     1ec:	0f c0       	rjmp	.+30     	; 0x20c <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	07 fc       	sbrc	r0, 7
     1f2:	f5 cf       	rjmp	.-22     	; 0x1de <_ZN14HardwareSerial5flushEv+0x10>
     1f4:	80 81       	ld	r24, Z
     1f6:	85 ff       	sbrs	r24, 5
     1f8:	f2 cf       	rjmp	.-28     	; 0x1de <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     1fa:	a8 89       	ldd	r26, Y+16	; 0x10
     1fc:	b9 89       	ldd	r27, Y+17	; 0x11
     1fe:	8c 91       	ld	r24, X
     200:	85 ff       	sbrs	r24, 5
     202:	ed cf       	rjmp	.-38     	; 0x1de <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     204:	ce 01       	movw	r24, r28
     206:	0e 94 c6 00 	call	0x18c	; 0x18c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     20a:	e7 cf       	rjmp	.-50     	; 0x1da <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     20c:	df 91       	pop	r29
     20e:	cf 91       	pop	r28
     210:	08 95       	ret

00000212 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     212:	cf 92       	push	r12
     214:	df 92       	push	r13
     216:	ff 92       	push	r15
     218:	0f 93       	push	r16
     21a:	1f 93       	push	r17
     21c:	cf 93       	push	r28
     21e:	df 93       	push	r29
     220:	1f 92       	push	r1
     222:	cd b7       	in	r28, 0x3d	; 61
     224:	de b7       	in	r29, 0x3e	; 62
     226:	6c 01       	movw	r12, r24
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     228:	dc 01       	movw	r26, r24
     22a:	5b 96       	adiw	r26, 0x1b	; 27
     22c:	9c 91       	ld	r25, X
     22e:	5b 97       	sbiw	r26, 0x1b	; 27
     230:	5c 96       	adiw	r26, 0x1c	; 28
     232:	8c 91       	ld	r24, X
     234:	5c 97       	sbiw	r26, 0x1c	; 28
     236:	98 13       	cpse	r25, r24
     238:	07 c0       	rjmp	.+14     	; 0x248 <_ZN14HardwareSerial5writeEh+0x36>
     23a:	50 96       	adiw	r26, 0x10	; 16
     23c:	ed 91       	ld	r30, X+
     23e:	fc 91       	ld	r31, X
     240:	51 97       	sbiw	r26, 0x11	; 17
     242:	80 81       	ld	r24, Z
     244:	85 fd       	sbrc	r24, 5
     246:	32 c0       	rjmp	.+100    	; 0x2ac <_ZN14HardwareSerial5writeEh+0x9a>
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     248:	f6 01       	movw	r30, r12
     24a:	03 8d       	ldd	r16, Z+27	; 0x1b
     24c:	10 e0       	ldi	r17, 0x00	; 0
     24e:	0f 5f       	subi	r16, 0xFF	; 255
     250:	1f 4f       	sbci	r17, 0xFF	; 255
     252:	0f 73       	andi	r16, 0x3F	; 63
     254:	11 27       	eor	r17, r17
     256:	f0 2e       	mov	r15, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     258:	f6 01       	movw	r30, r12
     25a:	84 8d       	ldd	r24, Z+28	; 0x1c
     25c:	f8 12       	cpse	r15, r24
     25e:	11 c0       	rjmp	.+34     	; 0x282 <_ZN14HardwareSerial5writeEh+0x70>
    if (bit_is_clear(SREG, SREG_I)) {
     260:	0f b6       	in	r0, 0x3f	; 63
     262:	07 fc       	sbrc	r0, 7
     264:	f9 cf       	rjmp	.-14     	; 0x258 <_ZN14HardwareSerial5writeEh+0x46>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     266:	d6 01       	movw	r26, r12
     268:	50 96       	adiw	r26, 0x10	; 16
     26a:	ed 91       	ld	r30, X+
     26c:	fc 91       	ld	r31, X
     26e:	51 97       	sbiw	r26, 0x11	; 17
     270:	80 81       	ld	r24, Z
     272:	85 ff       	sbrs	r24, 5
     274:	f1 cf       	rjmp	.-30     	; 0x258 <_ZN14HardwareSerial5writeEh+0x46>
	_tx_udr_empty_irq();
     276:	c6 01       	movw	r24, r12
     278:	69 83       	std	Y+1, r22	; 0x01
     27a:	0e 94 c6 00 	call	0x18c	; 0x18c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     27e:	69 81       	ldd	r22, Y+1	; 0x01
     280:	eb cf       	rjmp	.-42     	; 0x258 <_ZN14HardwareSerial5writeEh+0x46>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     282:	83 8d       	ldd	r24, Z+27	; 0x1b
     284:	e8 0f       	add	r30, r24
     286:	f1 1d       	adc	r31, r1
     288:	e3 5a       	subi	r30, 0xA3	; 163
     28a:	ff 4f       	sbci	r31, 0xFF	; 255
     28c:	60 83       	st	Z, r22
  _tx_buffer_head = i;
     28e:	d6 01       	movw	r26, r12
     290:	5b 96       	adiw	r26, 0x1b	; 27
     292:	0c 93       	st	X, r16
     294:	5b 97       	sbiw	r26, 0x1b	; 27
	
  sbi(*_ucsrb, UDRIE0);
     296:	52 96       	adiw	r26, 0x12	; 18
     298:	ed 91       	ld	r30, X+
     29a:	fc 91       	ld	r31, X
     29c:	53 97       	sbiw	r26, 0x13	; 19
     29e:	80 81       	ld	r24, Z
     2a0:	80 62       	ori	r24, 0x20	; 32
     2a2:	80 83       	st	Z, r24
  _written = true;
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	58 96       	adiw	r26, 0x18	; 24
     2a8:	8c 93       	st	X, r24
     2aa:	0d c0       	rjmp	.+26     	; 0x2c6 <_ZN14HardwareSerial5writeEh+0xb4>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     2ac:	d6 01       	movw	r26, r12
     2ae:	56 96       	adiw	r26, 0x16	; 22
     2b0:	ed 91       	ld	r30, X+
     2b2:	fc 91       	ld	r31, X
     2b4:	57 97       	sbiw	r26, 0x17	; 23
     2b6:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     2b8:	50 96       	adiw	r26, 0x10	; 16
     2ba:	ed 91       	ld	r30, X+
     2bc:	fc 91       	ld	r31, X
     2be:	51 97       	sbiw	r26, 0x11	; 17
     2c0:	80 81       	ld	r24, Z
     2c2:	80 64       	ori	r24, 0x40	; 64
     2c4:	80 83       	st	Z, r24
	
  sbi(*_ucsrb, UDRIE0);
  _written = true;
  
  return 1;
}
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	0f 90       	pop	r0
     2cc:	df 91       	pop	r29
     2ce:	cf 91       	pop	r28
     2d0:	1f 91       	pop	r17
     2d2:	0f 91       	pop	r16
     2d4:	ff 90       	pop	r15
     2d6:	df 90       	pop	r13
     2d8:	cf 90       	pop	r12
     2da:	08 95       	ret

000002dc <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     2dc:	bf 92       	push	r11
     2de:	cf 92       	push	r12
     2e0:	df 92       	push	r13
     2e2:	ef 92       	push	r14
     2e4:	ff 92       	push	r15
     2e6:	cf 93       	push	r28
     2e8:	df 93       	push	r29
     2ea:	ec 01       	movw	r28, r24
     2ec:	6a 01       	movw	r12, r20
     2ee:	7b 01       	movw	r14, r22
     2f0:	b2 2e       	mov	r11, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     2f2:	60 e8       	ldi	r22, 0x80	; 128
     2f4:	74 e8       	ldi	r23, 0x84	; 132
     2f6:	8e e1       	ldi	r24, 0x1E	; 30
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	a7 01       	movw	r20, r14
     2fc:	96 01       	movw	r18, r12
     2fe:	0e 94 ad 12 	call	0x255a	; 0x255a <__udivmodsi4>
     302:	21 50       	subi	r18, 0x01	; 1
     304:	31 09       	sbc	r19, r1
     306:	41 09       	sbc	r20, r1
     308:	51 09       	sbc	r21, r1
     30a:	56 95       	lsr	r21
     30c:	47 95       	ror	r20
     30e:	37 95       	ror	r19
     310:	27 95       	ror	r18
  *_ucsra = 1 << U2X0;
     312:	e8 89       	ldd	r30, Y+16	; 0x10
     314:	f9 89       	ldd	r31, Y+17	; 0x11
     316:	82 e0       	ldi	r24, 0x02	; 2
     318:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     31a:	21 15       	cp	r18, r1
     31c:	80 e1       	ldi	r24, 0x10	; 16
     31e:	38 07       	cpc	r19, r24
     320:	98 f0       	brcs	.+38     	; 0x348 <_ZN14HardwareSerial5beginEmh+0x6c>
  {
    *_ucsra = 0;
     322:	e8 89       	ldd	r30, Y+16	; 0x10
     324:	f9 89       	ldd	r31, Y+17	; 0x11
     326:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     328:	60 e4       	ldi	r22, 0x40	; 64
     32a:	72 e4       	ldi	r23, 0x42	; 66
     32c:	8f e0       	ldi	r24, 0x0F	; 15
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	a7 01       	movw	r20, r14
     332:	96 01       	movw	r18, r12
     334:	0e 94 ad 12 	call	0x255a	; 0x255a <__udivmodsi4>
     338:	21 50       	subi	r18, 0x01	; 1
     33a:	31 09       	sbc	r19, r1
     33c:	41 09       	sbc	r20, r1
     33e:	51 09       	sbc	r21, r1
     340:	56 95       	lsr	r21
     342:	47 95       	ror	r20
     344:	37 95       	ror	r19
     346:	27 95       	ror	r18
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     348:	ec 85       	ldd	r30, Y+12	; 0x0c
     34a:	fd 85       	ldd	r31, Y+13	; 0x0d
     34c:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     34e:	ee 85       	ldd	r30, Y+14	; 0x0e
     350:	ff 85       	ldd	r31, Y+15	; 0x0f
     352:	20 83       	st	Z, r18

  _written = false;
     354:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     356:	ec 89       	ldd	r30, Y+20	; 0x14
     358:	fd 89       	ldd	r31, Y+21	; 0x15
     35a:	b0 82       	st	Z, r11
  
  sbi(*_ucsrb, RXEN0);
     35c:	ea 89       	ldd	r30, Y+18	; 0x12
     35e:	fb 89       	ldd	r31, Y+19	; 0x13
     360:	80 81       	ld	r24, Z
     362:	80 61       	ori	r24, 0x10	; 16
     364:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     366:	ea 89       	ldd	r30, Y+18	; 0x12
     368:	fb 89       	ldd	r31, Y+19	; 0x13
     36a:	80 81       	ld	r24, Z
     36c:	88 60       	ori	r24, 0x08	; 8
     36e:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     370:	ea 89       	ldd	r30, Y+18	; 0x12
     372:	fb 89       	ldd	r31, Y+19	; 0x13
     374:	80 81       	ld	r24, Z
     376:	80 68       	ori	r24, 0x80	; 128
     378:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     37a:	ea 89       	ldd	r30, Y+18	; 0x12
     37c:	fb 89       	ldd	r31, Y+19	; 0x13
     37e:	80 81       	ld	r24, Z
     380:	8f 7d       	andi	r24, 0xDF	; 223
     382:	80 83       	st	Z, r24
}
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	ff 90       	pop	r15
     38a:	ef 90       	pop	r14
     38c:	df 90       	pop	r13
     38e:	cf 90       	pop	r12
     390:	bf 90       	pop	r11
     392:	08 95       	ret

00000394 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     394:	1f 92       	push	r1
     396:	0f 92       	push	r0
     398:	0f b6       	in	r0, 0x3f	; 63
     39a:	0f 92       	push	r0
     39c:	11 24       	eor	r1, r1
     39e:	2f 93       	push	r18
     3a0:	8f 93       	push	r24
     3a2:	9f 93       	push	r25
     3a4:	ef 93       	push	r30
     3a6:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     3a8:	e0 91 a8 03 	lds	r30, 0x03A8
     3ac:	f0 91 a9 03 	lds	r31, 0x03A9
     3b0:	80 81       	ld	r24, Z
     3b2:	e0 91 ae 03 	lds	r30, 0x03AE
     3b6:	f0 91 af 03 	lds	r31, 0x03AF
     3ba:	82 fd       	sbrc	r24, 2
     3bc:	12 c0       	rjmp	.+36     	; 0x3e2 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     3be:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     3c0:	80 91 b1 03 	lds	r24, 0x03B1
     3c4:	8f 5f       	subi	r24, 0xFF	; 255
     3c6:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     3c8:	20 91 b2 03 	lds	r18, 0x03B2
     3cc:	82 17       	cp	r24, r18
     3ce:	51 f0       	breq	.+20     	; 0x3e4 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     3d0:	e0 91 b1 03 	lds	r30, 0x03B1
     3d4:	f0 e0       	ldi	r31, 0x00	; 0
     3d6:	e8 56       	subi	r30, 0x68	; 104
     3d8:	fc 4f       	sbci	r31, 0xFC	; 252
     3da:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     3dc:	80 93 b1 03 	sts	0x03B1, r24
     3e0:	01 c0       	rjmp	.+2      	; 0x3e4 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     3e2:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     3e4:	ff 91       	pop	r31
     3e6:	ef 91       	pop	r30
     3e8:	9f 91       	pop	r25
     3ea:	8f 91       	pop	r24
     3ec:	2f 91       	pop	r18
     3ee:	0f 90       	pop	r0
     3f0:	0f be       	out	0x3f, r0	; 63
     3f2:	0f 90       	pop	r0
     3f4:	1f 90       	pop	r1
     3f6:	18 95       	reti

000003f8 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     3f8:	1f 92       	push	r1
     3fa:	0f 92       	push	r0
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	0f 92       	push	r0
     400:	11 24       	eor	r1, r1
     402:	2f 93       	push	r18
     404:	3f 93       	push	r19
     406:	4f 93       	push	r20
     408:	5f 93       	push	r21
     40a:	6f 93       	push	r22
     40c:	7f 93       	push	r23
     40e:	8f 93       	push	r24
     410:	9f 93       	push	r25
     412:	af 93       	push	r26
     414:	bf 93       	push	r27
     416:	ef 93       	push	r30
     418:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     41a:	88 e9       	ldi	r24, 0x98	; 152
     41c:	93 e0       	ldi	r25, 0x03	; 3
     41e:	0e 94 c6 00 	call	0x18c	; 0x18c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     422:	ff 91       	pop	r31
     424:	ef 91       	pop	r30
     426:	bf 91       	pop	r27
     428:	af 91       	pop	r26
     42a:	9f 91       	pop	r25
     42c:	8f 91       	pop	r24
     42e:	7f 91       	pop	r23
     430:	6f 91       	pop	r22
     432:	5f 91       	pop	r21
     434:	4f 91       	pop	r20
     436:	3f 91       	pop	r19
     438:	2f 91       	pop	r18
     43a:	0f 90       	pop	r0
     43c:	0f be       	out	0x3f, r0	; 63
     43e:	0f 90       	pop	r0
     440:	1f 90       	pop	r1
     442:	18 95       	reti

00000444 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     444:	88 e9       	ldi	r24, 0x98	; 152
     446:	93 e0       	ldi	r25, 0x03	; 3
     448:	0e 94 8b 00 	call	0x116	; 0x116 <_ZN14HardwareSerial9availableEv>
     44c:	21 e0       	ldi	r18, 0x01	; 1
     44e:	89 2b       	or	r24, r25
     450:	09 f4       	brne	.+2      	; 0x454 <_Z17Serial0_availablev+0x10>
     452:	20 e0       	ldi	r18, 0x00	; 0
}
     454:	82 2f       	mov	r24, r18
     456:	08 95       	ret

00000458 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     458:	10 92 9b 03 	sts	0x039B, r1
     45c:	10 92 9a 03 	sts	0x039A, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     460:	88 ee       	ldi	r24, 0xE8	; 232
     462:	93 e0       	ldi	r25, 0x03	; 3
     464:	a0 e0       	ldi	r26, 0x00	; 0
     466:	b0 e0       	ldi	r27, 0x00	; 0
     468:	80 93 9c 03 	sts	0x039C, r24
     46c:	90 93 9d 03 	sts	0x039D, r25
     470:	a0 93 9e 03 	sts	0x039E, r26
     474:	b0 93 9f 03 	sts	0x039F, r27
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     478:	8c e0       	ldi	r24, 0x0C	; 12
     47a:	91 e0       	ldi	r25, 0x01	; 1
     47c:	90 93 99 03 	sts	0x0399, r25
     480:	80 93 98 03 	sts	0x0398, r24
     484:	85 ec       	ldi	r24, 0xC5	; 197
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	90 93 a5 03 	sts	0x03A5, r25
     48c:	80 93 a4 03 	sts	0x03A4, r24
     490:	84 ec       	ldi	r24, 0xC4	; 196
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	90 93 a7 03 	sts	0x03A7, r25
     498:	80 93 a6 03 	sts	0x03A6, r24
     49c:	80 ec       	ldi	r24, 0xC0	; 192
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	90 93 a9 03 	sts	0x03A9, r25
     4a4:	80 93 a8 03 	sts	0x03A8, r24
     4a8:	81 ec       	ldi	r24, 0xC1	; 193
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	90 93 ab 03 	sts	0x03AB, r25
     4b0:	80 93 aa 03 	sts	0x03AA, r24
     4b4:	82 ec       	ldi	r24, 0xC2	; 194
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	90 93 ad 03 	sts	0x03AD, r25
     4bc:	80 93 ac 03 	sts	0x03AC, r24
     4c0:	86 ec       	ldi	r24, 0xC6	; 198
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	90 93 af 03 	sts	0x03AF, r25
     4c8:	80 93 ae 03 	sts	0x03AE, r24
     4cc:	10 92 b1 03 	sts	0x03B1, r1
     4d0:	10 92 b2 03 	sts	0x03B2, r1
     4d4:	10 92 b3 03 	sts	0x03B3, r1
     4d8:	10 92 b4 03 	sts	0x03B4, r1
     4dc:	08 95       	ret

000004de <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
     4de:	08 95       	ret

000004e0 <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
     4e0:	af 92       	push	r10
     4e2:	bf 92       	push	r11
     4e4:	cf 92       	push	r12
     4e6:	df 92       	push	r13
     4e8:	ef 92       	push	r14
     4ea:	ff 92       	push	r15
     4ec:	0f 93       	push	r16
     4ee:	1f 93       	push	r17
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	6c 01       	movw	r12, r24
     4f6:	7b 01       	movw	r14, r22
    size_t n = 0;
    for (int i =0; i < 3; i++)
     4f8:	c0 e0       	ldi	r28, 0x00	; 0
     4fa:	d0 e0       	ldi	r29, 0x00	; 0
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
     4fc:	00 e0       	ldi	r16, 0x00	; 0
     4fe:	10 e0       	ldi	r17, 0x00	; 0
     500:	f6 01       	movw	r30, r12
     502:	ec 0f       	add	r30, r28
     504:	fd 1f       	adc	r31, r29
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
     506:	4a e0       	ldi	r20, 0x0A	; 10
     508:	50 e0       	ldi	r21, 0x00	; 0
     50a:	62 81       	ldd	r22, Z+2	; 0x02
     50c:	c7 01       	movw	r24, r14
     50e:	0e 94 12 04 	call	0x824	; 0x824 <_ZN5Print5printEhi>
     512:	5c 01       	movw	r10, r24
        n += p.print('.');
     514:	6e e2       	ldi	r22, 0x2E	; 46
     516:	c7 01       	movw	r24, r14
     518:	0e 94 0b 03 	call	0x616	; 0x616 <_ZN5Print5printEc>
size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
     51c:	8a 0d       	add	r24, r10
     51e:	9b 1d       	adc	r25, r11
        n += p.print('.');
     520:	08 0f       	add	r16, r24
     522:	19 1f       	adc	r17, r25
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
     524:	21 96       	adiw	r28, 0x01	; 1
     526:	c3 30       	cpi	r28, 0x03	; 3
     528:	d1 05       	cpc	r29, r1
     52a:	51 f7       	brne	.-44     	; 0x500 <_ZNK9IPAddress7printToER5Print+0x20>
    {
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
     52c:	4a e0       	ldi	r20, 0x0A	; 10
     52e:	50 e0       	ldi	r21, 0x00	; 0
     530:	f6 01       	movw	r30, r12
     532:	65 81       	ldd	r22, Z+5	; 0x05
     534:	c7 01       	movw	r24, r14
     536:	0e 94 12 04 	call	0x824	; 0x824 <_ZN5Print5printEhi>
    return n;
}
     53a:	80 0f       	add	r24, r16
     53c:	91 1f       	adc	r25, r17
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	1f 91       	pop	r17
     544:	0f 91       	pop	r16
     546:	ff 90       	pop	r15
     548:	ef 90       	pop	r14
     54a:	df 90       	pop	r13
     54c:	cf 90       	pop	r12
     54e:	bf 90       	pop	r11
     550:	af 90       	pop	r10
     552:	08 95       	ret

00000554 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
     554:	8c e1       	ldi	r24, 0x1C	; 28
     556:	91 e0       	ldi	r25, 0x01	; 1
     558:	90 93 36 04 	sts	0x0436, r25
     55c:	80 93 35 04 	sts	0x0435, r24
{
    _address.bytes[0] = first_octet;
     560:	10 92 37 04 	sts	0x0437, r1
    _address.bytes[1] = second_octet;
     564:	10 92 38 04 	sts	0x0438, r1
    _address.bytes[2] = third_octet;
     568:	10 92 39 04 	sts	0x0439, r1
    _address.bytes[3] = fourth_octet;
     56c:	10 92 3a 04 	sts	0x043A, r1
     570:	08 95       	ret

00000572 <_Znaj>:
void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
  return malloc(size);
     572:	0c 94 d5 12 	jmp	0x25aa	; 0x25aa <malloc>

00000576 <_ZdlPv>:
}

void operator delete(void * ptr) {
  free(ptr);
     576:	0c 94 6d 13 	jmp	0x26da	; 0x26da <free>

0000057a <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     57a:	cf 92       	push	r12
     57c:	df 92       	push	r13
     57e:	ef 92       	push	r14
     580:	ff 92       	push	r15
     582:	0f 93       	push	r16
     584:	1f 93       	push	r17
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	6c 01       	movw	r12, r24
     58c:	7a 01       	movw	r14, r20
     58e:	eb 01       	movw	r28, r22
     590:	e6 0e       	add	r14, r22
     592:	f7 1e       	adc	r15, r23
  size_t n = 0;
     594:	00 e0       	ldi	r16, 0x00	; 0
     596:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
     598:	ce 15       	cp	r28, r14
     59a:	df 05       	cpc	r29, r15
     59c:	61 f0       	breq	.+24     	; 0x5b6 <_ZN5Print5writeEPKhj+0x3c>
    n += write(*buffer++);
     59e:	69 91       	ld	r22, Y+
     5a0:	d6 01       	movw	r26, r12
     5a2:	ed 91       	ld	r30, X+
     5a4:	fc 91       	ld	r31, X
     5a6:	01 90       	ld	r0, Z+
     5a8:	f0 81       	ld	r31, Z
     5aa:	e0 2d       	mov	r30, r0
     5ac:	c6 01       	movw	r24, r12
     5ae:	09 95       	icall
     5b0:	08 0f       	add	r16, r24
     5b2:	19 1f       	adc	r17, r25
     5b4:	f1 cf       	rjmp	.-30     	; 0x598 <_ZN5Print5writeEPKhj+0x1e>
  }
  return n;
}
     5b6:	c8 01       	movw	r24, r16
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	1f 91       	pop	r17
     5be:	0f 91       	pop	r16
     5c0:	ff 90       	pop	r15
     5c2:	ef 90       	pop	r14
     5c4:	df 90       	pop	r13
     5c6:	cf 90       	pop	r12
     5c8:	08 95       	ret

000005ca <_ZN5Print5writeEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     5ca:	61 15       	cp	r22, r1
     5cc:	71 05       	cpc	r23, r1
     5ce:	81 f0       	breq	.+32     	; 0x5f0 <_ZN5Print5writeEPKc+0x26>
      return write((const uint8_t *)str, strlen(str));
     5d0:	db 01       	movw	r26, r22
     5d2:	0d 90       	ld	r0, X+
     5d4:	00 20       	and	r0, r0
     5d6:	e9 f7       	brne	.-6      	; 0x5d2 <_ZN5Print5writeEPKc+0x8>
     5d8:	ad 01       	movw	r20, r26
     5da:	41 50       	subi	r20, 0x01	; 1
     5dc:	51 09       	sbc	r21, r1
     5de:	46 1b       	sub	r20, r22
     5e0:	57 0b       	sbc	r21, r23
     5e2:	dc 01       	movw	r26, r24
     5e4:	ed 91       	ld	r30, X+
     5e6:	fc 91       	ld	r31, X
     5e8:	02 80       	ldd	r0, Z+2	; 0x02
     5ea:	f3 81       	ldd	r31, Z+3	; 0x03
     5ec:	e0 2d       	mov	r30, r0
     5ee:	09 94       	ijmp
    }
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	08 95       	ret

000005f6 <_ZN5Print5printERK6String>:
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
     5f6:	dc 01       	movw	r26, r24
     5f8:	ed 91       	ld	r30, X+
     5fa:	fc 91       	ld	r31, X
     5fc:	db 01       	movw	r26, r22
     5fe:	14 96       	adiw	r26, 0x04	; 4
     600:	4d 91       	ld	r20, X+
     602:	5c 91       	ld	r21, X
     604:	15 97       	sbiw	r26, 0x05	; 5
     606:	6d 91       	ld	r22, X+
     608:	7c 91       	ld	r23, X
     60a:	02 80       	ldd	r0, Z+2	; 0x02
     60c:	f3 81       	ldd	r31, Z+3	; 0x03
     60e:	e0 2d       	mov	r30, r0
     610:	09 94       	ijmp

00000612 <_ZN5Print5printEPKc>:
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     612:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <_ZN5Print5writeEPKc>

00000616 <_ZN5Print5printEc>:
}

size_t Print::print(char c)
{
  return write(c);
     616:	dc 01       	movw	r26, r24
     618:	ed 91       	ld	r30, X+
     61a:	fc 91       	ld	r31, X
     61c:	01 90       	ld	r0, Z+
     61e:	f0 81       	ld	r31, Z
     620:	e0 2d       	mov	r30, r0
     622:	09 94       	ijmp

00000624 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
     624:	0f 93       	push	r16
     626:	1f 93       	push	r17
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
     62c:	ec 01       	movw	r28, r24
  size_t n = print('\r');
     62e:	6d e0       	ldi	r22, 0x0D	; 13
     630:	0e 94 0b 03 	call	0x616	; 0x616 <_ZN5Print5printEc>
     634:	8c 01       	movw	r16, r24
  n += print('\n');
     636:	6a e0       	ldi	r22, 0x0A	; 10
     638:	ce 01       	movw	r24, r28
     63a:	0e 94 0b 03 	call	0x616	; 0x616 <_ZN5Print5printEc>
  return n;
}
     63e:	80 0f       	add	r24, r16
     640:	91 1f       	adc	r25, r17
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	1f 91       	pop	r17
     648:	0f 91       	pop	r16
     64a:	08 95       	ret

0000064c <_ZN5Print7printlnERK6String>:

size_t Print::println(const String &s)
{
     64c:	0f 93       	push	r16
     64e:	1f 93       	push	r17
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	ec 01       	movw	r28, r24
  size_t n = print(s);
     656:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printERK6String>
     65a:	8c 01       	movw	r16, r24
  n += println();
     65c:	ce 01       	movw	r24, r28
     65e:	0e 94 12 03 	call	0x624	; 0x624 <_ZN5Print7printlnEv>
  return n;
}
     662:	80 0f       	add	r24, r16
     664:	91 1f       	adc	r25, r17
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	1f 91       	pop	r17
     66c:	0f 91       	pop	r16
     66e:	08 95       	ret

00000670 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
     670:	0f 93       	push	r16
     672:	1f 93       	push	r17
     674:	cf 93       	push	r28
     676:	df 93       	push	r29
     678:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     67a:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN5Print5writeEPKc>
     67e:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
     680:	ce 01       	movw	r24, r28
     682:	0e 94 12 03 	call	0x624	; 0x624 <_ZN5Print7printlnEv>
  return n;
}
     686:	80 0f       	add	r24, r16
     688:	91 1f       	adc	r25, r17
     68a:	df 91       	pop	r29
     68c:	cf 91       	pop	r28
     68e:	1f 91       	pop	r17
     690:	0f 91       	pop	r16
     692:	08 95       	ret

00000694 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
     694:	8f 92       	push	r8
     696:	9f 92       	push	r9
     698:	af 92       	push	r10
     69a:	bf 92       	push	r11
     69c:	cf 92       	push	r12
     69e:	df 92       	push	r13
     6a0:	ef 92       	push	r14
     6a2:	ff 92       	push	r15
     6a4:	0f 93       	push	r16
     6a6:	1f 93       	push	r17
     6a8:	cf 93       	push	r28
     6aa:	df 93       	push	r29
     6ac:	cd b7       	in	r28, 0x3d	; 61
     6ae:	de b7       	in	r29, 0x3e	; 62
     6b0:	a1 97       	sbiw	r28, 0x21	; 33
     6b2:	0f b6       	in	r0, 0x3f	; 63
     6b4:	f8 94       	cli
     6b6:	de bf       	out	0x3e, r29	; 62
     6b8:	0f be       	out	0x3f, r0	; 63
     6ba:	cd bf       	out	0x3d, r28	; 61
     6bc:	7c 01       	movw	r14, r24
     6be:	c4 2e       	mov	r12, r20
     6c0:	e5 2f       	mov	r30, r21
     6c2:	cb 01       	movw	r24, r22
     6c4:	d2 2e       	mov	r13, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     6c6:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     6c8:	21 e0       	ldi	r18, 0x01	; 1
     6ca:	2d 15       	cp	r18, r13
     6cc:	10 f0       	brcs	.+4      	; 0x6d2 <_ZN5Print11printNumberEmh+0x3e>
     6ce:	2a e0       	ldi	r18, 0x0A	; 10
     6d0:	d2 2e       	mov	r13, r18
     6d2:	8e 01       	movw	r16, r28
     6d4:	0f 5d       	subi	r16, 0xDF	; 223
     6d6:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    unsigned long m = n;
    n /= base;
     6d8:	8d 2c       	mov	r8, r13
     6da:	91 2c       	mov	r9, r1
     6dc:	a1 2c       	mov	r10, r1
     6de:	b1 2c       	mov	r11, r1
     6e0:	6c 2d       	mov	r22, r12
     6e2:	7e 2f       	mov	r23, r30
     6e4:	a5 01       	movw	r20, r10
     6e6:	94 01       	movw	r18, r8
     6e8:	0e 94 ad 12 	call	0x255a	; 0x255a <__udivmodsi4>
    char c = m - base * n;
     6ec:	8c 2d       	mov	r24, r12
     6ee:	d2 9e       	mul	r13, r18
     6f0:	80 19       	sub	r24, r0
     6f2:	11 24       	eor	r1, r1
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     6f4:	01 50       	subi	r16, 0x01	; 1
     6f6:	11 09       	sbc	r17, r1
     6f8:	8a 30       	cpi	r24, 0x0A	; 10
     6fa:	10 f4       	brcc	.+4      	; 0x700 <_ZN5Print11printNumberEmh+0x6c>
     6fc:	80 5d       	subi	r24, 0xD0	; 208
     6fe:	01 c0       	rjmp	.+2      	; 0x702 <_ZN5Print11printNumberEmh+0x6e>
     700:	89 5c       	subi	r24, 0xC9	; 201
     702:	f8 01       	movw	r30, r16
     704:	80 83       	st	Z, r24
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
     706:	21 15       	cp	r18, r1
     708:	31 05       	cpc	r19, r1
     70a:	41 05       	cpc	r20, r1
     70c:	51 05       	cpc	r21, r1
     70e:	21 f0       	breq	.+8      	; 0x718 <_ZN5Print11printNumberEmh+0x84>
    unsigned long m = n;
    n /= base;
     710:	c2 2e       	mov	r12, r18
     712:	e3 2f       	mov	r30, r19
     714:	ca 01       	movw	r24, r20
     716:	e4 cf       	rjmp	.-56     	; 0x6e0 <_ZN5Print11printNumberEmh+0x4c>
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
     718:	b8 01       	movw	r22, r16
     71a:	c7 01       	movw	r24, r14
     71c:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN5Print5writeEPKc>
}
     720:	a1 96       	adiw	r28, 0x21	; 33
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	f8 94       	cli
     726:	de bf       	out	0x3e, r29	; 62
     728:	0f be       	out	0x3f, r0	; 63
     72a:	cd bf       	out	0x3d, r28	; 61
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	1f 91       	pop	r17
     732:	0f 91       	pop	r16
     734:	ff 90       	pop	r15
     736:	ef 90       	pop	r14
     738:	df 90       	pop	r13
     73a:	cf 90       	pop	r12
     73c:	bf 90       	pop	r11
     73e:	af 90       	pop	r10
     740:	9f 90       	pop	r9
     742:	8f 90       	pop	r8
     744:	08 95       	ret

00000746 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
     746:	cf 92       	push	r12
     748:	df 92       	push	r13
     74a:	ef 92       	push	r14
     74c:	ff 92       	push	r15
     74e:	0f 93       	push	r16
     750:	1f 93       	push	r17
     752:	cf 93       	push	r28
     754:	df 93       	push	r29
     756:	ec 01       	movw	r28, r24
     758:	6a 01       	movw	r12, r20
     75a:	7b 01       	movw	r14, r22
  if (base == 0) {
     75c:	21 15       	cp	r18, r1
     75e:	31 05       	cpc	r19, r1
     760:	79 f4       	brne	.+30     	; 0x780 <_ZN5Print5printEli+0x3a>
    return write(n);
     762:	e8 81       	ld	r30, Y
     764:	f9 81       	ldd	r31, Y+1	; 0x01
     766:	01 90       	ld	r0, Z+
     768:	f0 81       	ld	r31, Z
     76a:	e0 2d       	mov	r30, r0
     76c:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     76e:	df 91       	pop	r29
     770:	cf 91       	pop	r28
     772:	1f 91       	pop	r17
     774:	0f 91       	pop	r16
     776:	ff 90       	pop	r15
     778:	ef 90       	pop	r14
     77a:	df 90       	pop	r13
     77c:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
     77e:	09 94       	ijmp
  } else if (base == 10) {
     780:	2a 30       	cpi	r18, 0x0A	; 10
     782:	31 05       	cpc	r19, r1
     784:	e9 f4       	brne	.+58     	; 0x7c0 <_ZN5Print5printEli+0x7a>
    if (n < 0) {
     786:	77 ff       	sbrs	r23, 7
     788:	1a c0       	rjmp	.+52     	; 0x7be <_ZN5Print5printEli+0x78>
      int t = print('-');
     78a:	6d e2       	ldi	r22, 0x2D	; 45
     78c:	0e 94 0b 03 	call	0x616	; 0x616 <_ZN5Print5printEc>
     790:	8c 01       	movw	r16, r24
      n = -n;
     792:	44 27       	eor	r20, r20
     794:	55 27       	eor	r21, r21
     796:	ba 01       	movw	r22, r20
     798:	4c 19       	sub	r20, r12
     79a:	5d 09       	sbc	r21, r13
     79c:	6e 09       	sbc	r22, r14
     79e:	7f 09       	sbc	r23, r15
      return printNumber(n, 10) + t;
     7a0:	2a e0       	ldi	r18, 0x0A	; 10
     7a2:	ce 01       	movw	r24, r28
     7a4:	0e 94 4a 03 	call	0x694	; 0x694 <_ZN5Print11printNumberEmh>
     7a8:	80 0f       	add	r24, r16
     7aa:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     7ac:	df 91       	pop	r29
     7ae:	cf 91       	pop	r28
     7b0:	1f 91       	pop	r17
     7b2:	0f 91       	pop	r16
     7b4:	ff 90       	pop	r15
     7b6:	ef 90       	pop	r14
     7b8:	df 90       	pop	r13
     7ba:	cf 90       	pop	r12
     7bc:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     7be:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
     7c0:	b7 01       	movw	r22, r14
     7c2:	a6 01       	movw	r20, r12
     7c4:	ce 01       	movw	r24, r28
  }
}
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	0f 91       	pop	r16
     7ce:	ff 90       	pop	r15
     7d0:	ef 90       	pop	r14
     7d2:	df 90       	pop	r13
     7d4:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
     7d6:	0c 94 4a 03 	jmp	0x694	; 0x694 <_ZN5Print11printNumberEmh>

000007da <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
     7da:	0f 93       	push	r16
     7dc:	1f 93       	push	r17
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
     7e2:	ec 01       	movw	r28, r24
     7e4:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
     7e6:	ab 01       	movw	r20, r22
     7e8:	66 27       	eor	r22, r22
     7ea:	57 fd       	sbrc	r21, 7
     7ec:	60 95       	com	r22
     7ee:	76 2f       	mov	r23, r22
     7f0:	0e 94 a3 03 	call	0x746	; 0x746 <_ZN5Print5printEli>
     7f4:	8c 01       	movw	r16, r24
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
     7f6:	ce 01       	movw	r24, r28
     7f8:	0e 94 12 03 	call	0x624	; 0x624 <_ZN5Print7printlnEv>
  return n;
}
     7fc:	80 0f       	add	r24, r16
     7fe:	91 1f       	adc	r25, r17
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	1f 91       	pop	r17
     806:	0f 91       	pop	r16
     808:	08 95       	ret

0000080a <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
     80a:	21 15       	cp	r18, r1
     80c:	31 05       	cpc	r19, r1
     80e:	41 f4       	brne	.+16     	; 0x820 <_ZN5Print5printEmi+0x16>
     810:	dc 01       	movw	r26, r24
     812:	ed 91       	ld	r30, X+
     814:	fc 91       	ld	r31, X
     816:	01 90       	ld	r0, Z+
     818:	f0 81       	ld	r31, Z
     81a:	e0 2d       	mov	r30, r0
     81c:	64 2f       	mov	r22, r20
     81e:	09 94       	ijmp
  else return printNumber(n, base);
     820:	0c 94 4a 03 	jmp	0x694	; 0x694 <_ZN5Print11printNumberEmh>

00000824 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
     824:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
     826:	46 2f       	mov	r20, r22
     828:	50 e0       	ldi	r21, 0x00	; 0
     82a:	60 e0       	ldi	r22, 0x00	; 0
     82c:	70 e0       	ldi	r23, 0x00	; 0
     82e:	0c 94 05 04 	jmp	0x80a	; 0x80a <_ZN5Print5printEmi>

00000832 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
     832:	81 30       	cpi	r24, 0x01	; 1
     834:	39 f0       	breq	.+14     	; 0x844 <_Z12disableTimerh+0x12>
     836:	18 f0       	brcs	.+6      	; 0x83e <_Z12disableTimerh+0xc>
     838:	82 30       	cpi	r24, 0x02	; 2
     83a:	51 f0       	breq	.+20     	; 0x850 <_Z12disableTimerh+0x1e>
     83c:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
     83e:	10 92 6e 00 	sts	0x006E, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
     842:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
     844:	80 91 6f 00 	lds	r24, 0x006F
     848:	8d 7f       	andi	r24, 0xFD	; 253
     84a:	80 93 6f 00 	sts	0x006F, r24
      break;
     84e:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
     850:	80 91 70 00 	lds	r24, 0x0070
     854:	8d 7f       	andi	r24, 0xFD	; 253
     856:	80 93 70 00 	sts	0x0070, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
     860:	80 91 b1 00 	lds	r24, 0x00B1
     864:	88 7f       	andi	r24, 0xF8	; 248
     866:	84 60       	ori	r24, 0x04	; 4
     868:	80 93 b1 00 	sts	0x00B1, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
     86c:	10 92 b3 00 	sts	0x00B3, r1
     870:	08 95       	ret

00000872 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
     872:	cf 93       	push	r28
     874:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
     876:	80 91 06 01 	lds	r24, 0x0106
     87a:	8c 13       	cpse	r24, r28
     87c:	07 c0       	rjmp	.+14     	; 0x88c <_Z6noToneh+0x1a>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
     87e:	e8 e6       	ldi	r30, 0x68	; 104
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	84 91       	lpm	r24, Z
      tone_pins[i] = 255;
     884:	9f ef       	ldi	r25, 0xFF	; 255
     886:	90 93 06 01 	sts	0x0106, r25
     88a:	01 c0       	rjmp	.+2      	; 0x88e <_Z6noToneh+0x1c>
}


void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
     88c:	8f ef       	ldi	r24, 0xFF	; 255
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
      tone_pins[i] = 255;
    }
  }
  
  disableTimer(_timer);
     88e:	0e 94 19 04 	call	0x832	; 0x832 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
     892:	60 e0       	ldi	r22, 0x00	; 0
     894:	8c 2f       	mov	r24, r28
}
     896:	cf 91       	pop	r28
    }
  }
  
  disableTimer(_timer);

  digitalWrite(_pin, 0);
     898:	0c 94 5f 06 	jmp	0xcbe	; 0xcbe <digitalWrite>

0000089c <__vector_7>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
     89c:	1f 92       	push	r1
     89e:	0f 92       	push	r0
     8a0:	0f b6       	in	r0, 0x3f	; 63
     8a2:	0f 92       	push	r0
     8a4:	11 24       	eor	r1, r1
     8a6:	2f 93       	push	r18
     8a8:	3f 93       	push	r19
     8aa:	4f 93       	push	r20
     8ac:	5f 93       	push	r21
     8ae:	6f 93       	push	r22
     8b0:	7f 93       	push	r23
     8b2:	8f 93       	push	r24
     8b4:	9f 93       	push	r25
     8b6:	af 93       	push	r26
     8b8:	bf 93       	push	r27
     8ba:	ef 93       	push	r30
     8bc:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
     8be:	80 91 3e 04 	lds	r24, 0x043E
     8c2:	90 91 3f 04 	lds	r25, 0x043F
     8c6:	a0 91 40 04 	lds	r26, 0x0440
     8ca:	b0 91 41 04 	lds	r27, 0x0441
     8ce:	89 2b       	or	r24, r25
     8d0:	8a 2b       	or	r24, r26
     8d2:	8b 2b       	or	r24, r27
     8d4:	51 f1       	breq	.+84     	; 0x92a <__stack+0x2b>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
     8d6:	90 91 3b 04 	lds	r25, 0x043B
     8da:	e0 91 3c 04 	lds	r30, 0x043C
     8de:	f0 91 3d 04 	lds	r31, 0x043D
     8e2:	80 81       	ld	r24, Z
     8e4:	89 27       	eor	r24, r25
     8e6:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
     8e8:	80 91 3e 04 	lds	r24, 0x043E
     8ec:	90 91 3f 04 	lds	r25, 0x043F
     8f0:	a0 91 40 04 	lds	r26, 0x0440
     8f4:	b0 91 41 04 	lds	r27, 0x0441
     8f8:	18 16       	cp	r1, r24
     8fa:	19 06       	cpc	r1, r25
     8fc:	1a 06       	cpc	r1, r26
     8fe:	1b 06       	cpc	r1, r27
     900:	c4 f4       	brge	.+48     	; 0x932 <__stack+0x33>
      timer2_toggle_count--;
     902:	80 91 3e 04 	lds	r24, 0x043E
     906:	90 91 3f 04 	lds	r25, 0x043F
     90a:	a0 91 40 04 	lds	r26, 0x0440
     90e:	b0 91 41 04 	lds	r27, 0x0441
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	a1 09       	sbc	r26, r1
     916:	b1 09       	sbc	r27, r1
     918:	80 93 3e 04 	sts	0x043E, r24
     91c:	90 93 3f 04 	sts	0x043F, r25
     920:	a0 93 40 04 	sts	0x0440, r26
     924:	b0 93 41 04 	sts	0x0441, r27
     928:	04 c0       	rjmp	.+8      	; 0x932 <__stack+0x33>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
     92a:	80 91 06 01 	lds	r24, 0x0106
     92e:	0e 94 39 04 	call	0x872	; 0x872 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
     932:	ff 91       	pop	r31
     934:	ef 91       	pop	r30
     936:	bf 91       	pop	r27
     938:	af 91       	pop	r26
     93a:	9f 91       	pop	r25
     93c:	8f 91       	pop	r24
     93e:	7f 91       	pop	r23
     940:	6f 91       	pop	r22
     942:	5f 91       	pop	r21
     944:	4f 91       	pop	r20
     946:	3f 91       	pop	r19
     948:	2f 91       	pop	r18
     94a:	0f 90       	pop	r0
     94c:	0f be       	out	0x3f, r0	; 63
     94e:	0f 90       	pop	r0
     950:	1f 90       	pop	r1
     952:	18 95       	reti

00000954 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

ISR(INT0_vect) {
     954:	1f 92       	push	r1
     956:	0f 92       	push	r0
     958:	0f b6       	in	r0, 0x3f	; 63
     95a:	0f 92       	push	r0
     95c:	11 24       	eor	r1, r1
     95e:	2f 93       	push	r18
     960:	3f 93       	push	r19
     962:	4f 93       	push	r20
     964:	5f 93       	push	r21
     966:	6f 93       	push	r22
     968:	7f 93       	push	r23
     96a:	8f 93       	push	r24
     96c:	9f 93       	push	r25
     96e:	af 93       	push	r26
     970:	bf 93       	push	r27
     972:	ef 93       	push	r30
     974:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
     976:	80 91 42 04 	lds	r24, 0x0442
     97a:	90 91 43 04 	lds	r25, 0x0443
     97e:	89 2b       	or	r24, r25
     980:	29 f0       	breq	.+10     	; 0x98c <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
     982:	e0 91 42 04 	lds	r30, 0x0442
     986:	f0 91 43 04 	lds	r31, 0x0443
     98a:	09 95       	icall
}
     98c:	ff 91       	pop	r31
     98e:	ef 91       	pop	r30
     990:	bf 91       	pop	r27
     992:	af 91       	pop	r26
     994:	9f 91       	pop	r25
     996:	8f 91       	pop	r24
     998:	7f 91       	pop	r23
     99a:	6f 91       	pop	r22
     99c:	5f 91       	pop	r21
     99e:	4f 91       	pop	r20
     9a0:	3f 91       	pop	r19
     9a2:	2f 91       	pop	r18
     9a4:	0f 90       	pop	r0
     9a6:	0f be       	out	0x3f, r0	; 63
     9a8:	0f 90       	pop	r0
     9aa:	1f 90       	pop	r1
     9ac:	18 95       	reti

000009ae <__vector_2>:

ISR(INT1_vect) {
     9ae:	1f 92       	push	r1
     9b0:	0f 92       	push	r0
     9b2:	0f b6       	in	r0, 0x3f	; 63
     9b4:	0f 92       	push	r0
     9b6:	11 24       	eor	r1, r1
     9b8:	2f 93       	push	r18
     9ba:	3f 93       	push	r19
     9bc:	4f 93       	push	r20
     9be:	5f 93       	push	r21
     9c0:	6f 93       	push	r22
     9c2:	7f 93       	push	r23
     9c4:	8f 93       	push	r24
     9c6:	9f 93       	push	r25
     9c8:	af 93       	push	r26
     9ca:	bf 93       	push	r27
     9cc:	ef 93       	push	r30
     9ce:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
     9d0:	80 91 44 04 	lds	r24, 0x0444
     9d4:	90 91 45 04 	lds	r25, 0x0445
     9d8:	89 2b       	or	r24, r25
     9da:	29 f0       	breq	.+10     	; 0x9e6 <__vector_2+0x38>
    intFunc[EXTERNAL_INT_1]();
     9dc:	e0 91 44 04 	lds	r30, 0x0444
     9e0:	f0 91 45 04 	lds	r31, 0x0445
     9e4:	09 95       	icall
}
     9e6:	ff 91       	pop	r31
     9e8:	ef 91       	pop	r30
     9ea:	bf 91       	pop	r27
     9ec:	af 91       	pop	r26
     9ee:	9f 91       	pop	r25
     9f0:	8f 91       	pop	r24
     9f2:	7f 91       	pop	r23
     9f4:	6f 91       	pop	r22
     9f6:	5f 91       	pop	r21
     9f8:	4f 91       	pop	r20
     9fa:	3f 91       	pop	r19
     9fc:	2f 91       	pop	r18
     9fe:	0f 90       	pop	r0
     a00:	0f be       	out	0x3f, r0	; 63
     a02:	0f 90       	pop	r0
     a04:	1f 90       	pop	r1
     a06:	18 95       	reti

00000a08 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     a08:	1f 92       	push	r1
     a0a:	0f 92       	push	r0
     a0c:	0f b6       	in	r0, 0x3f	; 63
     a0e:	0f 92       	push	r0
     a10:	11 24       	eor	r1, r1
     a12:	2f 93       	push	r18
     a14:	3f 93       	push	r19
     a16:	8f 93       	push	r24
     a18:	9f 93       	push	r25
     a1a:	af 93       	push	r26
     a1c:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     a1e:	80 91 47 04 	lds	r24, 0x0447
     a22:	90 91 48 04 	lds	r25, 0x0448
     a26:	a0 91 49 04 	lds	r26, 0x0449
     a2a:	b0 91 4a 04 	lds	r27, 0x044A
	unsigned char f = timer0_fract;
     a2e:	30 91 46 04 	lds	r19, 0x0446

	m += MILLIS_INC;
	f += FRACT_INC;
     a32:	26 e0       	ldi	r18, 0x06	; 6
     a34:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     a36:	2d 37       	cpi	r18, 0x7D	; 125
     a38:	20 f4       	brcc	.+8      	; 0xa42 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     a3a:	02 96       	adiw	r24, 0x02	; 2
     a3c:	a1 1d       	adc	r26, r1
     a3e:	b1 1d       	adc	r27, r1
     a40:	05 c0       	rjmp	.+10     	; 0xa4c <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     a42:	29 e8       	ldi	r18, 0x89	; 137
     a44:	23 0f       	add	r18, r19
		m += 1;
     a46:	03 96       	adiw	r24, 0x03	; 3
     a48:	a1 1d       	adc	r26, r1
     a4a:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     a4c:	20 93 46 04 	sts	0x0446, r18
	timer0_millis = m;
     a50:	80 93 47 04 	sts	0x0447, r24
     a54:	90 93 48 04 	sts	0x0448, r25
     a58:	a0 93 49 04 	sts	0x0449, r26
     a5c:	b0 93 4a 04 	sts	0x044A, r27
	timer0_overflow_count++;
     a60:	80 91 4b 04 	lds	r24, 0x044B
     a64:	90 91 4c 04 	lds	r25, 0x044C
     a68:	a0 91 4d 04 	lds	r26, 0x044D
     a6c:	b0 91 4e 04 	lds	r27, 0x044E
     a70:	01 96       	adiw	r24, 0x01	; 1
     a72:	a1 1d       	adc	r26, r1
     a74:	b1 1d       	adc	r27, r1
     a76:	80 93 4b 04 	sts	0x044B, r24
     a7a:	90 93 4c 04 	sts	0x044C, r25
     a7e:	a0 93 4d 04 	sts	0x044D, r26
     a82:	b0 93 4e 04 	sts	0x044E, r27
}
     a86:	bf 91       	pop	r27
     a88:	af 91       	pop	r26
     a8a:	9f 91       	pop	r25
     a8c:	8f 91       	pop	r24
     a8e:	3f 91       	pop	r19
     a90:	2f 91       	pop	r18
     a92:	0f 90       	pop	r0
     a94:	0f be       	out	0x3f, r0	; 63
     a96:	0f 90       	pop	r0
     a98:	1f 90       	pop	r1
     a9a:	18 95       	reti

00000a9c <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     a9c:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     a9e:	f8 94       	cli
	m = timer0_millis;
     aa0:	60 91 47 04 	lds	r22, 0x0447
     aa4:	70 91 48 04 	lds	r23, 0x0448
     aa8:	80 91 49 04 	lds	r24, 0x0449
     aac:	90 91 4a 04 	lds	r25, 0x044A
	SREG = oldSREG;
     ab0:	2f bf       	out	0x3f, r18	; 63

	return m;
}
     ab2:	08 95       	ret

00000ab4 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     ab4:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     ab6:	f8 94       	cli
	m = timer0_overflow_count;
     ab8:	80 91 4b 04 	lds	r24, 0x044B
     abc:	90 91 4c 04 	lds	r25, 0x044C
     ac0:	a0 91 4d 04 	lds	r26, 0x044D
     ac4:	b0 91 4e 04 	lds	r27, 0x044E
#if defined(TCNT0)
	t = TCNT0;
     ac8:	26 b5       	in	r18, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     aca:	a8 9b       	sbis	0x15, 0	; 21
     acc:	05 c0       	rjmp	.+10     	; 0xad8 <micros+0x24>
     ace:	2f 3f       	cpi	r18, 0xFF	; 255
     ad0:	19 f0       	breq	.+6      	; 0xad8 <micros+0x24>
		m++;
     ad2:	01 96       	adiw	r24, 0x01	; 1
     ad4:	a1 1d       	adc	r26, r1
     ad6:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     ad8:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     ada:	66 27       	eor	r22, r22
     adc:	78 2f       	mov	r23, r24
     ade:	89 2f       	mov	r24, r25
     ae0:	9a 2f       	mov	r25, r26
     ae2:	62 0f       	add	r22, r18
     ae4:	71 1d       	adc	r23, r1
     ae6:	81 1d       	adc	r24, r1
     ae8:	91 1d       	adc	r25, r1
     aea:	43 e0       	ldi	r20, 0x03	; 3
     aec:	66 0f       	add	r22, r22
     aee:	77 1f       	adc	r23, r23
     af0:	88 1f       	adc	r24, r24
     af2:	99 1f       	adc	r25, r25
     af4:	4a 95       	dec	r20
     af6:	d1 f7       	brne	.-12     	; 0xaec <micros+0x38>
}
     af8:	08 95       	ret

00000afa <delay>:

void delay(unsigned long ms)
{
     afa:	cf 92       	push	r12
     afc:	df 92       	push	r13
     afe:	ef 92       	push	r14
     b00:	ff 92       	push	r15
     b02:	cf 93       	push	r28
     b04:	df 93       	push	r29
     b06:	6b 01       	movw	r12, r22
     b08:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
     b0a:	0e 94 5a 05 	call	0xab4	; 0xab4 <micros>
     b0e:	eb 01       	movw	r28, r22

	while (ms > 0) {
     b10:	c1 14       	cp	r12, r1
     b12:	d1 04       	cpc	r13, r1
     b14:	e1 04       	cpc	r14, r1
     b16:	f1 04       	cpc	r15, r1
     b18:	89 f0       	breq	.+34     	; 0xb3c <delay+0x42>
		yield();
     b1a:	0e 94 6f 02 	call	0x4de	; 0x4de <yield>
		if (((uint16_t)micros() - start) >= 1000) {
     b1e:	0e 94 5a 05 	call	0xab4	; 0xab4 <micros>
     b22:	6c 1b       	sub	r22, r28
     b24:	7d 0b       	sbc	r23, r29
     b26:	68 3e       	cpi	r22, 0xE8	; 232
     b28:	73 40       	sbci	r23, 0x03	; 3
     b2a:	90 f3       	brcs	.-28     	; 0xb10 <delay+0x16>
			ms--;
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	c8 1a       	sub	r12, r24
     b30:	d1 08       	sbc	r13, r1
     b32:	e1 08       	sbc	r14, r1
     b34:	f1 08       	sbc	r15, r1
			start += 1000;
     b36:	c8 51       	subi	r28, 0x18	; 24
     b38:	dc 4f       	sbci	r29, 0xFC	; 252
     b3a:	ea cf       	rjmp	.-44     	; 0xb10 <delay+0x16>
		}
	}
}
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	ff 90       	pop	r15
     b42:	ef 90       	pop	r14
     b44:	df 90       	pop	r13
     b46:	cf 90       	pop	r12
     b48:	08 95       	ret

00000b4a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     b4a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     b4c:	84 b5       	in	r24, 0x24	; 36
     b4e:	82 60       	ori	r24, 0x02	; 2
     b50:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     b52:	84 b5       	in	r24, 0x24	; 36
     b54:	81 60       	ori	r24, 0x01	; 1
     b56:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     b58:	85 b5       	in	r24, 0x25	; 37
     b5a:	82 60       	ori	r24, 0x02	; 2
     b5c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     b5e:	85 b5       	in	r24, 0x25	; 37
     b60:	81 60       	ori	r24, 0x01	; 1
     b62:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     b64:	ee e6       	ldi	r30, 0x6E	; 110
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	81 60       	ori	r24, 0x01	; 1
     b6c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     b6e:	e1 e8       	ldi	r30, 0x81	; 129
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     b74:	80 81       	ld	r24, Z
     b76:	82 60       	ori	r24, 0x02	; 2
     b78:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     b7a:	80 81       	ld	r24, Z
     b7c:	81 60       	ori	r24, 0x01	; 1
     b7e:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     b80:	e0 e8       	ldi	r30, 0x80	; 128
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	80 81       	ld	r24, Z
     b86:	81 60       	ori	r24, 0x01	; 1
     b88:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     b8a:	e1 eb       	ldi	r30, 0xB1	; 177
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	84 60       	ori	r24, 0x04	; 4
     b92:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     b94:	e0 eb       	ldi	r30, 0xB0	; 176
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	81 60       	ori	r24, 0x01	; 1
     b9c:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
     b9e:	ea e7       	ldi	r30, 0x7A	; 122
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	80 81       	ld	r24, Z
     ba4:	84 60       	ori	r24, 0x04	; 4
     ba6:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
     ba8:	80 81       	ld	r24, Z
     baa:	82 60       	ori	r24, 0x02	; 2
     bac:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
     bae:	80 81       	ld	r24, Z
     bb0:	81 60       	ori	r24, 0x01	; 1
     bb2:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     bb4:	80 81       	ld	r24, Z
     bb6:	80 68       	ori	r24, 0x80	; 128
     bb8:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     bba:	10 92 c1 00 	sts	0x00C1, r1
     bbe:	08 95       	ret

00000bc0 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
     bc0:	8e 30       	cpi	r24, 0x0E	; 14
     bc2:	08 f0       	brcs	.+2      	; 0xbc6 <analogRead+0x6>
     bc4:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
     bc6:	87 70       	andi	r24, 0x07	; 7
     bc8:	20 91 07 01 	lds	r18, 0x0107
     bcc:	90 e4       	ldi	r25, 0x40	; 64
     bce:	29 9f       	mul	r18, r25
     bd0:	90 01       	movw	r18, r0
     bd2:	11 24       	eor	r1, r1
     bd4:	82 2b       	or	r24, r18
     bd6:	80 93 7c 00 	sts	0x007C, r24
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
     bda:	80 91 7a 00 	lds	r24, 0x007A
     bde:	80 64       	ori	r24, 0x40	; 64
     be0:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
     be4:	80 91 7a 00 	lds	r24, 0x007A
     be8:	86 fd       	sbrc	r24, 6
     bea:	fc cf       	rjmp	.-8      	; 0xbe4 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
     bec:	80 91 78 00 	lds	r24, 0x0078
	high = ADCH;
     bf0:	20 91 79 00 	lds	r18, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
     bf4:	90 e0       	ldi	r25, 0x00	; 0
}
     bf6:	92 2b       	or	r25, r18
     bf8:	08 95       	ret

00000bfa <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     bfa:	83 30       	cpi	r24, 0x03	; 3
     bfc:	81 f0       	breq	.+32     	; 0xc1e <turnOffPWM+0x24>
     bfe:	28 f4       	brcc	.+10     	; 0xc0a <turnOffPWM+0x10>
     c00:	81 30       	cpi	r24, 0x01	; 1
     c02:	99 f0       	breq	.+38     	; 0xc2a <turnOffPWM+0x30>
     c04:	82 30       	cpi	r24, 0x02	; 2
     c06:	a1 f0       	breq	.+40     	; 0xc30 <turnOffPWM+0x36>
     c08:	08 95       	ret
     c0a:	87 30       	cpi	r24, 0x07	; 7
     c0c:	a9 f0       	breq	.+42     	; 0xc38 <turnOffPWM+0x3e>
     c0e:	88 30       	cpi	r24, 0x08	; 8
     c10:	b9 f0       	breq	.+46     	; 0xc40 <turnOffPWM+0x46>
     c12:	84 30       	cpi	r24, 0x04	; 4
     c14:	d1 f4       	brne	.+52     	; 0xc4a <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     c16:	80 91 80 00 	lds	r24, 0x0080
     c1a:	8f 7d       	andi	r24, 0xDF	; 223
     c1c:	03 c0       	rjmp	.+6      	; 0xc24 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     c1e:	80 91 80 00 	lds	r24, 0x0080
     c22:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     c24:	80 93 80 00 	sts	0x0080, r24
     c28:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     c2a:	84 b5       	in	r24, 0x24	; 36
     c2c:	8f 77       	andi	r24, 0x7F	; 127
     c2e:	02 c0       	rjmp	.+4      	; 0xc34 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     c30:	84 b5       	in	r24, 0x24	; 36
     c32:	8f 7d       	andi	r24, 0xDF	; 223
     c34:	84 bd       	out	0x24, r24	; 36
     c36:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     c38:	80 91 b0 00 	lds	r24, 0x00B0
     c3c:	8f 77       	andi	r24, 0x7F	; 127
     c3e:	03 c0       	rjmp	.+6      	; 0xc46 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     c40:	80 91 b0 00 	lds	r24, 0x00B0
     c44:	8f 7d       	andi	r24, 0xDF	; 223
     c46:	80 93 b0 00 	sts	0x00B0, r24
     c4a:	08 95       	ret

00000c4c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	fc 01       	movw	r30, r24
     c54:	e3 58       	subi	r30, 0x83	; 131
     c56:	ff 4f       	sbci	r31, 0xFF	; 255
     c58:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     c5a:	fc 01       	movw	r30, r24
     c5c:	ef 56       	subi	r30, 0x6F	; 111
     c5e:	ff 4f       	sbci	r31, 0xFF	; 255
     c60:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     c62:	88 23       	and	r24, r24
     c64:	49 f1       	breq	.+82     	; 0xcb8 <pinMode+0x6c>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	88 0f       	add	r24, r24
     c6a:	99 1f       	adc	r25, r25
     c6c:	fc 01       	movw	r30, r24
     c6e:	e1 55       	subi	r30, 0x51	; 81
     c70:	ff 4f       	sbci	r31, 0xFF	; 255
     c72:	a5 91       	lpm	r26, Z+
     c74:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     c76:	8b 55       	subi	r24, 0x5B	; 91
     c78:	9f 4f       	sbci	r25, 0xFF	; 255
     c7a:	fc 01       	movw	r30, r24
     c7c:	c5 91       	lpm	r28, Z+
     c7e:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
		uint8_t oldSREG = SREG;
     c80:	9f b7       	in	r25, 0x3f	; 63

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
	out = portOutputRegister(port);

	if (mode == INPUT) { 
     c82:	61 11       	cpse	r22, r1
     c84:	08 c0       	rjmp	.+16     	; 0xc96 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
                cli();
     c86:	f8 94       	cli
		*reg &= ~bit;
     c88:	8c 91       	ld	r24, X
     c8a:	20 95       	com	r18
     c8c:	82 23       	and	r24, r18
     c8e:	8c 93       	st	X, r24
		*out &= ~bit;
     c90:	88 81       	ld	r24, Y
     c92:	82 23       	and	r24, r18
     c94:	0a c0       	rjmp	.+20     	; 0xcaa <pinMode+0x5e>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     c96:	62 30       	cpi	r22, 0x02	; 2
     c98:	51 f4       	brne	.+20     	; 0xcae <pinMode+0x62>
		uint8_t oldSREG = SREG;
                cli();
     c9a:	f8 94       	cli
		*reg &= ~bit;
     c9c:	8c 91       	ld	r24, X
     c9e:	32 2f       	mov	r19, r18
     ca0:	30 95       	com	r19
     ca2:	83 23       	and	r24, r19
     ca4:	8c 93       	st	X, r24
		*out |= bit;
     ca6:	88 81       	ld	r24, Y
     ca8:	82 2b       	or	r24, r18
     caa:	88 83       	st	Y, r24
     cac:	04 c0       	rjmp	.+8      	; 0xcb6 <pinMode+0x6a>
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
                cli();
     cae:	f8 94       	cli
		*reg |= bit;
     cb0:	8c 91       	ld	r24, X
     cb2:	82 2b       	or	r24, r18
     cb4:	8c 93       	st	X, r24
		SREG = oldSREG;
     cb6:	9f bf       	out	0x3f, r25	; 63
	}
}
     cb8:	df 91       	pop	r29
     cba:	cf 91       	pop	r28
     cbc:	08 95       	ret

00000cbe <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     cbe:	0f 93       	push	r16
     cc0:	1f 93       	push	r17
     cc2:	cf 93       	push	r28
     cc4:	df 93       	push	r29
     cc6:	1f 92       	push	r1
     cc8:	cd b7       	in	r28, 0x3d	; 61
     cca:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
     ccc:	28 2f       	mov	r18, r24
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	f9 01       	movw	r30, r18
     cd2:	e7 59       	subi	r30, 0x97	; 151
     cd4:	ff 4f       	sbci	r31, 0xFF	; 255
     cd6:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     cd8:	f9 01       	movw	r30, r18
     cda:	e3 58       	subi	r30, 0x83	; 131
     cdc:	ff 4f       	sbci	r31, 0xFF	; 255
     cde:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
     ce0:	f9 01       	movw	r30, r18
     ce2:	ef 56       	subi	r30, 0x6F	; 111
     ce4:	ff 4f       	sbci	r31, 0xFF	; 255
     ce6:	04 91       	lpm	r16, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     ce8:	00 23       	and	r16, r16
     cea:	c9 f0       	breq	.+50     	; 0xd1e <digitalWrite+0x60>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     cec:	88 23       	and	r24, r24
     cee:	21 f0       	breq	.+8      	; 0xcf8 <digitalWrite+0x3a>
     cf0:	69 83       	std	Y+1, r22	; 0x01
     cf2:	0e 94 fd 05 	call	0xbfa	; 0xbfa <turnOffPWM>
     cf6:	69 81       	ldd	r22, Y+1	; 0x01

	out = portOutputRegister(port);
     cf8:	e0 2f       	mov	r30, r16
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	ee 0f       	add	r30, r30
     cfe:	ff 1f       	adc	r31, r31
     d00:	eb 55       	subi	r30, 0x5B	; 91
     d02:	ff 4f       	sbci	r31, 0xFF	; 255
     d04:	a5 91       	lpm	r26, Z+
     d06:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     d08:	9f b7       	in	r25, 0x3f	; 63
	cli();
     d0a:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
     d0c:	8c 91       	ld	r24, X
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
     d0e:	61 11       	cpse	r22, r1
     d10:	03 c0       	rjmp	.+6      	; 0xd18 <digitalWrite+0x5a>
		*out &= ~bit;
     d12:	10 95       	com	r17
     d14:	81 23       	and	r24, r17
     d16:	01 c0       	rjmp	.+2      	; 0xd1a <digitalWrite+0x5c>
	} else {
		*out |= bit;
     d18:	81 2b       	or	r24, r17
     d1a:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
     d1c:	9f bf       	out	0x3f, r25	; 63
}
     d1e:	0f 90       	pop	r0
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	1f 91       	pop	r17
     d26:	0f 91       	pop	r16
     d28:	08 95       	ret

00000d2a <_ZN6StringD1Ev>:
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	free(buffer);
     d2a:	fc 01       	movw	r30, r24
     d2c:	80 81       	ld	r24, Z
     d2e:	91 81       	ldd	r25, Z+1	; 0x01
     d30:	0c 94 6d 13 	jmp	0x26da	; 0x26da <free>

00000d34 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
     d38:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
     d3a:	88 81       	ld	r24, Y
     d3c:	99 81       	ldd	r25, Y+1	; 0x01
     d3e:	00 97       	sbiw	r24, 0x00	; 0
     d40:	11 f0       	breq	.+4      	; 0xd46 <_ZN6String10invalidateEv+0x12>
     d42:	0e 94 6d 13 	call	0x26da	; 0x26da <free>
	buffer = NULL;
     d46:	19 82       	std	Y+1, r1	; 0x01
     d48:	18 82       	st	Y, r1
	capacity = len = 0;
     d4a:	1d 82       	std	Y+5, r1	; 0x05
     d4c:	1c 82       	std	Y+4, r1	; 0x04
     d4e:	1b 82       	std	Y+3, r1	; 0x03
     d50:	1a 82       	std	Y+2, r1	; 0x02
}
     d52:	df 91       	pop	r29
     d54:	cf 91       	pop	r28
     d56:	08 95       	ret

00000d58 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
     d58:	0f 93       	push	r16
     d5a:	1f 93       	push	r17
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
     d60:	ec 01       	movw	r28, r24
     d62:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     d64:	6f 5f       	subi	r22, 0xFF	; 255
     d66:	7f 4f       	sbci	r23, 0xFF	; 255
     d68:	88 81       	ld	r24, Y
     d6a:	99 81       	ldd	r25, Y+1	; 0x01
     d6c:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <realloc>
	if (newbuffer) {
     d70:	00 97       	sbiw	r24, 0x00	; 0
     d72:	31 f0       	breq	.+12     	; 0xd80 <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
     d74:	99 83       	std	Y+1, r25	; 0x01
     d76:	88 83       	st	Y, r24
		capacity = maxStrLen;
     d78:	1b 83       	std	Y+3, r17	; 0x03
     d7a:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	01 c0       	rjmp	.+2      	; 0xd82 <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
     d80:	80 e0       	ldi	r24, 0x00	; 0
}
     d82:	df 91       	pop	r29
     d84:	cf 91       	pop	r28
     d86:	1f 91       	pop	r17
     d88:	0f 91       	pop	r16
     d8a:	08 95       	ret

00000d8c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
     d8c:	cf 93       	push	r28
     d8e:	df 93       	push	r29
     d90:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
     d92:	88 81       	ld	r24, Y
     d94:	99 81       	ldd	r25, Y+1	; 0x01
     d96:	89 2b       	or	r24, r25
     d98:	29 f0       	breq	.+10     	; 0xda4 <_ZN6String7reserveEj+0x18>
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	9b 81       	ldd	r25, Y+3	; 0x03
     d9e:	86 17       	cp	r24, r22
     da0:	97 07       	cpc	r25, r23
     da2:	60 f4       	brcc	.+24     	; 0xdbc <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
     da4:	ce 01       	movw	r24, r28
     da6:	0e 94 ac 06 	call	0xd58	; 0xd58 <_ZN6String12changeBufferEj>
     daa:	88 23       	and	r24, r24
     dac:	41 f0       	breq	.+16     	; 0xdbe <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
     dae:	8c 81       	ldd	r24, Y+4	; 0x04
     db0:	9d 81       	ldd	r25, Y+5	; 0x05
     db2:	89 2b       	or	r24, r25
     db4:	19 f4       	brne	.+6      	; 0xdbc <_ZN6String7reserveEj+0x30>
     db6:	e8 81       	ld	r30, Y
     db8:	f9 81       	ldd	r31, Y+1	; 0x01
     dba:	10 82       	st	Z, r1
     dbc:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	08 95       	ret

00000dc4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
     dc4:	ef 92       	push	r14
     dc6:	ff 92       	push	r15
     dc8:	0f 93       	push	r16
     dca:	1f 93       	push	r17
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
     dd0:	ec 01       	movw	r28, r24
     dd2:	7b 01       	movw	r14, r22
     dd4:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
     dd6:	ba 01       	movw	r22, r20
     dd8:	0e 94 c6 06 	call	0xd8c	; 0xd8c <_ZN6String7reserveEj>
     ddc:	81 11       	cpse	r24, r1
     dde:	04 c0       	rjmp	.+8      	; 0xde8 <_ZN6String4copyEPKcj+0x24>
		invalidate();
     de0:	ce 01       	movw	r24, r28
     de2:	0e 94 9a 06 	call	0xd34	; 0xd34 <_ZN6String10invalidateEv>
		return *this;
     de6:	07 c0       	rjmp	.+14     	; 0xdf6 <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
     de8:	1d 83       	std	Y+5, r17	; 0x05
     dea:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
     dec:	b7 01       	movw	r22, r14
     dee:	88 81       	ld	r24, Y
     df0:	99 81       	ldd	r25, Y+1	; 0x01
     df2:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <strcpy>
	return *this;
}
     df6:	ce 01       	movw	r24, r28
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	ff 90       	pop	r15
     e02:	ef 90       	pop	r14
     e04:	08 95       	ret

00000e06 <_ZN6StringC1EPKc>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
     e06:	fc 01       	movw	r30, r24
     e08:	11 82       	std	Z+1, r1	; 0x01
     e0a:	10 82       	st	Z, r1
	capacity = 0;
     e0c:	13 82       	std	Z+3, r1	; 0x03
     e0e:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
     e10:	15 82       	std	Z+5, r1	; 0x05
     e12:	14 82       	std	Z+4, r1	; 0x04
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
     e14:	61 15       	cp	r22, r1
     e16:	71 05       	cpc	r23, r1
     e18:	59 f0       	breq	.+22     	; 0xe30 <_ZN6StringC1EPKc+0x2a>
     e1a:	fb 01       	movw	r30, r22
     e1c:	01 90       	ld	r0, Z+
     e1e:	00 20       	and	r0, r0
     e20:	e9 f7       	brne	.-6      	; 0xe1c <_ZN6StringC1EPKc+0x16>
     e22:	af 01       	movw	r20, r30
     e24:	41 50       	subi	r20, 0x01	; 1
     e26:	51 09       	sbc	r21, r1
     e28:	46 1b       	sub	r20, r22
     e2a:	57 0b       	sbc	r21, r23
     e2c:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <_ZN6String4copyEPKcj>
     e30:	08 95       	ret

00000e32 <_ZN6StringaSERKS_>:
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
     e32:	cf 93       	push	r28
     e34:	df 93       	push	r29
     e36:	ec 01       	movw	r28, r24
     e38:	fb 01       	movw	r30, r22
	if (this == &rhs) return *this;
     e3a:	86 17       	cp	r24, r22
     e3c:	97 07       	cpc	r25, r23
     e3e:	61 f0       	breq	.+24     	; 0xe58 <_ZN6StringaSERKS_+0x26>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
     e40:	60 81       	ld	r22, Z
     e42:	71 81       	ldd	r23, Z+1	; 0x01
     e44:	61 15       	cp	r22, r1
     e46:	71 05       	cpc	r23, r1
     e48:	29 f0       	breq	.+10     	; 0xe54 <_ZN6StringaSERKS_+0x22>
     e4a:	44 81       	ldd	r20, Z+4	; 0x04
     e4c:	55 81       	ldd	r21, Z+5	; 0x05
     e4e:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <_ZN6String4copyEPKcj>
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <_ZN6StringaSERKS_+0x26>
	else invalidate();
     e54:	0e 94 9a 06 	call	0xd34	; 0xd34 <_ZN6String10invalidateEv>
	
	return *this;
}
     e58:	ce 01       	movw	r24, r28
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	08 95       	ret

00000e60 <_ZN6StringC1ERKS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
     e60:	fc 01       	movw	r30, r24
     e62:	11 82       	std	Z+1, r1	; 0x01
     e64:	10 82       	st	Z, r1
	capacity = 0;
     e66:	13 82       	std	Z+3, r1	; 0x03
     e68:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
     e6a:	15 82       	std	Z+5, r1	; 0x05
     e6c:	14 82       	std	Z+4, r1	; 0x04
}

String::String(const String &value)
{
	init();
	*this = value;
     e6e:	0c 94 19 07 	jmp	0xe32	; 0xe32 <_ZN6StringaSERKS_>

00000e72 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
     e76:	ec 01       	movw	r28, r24
	if (cstr) copy(cstr, strlen(cstr));
     e78:	61 15       	cp	r22, r1
     e7a:	71 05       	cpc	r23, r1
     e7c:	61 f0       	breq	.+24     	; 0xe96 <_ZN6StringaSEPKc+0x24>
     e7e:	fb 01       	movw	r30, r22
     e80:	01 90       	ld	r0, Z+
     e82:	00 20       	and	r0, r0
     e84:	e9 f7       	brne	.-6      	; 0xe80 <_ZN6StringaSEPKc+0xe>
     e86:	af 01       	movw	r20, r30
     e88:	41 50       	subi	r20, 0x01	; 1
     e8a:	51 09       	sbc	r21, r1
     e8c:	46 1b       	sub	r20, r22
     e8e:	57 0b       	sbc	r21, r23
     e90:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <_ZN6String4copyEPKcj>
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <_ZN6StringaSEPKc+0x28>
	else invalidate();
     e96:	0e 94 9a 06 	call	0xd34	; 0xd34 <_ZN6String10invalidateEv>
	
	return *this;
}
     e9a:	ce 01       	movw	r24, r28
     e9c:	df 91       	pop	r29
     e9e:	cf 91       	pop	r28
     ea0:	08 95       	ret

00000ea2 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
     ea2:	ef 92       	push	r14
     ea4:	ff 92       	push	r15
     ea6:	0f 93       	push	r16
     ea8:	1f 93       	push	r17
     eaa:	cf 93       	push	r28
     eac:	df 93       	push	r29
     eae:	ec 01       	movw	r28, r24
     eb0:	7b 01       	movw	r14, r22
	unsigned int newlen = len + length;
     eb2:	0c 81       	ldd	r16, Y+4	; 0x04
     eb4:	1d 81       	ldd	r17, Y+5	; 0x05
	if (!cstr) return 0;
     eb6:	61 15       	cp	r22, r1
     eb8:	71 05       	cpc	r23, r1
     eba:	11 f4       	brne	.+4      	; 0xec0 <_ZN6String6concatEPKcj+0x1e>
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	16 c0       	rjmp	.+44     	; 0xeec <_ZN6String6concatEPKcj+0x4a>
	if (length == 0) return 1;
     ec0:	41 15       	cp	r20, r1
     ec2:	51 05       	cpc	r21, r1
     ec4:	91 f0       	breq	.+36     	; 0xeea <_ZN6String6concatEPKcj+0x48>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
     ec6:	04 0f       	add	r16, r20
     ec8:	15 1f       	adc	r17, r21
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
     eca:	b8 01       	movw	r22, r16
     ecc:	0e 94 c6 06 	call	0xd8c	; 0xd8c <_ZN6String7reserveEj>
     ed0:	88 23       	and	r24, r24
     ed2:	a1 f3       	breq	.-24     	; 0xebc <_ZN6String6concatEPKcj+0x1a>
	strcpy(buffer + len, cstr);
     ed4:	28 81       	ld	r18, Y
     ed6:	39 81       	ldd	r19, Y+1	; 0x01
     ed8:	8c 81       	ldd	r24, Y+4	; 0x04
     eda:	9d 81       	ldd	r25, Y+5	; 0x05
     edc:	b7 01       	movw	r22, r14
     ede:	82 0f       	add	r24, r18
     ee0:	93 1f       	adc	r25, r19
     ee2:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <strcpy>
	len = newlen;
     ee6:	1d 83       	std	Y+5, r17	; 0x05
     ee8:	0c 83       	std	Y+4, r16	; 0x04

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
     eea:	81 e0       	ldi	r24, 0x01	; 1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
     eec:	df 91       	pop	r29
     eee:	cf 91       	pop	r28
     ef0:	1f 91       	pop	r17
     ef2:	0f 91       	pop	r16
     ef4:	ff 90       	pop	r15
     ef6:	ef 90       	pop	r14
     ef8:	08 95       	ret

00000efa <_ZN6String6concatERKS_>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
     efa:	fb 01       	movw	r30, r22
     efc:	44 81       	ldd	r20, Z+4	; 0x04
     efe:	55 81       	ldd	r21, Z+5	; 0x05
     f00:	60 81       	ld	r22, Z
     f02:	71 81       	ldd	r23, Z+1	; 0x01
     f04:	0c 94 51 07 	jmp	0xea2	; 0xea2 <_ZN6String6concatEPKcj>

00000f08 <_ZN6String6concatEPKc>:
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
     f08:	61 15       	cp	r22, r1
     f0a:	71 05       	cpc	r23, r1
     f0c:	59 f0       	breq	.+22     	; 0xf24 <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
     f0e:	fb 01       	movw	r30, r22
     f10:	01 90       	ld	r0, Z+
     f12:	00 20       	and	r0, r0
     f14:	e9 f7       	brne	.-6      	; 0xf10 <_ZN6String6concatEPKc+0x8>
     f16:	af 01       	movw	r20, r30
     f18:	41 50       	subi	r20, 0x01	; 1
     f1a:	51 09       	sbc	r21, r1
     f1c:	46 1b       	sub	r20, r22
     f1e:	57 0b       	sbc	r21, r23
     f20:	0c 94 51 07 	jmp	0xea2	; 0xea2 <_ZN6String6concatEPKcj>
}
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	08 95       	ret

00000f28 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
     f28:	cf 93       	push	r28
     f2a:	df 93       	push	r29
     f2c:	00 d0       	rcall	.+0      	; 0xf2e <_ZN6String6concatEc+0x6>
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
	char buf[2];
	buf[0] = c;
     f32:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
     f34:	1a 82       	std	Y+2, r1	; 0x02
	return concat(buf, 1);
     f36:	41 e0       	ldi	r20, 0x01	; 1
     f38:	50 e0       	ldi	r21, 0x00	; 0
     f3a:	be 01       	movw	r22, r28
     f3c:	6f 5f       	subi	r22, 0xFF	; 255
     f3e:	7f 4f       	sbci	r23, 0xFF	; 255
     f40:	0e 94 51 07 	call	0xea2	; 0xea2 <_ZN6String6concatEPKcj>
}
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	08 95       	ret

00000f4e <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
     f52:	ec 01       	movw	r28, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
     f54:	fb 01       	movw	r30, r22
     f56:	44 81       	ldd	r20, Z+4	; 0x04
     f58:	55 81       	ldd	r21, Z+5	; 0x05
     f5a:	60 81       	ld	r22, Z
     f5c:	71 81       	ldd	r23, Z+1	; 0x01
     f5e:	0e 94 51 07 	call	0xea2	; 0xea2 <_ZN6String6concatEPKcj>
     f62:	81 11       	cpse	r24, r1
     f64:	03 c0       	rjmp	.+6      	; 0xf6c <_ZplRK15StringSumHelperRK6String+0x1e>
     f66:	ce 01       	movw	r24, r28
     f68:	0e 94 9a 06 	call	0xd34	; 0xd34 <_ZN6String10invalidateEv>
	return a;
}
     f6c:	ce 01       	movw	r24, r28
     f6e:	df 91       	pop	r29
     f70:	cf 91       	pop	r28
     f72:	08 95       	ret

00000f74 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
     f74:	cf 93       	push	r28
     f76:	df 93       	push	r29
     f78:	ec 01       	movw	r28, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
     f7a:	61 15       	cp	r22, r1
     f7c:	71 05       	cpc	r23, r1
     f7e:	69 f0       	breq	.+26     	; 0xf9a <_ZplRK15StringSumHelperPKc+0x26>
     f80:	fb 01       	movw	r30, r22
     f82:	01 90       	ld	r0, Z+
     f84:	00 20       	and	r0, r0
     f86:	e9 f7       	brne	.-6      	; 0xf82 <_ZplRK15StringSumHelperPKc+0xe>
     f88:	af 01       	movw	r20, r30
     f8a:	41 50       	subi	r20, 0x01	; 1
     f8c:	51 09       	sbc	r21, r1
     f8e:	46 1b       	sub	r20, r22
     f90:	57 0b       	sbc	r21, r23
     f92:	0e 94 51 07 	call	0xea2	; 0xea2 <_ZN6String6concatEPKcj>
     f96:	81 11       	cpse	r24, r1
     f98:	03 c0       	rjmp	.+6      	; 0xfa0 <_ZplRK15StringSumHelperPKc+0x2c>
     f9a:	ce 01       	movw	r24, r28
     f9c:	0e 94 9a 06 	call	0xd34	; 0xd34 <_ZN6String10invalidateEv>
	return a;
}
     fa0:	ce 01       	movw	r24, r28
     fa2:	df 91       	pop	r29
     fa4:	cf 91       	pop	r28
     fa6:	08 95       	ret

00000fa8 <_ZNK6String9compareToERKS_>:
/*********************************************/
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
	if (!buffer || !s.buffer) {
     fac:	dc 01       	movw	r26, r24
     fae:	ed 91       	ld	r30, X+
     fb0:	fc 91       	ld	r31, X
     fb2:	eb 01       	movw	r28, r22
     fb4:	a8 81       	ld	r26, Y
     fb6:	b9 81       	ldd	r27, Y+1	; 0x01
     fb8:	30 97       	sbiw	r30, 0x00	; 0
     fba:	11 f0       	breq	.+4      	; 0xfc0 <_ZNK6String9compareToERKS_+0x18>
     fbc:	10 97       	sbiw	r26, 0x00	; 0
     fbe:	c9 f4       	brne	.+50     	; 0xff2 <_ZNK6String9compareToERKS_+0x4a>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
     fc0:	10 97       	sbiw	r26, 0x00	; 0
     fc2:	59 f0       	breq	.+22     	; 0xfda <_ZNK6String9compareToERKS_+0x32>
     fc4:	eb 01       	movw	r28, r22
     fc6:	2c 81       	ldd	r18, Y+4	; 0x04
     fc8:	3d 81       	ldd	r19, Y+5	; 0x05
     fca:	23 2b       	or	r18, r19
     fcc:	31 f0       	breq	.+12     	; 0xfda <_ZNK6String9compareToERKS_+0x32>
     fce:	8c 91       	ld	r24, X
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	91 95       	neg	r25
     fd4:	81 95       	neg	r24
     fd6:	91 09       	sbc	r25, r1
     fd8:	14 c0       	rjmp	.+40     	; 0x1002 <_ZNK6String9compareToERKS_+0x5a>
		if (buffer && len > 0) return *(unsigned char *)buffer;
     fda:	30 97       	sbiw	r30, 0x00	; 0
     fdc:	81 f0       	breq	.+32     	; 0xffe <_ZNK6String9compareToERKS_+0x56>
     fde:	dc 01       	movw	r26, r24
     fe0:	14 96       	adiw	r26, 0x04	; 4
     fe2:	8d 91       	ld	r24, X+
     fe4:	9c 91       	ld	r25, X
     fe6:	15 97       	sbiw	r26, 0x05	; 5
     fe8:	89 2b       	or	r24, r25
     fea:	49 f0       	breq	.+18     	; 0xffe <_ZNK6String9compareToERKS_+0x56>
     fec:	80 81       	ld	r24, Z
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	08 c0       	rjmp	.+16     	; 0x1002 <_ZNK6String9compareToERKS_+0x5a>
		return 0;
	}
	return strcmp(buffer, s.buffer);
     ff2:	bd 01       	movw	r22, r26
     ff4:	cf 01       	movw	r24, r30
}
     ff6:	df 91       	pop	r29
     ff8:	cf 91       	pop	r28
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
		return 0;
	}
	return strcmp(buffer, s.buffer);
     ffa:	0c 94 cf 14 	jmp	0x299e	; 0x299e <strcmp>
int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
		return 0;
     ffe:	80 e0       	ldi	r24, 0x00	; 0
    1000:	90 e0       	ldi	r25, 0x00	; 0
	}
	return strcmp(buffer, s.buffer);
}
    1002:	df 91       	pop	r29
    1004:	cf 91       	pop	r28
    1006:	08 95       	ret

00001008 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
    1008:	fc 01       	movw	r30, r24
    100a:	44 81       	ldd	r20, Z+4	; 0x04
    100c:	55 81       	ldd	r21, Z+5	; 0x05
    100e:	fb 01       	movw	r30, r22
    1010:	24 81       	ldd	r18, Z+4	; 0x04
    1012:	35 81       	ldd	r19, Z+5	; 0x05
    1014:	42 17       	cp	r20, r18
    1016:	53 07       	cpc	r21, r19
    1018:	41 f4       	brne	.+16     	; 0x102a <_ZNK6String6equalsERKS_+0x22>
    101a:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <_ZNK6String9compareToERKS_>
    101e:	21 e0       	ldi	r18, 0x01	; 1
    1020:	89 2b       	or	r24, r25
    1022:	09 f0       	breq	.+2      	; 0x1026 <_ZNK6String6equalsERKS_+0x1e>
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	82 2f       	mov	r24, r18
    1028:	08 95       	ret
    102a:	80 e0       	ldi	r24, 0x00	; 0
}
    102c:	08 95       	ret

0000102e <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    102e:	fc 01       	movw	r30, r24
    1030:	24 81       	ldd	r18, Z+4	; 0x04
    1032:	35 81       	ldd	r19, Z+5	; 0x05
    1034:	23 2b       	or	r18, r19
    1036:	31 f4       	brne	.+12     	; 0x1044 <_ZNK6String6equalsEPKc+0x16>
    1038:	21 e0       	ldi	r18, 0x01	; 1
    103a:	61 15       	cp	r22, r1
    103c:	71 05       	cpc	r23, r1
    103e:	a1 f0       	breq	.+40     	; 0x1068 <_ZNK6String6equalsEPKc+0x3a>
    1040:	fb 01       	movw	r30, r22
    1042:	08 c0       	rjmp	.+16     	; 0x1054 <_ZNK6String6equalsEPKc+0x26>
    1044:	fc 01       	movw	r30, r24
    1046:	80 81       	ld	r24, Z
    1048:	91 81       	ldd	r25, Z+1	; 0x01
	if (cstr == NULL) return buffer[0] == 0;
    104a:	61 15       	cp	r22, r1
    104c:	71 05       	cpc	r23, r1
    104e:	31 f4       	brne	.+12     	; 0x105c <_ZNK6String6equalsEPKc+0x2e>
    1050:	21 e0       	ldi	r18, 0x01	; 1
    1052:	fc 01       	movw	r30, r24
    1054:	80 81       	ld	r24, Z
    1056:	88 23       	and	r24, r24
    1058:	39 f0       	breq	.+14     	; 0x1068 <_ZNK6String6equalsEPKc+0x3a>
    105a:	05 c0       	rjmp	.+10     	; 0x1066 <_ZNK6String6equalsEPKc+0x38>
	return strcmp(buffer, cstr) == 0;
    105c:	0e 94 cf 14 	call	0x299e	; 0x299e <strcmp>
    1060:	21 e0       	ldi	r18, 0x01	; 1
    1062:	89 2b       	or	r24, r25
    1064:	09 f0       	breq	.+2      	; 0x1068 <_ZNK6String6equalsEPKc+0x3a>
    1066:	20 e0       	ldi	r18, 0x00	; 0
}
    1068:	82 2f       	mov	r24, r18
    106a:	08 95       	ret

0000106c <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
    106c:	fa 01       	movw	r30, r20
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    106e:	db 01       	movw	r26, r22
    1070:	14 96       	adiw	r26, 0x04	; 4
    1072:	4d 91       	ld	r20, X+
    1074:	5c 91       	ld	r21, X
    1076:	15 97       	sbiw	r26, 0x05	; 5
    1078:	dc 01       	movw	r26, r24
    107a:	14 96       	adiw	r26, 0x04	; 4
    107c:	2d 91       	ld	r18, X+
    107e:	3c 91       	ld	r19, X
    1080:	15 97       	sbiw	r26, 0x05	; 5
    1082:	24 1b       	sub	r18, r20
    1084:	35 0b       	sbc	r19, r21
    1086:	2e 17       	cp	r18, r30
    1088:	3f 07       	cpc	r19, r31
    108a:	88 f0       	brcs	.+34     	; 0x10ae <_ZNK6String10startsWithERKS_j+0x42>
    108c:	8d 91       	ld	r24, X+
    108e:	9c 91       	ld	r25, X
    1090:	00 97       	sbiw	r24, 0x00	; 0
    1092:	69 f0       	breq	.+26     	; 0x10ae <_ZNK6String10startsWithERKS_j+0x42>
    1094:	db 01       	movw	r26, r22
    1096:	6d 91       	ld	r22, X+
    1098:	7c 91       	ld	r23, X
    109a:	61 15       	cp	r22, r1
    109c:	71 05       	cpc	r23, r1
    109e:	39 f0       	breq	.+14     	; 0x10ae <_ZNK6String10startsWithERKS_j+0x42>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
    10a0:	8e 0f       	add	r24, r30
    10a2:	9f 1f       	adc	r25, r31
    10a4:	0e 94 df 14 	call	0x29be	; 0x29be <strncmp>
    10a8:	21 e0       	ldi	r18, 0x01	; 1
    10aa:	89 2b       	or	r24, r25
    10ac:	09 f0       	breq	.+2      	; 0x10b0 <_ZNK6String10startsWithERKS_j+0x44>
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    10ae:	20 e0       	ldi	r18, 0x00	; 0
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}
    10b0:	82 2f       	mov	r24, r18
    10b2:	08 95       	ret

000010b4 <_ZNK6String10startsWithERKS_>:
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
    10b4:	fc 01       	movw	r30, r24
    10b6:	44 81       	ldd	r20, Z+4	; 0x04
    10b8:	55 81       	ldd	r21, Z+5	; 0x05
    10ba:	fb 01       	movw	r30, r22
    10bc:	24 81       	ldd	r18, Z+4	; 0x04
    10be:	35 81       	ldd	r19, Z+5	; 0x05
    10c0:	42 17       	cp	r20, r18
    10c2:	53 07       	cpc	r21, r19
    10c4:	20 f0       	brcs	.+8      	; 0x10ce <_ZNK6String10startsWithERKS_+0x1a>
	return startsWith(s2, 0);
    10c6:	40 e0       	ldi	r20, 0x00	; 0
    10c8:	50 e0       	ldi	r21, 0x00	; 0
    10ca:	0c 94 36 08 	jmp	0x106c	; 0x106c <_ZNK6String10startsWithERKS_j>
}
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	08 95       	ret

000010d2 <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
    10d2:	fc 01       	movw	r30, r24
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    10d4:	84 81       	ldd	r24, Z+4	; 0x04
    10d6:	95 81       	ldd	r25, Z+5	; 0x05
    10d8:	db 01       	movw	r26, r22
    10da:	14 96       	adiw	r26, 0x04	; 4
    10dc:	4d 91       	ld	r20, X+
    10de:	5c 91       	ld	r21, X
    10e0:	15 97       	sbiw	r26, 0x05	; 5
    10e2:	84 17       	cp	r24, r20
    10e4:	95 07       	cpc	r25, r21
    10e6:	98 f0       	brcs	.+38     	; 0x110e <_ZNK6String8endsWithERKS_+0x3c>
    10e8:	20 81       	ld	r18, Z
    10ea:	31 81       	ldd	r19, Z+1	; 0x01
    10ec:	21 15       	cp	r18, r1
    10ee:	31 05       	cpc	r19, r1
    10f0:	71 f0       	breq	.+28     	; 0x110e <_ZNK6String8endsWithERKS_+0x3c>
    10f2:	6d 91       	ld	r22, X+
    10f4:	7c 91       	ld	r23, X
    10f6:	61 15       	cp	r22, r1
    10f8:	71 05       	cpc	r23, r1
    10fa:	49 f0       	breq	.+18     	; 0x110e <_ZNK6String8endsWithERKS_+0x3c>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
    10fc:	84 1b       	sub	r24, r20
    10fe:	95 0b       	sbc	r25, r21
    1100:	82 0f       	add	r24, r18
    1102:	93 1f       	adc	r25, r19
    1104:	0e 94 cf 14 	call	0x299e	; 0x299e <strcmp>
    1108:	21 e0       	ldi	r18, 0x01	; 1
    110a:	89 2b       	or	r24, r25
    110c:	09 f0       	breq	.+2      	; 0x1110 <_ZNK6String8endsWithERKS_+0x3e>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    110e:	20 e0       	ldi	r18, 0x00	; 0
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
}
    1110:	82 2f       	mov	r24, r18
    1112:	08 95       	ret

00001114 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
    1114:	fc 01       	movw	r30, r24
    1116:	24 81       	ldd	r18, Z+4	; 0x04
    1118:	35 81       	ldd	r19, Z+5	; 0x05
    111a:	62 17       	cp	r22, r18
    111c:	73 07       	cpc	r23, r19
    111e:	48 f4       	brcc	.+18     	; 0x1132 <_ZNK6StringixEj+0x1e>
    1120:	80 81       	ld	r24, Z
    1122:	91 81       	ldd	r25, Z+1	; 0x01
    1124:	00 97       	sbiw	r24, 0x00	; 0
    1126:	29 f0       	breq	.+10     	; 0x1132 <_ZNK6StringixEj+0x1e>
	return buffer[index];
    1128:	fc 01       	movw	r30, r24
    112a:	e6 0f       	add	r30, r22
    112c:	f7 1f       	adc	r31, r23
    112e:	80 81       	ld	r24, Z
    1130:	08 95       	ret
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
    1132:	80 e0       	ldi	r24, 0x00	; 0
	return buffer[index];
}
    1134:	08 95       	ret

00001136 <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
    1136:	0c 94 8a 08 	jmp	0x1114	; 0x1114 <_ZNK6StringixEj>

0000113a <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    113a:	0f 93       	push	r16
    113c:	1f 93       	push	r17
    113e:	cf 93       	push	r28
    1140:	df 93       	push	r29
    1142:	eb 01       	movw	r28, r22
	if (!bufsize || !buf) return;
    1144:	41 15       	cp	r20, r1
    1146:	51 05       	cpc	r21, r1
    1148:	e9 f0       	breq	.+58     	; 0x1184 <_ZNK6String8getBytesEPhjj+0x4a>
    114a:	20 97       	sbiw	r28, 0x00	; 0
    114c:	d9 f0       	breq	.+54     	; 0x1184 <_ZNK6String8getBytesEPhjj+0x4a>
	if (index >= len) {
    114e:	fc 01       	movw	r30, r24
    1150:	64 81       	ldd	r22, Z+4	; 0x04
    1152:	75 81       	ldd	r23, Z+5	; 0x05
    1154:	26 17       	cp	r18, r22
    1156:	37 07       	cpc	r19, r23
    1158:	a0 f4       	brcc	.+40     	; 0x1182 <_ZNK6String8getBytesEPhjj+0x48>
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
    115a:	62 1b       	sub	r22, r18
    115c:	73 0b       	sbc	r23, r19
    115e:	8a 01       	movw	r16, r20
    1160:	01 50       	subi	r16, 0x01	; 1
    1162:	11 09       	sbc	r17, r1
    1164:	60 17       	cp	r22, r16
    1166:	71 07       	cpc	r23, r17
    1168:	08 f4       	brcc	.+2      	; 0x116c <_ZNK6String8getBytesEPhjj+0x32>
    116a:	8b 01       	movw	r16, r22
	strncpy((char *)buf, buffer + index, n);
    116c:	fc 01       	movw	r30, r24
    116e:	60 81       	ld	r22, Z
    1170:	71 81       	ldd	r23, Z+1	; 0x01
    1172:	62 0f       	add	r22, r18
    1174:	73 1f       	adc	r23, r19
    1176:	a8 01       	movw	r20, r16
    1178:	ce 01       	movw	r24, r28
    117a:	0e 94 ed 14 	call	0x29da	; 0x29da <strncpy>
	buf[n] = 0;
    117e:	c0 0f       	add	r28, r16
    1180:	d1 1f       	adc	r29, r17
    1182:	18 82       	st	Y, r1
}
    1184:	df 91       	pop	r29
    1186:	cf 91       	pop	r28
    1188:	1f 91       	pop	r17
    118a:	0f 91       	pop	r16
    118c:	08 95       	ret

0000118e <_ZNK6String9substringEjj>:
	}
	return found;
}

String String::substring(unsigned int left, unsigned int right) const
{
    118e:	bf 92       	push	r11
    1190:	cf 92       	push	r12
    1192:	df 92       	push	r13
    1194:	ef 92       	push	r14
    1196:	ff 92       	push	r15
    1198:	0f 93       	push	r16
    119a:	1f 93       	push	r17
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    11a0:	6c 01       	movw	r12, r24
    11a2:	7b 01       	movw	r14, r22
    11a4:	ea 01       	movw	r28, r20
    11a6:	89 01       	movw	r16, r18
	if (left > right) {
    11a8:	24 17       	cp	r18, r20
    11aa:	35 07       	cpc	r19, r21
    11ac:	20 f4       	brcc	.+8      	; 0x11b6 <_ZNK6String9substringEjj+0x28>
    11ae:	8d 2f       	mov	r24, r29
    11b0:	e9 01       	movw	r28, r18
    11b2:	04 2f       	mov	r16, r20
    11b4:	18 2f       	mov	r17, r24
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
    11b6:	60 e2       	ldi	r22, 0x20	; 32
    11b8:	71 e0       	ldi	r23, 0x01	; 1
    11ba:	c6 01       	movw	r24, r12
    11bc:	0e 94 03 07 	call	0xe06	; 0xe06 <_ZN6StringC1EPKc>
	if (left >= len) return out;
    11c0:	d7 01       	movw	r26, r14
    11c2:	14 96       	adiw	r26, 0x04	; 4
    11c4:	8d 91       	ld	r24, X+
    11c6:	9c 91       	ld	r25, X
    11c8:	15 97       	sbiw	r26, 0x05	; 5
    11ca:	c8 17       	cp	r28, r24
    11cc:	d9 07       	cpc	r29, r25
    11ce:	c8 f4       	brcc	.+50     	; 0x1202 <_ZNK6String9substringEjj+0x74>
    11d0:	80 17       	cp	r24, r16
    11d2:	91 07       	cpc	r25, r17
    11d4:	08 f4       	brcc	.+2      	; 0x11d8 <_ZNK6String9substringEjj+0x4a>
    11d6:	8c 01       	movw	r16, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    11d8:	d7 01       	movw	r26, r14
    11da:	ed 91       	ld	r30, X+
    11dc:	fc 91       	ld	r31, X
    11de:	11 97       	sbiw	r26, 0x01	; 1
    11e0:	e0 0f       	add	r30, r16
    11e2:	f1 1f       	adc	r31, r17
    11e4:	b0 80       	ld	r11, Z
	buffer[right] = '\0';	
    11e6:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    11e8:	6d 91       	ld	r22, X+
    11ea:	7c 91       	ld	r23, X
    11ec:	6c 0f       	add	r22, r28
    11ee:	7d 1f       	adc	r23, r29
    11f0:	c6 01       	movw	r24, r12
    11f2:	0e 94 39 07 	call	0xe72	; 0xe72 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    11f6:	d7 01       	movw	r26, r14
    11f8:	ed 91       	ld	r30, X+
    11fa:	fc 91       	ld	r31, X
    11fc:	e0 0f       	add	r30, r16
    11fe:	f1 1f       	adc	r31, r17
    1200:	b0 82       	st	Z, r11
	return out;
}
    1202:	c6 01       	movw	r24, r12
    1204:	df 91       	pop	r29
    1206:	cf 91       	pop	r28
    1208:	1f 91       	pop	r17
    120a:	0f 91       	pop	r16
    120c:	ff 90       	pop	r15
    120e:	ef 90       	pop	r14
    1210:	df 90       	pop	r13
    1212:	cf 90       	pop	r12
    1214:	bf 90       	pop	r11
    1216:	08 95       	ret

00001218 <_ZN6String6removeEjj>:
	// below will take care of truncating it at the end of the
	// string.
	remove(index, (unsigned int)-1);
}

void String::remove(unsigned int index, unsigned int count){
    1218:	cf 93       	push	r28
    121a:	df 93       	push	r29
    121c:	ec 01       	movw	r28, r24
    121e:	cb 01       	movw	r24, r22
	if (index >= len) { return; }
    1220:	2c 81       	ldd	r18, Y+4	; 0x04
    1222:	3d 81       	ldd	r19, Y+5	; 0x05
    1224:	62 17       	cp	r22, r18
    1226:	73 07       	cpc	r23, r19
    1228:	10 f5       	brcc	.+68     	; 0x126e <_ZN6String6removeEjj+0x56>
	if (count <= 0) { return; }
    122a:	41 15       	cp	r20, r1
    122c:	51 05       	cpc	r21, r1
    122e:	f9 f0       	breq	.+62     	; 0x126e <_ZN6String6removeEjj+0x56>
    1230:	b9 01       	movw	r22, r18
    1232:	68 1b       	sub	r22, r24
    1234:	79 0b       	sbc	r23, r25
    1236:	46 17       	cp	r20, r22
    1238:	57 07       	cpc	r21, r23
    123a:	08 f4       	brcc	.+2      	; 0x123e <_ZN6String6removeEjj+0x26>
    123c:	ba 01       	movw	r22, r20
	if (count > len - index) { count = len - index; }
	char *writeTo = buffer + index;
    123e:	e8 81       	ld	r30, Y
    1240:	f9 81       	ldd	r31, Y+1	; 0x01
	len = len - count;
    1242:	26 1b       	sub	r18, r22
    1244:	37 0b       	sbc	r19, r23
    1246:	3d 83       	std	Y+5, r19	; 0x05
    1248:	2c 83       	std	Y+4, r18	; 0x04
	strncpy(writeTo, buffer + index + count,len - index);
    124a:	a9 01       	movw	r20, r18
    124c:	48 1b       	sub	r20, r24
    124e:	59 0b       	sbc	r21, r25
    1250:	68 0f       	add	r22, r24
    1252:	79 1f       	adc	r23, r25
    1254:	6e 0f       	add	r22, r30
    1256:	7f 1f       	adc	r23, r31
    1258:	8e 0f       	add	r24, r30
    125a:	9f 1f       	adc	r25, r31
    125c:	0e 94 ed 14 	call	0x29da	; 0x29da <strncpy>
	buffer[len] = 0;
    1260:	e8 81       	ld	r30, Y
    1262:	f9 81       	ldd	r31, Y+1	; 0x01
    1264:	8c 81       	ldd	r24, Y+4	; 0x04
    1266:	9d 81       	ldd	r25, Y+5	; 0x05
    1268:	e8 0f       	add	r30, r24
    126a:	f9 1f       	adc	r31, r25
    126c:	10 82       	st	Z, r1
}
    126e:	df 91       	pop	r29
    1270:	cf 91       	pop	r28
    1272:	08 95       	ret

00001274 <_ZN6String6removeEj>:

void String::remove(unsigned int index){
	// Pass the biggest integer as the count. The remove method
	// below will take care of truncating it at the end of the
	// string.
	remove(index, (unsigned int)-1);
    1274:	4f ef       	ldi	r20, 0xFF	; 255
    1276:	5f ef       	ldi	r21, 0xFF	; 255
    1278:	0c 94 0c 09 	jmp	0x1218	; 0x1218 <_ZN6String6removeEjj>

0000127c <_ZN8BLEMate2C1EP6Stream>:
#include "SparkFun_BLEMate2.h"
#include "../Arduino/Arduino.h"

// Constructor. All we really need to do is link the user's Stream instance to
//  our local reference.
BLEMate2::BLEMate2(Stream *sp)
    127c:	cf 92       	push	r12
    127e:	df 92       	push	r13
    1280:	ef 92       	push	r14
    1282:	ff 92       	push	r15
    1284:	0f 93       	push	r16
    1286:	1f 93       	push	r17
    1288:	cf 93       	push	r28
    128a:	df 93       	push	r29
    128c:	ec 01       	movw	r28, r24
    128e:	7b 01       	movw	r14, r22
    1290:	8c 01       	movw	r16, r24
    1292:	0e 5f       	subi	r16, 0xFE	; 254
    1294:	1f 4f       	sbci	r17, 0xFF	; 255
    1296:	6c 01       	movw	r12, r24
    1298:	80 e2       	ldi	r24, 0x20	; 32
    129a:	c8 0e       	add	r12, r24
    129c:	d1 1c       	adc	r13, r1
    129e:	60 e2       	ldi	r22, 0x20	; 32
    12a0:	71 e0       	ldi	r23, 0x01	; 1
    12a2:	c8 01       	movw	r24, r16
    12a4:	0e 94 03 07 	call	0xe06	; 0xe06 <_ZN6StringC1EPKc>
    12a8:	0a 5f       	subi	r16, 0xFA	; 250
    12aa:	1f 4f       	sbci	r17, 0xFF	; 255
    12ac:	0c 15       	cp	r16, r12
    12ae:	1d 05       	cpc	r17, r13
    12b0:	b1 f7       	brne	.-20     	; 0x129e <_ZN8BLEMate2C1EP6Stream+0x22>
{
  _serialPort = sp;
    12b2:	fa a2       	std	Y+34, r15	; 0x22
    12b4:	e9 a2       	std	Y+33, r14	; 0x21
  _numAddresses = 0;
    12b6:	18 a2       	std	Y+32, r1	; 0x20
}
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	1f 91       	pop	r17
    12be:	0f 91       	pop	r16
    12c0:	ff 90       	pop	r15
    12c2:	ef 90       	pop	r14
    12c4:	df 90       	pop	r13
    12c6:	cf 90       	pop	r12
    12c8:	08 95       	ret

000012ca <_ZN8BLEMate210knownStartEv>:

// Create a known state for the module to start from. If a partial command is
//  already in the module's buffer, we can purge it by sending an EOL to the
//  the module. If not, we'll just get an error.
BLEMate2::opResult BLEMate2::knownStart()
{
    12ca:	8f 92       	push	r8
    12cc:	9f 92       	push	r9
    12ce:	af 92       	push	r10
    12d0:	bf 92       	push	r11
    12d2:	cf 92       	push	r12
    12d4:	df 92       	push	r13
    12d6:	ef 92       	push	r14
    12d8:	ff 92       	push	r15
    12da:	0f 93       	push	r16
    12dc:	1f 93       	push	r17
    12de:	cf 93       	push	r28
    12e0:	df 93       	push	r29
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
    12e6:	62 97       	sbiw	r28, 0x12	; 18
    12e8:	0f b6       	in	r0, 0x3f	; 63
    12ea:	f8 94       	cli
    12ec:	de bf       	out	0x3e, r29	; 62
    12ee:	0f be       	out	0x3f, r0	; 63
    12f0:	cd bf       	out	0x3d, r28	; 61
    12f2:	8c 01       	movw	r16, r24
  String EOL = String("\n\r");
    12f4:	6e e1       	ldi	r22, 0x1E	; 30
    12f6:	71 e0       	ldi	r23, 0x01	; 1
    12f8:	ce 01       	movw	r24, r28
    12fa:	0d 96       	adiw	r24, 0x0d	; 13
    12fc:	0e 94 03 07 	call	0xe06	; 0xe06 <_ZN6StringC1EPKc>
  String buffer = "";
    1300:	60 e2       	ldi	r22, 0x20	; 32
    1302:	71 e0       	ldi	r23, 0x01	; 1
    1304:	ce 01       	movw	r24, r28
    1306:	07 96       	adiw	r24, 0x07	; 7
    1308:	0e 94 03 07 	call	0xe06	; 0xe06 <_ZN6StringC1EPKc>
  
  _serialPort->print("\r");
    130c:	6f e1       	ldi	r22, 0x1F	; 31
    130e:	71 e0       	ldi	r23, 0x01	; 1
    1310:	d8 01       	movw	r26, r16
    1312:	91 96       	adiw	r26, 0x21	; 33
    1314:	8d 91       	ld	r24, X+
    1316:	9c 91       	ld	r25, X
    1318:	92 97       	sbiw	r26, 0x22	; 34
    131a:	0e 94 09 03 	call	0x612	; 0x612 <_ZN5Print5printEPKc>
  _serialPort->flush();
    131e:	f8 01       	movw	r30, r16
    1320:	81 a1       	ldd	r24, Z+33	; 0x21
    1322:	92 a1       	ldd	r25, Z+34	; 0x22
    1324:	dc 01       	movw	r26, r24
    1326:	ed 91       	ld	r30, X+
    1328:	fc 91       	ld	r31, X
    132a:	02 84       	ldd	r0, Z+10	; 0x0a
    132c:	f3 85       	ldd	r31, Z+11	; 0x0b
    132e:	e0 2d       	mov	r30, r0
    1330:	09 95       	icall
  
  // We're going to use the internal timer to track the elapsed time since we
  //  issued the reset. Bog-standard Arduino stuff.
  unsigned long startTime = millis();
    1332:	0e 94 4e 05 	call	0xa9c	; 0xa9c <millis>
    1336:	6b 01       	movw	r12, r22
    1338:	7c 01       	movw	r14, r24
  
  // This is our timeout loop. We're going to give our module 1s to come up
  //  with a new character, and return with a timeout failure otherwise.
  while (buffer.endsWith(EOL) != true)
    133a:	be 01       	movw	r22, r28
    133c:	63 5f       	subi	r22, 0xF3	; 243
    133e:	7f 4f       	sbci	r23, 0xFF	; 255
    1340:	ce 01       	movw	r24, r28
    1342:	07 96       	adiw	r24, 0x07	; 7
    1344:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_ZNK6String8endsWithERKS_>
    1348:	81 30       	cpi	r24, 0x01	; 1
    134a:	89 f1       	breq	.+98     	; 0x13ae <_ZN8BLEMate210knownStartEv+0xe4>
  {
    // Purge the serial data received from the module, along with any data in
    //  the buffer at the time this command was sent.
    if (_serialPort->available() > 0) 
    134c:	f8 01       	movw	r30, r16
    134e:	81 a1       	ldd	r24, Z+33	; 0x21
    1350:	92 a1       	ldd	r25, Z+34	; 0x22
    1352:	dc 01       	movw	r26, r24
    1354:	ed 91       	ld	r30, X+
    1356:	fc 91       	ld	r31, X
    1358:	04 80       	ldd	r0, Z+4	; 0x04
    135a:	f5 81       	ldd	r31, Z+5	; 0x05
    135c:	e0 2d       	mov	r30, r0
    135e:	09 95       	icall
    1360:	18 16       	cp	r1, r24
    1362:	19 06       	cpc	r1, r25
    1364:	9c f4       	brge	.+38     	; 0x138c <_ZN8BLEMate210knownStartEv+0xc2>
    {
      buffer.concat(char(_serialPort->read()));
    1366:	f8 01       	movw	r30, r16
    1368:	81 a1       	ldd	r24, Z+33	; 0x21
    136a:	92 a1       	ldd	r25, Z+34	; 0x22
    136c:	dc 01       	movw	r26, r24
    136e:	ed 91       	ld	r30, X+
    1370:	fc 91       	ld	r31, X
    1372:	06 80       	ldd	r0, Z+6	; 0x06
    1374:	f7 81       	ldd	r31, Z+7	; 0x07
    1376:	e0 2d       	mov	r30, r0
    1378:	09 95       	icall
    137a:	68 2f       	mov	r22, r24
    137c:	ce 01       	movw	r24, r28
    137e:	07 96       	adiw	r24, 0x07	; 7
    1380:	0e 94 94 07 	call	0xf28	; 0xf28 <_ZN6String6concatEc>
      startTime = millis();
    1384:	0e 94 4e 05 	call	0xa9c	; 0xa9c <millis>
    1388:	6b 01       	movw	r12, r22
    138a:	7c 01       	movw	r14, r24
    }
    if ((startTime + 1000) < millis()) return TIMEOUT_ERROR;
    138c:	0e 94 4e 05 	call	0xa9c	; 0xa9c <millis>
    1390:	46 01       	movw	r8, r12
    1392:	57 01       	movw	r10, r14
    1394:	b8 ee       	ldi	r27, 0xE8	; 232
    1396:	8b 0e       	add	r8, r27
    1398:	b3 e0       	ldi	r27, 0x03	; 3
    139a:	9b 1e       	adc	r9, r27
    139c:	a1 1c       	adc	r10, r1
    139e:	b1 1c       	adc	r11, r1
    13a0:	86 16       	cp	r8, r22
    13a2:	97 06       	cpc	r9, r23
    13a4:	a8 06       	cpc	r10, r24
    13a6:	b9 06       	cpc	r11, r25
    13a8:	40 f6       	brcc	.-112    	; 0x133a <_ZN8BLEMate210knownStartEv+0x70>
    13aa:	1e ef       	ldi	r17, 0xFE	; 254
    13ac:	12 c0       	rjmp	.+36     	; 0x13d2 <_ZN8BLEMate210knownStartEv+0x108>
  }
  if (buffer.startsWith("ERR")) return SUCCESS;
    13ae:	61 e2       	ldi	r22, 0x21	; 33
    13b0:	71 e0       	ldi	r23, 0x01	; 1
    13b2:	ce 01       	movw	r24, r28
    13b4:	01 96       	adiw	r24, 0x01	; 1
    13b6:	0e 94 03 07 	call	0xe06	; 0xe06 <_ZN6StringC1EPKc>
    13ba:	be 01       	movw	r22, r28
    13bc:	6f 5f       	subi	r22, 0xFF	; 255
    13be:	7f 4f       	sbci	r23, 0xFF	; 255
    13c0:	ce 01       	movw	r24, r28
    13c2:	07 96       	adiw	r24, 0x07	; 7
    13c4:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <_ZNK6String10startsWithERKS_>
    13c8:	ce 01       	movw	r24, r28
    13ca:	01 96       	adiw	r24, 0x01	; 1
    13cc:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN6StringD1Ev>
    13d0:	11 e0       	ldi	r17, 0x01	; 1
//  already in the module's buffer, we can purge it by sending an EOL to the
//  the module. If not, we'll just get an error.
BLEMate2::opResult BLEMate2::knownStart()
{
  String EOL = String("\n\r");
  String buffer = "";
    13d2:	ce 01       	movw	r24, r28
    13d4:	07 96       	adiw	r24, 0x07	; 7
    13d6:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN6StringD1Ev>
      startTime = millis();
    }
    if ((startTime + 1000) < millis()) return TIMEOUT_ERROR;
  }
  if (buffer.startsWith("ERR")) return SUCCESS;
  else return SUCCESS;
    13da:	ce 01       	movw	r24, r28
    13dc:	0d 96       	adiw	r24, 0x0d	; 13
    13de:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN6StringD1Ev>
}
    13e2:	81 2f       	mov	r24, r17
    13e4:	62 96       	adiw	r28, 0x12	; 18
    13e6:	0f b6       	in	r0, 0x3f	; 63
    13e8:	f8 94       	cli
    13ea:	de bf       	out	0x3e, r29	; 62
    13ec:	0f be       	out	0x3f, r0	; 63
    13ee:	cd bf       	out	0x3d, r28	; 61
    13f0:	df 91       	pop	r29
    13f2:	cf 91       	pop	r28
    13f4:	1f 91       	pop	r17
    13f6:	0f 91       	pop	r16
    13f8:	ff 90       	pop	r15
    13fa:	ef 90       	pop	r14
    13fc:	df 90       	pop	r13
    13fe:	cf 90       	pop	r12
    1400:	bf 90       	pop	r11
    1402:	af 90       	pop	r10
    1404:	9f 90       	pop	r9
    1406:	8f 90       	pop	r8
    1408:	08 95       	ret

0000140a <_ZN8BLEMate26stdCmdE6String>:
}

// There are several commands that look for either OK or ERROR; let's abstract
//  support for those commands to one single private function, to save memory.
BLEMate2::opResult BLEMate2::stdCmd(String command)
{
    140a:	bf 92       	push	r11
    140c:	cf 92       	push	r12
    140e:	df 92       	push	r13
    1410:	ef 92       	push	r14
    1412:	ff 92       	push	r15
    1414:	0f 93       	push	r16
    1416:	1f 93       	push	r17
    1418:	cf 93       	push	r28
    141a:	df 93       	push	r29
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
    1420:	62 97       	sbiw	r28, 0x12	; 18
    1422:	0f b6       	in	r0, 0x3f	; 63
    1424:	f8 94       	cli
    1426:	de bf       	out	0x3e, r29	; 62
    1428:	0f be       	out	0x3f, r0	; 63
    142a:	cd bf       	out	0x3d, r28	; 61
    142c:	8c 01       	movw	r16, r24
    142e:	7b 01       	movw	r14, r22
  String buffer;
    1430:	60 e2       	ldi	r22, 0x20	; 32
    1432:	71 e0       	ldi	r23, 0x01	; 1
    1434:	ce 01       	movw	r24, r28
    1436:	0d 96       	adiw	r24, 0x0d	; 13
    1438:	0e 94 03 07 	call	0xe06	; 0xe06 <_ZN6StringC1EPKc>
  String EOL = String("\n\r");
    143c:	6e e1       	ldi	r22, 0x1E	; 30
    143e:	71 e0       	ldi	r23, 0x01	; 1
    1440:	ce 01       	movw	r24, r28
    1442:	07 96       	adiw	r24, 0x07	; 7
    1444:	0e 94 03 07 	call	0xe06	; 0xe06 <_ZN6StringC1EPKc>
  
  knownStart(); // Clear the serial buffer in the module and the Arduino.
    1448:	c8 01       	movw	r24, r16
    144a:	0e 94 65 09 	call	0x12ca	; 0x12ca <_ZN8BLEMate210knownStartEv>
  
  _serialPort->print(command);
    144e:	b7 01       	movw	r22, r14
    1450:	d8 01       	movw	r26, r16
    1452:	91 96       	adiw	r26, 0x21	; 33
    1454:	8d 91       	ld	r24, X+
    1456:	9c 91       	ld	r25, X
    1458:	92 97       	sbiw	r26, 0x22	; 34
    145a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printERK6String>
  _serialPort->print("\r");
    145e:	6f e1       	ldi	r22, 0x1F	; 31
    1460:	71 e0       	ldi	r23, 0x01	; 1
    1462:	f8 01       	movw	r30, r16
    1464:	81 a1       	ldd	r24, Z+33	; 0x21
    1466:	92 a1       	ldd	r25, Z+34	; 0x22
    1468:	0e 94 09 03 	call	0x612	; 0x612 <_ZN5Print5printEPKc>
  _serialPort->flush();
    146c:	d8 01       	movw	r26, r16
    146e:	91 96       	adiw	r26, 0x21	; 33
    1470:	8d 91       	ld	r24, X+
    1472:	9c 91       	ld	r25, X
    1474:	92 97       	sbiw	r26, 0x22	; 34
    1476:	dc 01       	movw	r26, r24
    1478:	ed 91       	ld	r30, X+
    147a:	fc 91       	ld	r31, X
    147c:	02 84       	ldd	r0, Z+10	; 0x0a
    147e:	f3 85       	ldd	r31, Z+11	; 0x0b
    1480:	e0 2d       	mov	r30, r0
    1482:	09 95       	icall
  
  // We're going to use the internal timer to track the elapsed time since we
  //  issued the command. Bog-standard Arduino stuff.
  unsigned long startTime = millis();
    1484:	0e 94 4e 05 	call	0xa9c	; 0xa9c <millis>
    1488:	6b 01       	movw	r12, r22
    148a:	7c 01       	movw	r14, r24
    
  // This is our timeout loop. We'll give the module 3 seconds.
  while ((startTime + 3000) > millis())
    148c:	b8 eb       	ldi	r27, 0xB8	; 184
    148e:	cb 0e       	add	r12, r27
    1490:	bb e0       	ldi	r27, 0x0B	; 11
    1492:	db 1e       	adc	r13, r27
    1494:	e1 1c       	adc	r14, r1
    1496:	f1 1c       	adc	r15, r1
    1498:	0e 94 4e 05 	call	0xa9c	; 0xa9c <millis>
    149c:	6c 15       	cp	r22, r12
    149e:	7d 05       	cpc	r23, r13
    14a0:	8e 05       	cpc	r24, r14
    14a2:	9f 05       	cpc	r25, r15
    14a4:	08 f0       	brcs	.+2      	; 0x14a8 <_ZN8BLEMate26stdCmdE6String+0x9e>
    14a6:	54 c0       	rjmp	.+168    	; 0x1550 <_ZN8BLEMate26stdCmdE6String+0x146>
  {
    // Grow the current buffered data, until we receive the EOL string.    
    if (_serialPort->available() > 0) buffer.concat(char(_serialPort->read()));
    14a8:	f8 01       	movw	r30, r16
    14aa:	81 a1       	ldd	r24, Z+33	; 0x21
    14ac:	92 a1       	ldd	r25, Z+34	; 0x22
    14ae:	dc 01       	movw	r26, r24
    14b0:	ed 91       	ld	r30, X+
    14b2:	fc 91       	ld	r31, X
    14b4:	04 80       	ldd	r0, Z+4	; 0x04
    14b6:	f5 81       	ldd	r31, Z+5	; 0x05
    14b8:	e0 2d       	mov	r30, r0
    14ba:	09 95       	icall
    14bc:	18 16       	cp	r1, r24
    14be:	19 06       	cpc	r1, r25
    14c0:	7c f4       	brge	.+30     	; 0x14e0 <_ZN8BLEMate26stdCmdE6String+0xd6>
    14c2:	f8 01       	movw	r30, r16
    14c4:	81 a1       	ldd	r24, Z+33	; 0x21
    14c6:	92 a1       	ldd	r25, Z+34	; 0x22
    14c8:	dc 01       	movw	r26, r24
    14ca:	ed 91       	ld	r30, X+
    14cc:	fc 91       	ld	r31, X
    14ce:	06 80       	ldd	r0, Z+6	; 0x06
    14d0:	f7 81       	ldd	r31, Z+7	; 0x07
    14d2:	e0 2d       	mov	r30, r0
    14d4:	09 95       	icall
    14d6:	68 2f       	mov	r22, r24
    14d8:	ce 01       	movw	r24, r28
    14da:	0d 96       	adiw	r24, 0x0d	; 13
    14dc:	0e 94 94 07 	call	0xf28	; 0xf28 <_ZN6String6concatEc>

    if (buffer.endsWith(EOL))
    14e0:	be 01       	movw	r22, r28
    14e2:	69 5f       	subi	r22, 0xF9	; 249
    14e4:	7f 4f       	sbci	r23, 0xFF	; 255
    14e6:	ce 01       	movw	r24, r28
    14e8:	0d 96       	adiw	r24, 0x0d	; 13
    14ea:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_ZNK6String8endsWithERKS_>
    14ee:	88 23       	and	r24, r24
    14f0:	99 f2       	breq	.-90     	; 0x1498 <_ZN8BLEMate26stdCmdE6String+0x8e>
    {
      if (buffer.startsWith("ER")) return MODULE_ERROR;
    14f2:	6a e2       	ldi	r22, 0x2A	; 42
    14f4:	71 e0       	ldi	r23, 0x01	; 1
    14f6:	ce 01       	movw	r24, r28
    14f8:	01 96       	adiw	r24, 0x01	; 1
    14fa:	0e 94 03 07 	call	0xe06	; 0xe06 <_ZN6StringC1EPKc>
    14fe:	be 01       	movw	r22, r28
    1500:	6f 5f       	subi	r22, 0xFF	; 255
    1502:	7f 4f       	sbci	r23, 0xFF	; 255
    1504:	ce 01       	movw	r24, r28
    1506:	0d 96       	adiw	r24, 0x0d	; 13
    1508:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <_ZNK6String10startsWithERKS_>
    150c:	b8 2e       	mov	r11, r24
    150e:	ce 01       	movw	r24, r28
    1510:	01 96       	adiw	r24, 0x01	; 1
    1512:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN6StringD1Ev>
    1516:	b1 10       	cpse	r11, r1
    1518:	1d c0       	rjmp	.+58     	; 0x1554 <_ZN8BLEMate26stdCmdE6String+0x14a>
      if (buffer.startsWith("OK")) return SUCCESS;
    151a:	63 e3       	ldi	r22, 0x33	; 51
    151c:	71 e0       	ldi	r23, 0x01	; 1
    151e:	ce 01       	movw	r24, r28
    1520:	01 96       	adiw	r24, 0x01	; 1
    1522:	0e 94 03 07 	call	0xe06	; 0xe06 <_ZN6StringC1EPKc>
    1526:	be 01       	movw	r22, r28
    1528:	6f 5f       	subi	r22, 0xFF	; 255
    152a:	7f 4f       	sbci	r23, 0xFF	; 255
    152c:	ce 01       	movw	r24, r28
    152e:	0d 96       	adiw	r24, 0x0d	; 13
    1530:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <_ZNK6String10startsWithERKS_>
    1534:	b8 2e       	mov	r11, r24
    1536:	ce 01       	movw	r24, r28
    1538:	01 96       	adiw	r24, 0x01	; 1
    153a:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN6StringD1Ev>
    153e:	b1 10       	cpse	r11, r1
    1540:	0b c0       	rjmp	.+22     	; 0x1558 <_ZN8BLEMate26stdCmdE6String+0x14e>
      buffer = "";
    1542:	60 e2       	ldi	r22, 0x20	; 32
    1544:	71 e0       	ldi	r23, 0x01	; 1
    1546:	ce 01       	movw	r24, r28
    1548:	0d 96       	adiw	r24, 0x0d	; 13
    154a:	0e 94 39 07 	call	0xe72	; 0xe72 <_ZN6StringaSEPKc>
    154e:	a4 cf       	rjmp	.-184    	; 0x1498 <_ZN8BLEMate26stdCmdE6String+0x8e>
    }    
  }
  return TIMEOUT_ERROR;
    1550:	1e ef       	ldi	r17, 0xFE	; 254
    1552:	03 c0       	rjmp	.+6      	; 0x155a <_ZN8BLEMate26stdCmdE6String+0x150>
    // Grow the current buffered data, until we receive the EOL string.    
    if (_serialPort->available() > 0) buffer.concat(char(_serialPort->read()));

    if (buffer.endsWith(EOL))
    {
      if (buffer.startsWith("ER")) return MODULE_ERROR;
    1554:	1f ef       	ldi	r17, 0xFF	; 255
    1556:	01 c0       	rjmp	.+2      	; 0x155a <_ZN8BLEMate26stdCmdE6String+0x150>
      if (buffer.startsWith("OK")) return SUCCESS;
    1558:	11 e0       	ldi	r17, 0x01	; 1
// There are several commands that look for either OK or ERROR; let's abstract
//  support for those commands to one single private function, to save memory.
BLEMate2::opResult BLEMate2::stdCmd(String command)
{
  String buffer;
  String EOL = String("\n\r");
    155a:	ce 01       	movw	r24, r28
    155c:	07 96       	adiw	r24, 0x07	; 7
    155e:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN6StringD1Ev>
      if (buffer.startsWith("ER")) return MODULE_ERROR;
      if (buffer.startsWith("OK")) return SUCCESS;
      buffer = "";
    }    
  }
  return TIMEOUT_ERROR;
    1562:	ce 01       	movw	r24, r28
    1564:	0d 96       	adiw	r24, 0x0d	; 13
    1566:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN6StringD1Ev>
}
    156a:	81 2f       	mov	r24, r17
    156c:	62 96       	adiw	r28, 0x12	; 18
    156e:	0f b6       	in	r0, 0x3f	; 63
    1570:	f8 94       	cli
    1572:	de bf       	out	0x3e, r29	; 62
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	cd bf       	out	0x3d, r28	; 61
    1578:	df 91       	pop	r29
    157a:	cf 91       	pop	r28
    157c:	1f 91       	pop	r17
    157e:	0f 91       	pop	r16
    1580:	ff 90       	pop	r15
    1582:	ef 90       	pop	r14
    1584:	df 90       	pop	r13
    1586:	cf 90       	pop	r12
    1588:	bf 90       	pop	r11
    158a:	08 95       	ret

0000158c <_ZN8BLEMate27restoreEv>:

// Issue the "RESTORE" command over the serial port to the BC118. This will
//  reset the device to factory default settings, which is a good thing to do
//  once in a while.
BLEMate2::opResult BLEMate2::restore()
{
    158c:	0f 93       	push	r16
    158e:	1f 93       	push	r17
    1590:	cf 93       	push	r28
    1592:	df 93       	push	r29
    1594:	00 d0       	rcall	.+0      	; 0x1596 <_ZN8BLEMate27restoreEv+0xa>
    1596:	00 d0       	rcall	.+0      	; 0x1598 <_ZN8BLEMate27restoreEv+0xc>
    1598:	00 d0       	rcall	.+0      	; 0x159a <_ZN8BLEMate27restoreEv+0xe>
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
    159e:	8c 01       	movw	r16, r24
  return stdCmd("RTR");
    15a0:	66 e3       	ldi	r22, 0x36	; 54
    15a2:	71 e0       	ldi	r23, 0x01	; 1
    15a4:	ce 01       	movw	r24, r28
    15a6:	01 96       	adiw	r24, 0x01	; 1
    15a8:	0e 94 03 07 	call	0xe06	; 0xe06 <_ZN6StringC1EPKc>
    15ac:	be 01       	movw	r22, r28
    15ae:	6f 5f       	subi	r22, 0xFF	; 255
    15b0:	7f 4f       	sbci	r23, 0xFF	; 255
    15b2:	c8 01       	movw	r24, r16
    15b4:	0e 94 05 0a 	call	0x140a	; 0x140a <_ZN8BLEMate26stdCmdE6String>
    15b8:	18 2f       	mov	r17, r24
    15ba:	ce 01       	movw	r24, r28
    15bc:	01 96       	adiw	r24, 0x01	; 1
    15be:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN6StringD1Ev>
}
    15c2:	81 2f       	mov	r24, r17
    15c4:	26 96       	adiw	r28, 0x06	; 6
    15c6:	0f b6       	in	r0, 0x3f	; 63
    15c8:	f8 94       	cli
    15ca:	de bf       	out	0x3e, r29	; 62
    15cc:	0f be       	out	0x3f, r0	; 63
    15ce:	cd bf       	out	0x3d, r28	; 61
    15d0:	df 91       	pop	r29
    15d2:	cf 91       	pop	r28
    15d4:	1f 91       	pop	r17
    15d6:	0f 91       	pop	r16
    15d8:	08 95       	ret

000015da <_ZN8BLEMate211writeConfigEv>:

// Issue the "WRITE" command over the serial port to the BC118. This will
//  save the current settings to NVM, so they will be applied after a reset
//  or power cycle.
BLEMate2::opResult BLEMate2::writeConfig()
{
    15da:	0f 93       	push	r16
    15dc:	1f 93       	push	r17
    15de:	cf 93       	push	r28
    15e0:	df 93       	push	r29
    15e2:	00 d0       	rcall	.+0      	; 0x15e4 <_ZN8BLEMate211writeConfigEv+0xa>
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <_ZN8BLEMate211writeConfigEv+0xc>
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <_ZN8BLEMate211writeConfigEv+0xe>
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
    15ec:	8c 01       	movw	r16, r24
  return stdCmd("WRT");
    15ee:	6a e3       	ldi	r22, 0x3A	; 58
    15f0:	71 e0       	ldi	r23, 0x01	; 1
    15f2:	ce 01       	movw	r24, r28
    15f4:	01 96       	adiw	r24, 0x01	; 1
    15f6:	0e 94 03 07 	call	0xe06	; 0xe06 <_ZN6StringC1EPKc>
    15fa:	be 01       	movw	r22, r28
    15fc:	6f 5f       	subi	r22, 0xFF	; 255
    15fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1600:	c8 01       	movw	r24, r16
    1602:	0e 94 05 0a 	call	0x140a	; 0x140a <_ZN8BLEMate26stdCmdE6String>
    1606:	18 2f       	mov	r17, r24
    1608:	ce 01       	movw	r24, r28
    160a:	01 96       	adiw	r24, 0x01	; 1
    160c:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN6StringD1Ev>
}
    1610:	81 2f       	mov	r24, r17
    1612:	26 96       	adiw	r28, 0x06	; 6
    1614:	0f b6       	in	r0, 0x3f	; 63
    1616:	f8 94       	cli
    1618:	de bf       	out	0x3e, r29	; 62
    161a:	0f be       	out	0x3f, r0	; 63
    161c:	cd bf       	out	0x3d, r28	; 61
    161e:	df 91       	pop	r29
    1620:	cf 91       	pop	r28
    1622:	1f 91       	pop	r17
    1624:	0f 91       	pop	r16
    1626:	08 95       	ret

00001628 <_ZN8BLEMate25resetEv>:
//    READY
// If there is some sort of error, the module will respond with
//    ERR
// We'll buffer characters until we see an EOL (\n\r), then check the string.
BLEMate2::opResult BLEMate2::reset()
{
    1628:	bf 92       	push	r11
    162a:	cf 92       	push	r12
    162c:	df 92       	push	r13
    162e:	ef 92       	push	r14
    1630:	ff 92       	push	r15
    1632:	0f 93       	push	r16
    1634:	1f 93       	push	r17
    1636:	cf 93       	push	r28
    1638:	df 93       	push	r29
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	62 97       	sbiw	r28, 0x12	; 18
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	cd bf       	out	0x3d, r28	; 61
    164a:	8c 01       	movw	r16, r24
  String buffer;
    164c:	60 e2       	ldi	r22, 0x20	; 32
    164e:	71 e0       	ldi	r23, 0x01	; 1
    1650:	ce 01       	movw	r24, r28
    1652:	0d 96       	adiw	r24, 0x0d	; 13
    1654:	0e 94 03 07 	call	0xe06	; 0xe06 <_ZN6StringC1EPKc>
  String EOL = String("\n\r");
    1658:	6e e1       	ldi	r22, 0x1E	; 30
    165a:	71 e0       	ldi	r23, 0x01	; 1
    165c:	ce 01       	movw	r24, r28
    165e:	07 96       	adiw	r24, 0x07	; 7
    1660:	0e 94 03 07 	call	0xe06	; 0xe06 <_ZN6StringC1EPKc>
  
  knownStart();
    1664:	c8 01       	movw	r24, r16
    1666:	0e 94 65 09 	call	0x12ca	; 0x12ca <_ZN8BLEMate210knownStartEv>
  
  // Now issue the reset command.
  _serialPort->print("RST");
    166a:	6b e6       	ldi	r22, 0x6B	; 107
    166c:	71 e0       	ldi	r23, 0x01	; 1
    166e:	d8 01       	movw	r26, r16
    1670:	91 96       	adiw	r26, 0x21	; 33
    1672:	8d 91       	ld	r24, X+
    1674:	9c 91       	ld	r25, X
    1676:	92 97       	sbiw	r26, 0x22	; 34
    1678:	0e 94 09 03 	call	0x612	; 0x612 <_ZN5Print5printEPKc>
  _serialPort->print("\r");
    167c:	6f e1       	ldi	r22, 0x1F	; 31
    167e:	71 e0       	ldi	r23, 0x01	; 1
    1680:	f8 01       	movw	r30, r16
    1682:	81 a1       	ldd	r24, Z+33	; 0x21
    1684:	92 a1       	ldd	r25, Z+34	; 0x22
    1686:	0e 94 09 03 	call	0x612	; 0x612 <_ZN5Print5printEPKc>
  _serialPort->flush();
    168a:	d8 01       	movw	r26, r16
    168c:	91 96       	adiw	r26, 0x21	; 33
    168e:	8d 91       	ld	r24, X+
    1690:	9c 91       	ld	r25, X
    1692:	92 97       	sbiw	r26, 0x22	; 34
    1694:	dc 01       	movw	r26, r24
    1696:	ed 91       	ld	r30, X+
    1698:	fc 91       	ld	r31, X
    169a:	02 84       	ldd	r0, Z+10	; 0x0a
    169c:	f3 85       	ldd	r31, Z+11	; 0x0b
    169e:	e0 2d       	mov	r30, r0
    16a0:	09 95       	icall
  
  // We're going to use the internal timer to track the elapsed time since we
  //  issued the reset. Bog-standard Arduino stuff.
  unsigned long resetStart = millis();
    16a2:	0e 94 4e 05 	call	0xa9c	; 0xa9c <millis>
    16a6:	6b 01       	movw	r12, r22
    16a8:	7c 01       	movw	r14, r24
  
  // This is our timeout loop. We'll give the module 6 seconds to reset.
  while ((resetStart + 6000) > millis())
    16aa:	b0 e7       	ldi	r27, 0x70	; 112
    16ac:	cb 0e       	add	r12, r27
    16ae:	b7 e1       	ldi	r27, 0x17	; 23
    16b0:	db 1e       	adc	r13, r27
    16b2:	e1 1c       	adc	r14, r1
    16b4:	f1 1c       	adc	r15, r1
    16b6:	0e 94 4e 05 	call	0xa9c	; 0xa9c <millis>
    16ba:	6c 15       	cp	r22, r12
    16bc:	7d 05       	cpc	r23, r13
    16be:	8e 05       	cpc	r24, r14
    16c0:	9f 05       	cpc	r25, r15
    16c2:	08 f0       	brcs	.+2      	; 0x16c6 <_ZN8BLEMate25resetEv+0x9e>
    16c4:	83 c0       	rjmp	.+262    	; 0x17cc <_ZN8BLEMate25resetEv+0x1a4>
  {
    // Grow the current buffered data, until we receive the EOL string.    
    if (_serialPort->available() > 0) 
    16c6:	f8 01       	movw	r30, r16
    16c8:	81 a1       	ldd	r24, Z+33	; 0x21
    16ca:	92 a1       	ldd	r25, Z+34	; 0x22
    16cc:	dc 01       	movw	r26, r24
    16ce:	ed 91       	ld	r30, X+
    16d0:	fc 91       	ld	r31, X
    16d2:	04 80       	ldd	r0, Z+4	; 0x04
    16d4:	f5 81       	ldd	r31, Z+5	; 0x05
    16d6:	e0 2d       	mov	r30, r0
    16d8:	09 95       	icall
    16da:	18 16       	cp	r1, r24
    16dc:	19 06       	cpc	r1, r25
    16de:	7c f4       	brge	.+30     	; 0x16fe <_ZN8BLEMate25resetEv+0xd6>
    {
      char temp = _serialPort->read();
    16e0:	f8 01       	movw	r30, r16
    16e2:	81 a1       	ldd	r24, Z+33	; 0x21
    16e4:	92 a1       	ldd	r25, Z+34	; 0x22
    16e6:	dc 01       	movw	r26, r24
    16e8:	ed 91       	ld	r30, X+
    16ea:	fc 91       	ld	r31, X
    16ec:	06 80       	ldd	r0, Z+6	; 0x06
    16ee:	f7 81       	ldd	r31, Z+7	; 0x07
    16f0:	e0 2d       	mov	r30, r0
    16f2:	09 95       	icall
      buffer.concat(temp);
    16f4:	68 2f       	mov	r22, r24
    16f6:	ce 01       	movw	r24, r28
    16f8:	0d 96       	adiw	r24, 0x0d	; 13
    16fa:	0e 94 94 07 	call	0xf28	; 0xf28 <_ZN6String6concatEc>
    }
    
    if (buffer.endsWith(EOL))
    16fe:	be 01       	movw	r22, r28
    1700:	69 5f       	subi	r22, 0xF9	; 249
    1702:	7f 4f       	sbci	r23, 0xFF	; 255
    1704:	ce 01       	movw	r24, r28
    1706:	0d 96       	adiw	r24, 0x0d	; 13
    1708:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_ZNK6String8endsWithERKS_>
    170c:	88 23       	and	r24, r24
    170e:	99 f2       	breq	.-90     	; 0x16b6 <_ZN8BLEMate25resetEv+0x8e>
    {
      // If ERR or READY, we've finished the reset. Otherwise, just discard
      //  the data and wait for the next EOL.
      if (buffer.startsWith("ER")) return MODULE_ERROR;
    1710:	6a e2       	ldi	r22, 0x2A	; 42
    1712:	71 e0       	ldi	r23, 0x01	; 1
    1714:	ce 01       	movw	r24, r28
    1716:	01 96       	adiw	r24, 0x01	; 1
    1718:	0e 94 03 07 	call	0xe06	; 0xe06 <_ZN6StringC1EPKc>
    171c:	be 01       	movw	r22, r28
    171e:	6f 5f       	subi	r22, 0xFF	; 255
    1720:	7f 4f       	sbci	r23, 0xFF	; 255
    1722:	ce 01       	movw	r24, r28
    1724:	0d 96       	adiw	r24, 0x0d	; 13
    1726:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <_ZNK6String10startsWithERKS_>
    172a:	b8 2e       	mov	r11, r24
    172c:	ce 01       	movw	r24, r28
    172e:	01 96       	adiw	r24, 0x01	; 1
    1730:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN6StringD1Ev>
    1734:	b1 10       	cpse	r11, r1
    1736:	4c c0       	rjmp	.+152    	; 0x17d0 <_ZN8BLEMate25resetEv+0x1a8>
      if (buffer.startsWith("RE")) 
    1738:	6f e6       	ldi	r22, 0x6F	; 111
    173a:	71 e0       	ldi	r23, 0x01	; 1
    173c:	ce 01       	movw	r24, r28
    173e:	01 96       	adiw	r24, 0x01	; 1
    1740:	0e 94 03 07 	call	0xe06	; 0xe06 <_ZN6StringC1EPKc>
    1744:	be 01       	movw	r22, r28
    1746:	6f 5f       	subi	r22, 0xFF	; 255
    1748:	7f 4f       	sbci	r23, 0xFF	; 255
    174a:	ce 01       	movw	r24, r28
    174c:	0d 96       	adiw	r24, 0x0d	; 13
    174e:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <_ZNK6String10startsWithERKS_>
    1752:	b8 2e       	mov	r11, r24
    1754:	ce 01       	movw	r24, r28
    1756:	01 96       	adiw	r24, 0x01	; 1
    1758:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN6StringD1Ev>
    175c:	bb 20       	and	r11, r11
    175e:	79 f1       	breq	.+94     	; 0x17be <_ZN8BLEMate25resetEv+0x196>
      {
        stdCmd("SCN OFF"); // When we come out of reset, we *could* be
    1760:	62 e7       	ldi	r22, 0x72	; 114
    1762:	71 e0       	ldi	r23, 0x01	; 1
    1764:	ce 01       	movw	r24, r28
    1766:	01 96       	adiw	r24, 0x01	; 1
    1768:	0e 94 03 07 	call	0xe06	; 0xe06 <_ZN6StringC1EPKc>
    176c:	be 01       	movw	r22, r28
    176e:	6f 5f       	subi	r22, 0xFF	; 255
    1770:	7f 4f       	sbci	r23, 0xFF	; 255
    1772:	c8 01       	movw	r24, r16
    1774:	0e 94 05 0a 	call	0x140a	; 0x140a <_ZN8BLEMate26stdCmdE6String>
    1778:	ce 01       	movw	r24, r28
    177a:	01 96       	adiw	r24, 0x01	; 1
    177c:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN6StringD1Ev>
                           //  in scan mode. We don't want that; it's too
                           //  random and noisy.
        delay(500);        // Let the scanning noise complete.
    1780:	64 ef       	ldi	r22, 0xF4	; 244
    1782:	71 e0       	ldi	r23, 0x01	; 1
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	0e 94 7d 05 	call	0xafa	; 0xafa <delay>
        while(_serialPort->available())
    178c:	f8 01       	movw	r30, r16
    178e:	81 a1       	ldd	r24, Z+33	; 0x21
    1790:	92 a1       	ldd	r25, Z+34	; 0x22
    1792:	dc 01       	movw	r26, r24
    1794:	ed 91       	ld	r30, X+
    1796:	fc 91       	ld	r31, X
    1798:	04 80       	ldd	r0, Z+4	; 0x04
    179a:	f5 81       	ldd	r31, Z+5	; 0x05
    179c:	e0 2d       	mov	r30, r0
    179e:	09 95       	icall
    17a0:	89 2b       	or	r24, r25
    17a2:	59 f0       	breq	.+22     	; 0x17ba <_ZN8BLEMate25resetEv+0x192>
        {
          _serialPort->read();
    17a4:	f8 01       	movw	r30, r16
    17a6:	81 a1       	ldd	r24, Z+33	; 0x21
    17a8:	92 a1       	ldd	r25, Z+34	; 0x22
    17aa:	dc 01       	movw	r26, r24
    17ac:	ed 91       	ld	r30, X+
    17ae:	fc 91       	ld	r31, X
    17b0:	06 80       	ldd	r0, Z+6	; 0x06
    17b2:	f7 81       	ldd	r31, Z+7	; 0x07
    17b4:	e0 2d       	mov	r30, r0
    17b6:	09 95       	icall
    17b8:	e9 cf       	rjmp	.-46     	; 0x178c <_ZN8BLEMate25resetEv+0x164>
        } 
        return SUCCESS;
    17ba:	11 e0       	ldi	r17, 0x01	; 1
    17bc:	0a c0       	rjmp	.+20     	; 0x17d2 <_ZN8BLEMate25resetEv+0x1aa>
      }
      buffer = "";
    17be:	60 e2       	ldi	r22, 0x20	; 32
    17c0:	71 e0       	ldi	r23, 0x01	; 1
    17c2:	ce 01       	movw	r24, r28
    17c4:	0d 96       	adiw	r24, 0x0d	; 13
    17c6:	0e 94 39 07 	call	0xe72	; 0xe72 <_ZN6StringaSEPKc>
    17ca:	75 cf       	rjmp	.-278    	; 0x16b6 <_ZN8BLEMate25resetEv+0x8e>
    }    
  }
  return TIMEOUT_ERROR;
    17cc:	1e ef       	ldi	r17, 0xFE	; 254
    17ce:	01 c0       	rjmp	.+2      	; 0x17d2 <_ZN8BLEMate25resetEv+0x1aa>
    
    if (buffer.endsWith(EOL))
    {
      // If ERR or READY, we've finished the reset. Otherwise, just discard
      //  the data and wait for the next EOL.
      if (buffer.startsWith("ER")) return MODULE_ERROR;
    17d0:	1f ef       	ldi	r17, 0xFF	; 255
//    ERR
// We'll buffer characters until we see an EOL (\n\r), then check the string.
BLEMate2::opResult BLEMate2::reset()
{
  String buffer;
  String EOL = String("\n\r");
    17d2:	ce 01       	movw	r24, r28
    17d4:	07 96       	adiw	r24, 0x07	; 7
    17d6:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN6StringD1Ev>
        return SUCCESS;
      }
      buffer = "";
    }    
  }
  return TIMEOUT_ERROR;
    17da:	ce 01       	movw	r24, r28
    17dc:	0d 96       	adiw	r24, 0x0d	; 13
    17de:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN6StringD1Ev>
}
    17e2:	81 2f       	mov	r24, r17
    17e4:	62 96       	adiw	r28, 0x12	; 18
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	f8 94       	cli
    17ea:	de bf       	out	0x3e, r29	; 62
    17ec:	0f be       	out	0x3f, r0	; 63
    17ee:	cd bf       	out	0x3d, r28	; 61
    17f0:	df 91       	pop	r29
    17f2:	cf 91       	pop	r28
    17f4:	1f 91       	pop	r17
    17f6:	0f 91       	pop	r16
    17f8:	ff 90       	pop	r15
    17fa:	ef 90       	pop	r14
    17fc:	df 90       	pop	r13
    17fe:	cf 90       	pop	r12
    1800:	bf 90       	pop	r11
    1802:	08 95       	ret

00001804 <_ZN8BLEMate29amCentralERb>:
//  device; that's important information, so we should be able to query
//  the module regarding that. We're not going to store that info, however, 
//  since the whole point is to get it "from the horse's mouth" rather than
//  trusting that our software is in sync with the state of the module.
BLEMate2::opResult BLEMate2::amCentral(boolean &inCentralMode)
{
    1804:	8f 92       	push	r8
    1806:	9f 92       	push	r9
    1808:	af 92       	push	r10
    180a:	bf 92       	push	r11
    180c:	cf 92       	push	r12
    180e:	df 92       	push	r13
    1810:	ef 92       	push	r14
    1812:	ff 92       	push	r15
    1814:	0f 93       	push	r16
    1816:	1f 93       	push	r17
    1818:	cf 93       	push	r28
    181a:	df 93       	push	r29
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
    1820:	62 97       	sbiw	r28, 0x12	; 18
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	f8 94       	cli
    1826:	de bf       	out	0x3e, r29	; 62
    1828:	0f be       	out	0x3f, r0	; 63
    182a:	cd bf       	out	0x3d, r28	; 61
    182c:	8c 01       	movw	r16, r24
    182e:	5b 01       	movw	r10, r22
  String buffer;
    1830:	60 e2       	ldi	r22, 0x20	; 32
    1832:	71 e0       	ldi	r23, 0x01	; 1
    1834:	ce 01       	movw	r24, r28
    1836:	0d 96       	adiw	r24, 0x0d	; 13
    1838:	0e 94 03 07 	call	0xe06	; 0xe06 <_ZN6StringC1EPKc>
  String EOL = String("\n\r");
    183c:	6e e1       	ldi	r22, 0x1E	; 30
    183e:	71 e0       	ldi	r23, 0x01	; 1
    1840:	ce 01       	movw	r24, r28
    1842:	07 96       	adiw	r24, 0x07	; 7
    1844:	0e 94 03 07 	call	0xe06	; 0xe06 <_ZN6StringC1EPKc>
  
  knownStart(); // Clear the serial buffer in the module and the Arduino.
    1848:	c8 01       	movw	r24, r16
    184a:	0e 94 65 09 	call	0x12ca	; 0x12ca <_ZN8BLEMate210knownStartEv>
  
  _serialPort->print("STS\r");
    184e:	6a e7       	ldi	r22, 0x7A	; 122
    1850:	71 e0       	ldi	r23, 0x01	; 1
    1852:	d8 01       	movw	r26, r16
    1854:	91 96       	adiw	r26, 0x21	; 33
    1856:	8d 91       	ld	r24, X+
    1858:	9c 91       	ld	r25, X
    185a:	92 97       	sbiw	r26, 0x22	; 34
    185c:	0e 94 09 03 	call	0x612	; 0x612 <_ZN5Print5printEPKc>
  _serialPort->flush();
    1860:	f8 01       	movw	r30, r16
    1862:	81 a1       	ldd	r24, Z+33	; 0x21
    1864:	92 a1       	ldd	r25, Z+34	; 0x22
    1866:	dc 01       	movw	r26, r24
    1868:	ed 91       	ld	r30, X+
    186a:	fc 91       	ld	r31, X
    186c:	02 84       	ldd	r0, Z+10	; 0x0a
    186e:	f3 85       	ldd	r31, Z+11	; 0x0b
    1870:	e0 2d       	mov	r30, r0
    1872:	09 95       	icall
  
  // We're going to use the internal timer to track the elapsed time since we
  //  issued the command. Bog-standard Arduino stuff.
  unsigned long startTime = millis();
    1874:	0e 94 4e 05 	call	0xa9c	; 0xa9c <millis>
    1878:	6b 01       	movw	r12, r22
    187a:	7c 01       	movw	r14, r24
    
  // This is our timeout loop. We'll give the module 3 seconds.
  while ((startTime + 3000) > millis())
    187c:	b8 eb       	ldi	r27, 0xB8	; 184
    187e:	cb 0e       	add	r12, r27
    1880:	bb e0       	ldi	r27, 0x0B	; 11
    1882:	db 1e       	adc	r13, r27
    1884:	e1 1c       	adc	r14, r1
    1886:	f1 1c       	adc	r15, r1
      }
      else if (buffer.startsWith("STS")) 
      {
        if (buffer.charAt(4) == 'C')
        {
          inCentralMode = true;
    1888:	99 24       	eor	r9, r9
    188a:	93 94       	inc	r9
  // We're going to use the internal timer to track the elapsed time since we
  //  issued the command. Bog-standard Arduino stuff.
  unsigned long startTime = millis();
    
  // This is our timeout loop. We'll give the module 3 seconds.
  while ((startTime + 3000) > millis())
    188c:	0e 94 4e 05 	call	0xa9c	; 0xa9c <millis>
    1890:	6c 15       	cp	r22, r12
    1892:	7d 05       	cpc	r23, r13
    1894:	8e 05       	cpc	r24, r14
    1896:	9f 05       	cpc	r25, r15
    1898:	08 f0       	brcs	.+2      	; 0x189c <_ZN8BLEMate29amCentralERb+0x98>
    189a:	75 c0       	rjmp	.+234    	; 0x1986 <_ZN8BLEMate29amCentralERb+0x182>
  {
    // Grow the current buffered data, until we receive the EOL string.    
    if (_serialPort->available() > 0) 
    189c:	f8 01       	movw	r30, r16
    189e:	81 a1       	ldd	r24, Z+33	; 0x21
    18a0:	92 a1       	ldd	r25, Z+34	; 0x22
    18a2:	dc 01       	movw	r26, r24
    18a4:	ed 91       	ld	r30, X+
    18a6:	fc 91       	ld	r31, X
    18a8:	04 80       	ldd	r0, Z+4	; 0x04
    18aa:	f5 81       	ldd	r31, Z+5	; 0x05
    18ac:	e0 2d       	mov	r30, r0
    18ae:	09 95       	icall
    18b0:	18 16       	cp	r1, r24
    18b2:	19 06       	cpc	r1, r25
    18b4:	7c f4       	brge	.+30     	; 0x18d4 <_ZN8BLEMate29amCentralERb+0xd0>
    {
      buffer.concat(char(_serialPort->read()));
    18b6:	f8 01       	movw	r30, r16
    18b8:	81 a1       	ldd	r24, Z+33	; 0x21
    18ba:	92 a1       	ldd	r25, Z+34	; 0x22
    18bc:	dc 01       	movw	r26, r24
    18be:	ed 91       	ld	r30, X+
    18c0:	fc 91       	ld	r31, X
    18c2:	06 80       	ldd	r0, Z+6	; 0x06
    18c4:	f7 81       	ldd	r31, Z+7	; 0x07
    18c6:	e0 2d       	mov	r30, r0
    18c8:	09 95       	icall
    18ca:	68 2f       	mov	r22, r24
    18cc:	ce 01       	movw	r24, r28
    18ce:	0d 96       	adiw	r24, 0x0d	; 13
    18d0:	0e 94 94 07 	call	0xf28	; 0xf28 <_ZN6String6concatEc>
    }
    if (buffer.endsWith(EOL))
    18d4:	be 01       	movw	r22, r28
    18d6:	69 5f       	subi	r22, 0xF9	; 249
    18d8:	7f 4f       	sbci	r23, 0xFF	; 255
    18da:	ce 01       	movw	r24, r28
    18dc:	0d 96       	adiw	r24, 0x0d	; 13
    18de:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_ZNK6String8endsWithERKS_>
    18e2:	88 23       	and	r24, r24
    18e4:	99 f2       	breq	.-90     	; 0x188c <_ZN8BLEMate29amCentralERb+0x88>
    {
      if (buffer.startsWith("ER")) 
    18e6:	6a e2       	ldi	r22, 0x2A	; 42
    18e8:	71 e0       	ldi	r23, 0x01	; 1
    18ea:	ce 01       	movw	r24, r28
    18ec:	01 96       	adiw	r24, 0x01	; 1
    18ee:	0e 94 03 07 	call	0xe06	; 0xe06 <_ZN6StringC1EPKc>
    18f2:	be 01       	movw	r22, r28
    18f4:	6f 5f       	subi	r22, 0xFF	; 255
    18f6:	7f 4f       	sbci	r23, 0xFF	; 255
    18f8:	ce 01       	movw	r24, r28
    18fa:	0d 96       	adiw	r24, 0x0d	; 13
    18fc:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <_ZNK6String10startsWithERKS_>
    1900:	88 2e       	mov	r8, r24
    1902:	ce 01       	movw	r24, r28
    1904:	01 96       	adiw	r24, 0x01	; 1
    1906:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN6StringD1Ev>
    190a:	81 10       	cpse	r8, r1
    190c:	3e c0       	rjmp	.+124    	; 0x198a <_ZN8BLEMate29amCentralERb+0x186>
      {
        return MODULE_ERROR;
      }
      else if (buffer.startsWith("OK")) 
    190e:	63 e3       	ldi	r22, 0x33	; 51
    1910:	71 e0       	ldi	r23, 0x01	; 1
    1912:	ce 01       	movw	r24, r28
    1914:	01 96       	adiw	r24, 0x01	; 1
    1916:	0e 94 03 07 	call	0xe06	; 0xe06 <_ZN6StringC1EPKc>
    191a:	be 01       	movw	r22, r28
    191c:	6f 5f       	subi	r22, 0xFF	; 255
    191e:	7f 4f       	sbci	r23, 0xFF	; 255
    1920:	ce 01       	movw	r24, r28
    1922:	0d 96       	adiw	r24, 0x0d	; 13
    1924:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <_ZNK6String10startsWithERKS_>
    1928:	88 2e       	mov	r8, r24
    192a:	ce 01       	movw	r24, r28
    192c:	01 96       	adiw	r24, 0x01	; 1
    192e:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN6StringD1Ev>
    1932:	81 10       	cpse	r8, r1
    1934:	2c c0       	rjmp	.+88     	; 0x198e <_ZN8BLEMate29amCentralERb+0x18a>
      {
        return SUCCESS;
      }
      else if (buffer.startsWith("STS")) 
    1936:	6f e7       	ldi	r22, 0x7F	; 127
    1938:	71 e0       	ldi	r23, 0x01	; 1
    193a:	ce 01       	movw	r24, r28
    193c:	01 96       	adiw	r24, 0x01	; 1
    193e:	0e 94 03 07 	call	0xe06	; 0xe06 <_ZN6StringC1EPKc>
    1942:	be 01       	movw	r22, r28
    1944:	6f 5f       	subi	r22, 0xFF	; 255
    1946:	7f 4f       	sbci	r23, 0xFF	; 255
    1948:	ce 01       	movw	r24, r28
    194a:	0d 96       	adiw	r24, 0x0d	; 13
    194c:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <_ZNK6String10startsWithERKS_>
    1950:	88 2e       	mov	r8, r24
    1952:	ce 01       	movw	r24, r28
    1954:	01 96       	adiw	r24, 0x01	; 1
    1956:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN6StringD1Ev>
    195a:	88 20       	and	r8, r8
    195c:	69 f0       	breq	.+26     	; 0x1978 <_ZN8BLEMate29amCentralERb+0x174>
      {
        if (buffer.charAt(4) == 'C')
    195e:	64 e0       	ldi	r22, 0x04	; 4
    1960:	70 e0       	ldi	r23, 0x00	; 0
    1962:	ce 01       	movw	r24, r28
    1964:	0d 96       	adiw	r24, 0x0d	; 13
    1966:	0e 94 9b 08 	call	0x1136	; 0x1136 <_ZNK6String6charAtEj>
    196a:	83 34       	cpi	r24, 0x43	; 67
    196c:	19 f4       	brne	.+6      	; 0x1974 <_ZN8BLEMate29amCentralERb+0x170>
        {
          inCentralMode = true;
    196e:	f5 01       	movw	r30, r10
    1970:	90 82       	st	Z, r9
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <_ZN8BLEMate29amCentralERb+0x174>
        }
        else
        {
          inCentralMode = false;
    1974:	d5 01       	movw	r26, r10
    1976:	1c 92       	st	X, r1
        }
      } 
      buffer = "";
    1978:	60 e2       	ldi	r22, 0x20	; 32
    197a:	71 e0       	ldi	r23, 0x01	; 1
    197c:	ce 01       	movw	r24, r28
    197e:	0d 96       	adiw	r24, 0x0d	; 13
    1980:	0e 94 39 07 	call	0xe72	; 0xe72 <_ZN6StringaSEPKc>
    1984:	83 cf       	rjmp	.-250    	; 0x188c <_ZN8BLEMate29amCentralERb+0x88>
    }    
  }
  return TIMEOUT_ERROR;
    1986:	1e ef       	ldi	r17, 0xFE	; 254
    1988:	03 c0       	rjmp	.+6      	; 0x1990 <_ZN8BLEMate29amCentralERb+0x18c>
    }
    if (buffer.endsWith(EOL))
    {
      if (buffer.startsWith("ER")) 
      {
        return MODULE_ERROR;
    198a:	1f ef       	ldi	r17, 0xFF	; 255
    198c:	01 c0       	rjmp	.+2      	; 0x1990 <_ZN8BLEMate29amCentralERb+0x18c>
      }
      else if (buffer.startsWith("OK")) 
      {
        return SUCCESS;
    198e:	11 e0       	ldi	r17, 0x01	; 1
//  since the whole point is to get it "from the horse's mouth" rather than
//  trusting that our software is in sync with the state of the module.
BLEMate2::opResult BLEMate2::amCentral(boolean &inCentralMode)
{
  String buffer;
  String EOL = String("\n\r");
    1990:	ce 01       	movw	r24, r28
    1992:	07 96       	adiw	r24, 0x07	; 7
    1994:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN6StringD1Ev>
        }
      } 
      buffer = "";
    }    
  }
  return TIMEOUT_ERROR;
    1998:	ce 01       	movw	r24, r28
    199a:	0d 96       	adiw	r24, 0x0d	; 13
    199c:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN6StringD1Ev>
}
    19a0:	81 2f       	mov	r24, r17
    19a2:	62 96       	adiw	r28, 0x12	; 18
    19a4:	0f b6       	in	r0, 0x3f	; 63
    19a6:	f8 94       	cli
    19a8:	de bf       	out	0x3e, r29	; 62
    19aa:	0f be       	out	0x3f, r0	; 63
    19ac:	cd bf       	out	0x3d, r28	; 61
    19ae:	df 91       	pop	r29
    19b0:	cf 91       	pop	r28
    19b2:	1f 91       	pop	r17
    19b4:	0f 91       	pop	r16
    19b6:	ff 90       	pop	r15
    19b8:	ef 90       	pop	r14
    19ba:	df 90       	pop	r13
    19bc:	cf 90       	pop	r12
    19be:	bf 90       	pop	r11
    19c0:	af 90       	pop	r10
    19c2:	9f 90       	pop	r9
    19c4:	8f 90       	pop	r8
    19c6:	08 95       	ret

000019c8 <_ZN8BLEMate28sendDataEPch>:
  return result;
}

// Now, byte array.
BLEMate2::opResult BLEMate2::sendData(char *dataBuffer, byte dataLen)
{
    19c8:	8f 92       	push	r8
    19ca:	9f 92       	push	r9
    19cc:	af 92       	push	r10
    19ce:	bf 92       	push	r11
    19d0:	cf 92       	push	r12
    19d2:	df 92       	push	r13
    19d4:	ef 92       	push	r14
    19d6:	ff 92       	push	r15
    19d8:	0f 93       	push	r16
    19da:	1f 93       	push	r17
    19dc:	cf 93       	push	r28
    19de:	df 93       	push	r29
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
    19e4:	63 97       	sbiw	r28, 0x13	; 19
    19e6:	0f b6       	in	r0, 0x3f	; 63
    19e8:	f8 94       	cli
    19ea:	de bf       	out	0x3e, r29	; 62
    19ec:	0f be       	out	0x3f, r0	; 63
    19ee:	cd bf       	out	0x3d, r28	; 61
    19f0:	8c 01       	movw	r16, r24
    19f2:	7b 01       	movw	r14, r22
    19f4:	94 2e       	mov	r9, r20
  String EOL = String("\n\r");
    19f6:	6e e1       	ldi	r22, 0x1E	; 30
    19f8:	71 e0       	ldi	r23, 0x01	; 1
    19fa:	ce 01       	movw	r24, r28
    19fc:	0d 96       	adiw	r24, 0x0d	; 13
    19fe:	0e 94 03 07 	call	0xe06	; 0xe06 <_ZN6StringC1EPKc>
  //  I don't want to burden the user with that, unduly, so I'm going to chop
  //  up their data and send it out in smaller blocks.
   
  // Thus, the first quetion is: am I in central mode, or not?
  boolean inCentralMode;
  amCentral(inCentralMode);
    1a02:	be 01       	movw	r22, r28
    1a04:	6d 5e       	subi	r22, 0xED	; 237
    1a06:	7f 4f       	sbci	r23, 0xFF	; 255
    1a08:	c8 01       	movw	r24, r16
    1a0a:	0e 94 02 0c 	call	0x1804	; 0x1804 <_ZN8BLEMate29amCentralERb>
  // What we're now going to do is to build a String object with our buffer
  //  contents and then hit send on that buffer when it reaches a the length
  //  limited by the mode.

  byte outBufLenLimit = 20;
  if (!inCentralMode)
    1a0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a10:	88 23       	and	r24, r24
    1a12:	19 f0       	breq	.+6      	; 0x1a1a <_ZN8BLEMate28sendDataEPch+0x52>

  // What we're now going to do is to build a String object with our buffer
  //  contents and then hit send on that buffer when it reaches a the length
  //  limited by the mode.

  byte outBufLenLimit = 20;
    1a14:	94 e1       	ldi	r25, 0x14	; 20
    1a16:	c9 2e       	mov	r12, r25
    1a18:	02 c0       	rjmp	.+4      	; 0x1a1e <_ZN8BLEMate28sendDataEPch+0x56>
  if (!inCentralMode)
  {
    outBufLenLimit = 125;
    1a1a:	8d e7       	ldi	r24, 0x7D	; 125
    1a1c:	c8 2e       	mov	r12, r24
    }
    dataLeft -= outBufLenLimit;
    String outBuf;
    while (outBufLen < outBufLenLimit)
    {
      outBuf.concat(dataBuffer[inBufPtr++]);
    1a1e:	b9 2c       	mov	r11, r9
    1a20:	aa 24       	eor	r10, r10
    1a22:	a3 94       	inc	r10
    1a24:	d1 2c       	mov	r13, r1
  byte inBufPtr = 0;
  byte outBufLen = 0;
  byte dataLeft = dataLen;

  opResult result = SUCCESS;
  while (inBufPtr < dataLen)
    1a26:	d9 14       	cp	r13, r9
    1a28:	08 f0       	brcs	.+2      	; 0x1a2c <_ZN8BLEMate28sendDataEPch+0x64>
    1a2a:	4c c0       	rjmp	.+152    	; 0x1ac4 <_ZN8BLEMate28sendDataEPch+0xfc>
    1a2c:	bc 14       	cp	r11, r12
    1a2e:	08 f4       	brcc	.+2      	; 0x1a32 <_ZN8BLEMate28sendDataEPch+0x6a>
    1a30:	cb 2c       	mov	r12, r11
  {
    if (dataLeft < outBufLenLimit)
    {
      outBufLenLimit = dataLeft;
    }
    dataLeft -= outBufLenLimit;
    1a32:	bc 18       	sub	r11, r12
    String outBuf;
    1a34:	60 e2       	ldi	r22, 0x20	; 32
    1a36:	71 e0       	ldi	r23, 0x01	; 1
    1a38:	ce 01       	movw	r24, r28
    1a3a:	07 96       	adiw	r24, 0x07	; 7
    1a3c:	0e 94 03 07 	call	0xe06	; 0xe06 <_ZN6StringC1EPKc>
    1a40:	ac 2c       	mov	r10, r12
    1a42:	ad 0c       	add	r10, r13
    while (outBufLen < outBufLenLimit)
    1a44:	da 14       	cp	r13, r10
    1a46:	69 f0       	breq	.+26     	; 0x1a62 <_ZN8BLEMate28sendDataEPch+0x9a>
    {
      outBuf.concat(dataBuffer[inBufPtr++]);
    1a48:	88 24       	eor	r8, r8
    1a4a:	83 94       	inc	r8
    1a4c:	8d 0c       	add	r8, r13
    1a4e:	f7 01       	movw	r30, r14
    1a50:	ed 0d       	add	r30, r13
    1a52:	f1 1d       	adc	r31, r1
    1a54:	60 81       	ld	r22, Z
    1a56:	ce 01       	movw	r24, r28
    1a58:	07 96       	adiw	r24, 0x07	; 7
    1a5a:	0e 94 94 07 	call	0xf28	; 0xf28 <_ZN6String6concatEc>
    1a5e:	d8 2c       	mov	r13, r8
    1a60:	f1 cf       	rjmp	.-30     	; 0x1a44 <_ZN8BLEMate28sendDataEPch+0x7c>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1a62:	63 e8       	ldi	r22, 0x83	; 131
    1a64:	71 e0       	ldi	r23, 0x01	; 1
    1a66:	ce 01       	movw	r24, r28
    1a68:	01 96       	adiw	r24, 0x01	; 1
    1a6a:	0e 94 03 07 	call	0xe06	; 0xe06 <_ZN6StringC1EPKc>
      outBufLen++;
    }
    outBuf = "SND " + outBuf + "\r";
    1a6e:	be 01       	movw	r22, r28
    1a70:	69 5f       	subi	r22, 0xF9	; 249
    1a72:	7f 4f       	sbci	r23, 0xFF	; 255
    1a74:	ce 01       	movw	r24, r28
    1a76:	01 96       	adiw	r24, 0x01	; 1
    1a78:	0e 94 a7 07 	call	0xf4e	; 0xf4e <_ZplRK15StringSumHelperRK6String>
    1a7c:	6f e1       	ldi	r22, 0x1F	; 31
    1a7e:	71 e0       	ldi	r23, 0x01	; 1
    1a80:	0e 94 ba 07 	call	0xf74	; 0xf74 <_ZplRK15StringSumHelperPKc>
    1a84:	bc 01       	movw	r22, r24
    1a86:	ce 01       	movw	r24, r28
    1a88:	07 96       	adiw	r24, 0x07	; 7
    1a8a:	0e 94 19 07 	call	0xe32	; 0xe32 <_ZN6StringaSERKS_>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1a8e:	ce 01       	movw	r24, r28
    1a90:	01 96       	adiw	r24, 0x01	; 1
    1a92:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN6StringD1Ev>
    result = stdCmd(outBuf);
    1a96:	be 01       	movw	r22, r28
    1a98:	69 5f       	subi	r22, 0xF9	; 249
    1a9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a9c:	ce 01       	movw	r24, r28
    1a9e:	01 96       	adiw	r24, 0x01	; 1
    1aa0:	0e 94 30 07 	call	0xe60	; 0xe60 <_ZN6StringC1ERKS_>
    1aa4:	be 01       	movw	r22, r28
    1aa6:	6f 5f       	subi	r22, 0xFF	; 255
    1aa8:	7f 4f       	sbci	r23, 0xFF	; 255
    1aaa:	c8 01       	movw	r24, r16
    1aac:	0e 94 05 0a 	call	0x140a	; 0x140a <_ZN8BLEMate26stdCmdE6String>
    1ab0:	a8 2e       	mov	r10, r24
    1ab2:	ce 01       	movw	r24, r28
    1ab4:	01 96       	adiw	r24, 0x01	; 1
    1ab6:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN6StringD1Ev>
    outBufLen = 0;
  }
    1aba:	ce 01       	movw	r24, r28
    1abc:	07 96       	adiw	r24, 0x07	; 7
    1abe:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN6StringD1Ev>
    1ac2:	b1 cf       	rjmp	.-158    	; 0x1a26 <_ZN8BLEMate28sendDataEPch+0x5e>
  return result;
    1ac4:	ce 01       	movw	r24, r28
    1ac6:	0d 96       	adiw	r24, 0x0d	; 13
    1ac8:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN6StringD1Ev>
}
    1acc:	8a 2d       	mov	r24, r10
    1ace:	63 96       	adiw	r28, 0x13	; 19
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	f8 94       	cli
    1ad4:	de bf       	out	0x3e, r29	; 62
    1ad6:	0f be       	out	0x3f, r0	; 63
    1ad8:	cd bf       	out	0x3d, r28	; 61
    1ada:	df 91       	pop	r29
    1adc:	cf 91       	pop	r28
    1ade:	1f 91       	pop	r17
    1ae0:	0f 91       	pop	r16
    1ae2:	ff 90       	pop	r15
    1ae4:	ef 90       	pop	r14
    1ae6:	df 90       	pop	r13
    1ae8:	cf 90       	pop	r12
    1aea:	bf 90       	pop	r11
    1aec:	af 90       	pop	r10
    1aee:	9f 90       	pop	r9
    1af0:	8f 90       	pop	r8
    1af2:	08 95       	ret

00001af4 <_ZN8BLEMate28sendDataER6String>:
  String newBuffer = dataBuffer;
  return sendData(newBuffer);
}

BLEMate2::opResult BLEMate2::sendData(String &dataBuffer)
{
    1af4:	cf 92       	push	r12
    1af6:	df 92       	push	r13
    1af8:	ef 92       	push	r14
    1afa:	ff 92       	push	r15
    1afc:	0f 93       	push	r16
    1afe:	1f 93       	push	r17
    1b00:	cf 93       	push	r28
    1b02:	df 93       	push	r29
    1b04:	6c 01       	movw	r12, r24
    1b06:	7b 01       	movw	r14, r22
  // First, we'll need to figure out the length of the string.
  int bufLength = dataBuffer.length()+1;
    1b08:	fb 01       	movw	r30, r22
    1b0a:	c4 81       	ldd	r28, Z+4	; 0x04
    1b0c:	d5 81       	ldd	r29, Z+5	; 0x05
    1b0e:	21 96       	adiw	r28, 0x01	; 1

  // Now dynamically allocate an array of the appropriate size.
  char *charArray = new char [bufLength];
    1b10:	ce 01       	movw	r24, r28
    1b12:	0e 94 b9 02 	call	0x572	; 0x572 <_Znaj>
    1b16:	8c 01       	movw	r16, r24
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	ae 01       	movw	r20, r28
    1b1e:	bc 01       	movw	r22, r24
    1b20:	c7 01       	movw	r24, r14
    1b22:	0e 94 9d 08 	call	0x113a	; 0x113a <_ZNK6String8getBytesEPhjj>

  // Copy over the data.
  dataBuffer.toCharArray(charArray, bufLength);

  // Call the byte array function
  opResult result = sendData(charArray, bufLength);
    1b26:	4c 2f       	mov	r20, r28
    1b28:	b8 01       	movw	r22, r16
    1b2a:	c6 01       	movw	r24, r12
    1b2c:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <_ZN8BLEMate28sendDataEPch>
    1b30:	c8 2f       	mov	r28, r24

  // de-allocate the memory.
  delete charArray;
    1b32:	c8 01       	movw	r24, r16
    1b34:	0e 94 bb 02 	call	0x576	; 0x576 <_ZdlPv>

  return result;
}
    1b38:	8c 2f       	mov	r24, r28
    1b3a:	df 91       	pop	r29
    1b3c:	cf 91       	pop	r28
    1b3e:	1f 91       	pop	r17
    1b40:	0f 91       	pop	r16
    1b42:	ff 90       	pop	r15
    1b44:	ef 90       	pop	r14
    1b46:	df 90       	pop	r13
    1b48:	cf 90       	pop	r12
    1b4a:	08 95       	ret

00001b4c <setup_leds>:
unsigned long timer_top_arrow;
unsigned long timer_right_arrow;
unsigned long timer_status_led;

void setup_leds()
{
    1b4c:	cf 93       	push	r28
    1b4e:	c2 e0       	ldi	r28, 0x02	; 2
    for (int i = 2; i < 12; i++) {
        pinMode(i, OUTPUT);
    1b50:	61 e0       	ldi	r22, 0x01	; 1
    1b52:	8c 2f       	mov	r24, r28
    1b54:	0e 94 26 06 	call	0xc4c	; 0xc4c <pinMode>
    1b58:	cf 5f       	subi	r28, 0xFF	; 255
unsigned long timer_right_arrow;
unsigned long timer_status_led;

void setup_leds()
{
    for (int i = 2; i < 12; i++) {
    1b5a:	cc 30       	cpi	r28, 0x0C	; 12
    1b5c:	c9 f7       	brne	.-14     	; 0x1b50 <setup_leds+0x4>
    1b5e:	c2 e0       	ldi	r28, 0x02	; 2
        pinMode(i, OUTPUT);
    }
    for (int i = 2; i < 12; i++) {
        digitalWrite(i, HIGH);
    1b60:	61 e0       	ldi	r22, 0x01	; 1
    1b62:	8c 2f       	mov	r24, r28
    1b64:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalWrite>
        delay(20);
    1b68:	64 e1       	ldi	r22, 0x14	; 20
    1b6a:	70 e0       	ldi	r23, 0x00	; 0
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	0e 94 7d 05 	call	0xafa	; 0xafa <delay>
        digitalWrite(i, LOW);
    1b74:	60 e0       	ldi	r22, 0x00	; 0
    1b76:	8c 2f       	mov	r24, r28
    1b78:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalWrite>
    1b7c:	cf 5f       	subi	r28, 0xFF	; 255
void setup_leds()
{
    for (int i = 2; i < 12; i++) {
        pinMode(i, OUTPUT);
    }
    for (int i = 2; i < 12; i++) {
    1b7e:	cc 30       	cpi	r28, 0x0C	; 12
    1b80:	79 f7       	brne	.-34     	; 0x1b60 <setup_leds+0x14>
        digitalWrite(i, HIGH);
        delay(20);
        digitalWrite(i, LOW);
    }
}
    1b82:	cf 91       	pop	r28
    1b84:	08 95       	ret

00001b86 <blink_left_arrow>:

void blink_left_arrow ()
{
    1b86:	0f 93       	push	r16
    1b88:	1f 93       	push	r17
    if (!left_arrow_on && (millis() - timer_left_arrow > 500)) {
    1b8a:	80 91 8d 04 	lds	r24, 0x048D
    1b8e:	81 11       	cpse	r24, r1
    1b90:	2c c0       	rjmp	.+88     	; 0x1bea <blink_left_arrow+0x64>
    1b92:	0e 94 4e 05 	call	0xa9c	; 0xa9c <millis>
    1b96:	00 91 ac 04 	lds	r16, 0x04AC
    1b9a:	10 91 ad 04 	lds	r17, 0x04AD
    1b9e:	20 91 ae 04 	lds	r18, 0x04AE
    1ba2:	30 91 af 04 	lds	r19, 0x04AF
    1ba6:	60 1b       	sub	r22, r16
    1ba8:	71 0b       	sbc	r23, r17
    1baa:	82 0b       	sbc	r24, r18
    1bac:	93 0b       	sbc	r25, r19
    1bae:	65 3f       	cpi	r22, 0xF5	; 245
    1bb0:	71 40       	sbci	r23, 0x01	; 1
    1bb2:	81 05       	cpc	r24, r1
    1bb4:	91 05       	cpc	r25, r1
    1bb6:	c8 f0       	brcs	.+50     	; 0x1bea <blink_left_arrow+0x64>
            digitalWrite(7, HIGH);
    1bb8:	61 e0       	ldi	r22, 0x01	; 1
    1bba:	87 e0       	ldi	r24, 0x07	; 7
    1bbc:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalWrite>
            digitalWrite(3, HIGH);
    1bc0:	61 e0       	ldi	r22, 0x01	; 1
    1bc2:	83 e0       	ldi	r24, 0x03	; 3
    1bc4:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalWrite>
            digitalWrite(2, HIGH);
    1bc8:	61 e0       	ldi	r22, 0x01	; 1
    1bca:	82 e0       	ldi	r24, 0x02	; 2
    1bcc:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalWrite>
            timer_left_arrow = millis();
    1bd0:	0e 94 4e 05 	call	0xa9c	; 0xa9c <millis>
    1bd4:	60 93 ac 04 	sts	0x04AC, r22
    1bd8:	70 93 ad 04 	sts	0x04AD, r23
    1bdc:	80 93 ae 04 	sts	0x04AE, r24
    1be0:	90 93 af 04 	sts	0x04AF, r25
            left_arrow_on = true;
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	80 93 8d 04 	sts	0x048D, r24
    }
    if (left_arrow_on && (millis() - timer_left_arrow > 500)) {
    1bea:	80 91 8d 04 	lds	r24, 0x048D
    1bee:	88 23       	and	r24, r24
    1bf0:	59 f1       	breq	.+86     	; 0x1c48 <blink_left_arrow+0xc2>
    1bf2:	0e 94 4e 05 	call	0xa9c	; 0xa9c <millis>
    1bf6:	00 91 ac 04 	lds	r16, 0x04AC
    1bfa:	10 91 ad 04 	lds	r17, 0x04AD
    1bfe:	20 91 ae 04 	lds	r18, 0x04AE
    1c02:	30 91 af 04 	lds	r19, 0x04AF
    1c06:	60 1b       	sub	r22, r16
    1c08:	71 0b       	sbc	r23, r17
    1c0a:	82 0b       	sbc	r24, r18
    1c0c:	93 0b       	sbc	r25, r19
    1c0e:	65 3f       	cpi	r22, 0xF5	; 245
    1c10:	71 40       	sbci	r23, 0x01	; 1
    1c12:	81 05       	cpc	r24, r1
    1c14:	91 05       	cpc	r25, r1
    1c16:	c0 f0       	brcs	.+48     	; 0x1c48 <blink_left_arrow+0xc2>
            digitalWrite(7, LOW);
    1c18:	60 e0       	ldi	r22, 0x00	; 0
    1c1a:	87 e0       	ldi	r24, 0x07	; 7
    1c1c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalWrite>
            digitalWrite(3, LOW);
    1c20:	60 e0       	ldi	r22, 0x00	; 0
    1c22:	83 e0       	ldi	r24, 0x03	; 3
    1c24:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalWrite>
            digitalWrite(2, LOW);
    1c28:	60 e0       	ldi	r22, 0x00	; 0
    1c2a:	82 e0       	ldi	r24, 0x02	; 2
    1c2c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalWrite>
            timer_left_arrow = millis();
    1c30:	0e 94 4e 05 	call	0xa9c	; 0xa9c <millis>
    1c34:	60 93 ac 04 	sts	0x04AC, r22
    1c38:	70 93 ad 04 	sts	0x04AD, r23
    1c3c:	80 93 ae 04 	sts	0x04AE, r24
    1c40:	90 93 af 04 	sts	0x04AF, r25
            left_arrow_on = false;
    1c44:	10 92 8d 04 	sts	0x048D, r1
    }
}
    1c48:	1f 91       	pop	r17
    1c4a:	0f 91       	pop	r16
    1c4c:	08 95       	ret

00001c4e <blink_right_arrow>:

void blink_right_arrow ()
{
    1c4e:	0f 93       	push	r16
    1c50:	1f 93       	push	r17
    if (!right_arrow_on && (millis() - timer_right_arrow > 500)) {
    1c52:	80 91 8c 04 	lds	r24, 0x048C
    1c56:	81 11       	cpse	r24, r1
    1c58:	2c c0       	rjmp	.+88     	; 0x1cb2 <blink_right_arrow+0x64>
    1c5a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <millis>
    1c5e:	00 91 a4 04 	lds	r16, 0x04A4
    1c62:	10 91 a5 04 	lds	r17, 0x04A5
    1c66:	20 91 a6 04 	lds	r18, 0x04A6
    1c6a:	30 91 a7 04 	lds	r19, 0x04A7
    1c6e:	60 1b       	sub	r22, r16
    1c70:	71 0b       	sbc	r23, r17
    1c72:	82 0b       	sbc	r24, r18
    1c74:	93 0b       	sbc	r25, r19
    1c76:	65 3f       	cpi	r22, 0xF5	; 245
    1c78:	71 40       	sbci	r23, 0x01	; 1
    1c7a:	81 05       	cpc	r24, r1
    1c7c:	91 05       	cpc	r25, r1
    1c7e:	c8 f0       	brcs	.+50     	; 0x1cb2 <blink_right_arrow+0x64>
        digitalWrite(8, HIGH);
    1c80:	61 e0       	ldi	r22, 0x01	; 1
    1c82:	88 e0       	ldi	r24, 0x08	; 8
    1c84:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalWrite>
        digitalWrite(10, HIGH);
    1c88:	61 e0       	ldi	r22, 0x01	; 1
    1c8a:	8a e0       	ldi	r24, 0x0A	; 10
    1c8c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalWrite>
        digitalWrite(5, HIGH);
    1c90:	61 e0       	ldi	r22, 0x01	; 1
    1c92:	85 e0       	ldi	r24, 0x05	; 5
    1c94:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalWrite>
        timer_right_arrow = millis();
    1c98:	0e 94 4e 05 	call	0xa9c	; 0xa9c <millis>
    1c9c:	60 93 a4 04 	sts	0x04A4, r22
    1ca0:	70 93 a5 04 	sts	0x04A5, r23
    1ca4:	80 93 a6 04 	sts	0x04A6, r24
    1ca8:	90 93 a7 04 	sts	0x04A7, r25
        right_arrow_on = true;
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	80 93 8c 04 	sts	0x048C, r24
    }
    if (right_arrow_on && (millis() - timer_right_arrow > 500)) {
    1cb2:	80 91 8c 04 	lds	r24, 0x048C
    1cb6:	88 23       	and	r24, r24
    1cb8:	59 f1       	breq	.+86     	; 0x1d10 <blink_right_arrow+0xc2>
    1cba:	0e 94 4e 05 	call	0xa9c	; 0xa9c <millis>
    1cbe:	00 91 a4 04 	lds	r16, 0x04A4
    1cc2:	10 91 a5 04 	lds	r17, 0x04A5
    1cc6:	20 91 a6 04 	lds	r18, 0x04A6
    1cca:	30 91 a7 04 	lds	r19, 0x04A7
    1cce:	60 1b       	sub	r22, r16
    1cd0:	71 0b       	sbc	r23, r17
    1cd2:	82 0b       	sbc	r24, r18
    1cd4:	93 0b       	sbc	r25, r19
    1cd6:	65 3f       	cpi	r22, 0xF5	; 245
    1cd8:	71 40       	sbci	r23, 0x01	; 1
    1cda:	81 05       	cpc	r24, r1
    1cdc:	91 05       	cpc	r25, r1
    1cde:	c0 f0       	brcs	.+48     	; 0x1d10 <blink_right_arrow+0xc2>
        digitalWrite(8, LOW);
    1ce0:	60 e0       	ldi	r22, 0x00	; 0
    1ce2:	88 e0       	ldi	r24, 0x08	; 8
    1ce4:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalWrite>
        digitalWrite(10, LOW);
    1ce8:	60 e0       	ldi	r22, 0x00	; 0
    1cea:	8a e0       	ldi	r24, 0x0A	; 10
    1cec:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalWrite>
        digitalWrite(5, LOW);
    1cf0:	60 e0       	ldi	r22, 0x00	; 0
    1cf2:	85 e0       	ldi	r24, 0x05	; 5
    1cf4:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalWrite>
        timer_right_arrow = millis();
    1cf8:	0e 94 4e 05 	call	0xa9c	; 0xa9c <millis>
    1cfc:	60 93 a4 04 	sts	0x04A4, r22
    1d00:	70 93 a5 04 	sts	0x04A5, r23
    1d04:	80 93 a6 04 	sts	0x04A6, r24
    1d08:	90 93 a7 04 	sts	0x04A7, r25
        right_arrow_on = false;
    1d0c:	10 92 8c 04 	sts	0x048C, r1
    }
}
    1d10:	1f 91       	pop	r17
    1d12:	0f 91       	pop	r16
    1d14:	08 95       	ret

00001d16 <blink_top_arrow>:

void blink_top_arrow ()
{
    1d16:	0f 93       	push	r16
    1d18:	1f 93       	push	r17
    if (!top_arrow_on && (millis() - timer_top_arrow > 500)) {
    1d1a:	80 91 8b 04 	lds	r24, 0x048B
    1d1e:	81 11       	cpse	r24, r1
    1d20:	2c c0       	rjmp	.+88     	; 0x1d7a <blink_top_arrow+0x64>
    1d22:	0e 94 4e 05 	call	0xa9c	; 0xa9c <millis>
    1d26:	00 91 a8 04 	lds	r16, 0x04A8
    1d2a:	10 91 a9 04 	lds	r17, 0x04A9
    1d2e:	20 91 aa 04 	lds	r18, 0x04AA
    1d32:	30 91 ab 04 	lds	r19, 0x04AB
    1d36:	60 1b       	sub	r22, r16
    1d38:	71 0b       	sbc	r23, r17
    1d3a:	82 0b       	sbc	r24, r18
    1d3c:	93 0b       	sbc	r25, r19
    1d3e:	65 3f       	cpi	r22, 0xF5	; 245
    1d40:	71 40       	sbci	r23, 0x01	; 1
    1d42:	81 05       	cpc	r24, r1
    1d44:	91 05       	cpc	r25, r1
    1d46:	c8 f0       	brcs	.+50     	; 0x1d7a <blink_top_arrow+0x64>
        digitalWrite(4, HIGH);
    1d48:	61 e0       	ldi	r22, 0x01	; 1
    1d4a:	84 e0       	ldi	r24, 0x04	; 4
    1d4c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalWrite>
        digitalWrite(9, HIGH);
    1d50:	61 e0       	ldi	r22, 0x01	; 1
    1d52:	89 e0       	ldi	r24, 0x09	; 9
    1d54:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalWrite>
        digitalWrite(6, HIGH);
    1d58:	61 e0       	ldi	r22, 0x01	; 1
    1d5a:	86 e0       	ldi	r24, 0x06	; 6
    1d5c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalWrite>
        timer_top_arrow = millis();
    1d60:	0e 94 4e 05 	call	0xa9c	; 0xa9c <millis>
    1d64:	60 93 a8 04 	sts	0x04A8, r22
    1d68:	70 93 a9 04 	sts	0x04A9, r23
    1d6c:	80 93 aa 04 	sts	0x04AA, r24
    1d70:	90 93 ab 04 	sts	0x04AB, r25
        top_arrow_on = true;
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	80 93 8b 04 	sts	0x048B, r24
    }
    if (top_arrow_on && (millis() - timer_top_arrow > 500)) {
    1d7a:	80 91 8b 04 	lds	r24, 0x048B
    1d7e:	88 23       	and	r24, r24
    1d80:	59 f1       	breq	.+86     	; 0x1dd8 <blink_top_arrow+0xc2>
    1d82:	0e 94 4e 05 	call	0xa9c	; 0xa9c <millis>
    1d86:	00 91 a8 04 	lds	r16, 0x04A8
    1d8a:	10 91 a9 04 	lds	r17, 0x04A9
    1d8e:	20 91 aa 04 	lds	r18, 0x04AA
    1d92:	30 91 ab 04 	lds	r19, 0x04AB
    1d96:	60 1b       	sub	r22, r16
    1d98:	71 0b       	sbc	r23, r17
    1d9a:	82 0b       	sbc	r24, r18
    1d9c:	93 0b       	sbc	r25, r19
    1d9e:	65 3f       	cpi	r22, 0xF5	; 245
    1da0:	71 40       	sbci	r23, 0x01	; 1
    1da2:	81 05       	cpc	r24, r1
    1da4:	91 05       	cpc	r25, r1
    1da6:	c0 f0       	brcs	.+48     	; 0x1dd8 <blink_top_arrow+0xc2>
        digitalWrite(4, LOW);
    1da8:	60 e0       	ldi	r22, 0x00	; 0
    1daa:	84 e0       	ldi	r24, 0x04	; 4
    1dac:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalWrite>
        digitalWrite(9, LOW);
    1db0:	60 e0       	ldi	r22, 0x00	; 0
    1db2:	89 e0       	ldi	r24, 0x09	; 9
    1db4:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalWrite>
        digitalWrite(6, LOW);
    1db8:	60 e0       	ldi	r22, 0x00	; 0
    1dba:	86 e0       	ldi	r24, 0x06	; 6
    1dbc:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalWrite>
        timer_top_arrow = millis();
    1dc0:	0e 94 4e 05 	call	0xa9c	; 0xa9c <millis>
    1dc4:	60 93 a8 04 	sts	0x04A8, r22
    1dc8:	70 93 a9 04 	sts	0x04A9, r23
    1dcc:	80 93 aa 04 	sts	0x04AA, r24
    1dd0:	90 93 ab 04 	sts	0x04AB, r25
        top_arrow_on = false;
    1dd4:	10 92 8b 04 	sts	0x048B, r1
    }
}
    1dd8:	1f 91       	pop	r17
    1dda:	0f 91       	pop	r16
    1ddc:	08 95       	ret

00001dde <blink_status_led>:

void blink_status_led()
{
    1dde:	0f 93       	push	r16
    1de0:	1f 93       	push	r17

    if (!status_led_on && (millis() - timer_status_led > 500)) {
    1de2:	80 91 8a 04 	lds	r24, 0x048A
    1de6:	81 11       	cpse	r24, r1
    1de8:	24 c0       	rjmp	.+72     	; 0x1e32 <blink_status_led+0x54>
    1dea:	0e 94 4e 05 	call	0xa9c	; 0xa9c <millis>
    1dee:	00 91 a0 04 	lds	r16, 0x04A0
    1df2:	10 91 a1 04 	lds	r17, 0x04A1
    1df6:	20 91 a2 04 	lds	r18, 0x04A2
    1dfa:	30 91 a3 04 	lds	r19, 0x04A3
    1dfe:	60 1b       	sub	r22, r16
    1e00:	71 0b       	sbc	r23, r17
    1e02:	82 0b       	sbc	r24, r18
    1e04:	93 0b       	sbc	r25, r19
    1e06:	65 3f       	cpi	r22, 0xF5	; 245
    1e08:	71 40       	sbci	r23, 0x01	; 1
    1e0a:	81 05       	cpc	r24, r1
    1e0c:	91 05       	cpc	r25, r1
    1e0e:	88 f0       	brcs	.+34     	; 0x1e32 <blink_status_led+0x54>
        digitalWrite(11, HIGH);
    1e10:	61 e0       	ldi	r22, 0x01	; 1
    1e12:	8b e0       	ldi	r24, 0x0B	; 11
    1e14:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalWrite>
        timer_status_led = millis();
    1e18:	0e 94 4e 05 	call	0xa9c	; 0xa9c <millis>
    1e1c:	60 93 a0 04 	sts	0x04A0, r22
    1e20:	70 93 a1 04 	sts	0x04A1, r23
    1e24:	80 93 a2 04 	sts	0x04A2, r24
    1e28:	90 93 a3 04 	sts	0x04A3, r25
        status_led_on = true;
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	80 93 8a 04 	sts	0x048A, r24
    }
    if (status_led_on && (millis() - timer_status_led > 500)) {
    1e32:	80 91 8a 04 	lds	r24, 0x048A
    1e36:	88 23       	and	r24, r24
    1e38:	19 f1       	breq	.+70     	; 0x1e80 <blink_status_led+0xa2>
    1e3a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <millis>
    1e3e:	00 91 a0 04 	lds	r16, 0x04A0
    1e42:	10 91 a1 04 	lds	r17, 0x04A1
    1e46:	20 91 a2 04 	lds	r18, 0x04A2
    1e4a:	30 91 a3 04 	lds	r19, 0x04A3
    1e4e:	60 1b       	sub	r22, r16
    1e50:	71 0b       	sbc	r23, r17
    1e52:	82 0b       	sbc	r24, r18
    1e54:	93 0b       	sbc	r25, r19
    1e56:	65 3f       	cpi	r22, 0xF5	; 245
    1e58:	71 40       	sbci	r23, 0x01	; 1
    1e5a:	81 05       	cpc	r24, r1
    1e5c:	91 05       	cpc	r25, r1
    1e5e:	80 f0       	brcs	.+32     	; 0x1e80 <blink_status_led+0xa2>
        digitalWrite(11, LOW);
    1e60:	60 e0       	ldi	r22, 0x00	; 0
    1e62:	8b e0       	ldi	r24, 0x0B	; 11
    1e64:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalWrite>
        timer_status_led = millis();
    1e68:	0e 94 4e 05 	call	0xa9c	; 0xa9c <millis>
    1e6c:	60 93 a0 04 	sts	0x04A0, r22
    1e70:	70 93 a1 04 	sts	0x04A1, r23
    1e74:	80 93 a2 04 	sts	0x04A2, r24
    1e78:	90 93 a3 04 	sts	0x04A3, r25
        status_led_on = false;
    1e7c:	10 92 8a 04 	sts	0x048A, r1
    }
      
    1e80:	1f 91       	pop	r17
    1e82:	0f 91       	pop	r16
    1e84:	08 95       	ret

00001e86 <initVariant>:
int atexit(void (*func)()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    1e86:	08 95       	ret

00001e88 <main>:

int main(void)
{
	init();
    1e88:	0e 94 a5 05 	call	0xb4a	; 0xb4a <init>

	initVariant();
    1e8c:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1e90:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <_Z5setupv>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1e94:	c8 eb       	ldi	r28, 0xB8	; 184
    1e96:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    1e98:	0e 94 25 12 	call	0x244a	; 0x244a <_Z4loopv>
		if (serialEventRun) serialEventRun();
    1e9c:	20 97       	sbiw	r28, 0x00	; 0
    1e9e:	e1 f3       	breq	.-8      	; 0x1e98 <main+0x10>
    1ea0:	0e 94 b8 00 	call	0x170	; 0x170 <_Z14serialEventRunv>
    1ea4:	f9 cf       	rjmp	.-14     	; 0x1e98 <main+0x10>

00001ea6 <_Z41__static_initialization_and_destruction_0ii.part.1>:
        blink_top_arrow();
    }
    if (status_led_on) {
        blink_status_led();
    }
    1ea6:	cf 93       	push	r28
    1ea8:	df 93       	push	r29
#ifndef BLEMate2_h
#define BLEMate2_h

#include "../Arduino/Arduino.h"

class BLEMate2
    1eaa:	89 e6       	ldi	r24, 0x69	; 105
    1eac:	94 e0       	ldi	r25, 0x04	; 4
    1eae:	89 2b       	or	r24, r25
    1eb0:	71 f4       	brne	.+28     	; 0x1ece <_Z41__static_initialization_and_destruction_0ii.part.1+0x28>
#include <avr/io.h>
#include <util/delay.h>

String fullBuffer;
String inputBuffer;
String sendBuffer;
    1eb2:	8e e8       	ldi	r24, 0x8E	; 142
    1eb4:	94 e0       	ldi	r25, 0x04	; 4
    1eb6:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN6StringD1Ev>
#include "../lib/SparkFun_BLEMate2/SparkFun_BLEMate2.h"
#include <avr/io.h>
#include <util/delay.h>

String fullBuffer;
String inputBuffer;
    1eba:	84 e9       	ldi	r24, 0x94	; 148
    1ebc:	94 e0       	ldi	r25, 0x04	; 4
    1ebe:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN6StringD1Ev>
#include "../lib/Arduino/Arduino.h"
#include "../lib/SparkFun_BLEMate2/SparkFun_BLEMate2.h"
#include <avr/io.h>
#include <util/delay.h>

String fullBuffer;
    1ec2:	8a e9       	ldi	r24, 0x9A	; 154
    1ec4:	94 e0       	ldi	r25, 0x04	; 4
        blink_top_arrow();
    }
    if (status_led_on) {
        blink_status_led();
    }
    1ec6:	df 91       	pop	r29
    1ec8:	cf 91       	pop	r28
#include "../lib/Arduino/Arduino.h"
#include "../lib/SparkFun_BLEMate2/SparkFun_BLEMate2.h"
#include <avr/io.h>
#include <util/delay.h>

String fullBuffer;
    1eca:	0c 94 95 06 	jmp	0xd2a	; 0xd2a <_ZN6StringD1Ev>
    1ece:	c7 e8       	ldi	r28, 0x87	; 135
    1ed0:	d4 e0       	ldi	r29, 0x04	; 4
    1ed2:	26 97       	sbiw	r28, 0x06	; 6
    1ed4:	ce 01       	movw	r24, r28
    1ed6:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN6StringD1Ev>
    1eda:	84 e0       	ldi	r24, 0x04	; 4
    1edc:	c9 36       	cpi	r28, 0x69	; 105
    1ede:	d8 07       	cpc	r29, r24
    1ee0:	c1 f7       	brne	.-16     	; 0x1ed2 <_Z41__static_initialization_and_destruction_0ii.part.1+0x2c>
    1ee2:	e7 cf       	rjmp	.-50     	; 0x1eb2 <_Z41__static_initialization_and_destruction_0ii.part.1+0xc>

00001ee4 <_Z5setupv>:
unsigned long flex_sensor_read_task_last_run = 0;
unsigned long led_blink_task_last_run = 0;


void setup()
{
    1ee4:	ff 92       	push	r15
    1ee6:	0f 93       	push	r16
    1ee8:	1f 93       	push	r17
    1eea:	cf 93       	push	r28
    1eec:	df 93       	push	r29
    init();
    1eee:	0e 94 a5 05 	call	0xb4a	; 0xb4a <init>
    setup_leds();
    1ef2:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <setup_leds>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    1ef6:	26 e0       	ldi	r18, 0x06	; 6
    1ef8:	40 e8       	ldi	r20, 0x80	; 128
    1efa:	55 e2       	ldi	r21, 0x25	; 37
    1efc:	60 e0       	ldi	r22, 0x00	; 0
    1efe:	70 e0       	ldi	r23, 0x00	; 0
    1f00:	88 e9       	ldi	r24, 0x98	; 152
    1f02:	93 e0       	ldi	r25, 0x03	; 3
    1f04:	0e 94 6e 01 	call	0x2dc	; 0x2dc <_ZN14HardwareSerial5beginEmh>
    
    Serial.begin(9600);           // This is the BC118 default baud rate.

    #ifdef DEBUG
    Serial.println("Serial has started...");
    1f08:	68 e8       	ldi	r22, 0x88	; 136
    1f0a:	71 e0       	ldi	r23, 0x01	; 1
    1f0c:	88 e9       	ldi	r24, 0x98	; 152
    1f0e:	93 e0       	ldi	r25, 0x03	; 3
    1f10:	0e 94 38 03 	call	0x670	; 0x670 <_ZN5Print7printlnEPKc>
    1f14:	ca e0       	ldi	r28, 0x0A	; 10
    1f16:	d0 e0       	ldi	r29, 0x00	; 0
    //  SUCCESS - What it says.


    boolean firstResetSuccess = false;
    boolean restoreSuccess = false;
    boolean writeConfigSuccess = false;
    1f18:	f1 2c       	mov	r15, r1
    //                  commands and parameters outside the built-ins.
    //  SUCCESS - What it says.


    boolean firstResetSuccess = false;
    boolean restoreSuccess = false;
    1f1a:	00 e0       	ldi	r16, 0x00	; 0
    //                  This will probably only occur when you attempt to send
    //                  commands and parameters outside the built-ins.
    //  SUCCESS - What it says.


    boolean firstResetSuccess = false;
    1f1c:	10 e0       	ldi	r17, 0x00	; 0
        //  the "SCN OFF" command after the reset is completed. Why is this important?
        //  Because if the device is in central mode, it *will* be scanning on reset.
        //  No way to change that. The text traffic generated by the scanning will
        //  interfere with the firmware on the Arduino properly identifying response
        //  strings from the BC118.
        if (BTModu.reset() == BLEMate2::SUCCESS)
    1f1e:	87 e6       	ldi	r24, 0x67	; 103
    1f20:	94 e0       	ldi	r25, 0x04	; 4
    1f22:	0e 94 14 0b 	call	0x1628	; 0x1628 <_ZN8BLEMate25resetEv>
    1f26:	81 30       	cpi	r24, 0x01	; 1
    1f28:	b1 f4       	brne	.+44     	; 0x1f56 <_Z5setupv+0x72>
        // restore() resets the module to factory defaults; you'll need to perform
        //  a writeConfig() and reset() to make those settings take effect. We don't
        //  do that automatically because there may be things the user wants to
        //  change before committing the settings to non-volatile memory and
        //  resetting.
        if (BTModu.restore() == BLEMate2::SUCCESS)
    1f2a:	87 e6       	ldi	r24, 0x67	; 103
    1f2c:	94 e0       	ldi	r25, 0x04	; 4
    1f2e:	0e 94 c6 0a 	call	0x158c	; 0x158c <_ZN8BLEMate27restoreEv>
    1f32:	81 30       	cpi	r24, 0x01	; 1
    1f34:	c9 f4       	brne	.+50     	; 0x1f68 <_Z5setupv+0x84>
        }
        // writeConfig() stores the current settings in non-volatile memory, so they
        //  will be in place on the next reboot of the module. Note that some, but
        //  not all, settings changes require a reboot. It's probably in general best
        //  to write/reset when changing anything.
        if (BTModu.writeConfig() == BLEMate2::SUCCESS)
    1f36:	87 e6       	ldi	r24, 0x67	; 103
    1f38:	94 e0       	ldi	r25, 0x04	; 4
    1f3a:	0e 94 ed 0a 	call	0x15da	; 0x15da <_ZN8BLEMate211writeConfigEv>
    1f3e:	81 30       	cpi	r24, 0x01	; 1
    1f40:	c1 f4       	brne	.+48     	; 0x1f72 <_Z5setupv+0x8e>
        // One more reset, to make the changes take effect.
        // NB!!!!!!!!!!!!! This write/reset thing is *really* important.
        //  The status command (STS) and the LEDs *will* lie to you and tell you that
        //  you are e.g. advertising or in central mode when in fact that is not the
        //  case and the module still needs to be reset before that is actually true.
        if (BTModu.reset() == BLEMate2::SUCCESS)
    1f42:	87 e6       	ldi	r24, 0x67	; 103
    1f44:	94 e0       	ldi	r25, 0x04	; 4
    1f46:	0e 94 14 0b 	call	0x1628	; 0x1628 <_ZN8BLEMate25resetEv>
    1f4a:	81 30       	cpi	r24, 0x01	; 1
    1f4c:	01 f1       	breq	.+64     	; 0x1f8e <_Z5setupv+0xaa>
        //  will be in place on the next reboot of the module. Note that some, but
        //  not all, settings changes require a reboot. It's probably in general best
        //  to write/reset when changing anything.
        if (BTModu.writeConfig() == BLEMate2::SUCCESS)
        {
            writeConfigSuccess = true;
    1f4e:	ff 24       	eor	r15, r15
    1f50:	f3 94       	inc	r15
        //  do that automatically because there may be things the user wants to
        //  change before committing the settings to non-volatile memory and
        //  resetting.
        if (BTModu.restore() == BLEMate2::SUCCESS)
        {
            restoreSuccess = true;
    1f52:	01 e0       	ldi	r16, 0x01	; 1
    1f54:	14 c0       	rjmp	.+40     	; 0x1f7e <_Z5setupv+0x9a>
            goto setup_try_again;
        }

        setup_try_again:
        //#ifdef DEBUG
        if (!firstResetSuccess) {
    1f56:	11 11       	cpse	r17, r1
    1f58:	07 c0       	rjmp	.+14     	; 0x1f68 <_Z5setupv+0x84>
            Serial.println("Module reset error!");
    1f5a:	6e e9       	ldi	r22, 0x9E	; 158
    1f5c:	71 e0       	ldi	r23, 0x01	; 1
    1f5e:	88 e9       	ldi	r24, 0x98	; 152
    1f60:	93 e0       	ldi	r25, 0x03	; 3
    1f62:	0e 94 38 03 	call	0x670	; 0x670 <_ZN5Print7printlnEPKc>
    1f66:	2a c0       	rjmp	.+84     	; 0x1fbc <_Z5setupv+0xd8>
            } else if (!restoreSuccess) {
    1f68:	01 11       	cpse	r16, r1
    1f6a:	04 c0       	rjmp	.+8      	; 0x1f74 <_Z5setupv+0x90>
            Serial.println("Module restore error!");
    1f6c:	62 eb       	ldi	r22, 0xB2	; 178
    1f6e:	71 e0       	ldi	r23, 0x01	; 1
    1f70:	08 c0       	rjmp	.+16     	; 0x1f82 <_Z5setupv+0x9e>
        //  do that automatically because there may be things the user wants to
        //  change before committing the settings to non-volatile memory and
        //  resetting.
        if (BTModu.restore() == BLEMate2::SUCCESS)
        {
            restoreSuccess = true;
    1f72:	01 e0       	ldi	r16, 0x01	; 1
        //#ifdef DEBUG
        if (!firstResetSuccess) {
            Serial.println("Module reset error!");
            } else if (!restoreSuccess) {
            Serial.println("Module restore error!");
            } else if (!writeConfigSuccess) {
    1f74:	f1 10       	cpse	r15, r1
    1f76:	03 c0       	rjmp	.+6      	; 0x1f7e <_Z5setupv+0x9a>
            Serial.println("Module write config error!");
    1f78:	68 ec       	ldi	r22, 0xC8	; 200
    1f7a:	71 e0       	ldi	r23, 0x01	; 1
    1f7c:	02 c0       	rjmp	.+4      	; 0x1f82 <_Z5setupv+0x9e>
            } else if (!secondResetSuccess) {
            Serial.println("Second module reset error!");
    1f7e:	63 ee       	ldi	r22, 0xE3	; 227
    1f80:	71 e0       	ldi	r23, 0x01	; 1
    1f82:	88 e9       	ldi	r24, 0x98	; 152
    1f84:	93 e0       	ldi	r25, 0x03	; 3
    1f86:	0e 94 38 03 	call	0x670	; 0x670 <_ZN5Print7printlnEPKc>
    1f8a:	11 e0       	ldi	r17, 0x01	; 1
    1f8c:	17 c0       	rjmp	.+46     	; 0x1fbc <_Z5setupv+0xd8>
            } else {
            Serial.println("Reset/Restore/Write Config PASSED...");
    1f8e:	6e ef       	ldi	r22, 0xFE	; 254
    1f90:	71 e0       	ldi	r23, 0x01	; 1
    1f92:	88 e9       	ldi	r24, 0x98	; 152
    1f94:	93 e0       	ldi	r25, 0x03	; 3
    1f96:	0e 94 38 03 	call	0x670	; 0x670 <_ZN5Print7printlnEPKc>
        #endif
        while(1) {}
    }
    
    #ifdef DEBUG
    Serial.println("Reset/Restore/Write Config DONE!");
    1f9a:	61 e6       	ldi	r22, 0x61	; 97
    1f9c:	72 e0       	ldi	r23, 0x02	; 2
    1f9e:	88 e9       	ldi	r24, 0x98	; 152
    1fa0:	93 e0       	ldi	r25, 0x03	; 3
    1fa2:	0e 94 38 03 	call	0x670	; 0x670 <_ZN5Print7printlnEPKc>
    #endif
    delay(1000);
    1fa6:	68 ee       	ldi	r22, 0xE8	; 232
    1fa8:	73 e0       	ldi	r23, 0x03	; 3
    1faa:	80 e0       	ldi	r24, 0x00	; 0
    1fac:	90 e0       	ldi	r25, 0x00	; 0
}
    1fae:	df 91       	pop	r29
    1fb0:	cf 91       	pop	r28
    1fb2:	1f 91       	pop	r17
    1fb4:	0f 91       	pop	r16
    1fb6:	ff 90       	pop	r15
    }
    
    #ifdef DEBUG
    Serial.println("Reset/Restore/Write Config DONE!");
    #endif
    delay(1000);
    1fb8:	0c 94 7d 05 	jmp	0xafa	; 0xafa <delay>
    1fbc:	21 97       	sbiw	r28, 0x01	; 1

    boolean firstResetSuccess = false;
    boolean restoreSuccess = false;
    boolean writeConfigSuccess = false;
    boolean secondResetSuccess = false;
    for (int i = 0; i < 10; i++) {
    1fbe:	20 97       	sbiw	r28, 0x00	; 0
    1fc0:	09 f0       	breq	.+2      	; 0x1fc4 <_Z5setupv+0xe0>
    1fc2:	ad cf       	rjmp	.-166    	; 0x1f1e <_Z5setupv+0x3a>
        //#endif
    }
    if (!(firstResetSuccess && restoreSuccess && writeConfigSuccess && secondResetSuccess)) {
        // Setup failed after 10 tries
        #ifdef DEBUG
        Serial.println("Reset/Restore/Write Config FAILED 10 TIMES. STOP EXECUTION...");
    1fc4:	63 e2       	ldi	r22, 0x23	; 35
    1fc6:	72 e0       	ldi	r23, 0x02	; 2
    1fc8:	88 e9       	ldi	r24, 0x98	; 152
    1fca:	93 e0       	ldi	r25, 0x03	; 3
    1fcc:	0e 94 38 03 	call	0x670	; 0x670 <_ZN5Print7printlnEPKc>
    1fd0:	ff cf       	rjmp	.-2      	; 0x1fd0 <_Z5setupv+0xec>

00001fd2 <_Z9find_text6StringS_>:
    Serial.println("Reset/Restore/Write Config DONE!");
    #endif
    delay(1000);
}

int find_text(String needle, String haystack) {
    1fd2:	9f 92       	push	r9
    1fd4:	af 92       	push	r10
    1fd6:	bf 92       	push	r11
    1fd8:	cf 92       	push	r12
    1fda:	df 92       	push	r13
    1fdc:	ef 92       	push	r14
    1fde:	ff 92       	push	r15
    1fe0:	0f 93       	push	r16
    1fe2:	1f 93       	push	r17
    1fe4:	cf 93       	push	r28
    1fe6:	df 93       	push	r29
    1fe8:	00 d0       	rcall	.+0      	; 0x1fea <_Z9find_text6StringS_+0x18>
    1fea:	00 d0       	rcall	.+0      	; 0x1fec <_Z9find_text6StringS_+0x1a>
    1fec:	00 d0       	rcall	.+0      	; 0x1fee <_Z9find_text6StringS_+0x1c>
    1fee:	cd b7       	in	r28, 0x3d	; 61
    1ff0:	de b7       	in	r29, 0x3e	; 62
    1ff2:	7c 01       	movw	r14, r24
    1ff4:	6b 01       	movw	r12, r22
    int foundpos = -1;
    for (unsigned int i = (haystack.length() - needle.length() - 1); (i > 0); i--) {
    1ff6:	fb 01       	movw	r30, r22
    1ff8:	04 81       	ldd	r16, Z+4	; 0x04
    1ffa:	15 81       	ldd	r17, Z+5	; 0x05
    1ffc:	fc 01       	movw	r30, r24
    1ffe:	84 81       	ldd	r24, Z+4	; 0x04
    2000:	95 81       	ldd	r25, Z+5	; 0x05
    2002:	08 1b       	sub	r16, r24
    2004:	19 0b       	sbc	r17, r25
    2006:	01 50       	subi	r16, 0x01	; 1
    2008:	11 09       	sbc	r17, r1
    #endif
    delay(1000);
}

int find_text(String needle, String haystack) {
    int foundpos = -1;
    200a:	aa 24       	eor	r10, r10
    200c:	aa 94       	dec	r10
    200e:	bb 24       	eor	r11, r11
    2010:	ba 94       	dec	r11
    for (unsigned int i = (haystack.length() - needle.length() - 1); (i > 0); i--) {
    2012:	01 15       	cp	r16, r1
    2014:	11 05       	cpc	r17, r1
    2016:	d1 f0       	breq	.+52     	; 0x204c <_Z9find_text6StringS_+0x7a>
        if (haystack.substring(i,needle.length()+i) == needle) {
    2018:	f7 01       	movw	r30, r14
    201a:	24 81       	ldd	r18, Z+4	; 0x04
    201c:	35 81       	ldd	r19, Z+5	; 0x05
    201e:	20 0f       	add	r18, r16
    2020:	31 1f       	adc	r19, r17
    2022:	a8 01       	movw	r20, r16
    2024:	b6 01       	movw	r22, r12
    2026:	ce 01       	movw	r24, r28
    2028:	01 96       	adiw	r24, 0x01	; 1
    202a:	0e 94 c7 08 	call	0x118e	; 0x118e <_ZNK6String9substringEjj>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
    202e:	b7 01       	movw	r22, r14
    2030:	ce 01       	movw	r24, r28
    2032:	01 96       	adiw	r24, 0x01	; 1
    2034:	0e 94 04 08 	call	0x1008	; 0x1008 <_ZNK6String6equalsERKS_>
    2038:	98 2e       	mov	r9, r24
    203a:	ce 01       	movw	r24, r28
    203c:	01 96       	adiw	r24, 0x01	; 1
    203e:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN6StringD1Ev>
    2042:	91 10       	cpse	r9, r1
            foundpos = i;
    2044:	58 01       	movw	r10, r16
    delay(1000);
}

int find_text(String needle, String haystack) {
    int foundpos = -1;
    for (unsigned int i = (haystack.length() - needle.length() - 1); (i > 0); i--) {
    2046:	01 50       	subi	r16, 0x01	; 1
    2048:	11 09       	sbc	r17, r1
    204a:	e3 cf       	rjmp	.-58     	; 0x2012 <_Z9find_text6StringS_+0x40>
        if (haystack.substring(i,needle.length()+i) == needle) {
            foundpos = i;
        }
    }
    return foundpos;
}
    204c:	c5 01       	movw	r24, r10
    204e:	26 96       	adiw	r28, 0x06	; 6
    2050:	0f b6       	in	r0, 0x3f	; 63
    2052:	f8 94       	cli
    2054:	de bf       	out	0x3e, r29	; 62
    2056:	0f be       	out	0x3f, r0	; 63
    2058:	cd bf       	out	0x3d, r28	; 61
    205a:	df 91       	pop	r29
    205c:	cf 91       	pop	r28
    205e:	1f 91       	pop	r17
    2060:	0f 91       	pop	r16
    2062:	ff 90       	pop	r15
    2064:	ef 90       	pop	r14
    2066:	df 90       	pop	r13
    2068:	cf 90       	pop	r12
    206a:	bf 90       	pop	r11
    206c:	af 90       	pop	r10
    206e:	9f 90       	pop	r9
    2070:	08 95       	ret

00002072 <_Z17do_led_blink_taskv>:
    #endif
}

void do_led_blink_task()
{
    if (left_arrow_on) {
    2072:	80 91 8d 04 	lds	r24, 0x048D
    2076:	81 11       	cpse	r24, r1
        blink_left_arrow();
    2078:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <blink_left_arrow>
    }
    if (right_arrow_on) {
    207c:	80 91 8c 04 	lds	r24, 0x048C
    2080:	81 11       	cpse	r24, r1
        blink_right_arrow();
    2082:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <blink_right_arrow>
    }
    if (top_arrow_on) {
    2086:	80 91 8b 04 	lds	r24, 0x048B
    208a:	81 11       	cpse	r24, r1
        blink_top_arrow();
    208c:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <blink_top_arrow>
    }
    if (status_led_on) {
    2090:	80 91 8a 04 	lds	r24, 0x048A
    2094:	81 11       	cpse	r24, r1
        blink_status_led();
    2096:	0c 94 ef 0e 	jmp	0x1dde	; 0x1dde <blink_status_led>
    209a:	08 95       	ret

0000209c <_GLOBAL__sub_I_fullBuffer>:
#include "../lib/Arduino/Arduino.h"
#include "../lib/SparkFun_BLEMate2/SparkFun_BLEMate2.h"
#include <avr/io.h>
#include <util/delay.h>

String fullBuffer;
    209c:	60 e2       	ldi	r22, 0x20	; 32
    209e:	71 e0       	ldi	r23, 0x01	; 1
    20a0:	8a e9       	ldi	r24, 0x9A	; 154
    20a2:	94 e0       	ldi	r25, 0x04	; 4
    20a4:	0e 94 03 07 	call	0xe06	; 0xe06 <_ZN6StringC1EPKc>
String inputBuffer;
    20a8:	60 e2       	ldi	r22, 0x20	; 32
    20aa:	71 e0       	ldi	r23, 0x01	; 1
    20ac:	84 e9       	ldi	r24, 0x94	; 148
    20ae:	94 e0       	ldi	r25, 0x04	; 4
    20b0:	0e 94 03 07 	call	0xe06	; 0xe06 <_ZN6StringC1EPKc>
String sendBuffer;
    20b4:	60 e2       	ldi	r22, 0x20	; 32
    20b6:	71 e0       	ldi	r23, 0x01	; 1
    20b8:	8e e8       	ldi	r24, 0x8E	; 142
    20ba:	94 e0       	ldi	r25, 0x04	; 4
    20bc:	0e 94 03 07 	call	0xe06	; 0xe06 <_ZN6StringC1EPKc>
boolean left_arrow_on;
boolean right_arrow_on;
boolean top_arrow_on;
boolean status_led_on;

BLEMate2 BTModu(&Serial);
    20c0:	68 e9       	ldi	r22, 0x98	; 152
    20c2:	73 e0       	ldi	r23, 0x03	; 3
    20c4:	87 e6       	ldi	r24, 0x67	; 103
    20c6:	94 e0       	ldi	r25, 0x04	; 4
    20c8:	0c 94 3e 09 	jmp	0x127c	; 0x127c <_ZN8BLEMate2C1EP6Stream>

000020cc <_GLOBAL__sub_D_fullBuffer>:
        blink_top_arrow();
    }
    if (status_led_on) {
        blink_status_led();
    }
    20cc:	0c 94 53 0f 	jmp	0x1ea6	; 0x1ea6 <_Z41__static_initialization_and_destruction_0ii.part.1>

000020d0 <_Z14do_serial_taskv>:

    // We're set up to allow anything to connect to us now.
}

void do_serial_task()
{
    20d0:	0f 93       	push	r16
    20d2:	1f 93       	push	r17
    20d4:	cf 93       	push	r28
    20d6:	df 93       	push	r29
    20d8:	cd b7       	in	r28, 0x3d	; 61
    20da:	de b7       	in	r29, 0x3e	; 62
    20dc:	2c 97       	sbiw	r28, 0x0c	; 12
    20de:	0f b6       	in	r0, 0x3f	; 63
    20e0:	f8 94       	cli
    20e2:	de bf       	out	0x3e, r29	; 62
    20e4:	0f be       	out	0x3f, r0	; 63
    20e6:	cd bf       	out	0x3d, r28	; 61
    boolean done = false;
    while (!done && Serial.available() > 0)
    20e8:	88 e9       	ldi	r24, 0x98	; 152
    20ea:	93 e0       	ldi	r25, 0x03	; 3
    20ec:	0e 94 8b 00 	call	0x116	; 0x116 <_ZN14HardwareSerial9availableEv>
    20f0:	18 16       	cp	r1, r24
    20f2:	19 06       	cpc	r1, r25
    20f4:	0c f4       	brge	.+2      	; 0x20f8 <_Z14do_serial_taskv+0x28>
    20f6:	f2 c0       	rjmp	.+484    	; 0x22dc <_Z14do_serial_taskv+0x20c>
    // We'll probably see a lot of lines that end with \n\r- that's the default
    //  line ending for all the connect info messages, for instance. We can
    //  ignore all of them that don't start with "RCV=". Remember to clear your
    //  String object after you find \n\r!!!

    int rcv_pos = find_text(String("RCV="), inputBuffer);
    20f8:	64 e9       	ldi	r22, 0x94	; 148
    20fa:	74 e0       	ldi	r23, 0x04	; 4
    20fc:	ce 01       	movw	r24, r28
    20fe:	01 96       	adiw	r24, 0x01	; 1
    2100:	0e 94 30 07 	call	0xe60	; 0xe60 <_ZN6StringC1ERKS_>
    2104:	68 ea       	ldi	r22, 0xA8	; 168
    2106:	72 e0       	ldi	r23, 0x02	; 2
    2108:	ce 01       	movw	r24, r28
    210a:	07 96       	adiw	r24, 0x07	; 7
    210c:	0e 94 03 07 	call	0xe06	; 0xe06 <_ZN6StringC1EPKc>
    2110:	be 01       	movw	r22, r28
    2112:	6f 5f       	subi	r22, 0xFF	; 255
    2114:	7f 4f       	sbci	r23, 0xFF	; 255
    2116:	ce 01       	movw	r24, r28
    2118:	07 96       	adiw	r24, 0x07	; 7
    211a:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <_Z9find_text6StringS_>
    211e:	8c 01       	movw	r16, r24
    2120:	ce 01       	movw	r24, r28
    2122:	07 96       	adiw	r24, 0x07	; 7
    2124:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN6StringD1Ev>
    2128:	ce 01       	movw	r24, r28
    212a:	01 96       	adiw	r24, 0x01	; 1
    212c:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN6StringD1Ev>
    if (rcv_pos == -1) {
    2130:	0f 3f       	cpi	r16, 0xFF	; 255
    2132:	8f ef       	ldi	r24, 0xFF	; 255
    2134:	18 07       	cpc	r17, r24
    2136:	29 f4       	brne	.+10     	; 0x2142 <_Z14do_serial_taskv+0x72>
        inputBuffer = "";
    2138:	60 e2       	ldi	r22, 0x20	; 32
    213a:	71 e0       	ldi	r23, 0x01	; 1
    213c:	84 e9       	ldi	r24, 0x94	; 148
    213e:	94 e0       	ldi	r25, 0x04	; 4
    2140:	c0 c0       	rjmp	.+384    	; 0x22c2 <_Z14do_serial_taskv+0x1f2>
        } else {
        inputBuffer.remove(rcv_pos,4); // Remove RCV= from front.
    2142:	44 e0       	ldi	r20, 0x04	; 4
    2144:	50 e0       	ldi	r21, 0x00	; 0
    2146:	b8 01       	movw	r22, r16
    2148:	84 e9       	ldi	r24, 0x94	; 148
    214a:	94 e0       	ldi	r25, 0x04	; 4
    214c:	0e 94 0c 09 	call	0x1218	; 0x1218 <_ZN6String6removeEjj>
        int line_end_pos = find_text(String("\n\r"), inputBuffer);
    2150:	64 e9       	ldi	r22, 0x94	; 148
    2152:	74 e0       	ldi	r23, 0x04	; 4
    2154:	ce 01       	movw	r24, r28
    2156:	01 96       	adiw	r24, 0x01	; 1
    2158:	0e 94 30 07 	call	0xe60	; 0xe60 <_ZN6StringC1ERKS_>
    215c:	6e e1       	ldi	r22, 0x1E	; 30
    215e:	71 e0       	ldi	r23, 0x01	; 1
    2160:	ce 01       	movw	r24, r28
    2162:	07 96       	adiw	r24, 0x07	; 7
    2164:	0e 94 03 07 	call	0xe06	; 0xe06 <_ZN6StringC1EPKc>
    2168:	be 01       	movw	r22, r28
    216a:	6f 5f       	subi	r22, 0xFF	; 255
    216c:	7f 4f       	sbci	r23, 0xFF	; 255
    216e:	ce 01       	movw	r24, r28
    2170:	07 96       	adiw	r24, 0x07	; 7
    2172:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <_Z9find_text6StringS_>
    2176:	8c 01       	movw	r16, r24
    2178:	ce 01       	movw	r24, r28
    217a:	07 96       	adiw	r24, 0x07	; 7
    217c:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN6StringD1Ev>
    2180:	ce 01       	movw	r24, r28
    2182:	01 96       	adiw	r24, 0x01	; 1
    2184:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN6StringD1Ev>
        inputBuffer.remove((unsigned int)line_end_pos);
    2188:	b8 01       	movw	r22, r16
    218a:	84 e9       	ldi	r24, 0x94	; 148
    218c:	94 e0       	ldi	r25, 0x04	; 4
    218e:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN6String6removeEj>
        #ifdef DEBUG
        Serial.println(inputBuffer);
    2192:	64 e9       	ldi	r22, 0x94	; 148
    2194:	74 e0       	ldi	r23, 0x04	; 4
    2196:	88 e9       	ldi	r24, 0x98	; 152
    2198:	93 e0       	ldi	r25, 0x03	; 3
    219a:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN5Print7printlnERK6String>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    219e:	6d ea       	ldi	r22, 0xAD	; 173
    21a0:	72 e0       	ldi	r23, 0x02	; 2
    21a2:	84 e9       	ldi	r24, 0x94	; 148
    21a4:	94 e0       	ldi	r25, 0x04	; 4
    21a6:	0e 94 17 08 	call	0x102e	; 0x102e <_ZNK6String6equalsEPKc>
        // then check flex sensors for any special readings for sending to backpack

        //for acknowledgement: if there's already been an acknowledgment for
        
        #ifdef LEFTGLOVE
        if (inputBuffer == "LP1") {
    21aa:	88 23       	and	r24, r24
    21ac:	b1 f0       	breq	.+44     	; 0x21da <_Z14do_serial_taskv+0x10a>
            Serial.println("TO LEFT GLOVE: NAV SAYS LEFT");
    21ae:	61 eb       	ldi	r22, 0xB1	; 177
    21b0:	72 e0       	ldi	r23, 0x02	; 2
    21b2:	88 e9       	ldi	r24, 0x98	; 152
    21b4:	93 e0       	ldi	r25, 0x03	; 3
    21b6:	0e 94 38 03 	call	0x670	; 0x670 <_ZN5Print7printlnEPKc>
            left_arrow_on = true;
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	80 93 8d 04 	sts	0x048D, r24
            //do some ack stuff here
            Serial.flush();
    21c0:	88 e9       	ldi	r24, 0x98	; 152
    21c2:	93 e0       	ldi	r25, 0x03	; 3
    21c4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_ZN14HardwareSerial5flushEv>
            sendBuffer.concat(PLGHEADER);
    21c8:	6e ec       	ldi	r22, 0xCE	; 206
    21ca:	72 e0       	ldi	r23, 0x02	; 2
    21cc:	8e e8       	ldi	r24, 0x8E	; 142
    21ce:	94 e0       	ldi	r25, 0x04	; 4
    21d0:	0e 94 84 07 	call	0xf08	; 0xf08 <_ZN6String6concatEPKc>
            sendBuffer.concat("1");
    21d4:	6a e1       	ldi	r22, 0x1A	; 26
    21d6:	73 e0       	ldi	r23, 0x03	; 3
    21d8:	3b c0       	rjmp	.+118    	; 0x2250 <_Z14do_serial_taskv+0x180>
    21da:	61 ed       	ldi	r22, 0xD1	; 209
    21dc:	72 e0       	ldi	r23, 0x02	; 2
    21de:	84 e9       	ldi	r24, 0x94	; 148
    21e0:	94 e0       	ldi	r25, 0x04	; 4
    21e2:	0e 94 17 08 	call	0x102e	; 0x102e <_ZNK6String6equalsEPKc>
            BTModu.sendData(sendBuffer);
            sendBuffer = "";
            } else if (inputBuffer == "LP2") {
    21e6:	88 23       	and	r24, r24
    21e8:	b1 f0       	breq	.+44     	; 0x2216 <_Z14do_serial_taskv+0x146>
            Serial.println("TO LEFT GLOVE: NAV SAYS RIGHT");
    21ea:	65 ed       	ldi	r22, 0xD5	; 213
    21ec:	72 e0       	ldi	r23, 0x02	; 2
    21ee:	88 e9       	ldi	r24, 0x98	; 152
    21f0:	93 e0       	ldi	r25, 0x03	; 3
    21f2:	0e 94 38 03 	call	0x670	; 0x670 <_ZN5Print7printlnEPKc>
            right_arrow_on = true;
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	80 93 8c 04 	sts	0x048C, r24
            //do some ack stuff here
            Serial.flush();
    21fc:	88 e9       	ldi	r24, 0x98	; 152
    21fe:	93 e0       	ldi	r25, 0x03	; 3
    2200:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_ZN14HardwareSerial5flushEv>
            sendBuffer.concat(PLGHEADER);
    2204:	6e ec       	ldi	r22, 0xCE	; 206
    2206:	72 e0       	ldi	r23, 0x02	; 2
    2208:	8e e8       	ldi	r24, 0x8E	; 142
    220a:	94 e0       	ldi	r25, 0x04	; 4
    220c:	0e 94 84 07 	call	0xf08	; 0xf08 <_ZN6String6concatEPKc>
            sendBuffer.concat("2");
    2210:	6e e1       	ldi	r22, 0x1E	; 30
    2212:	73 e0       	ldi	r23, 0x03	; 3
    2214:	1d c0       	rjmp	.+58     	; 0x2250 <_Z14do_serial_taskv+0x180>
    2216:	63 ef       	ldi	r22, 0xF3	; 243
    2218:	72 e0       	ldi	r23, 0x02	; 2
    221a:	84 e9       	ldi	r24, 0x94	; 148
    221c:	94 e0       	ldi	r25, 0x04	; 4
    221e:	0e 94 17 08 	call	0x102e	; 0x102e <_ZNK6String6equalsEPKc>
            BTModu.sendData(sendBuffer);
            sendBuffer = "";
            } else if (inputBuffer == "LP3") {
    2222:	88 23       	and	r24, r24
    2224:	31 f1       	breq	.+76     	; 0x2272 <_Z14do_serial_taskv+0x1a2>
            Serial.println("TO LEFT GLOVE: NAV SAYS STRAIGHT");
    2226:	67 ef       	ldi	r22, 0xF7	; 247
    2228:	72 e0       	ldi	r23, 0x02	; 2
    222a:	88 e9       	ldi	r24, 0x98	; 152
    222c:	93 e0       	ldi	r25, 0x03	; 3
    222e:	0e 94 38 03 	call	0x670	; 0x670 <_ZN5Print7printlnEPKc>
            top_arrow_on = true;
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	80 93 8b 04 	sts	0x048B, r24
            //do some ack stuff here
            Serial.flush();
    2238:	88 e9       	ldi	r24, 0x98	; 152
    223a:	93 e0       	ldi	r25, 0x03	; 3
    223c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_ZN14HardwareSerial5flushEv>
            sendBuffer.concat(PLGHEADER);
    2240:	6e ec       	ldi	r22, 0xCE	; 206
    2242:	72 e0       	ldi	r23, 0x02	; 2
    2244:	8e e8       	ldi	r24, 0x8E	; 142
    2246:	94 e0       	ldi	r25, 0x04	; 4
    2248:	0e 94 84 07 	call	0xf08	; 0xf08 <_ZN6String6concatEPKc>
            sendBuffer.concat("3");
    224c:	62 e2       	ldi	r22, 0x22	; 34
    224e:	73 e0       	ldi	r23, 0x03	; 3
    2250:	8e e8       	ldi	r24, 0x8E	; 142
    2252:	94 e0       	ldi	r25, 0x04	; 4
    2254:	0e 94 84 07 	call	0xf08	; 0xf08 <_ZN6String6concatEPKc>
            BTModu.sendData(sendBuffer);
    2258:	6e e8       	ldi	r22, 0x8E	; 142
    225a:	74 e0       	ldi	r23, 0x04	; 4
    225c:	87 e6       	ldi	r24, 0x67	; 103
    225e:	94 e0       	ldi	r25, 0x04	; 4
    2260:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <_ZN8BLEMate28sendDataER6String>
            sendBuffer = "";
    2264:	60 e2       	ldi	r22, 0x20	; 32
    2266:	71 e0       	ldi	r23, 0x01	; 1
    2268:	8e e8       	ldi	r24, 0x8E	; 142
    226a:	94 e0       	ldi	r25, 0x04	; 4
    226c:	0e 94 39 07 	call	0xe72	; 0xe72 <_ZN6StringaSEPKc>
    2270:	18 c0       	rjmp	.+48     	; 0x22a2 <_Z14do_serial_taskv+0x1d2>
    2272:	68 e1       	ldi	r22, 0x18	; 24
    2274:	73 e0       	ldi	r23, 0x03	; 3
    2276:	84 e9       	ldi	r24, 0x94	; 148
    2278:	94 e0       	ldi	r25, 0x04	; 4
    227a:	0e 94 17 08 	call	0x102e	; 0x102e <_ZNK6String6equalsEPKc>
            } else if (inputBuffer == "LB1" || inputBuffer == "LB2" || inputBuffer == "LB3") {
    227e:	81 11       	cpse	r24, r1
    2280:	5f c0       	rjmp	.+190    	; 0x2340 <_Z14do_serial_taskv+0x270>
    2282:	6c e1       	ldi	r22, 0x1C	; 28
    2284:	73 e0       	ldi	r23, 0x03	; 3
    2286:	84 e9       	ldi	r24, 0x94	; 148
    2288:	94 e0       	ldi	r25, 0x04	; 4
    228a:	0e 94 17 08 	call	0x102e	; 0x102e <_ZNK6String6equalsEPKc>
    228e:	81 11       	cpse	r24, r1
    2290:	57 c0       	rjmp	.+174    	; 0x2340 <_Z14do_serial_taskv+0x270>
    2292:	60 e2       	ldi	r22, 0x20	; 32
    2294:	73 e0       	ldi	r23, 0x03	; 3
    2296:	84 e9       	ldi	r24, 0x94	; 148
    2298:	94 e0       	ldi	r25, 0x04	; 4
    229a:	0e 94 17 08 	call	0x102e	; 0x102e <_ZNK6String6equalsEPKc>
    229e:	81 11       	cpse	r24, r1
    22a0:	4f c0       	rjmp	.+158    	; 0x2340 <_Z14do_serial_taskv+0x270>
	unsigned char concat(double num);
	unsigned char concat(const __FlashStringHelper * str);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    22a2:	64 e9       	ldi	r22, 0x94	; 148
    22a4:	74 e0       	ldi	r23, 0x04	; 4
    22a6:	8a e9       	ldi	r24, 0x9A	; 154
    22a8:	94 e0       	ldi	r25, 0x04	; 4
    22aa:	0e 94 7d 07 	call	0xefa	; 0xefa <_ZN6String6concatERKS_>
            turnSignalSent = 0;
        }
        #endif

        fullBuffer += inputBuffer;
        inputBuffer = "";
    22ae:	60 e2       	ldi	r22, 0x20	; 32
    22b0:	71 e0       	ldi	r23, 0x01	; 1
    22b2:	84 e9       	ldi	r24, 0x94	; 148
    22b4:	94 e0       	ldi	r25, 0x04	; 4
    22b6:	0e 94 39 07 	call	0xe72	; 0xe72 <_ZN6StringaSEPKc>
        sendBuffer = "";
    22ba:	60 e2       	ldi	r22, 0x20	; 32
    22bc:	71 e0       	ldi	r23, 0x01	; 1
    22be:	8e e8       	ldi	r24, 0x8E	; 142
    22c0:	94 e0       	ldi	r25, 0x04	; 4
    22c2:	0e 94 39 07 	call	0xe72	; 0xe72 <_ZN6StringaSEPKc>
    }
}
    22c6:	2c 96       	adiw	r28, 0x0c	; 12
    22c8:	0f b6       	in	r0, 0x3f	; 63
    22ca:	f8 94       	cli
    22cc:	de bf       	out	0x3e, r29	; 62
    22ce:	0f be       	out	0x3f, r0	; 63
    22d0:	cd bf       	out	0x3d, r28	; 61
    22d2:	df 91       	pop	r29
    22d4:	cf 91       	pop	r28
    22d6:	1f 91       	pop	r17
    22d8:	0f 91       	pop	r16
    22da:	08 95       	ret
void do_serial_task()
{
    boolean done = false;
    while (!done && Serial.available() > 0)
    {
        digitalWrite(11,HIGH);
    22dc:	61 e0       	ldi	r22, 0x01	; 1
    22de:	8b e0       	ldi	r24, 0x0B	; 11
    22e0:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalWrite>
        inputBuffer.concat((char)Serial.read());
    22e4:	88 e9       	ldi	r24, 0x98	; 152
    22e6:	93 e0       	ldi	r25, 0x03	; 3
    22e8:	0e 94 a4 00 	call	0x148	; 0x148 <_ZN14HardwareSerial4readEv>
    22ec:	68 2f       	mov	r22, r24
    22ee:	84 e9       	ldi	r24, 0x94	; 148
    22f0:	94 e0       	ldi	r25, 0x04	; 4
    22f2:	0e 94 94 07 	call	0xf28	; 0xf28 <_ZN6String6concatEc>
        digitalWrite(11,LOW);
    22f6:	60 e0       	ldi	r22, 0x00	; 0
    22f8:	8b e0       	ldi	r24, 0x0B	; 11
    22fa:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalWrite>
        if (find_text(String("\n\r"), inputBuffer) != -1) {
    22fe:	64 e9       	ldi	r22, 0x94	; 148
    2300:	74 e0       	ldi	r23, 0x04	; 4
    2302:	ce 01       	movw	r24, r28
    2304:	01 96       	adiw	r24, 0x01	; 1
    2306:	0e 94 30 07 	call	0xe60	; 0xe60 <_ZN6StringC1ERKS_>
    230a:	6e e1       	ldi	r22, 0x1E	; 30
    230c:	71 e0       	ldi	r23, 0x01	; 1
    230e:	ce 01       	movw	r24, r28
    2310:	07 96       	adiw	r24, 0x07	; 7
    2312:	0e 94 03 07 	call	0xe06	; 0xe06 <_ZN6StringC1EPKc>
    2316:	be 01       	movw	r22, r28
    2318:	6f 5f       	subi	r22, 0xFF	; 255
    231a:	7f 4f       	sbci	r23, 0xFF	; 255
    231c:	ce 01       	movw	r24, r28
    231e:	07 96       	adiw	r24, 0x07	; 7
    2320:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <_Z9find_text6StringS_>
    2324:	8c 01       	movw	r16, r24
    2326:	ce 01       	movw	r24, r28
    2328:	07 96       	adiw	r24, 0x07	; 7
    232a:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN6StringD1Ev>
    232e:	ce 01       	movw	r24, r28
    2330:	01 96       	adiw	r24, 0x01	; 1
    2332:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN6StringD1Ev>
    2336:	0f 3f       	cpi	r16, 0xFF	; 255
    2338:	1f 4f       	sbci	r17, 0xFF	; 255
    233a:	09 f0       	breq	.+2      	; 0x233e <_Z14do_serial_taskv+0x26e>
    233c:	dd ce       	rjmp	.-582    	; 0x20f8 <_Z14do_serial_taskv+0x28>
    233e:	d4 ce       	rjmp	.-600    	; 0x20e8 <_Z14do_serial_taskv+0x18>
            sendBuffer.concat(PLGHEADER);
            sendBuffer.concat("3");
            BTModu.sendData(sendBuffer);
            sendBuffer = "";
            } else if (inputBuffer == "LB1" || inputBuffer == "LB2" || inputBuffer == "LB3") {
            Serial.println("TO LEFT GLOVE: BACKPACK KNOWS WHAT'S UP");
    2340:	64 e2       	ldi	r22, 0x24	; 36
    2342:	73 e0       	ldi	r23, 0x03	; 3
    2344:	88 e9       	ldi	r24, 0x98	; 152
    2346:	93 e0       	ldi	r25, 0x03	; 3
    2348:	0e 94 38 03 	call	0x670	; 0x670 <_ZN5Print7printlnEPKc>
            status_led_on = true;
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	80 93 8a 04 	sts	0x048A, r24
            turnSignalSent = 0;
    2352:	10 92 66 04 	sts	0x0466, r1
    2356:	10 92 65 04 	sts	0x0465, r1
    235a:	a3 cf       	rjmp	.-186    	; 0x22a2 <_Z14do_serial_taskv+0x1d2>

0000235c <_Z24do_flex_sensor_read_taskv>:

void do_flex_sensor_read_task()
{
    //read them flex sensors here
    #ifdef LEFTGLOVE
    leftThumbReading = analogRead(LEFTTHUMBPIN);
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <analogRead>
    2362:	90 93 64 04 	sts	0x0464, r25
    2366:	80 93 63 04 	sts	0x0463, r24
    leftIndexReading = analogRead(LEFTINDEXPIN);
    236a:	81 e0       	ldi	r24, 0x01	; 1
    236c:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <analogRead>
    2370:	90 93 62 04 	sts	0x0462, r25
    2374:	80 93 61 04 	sts	0x0461, r24
    leftMiddleReading = analogRead(LEFTMIDDLEPIN);
    2378:	82 e0       	ldi	r24, 0x02	; 2
    237a:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <analogRead>
    237e:	90 93 60 04 	sts	0x0460, r25
    2382:	80 93 5f 04 	sts	0x045F, r24
    Serial.println("Right Flex Reading (T, I, M): ");
    2386:	6c e4       	ldi	r22, 0x4C	; 76
    2388:	73 e0       	ldi	r23, 0x03	; 3
    238a:	88 e9       	ldi	r24, 0x98	; 152
    238c:	93 e0       	ldi	r25, 0x03	; 3
    238e:	0e 94 38 03 	call	0x670	; 0x670 <_ZN5Print7printlnEPKc>
    Serial.println(leftThumbReading);
    2392:	60 91 63 04 	lds	r22, 0x0463
    2396:	70 91 64 04 	lds	r23, 0x0464
    239a:	4a e0       	ldi	r20, 0x0A	; 10
    239c:	50 e0       	ldi	r21, 0x00	; 0
    239e:	88 e9       	ldi	r24, 0x98	; 152
    23a0:	93 e0       	ldi	r25, 0x03	; 3
    23a2:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN5Print7printlnEii>
    Serial.println(leftIndexReading);
    23a6:	60 91 61 04 	lds	r22, 0x0461
    23aa:	70 91 62 04 	lds	r23, 0x0462
    23ae:	4a e0       	ldi	r20, 0x0A	; 10
    23b0:	50 e0       	ldi	r21, 0x00	; 0
    23b2:	88 e9       	ldi	r24, 0x98	; 152
    23b4:	93 e0       	ldi	r25, 0x03	; 3
    23b6:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN5Print7printlnEii>
    Serial.println(leftMiddleReading);
    23ba:	60 91 5f 04 	lds	r22, 0x045F
    23be:	70 91 60 04 	lds	r23, 0x0460
    23c2:	4a e0       	ldi	r20, 0x0A	; 10
    23c4:	50 e0       	ldi	r21, 0x00	; 0
    23c6:	88 e9       	ldi	r24, 0x98	; 152
    23c8:	93 e0       	ldi	r25, 0x03	; 3
    23ca:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN5Print7printlnEii>
    if ((leftThumbReading > 530) && (leftIndexReading > 530) && (leftMiddleReading > 530) && (turnSignalSent == 0)) {
    23ce:	80 91 63 04 	lds	r24, 0x0463
    23d2:	90 91 64 04 	lds	r25, 0x0464
    23d6:	83 31       	cpi	r24, 0x13	; 19
    23d8:	92 40       	sbci	r25, 0x02	; 2
    23da:	b4 f1       	brlt	.+108    	; 0x2448 <_Z24do_flex_sensor_read_taskv+0xec>
    23dc:	80 91 61 04 	lds	r24, 0x0461
    23e0:	90 91 62 04 	lds	r25, 0x0462
    23e4:	83 31       	cpi	r24, 0x13	; 19
    23e6:	92 40       	sbci	r25, 0x02	; 2
    23e8:	7c f1       	brlt	.+94     	; 0x2448 <_Z24do_flex_sensor_read_taskv+0xec>
    23ea:	80 91 5f 04 	lds	r24, 0x045F
    23ee:	90 91 60 04 	lds	r25, 0x0460
    23f2:	83 31       	cpi	r24, 0x13	; 19
    23f4:	92 40       	sbci	r25, 0x02	; 2
    23f6:	44 f1       	brlt	.+80     	; 0x2448 <_Z24do_flex_sensor_read_taskv+0xec>
    23f8:	80 91 65 04 	lds	r24, 0x0465
    23fc:	90 91 66 04 	lds	r25, 0x0466
    2400:	89 2b       	or	r24, r25
    2402:	11 f5       	brne	.+68     	; 0x2448 <_Z24do_flex_sensor_read_taskv+0xec>
        Serial.flush();
    2404:	88 e9       	ldi	r24, 0x98	; 152
    2406:	93 e0       	ldi	r25, 0x03	; 3
    2408:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_ZN14HardwareSerial5flushEv>
        sendBuffer.concat(BPLGHEADER);
    240c:	6b e6       	ldi	r22, 0x6B	; 107
    240e:	73 e0       	ldi	r23, 0x03	; 3
    2410:	8e e8       	ldi	r24, 0x8E	; 142
    2412:	94 e0       	ldi	r25, 0x04	; 4
    2414:	0e 94 84 07 	call	0xf08	; 0xf08 <_ZN6String6concatEPKc>
        sendBuffer.concat("1");
    2418:	6a e1       	ldi	r22, 0x1A	; 26
    241a:	73 e0       	ldi	r23, 0x03	; 3
    241c:	8e e8       	ldi	r24, 0x8E	; 142
    241e:	94 e0       	ldi	r25, 0x04	; 4
    2420:	0e 94 84 07 	call	0xf08	; 0xf08 <_ZN6String6concatEPKc>
        BTModu.sendData(sendBuffer);
    2424:	6e e8       	ldi	r22, 0x8E	; 142
    2426:	74 e0       	ldi	r23, 0x04	; 4
    2428:	87 e6       	ldi	r24, 0x67	; 103
    242a:	94 e0       	ldi	r25, 0x04	; 4
    242c:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <_ZN8BLEMate28sendDataER6String>
        sendBuffer = "";
    2430:	60 e2       	ldi	r22, 0x20	; 32
    2432:	71 e0       	ldi	r23, 0x01	; 1
    2434:	8e e8       	ldi	r24, 0x8E	; 142
    2436:	94 e0       	ldi	r25, 0x04	; 4
    2438:	0e 94 39 07 	call	0xe72	; 0xe72 <_ZN6StringaSEPKc>
        turnSignalSent = 1;
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	90 93 66 04 	sts	0x0466, r25
    2444:	80 93 65 04 	sts	0x0465, r24
    2448:	08 95       	ret

0000244a <_Z4loopv>:
    }
    return foundpos;
}

void loop()
{
    244a:	0f 93       	push	r16
    244c:	1f 93       	push	r17
    // The state machine for capturing that can be pretty easy: when we've read
    //  in \n\r, check to see if the string began with "RCV=". If yes, do
    //  something. If no, discard it.

    static unsigned long main_loop_timer;
    main_loop_timer = millis();
    244e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <millis>
    2452:	60 93 4f 04 	sts	0x044F, r22
    2456:	70 93 50 04 	sts	0x0450, r23
    245a:	80 93 51 04 	sts	0x0451, r24
    245e:	90 93 52 04 	sts	0x0452, r25
    
    if (main_loop_timer > (serial_task_last_run + SERIAL_READ_TASK_PERIOD)) {
    2462:	00 91 5b 04 	lds	r16, 0x045B
    2466:	10 91 5c 04 	lds	r17, 0x045C
    246a:	20 91 5d 04 	lds	r18, 0x045D
    246e:	30 91 5e 04 	lds	r19, 0x045E
    2472:	0e 5c       	subi	r16, 0xCE	; 206
    2474:	1f 4f       	sbci	r17, 0xFF	; 255
    2476:	2f 4f       	sbci	r18, 0xFF	; 255
    2478:	3f 4f       	sbci	r19, 0xFF	; 255
    247a:	06 17       	cp	r16, r22
    247c:	17 07       	cpc	r17, r23
    247e:	28 07       	cpc	r18, r24
    2480:	39 07       	cpc	r19, r25
    2482:	90 f4       	brcc	.+36     	; 0x24a8 <_Z4loopv+0x5e>
        Serial.println("Serial runs");
    2484:	6e e6       	ldi	r22, 0x6E	; 110
    2486:	73 e0       	ldi	r23, 0x03	; 3
    2488:	88 e9       	ldi	r24, 0x98	; 152
    248a:	93 e0       	ldi	r25, 0x03	; 3
    248c:	0e 94 38 03 	call	0x670	; 0x670 <_ZN5Print7printlnEPKc>
        do_serial_task();
    2490:	0e 94 68 10 	call	0x20d0	; 0x20d0 <_Z14do_serial_taskv>
        
        serial_task_last_run = millis();
    2494:	0e 94 4e 05 	call	0xa9c	; 0xa9c <millis>
    2498:	60 93 5b 04 	sts	0x045B, r22
    249c:	70 93 5c 04 	sts	0x045C, r23
    24a0:	80 93 5d 04 	sts	0x045D, r24
    24a4:	90 93 5e 04 	sts	0x045E, r25
    }

    if (main_loop_timer > (flex_sensor_read_task_last_run + FLEX_SENSOR_READ_TASK_PERIOD)) {
    24a8:	80 91 57 04 	lds	r24, 0x0457
    24ac:	90 91 58 04 	lds	r25, 0x0458
    24b0:	a0 91 59 04 	lds	r26, 0x0459
    24b4:	b0 91 5a 04 	lds	r27, 0x045A
    24b8:	8c 59       	subi	r24, 0x9C	; 156
    24ba:	9f 4f       	sbci	r25, 0xFF	; 255
    24bc:	af 4f       	sbci	r26, 0xFF	; 255
    24be:	bf 4f       	sbci	r27, 0xFF	; 255
    24c0:	40 91 4f 04 	lds	r20, 0x044F
    24c4:	50 91 50 04 	lds	r21, 0x0450
    24c8:	60 91 51 04 	lds	r22, 0x0451
    24cc:	70 91 52 04 	lds	r23, 0x0452
    24d0:	84 17       	cp	r24, r20
    24d2:	95 07       	cpc	r25, r21
    24d4:	a6 07       	cpc	r26, r22
    24d6:	b7 07       	cpc	r27, r23
    24d8:	90 f4       	brcc	.+36     	; 0x24fe <_Z4loopv+0xb4>
        Serial.println("Flex read runs");
    24da:	6a e7       	ldi	r22, 0x7A	; 122
    24dc:	73 e0       	ldi	r23, 0x03	; 3
    24de:	88 e9       	ldi	r24, 0x98	; 152
    24e0:	93 e0       	ldi	r25, 0x03	; 3
    24e2:	0e 94 38 03 	call	0x670	; 0x670 <_ZN5Print7printlnEPKc>
        do_flex_sensor_read_task();
    24e6:	0e 94 ae 11 	call	0x235c	; 0x235c <_Z24do_flex_sensor_read_taskv>
        flex_sensor_read_task_last_run = millis();
    24ea:	0e 94 4e 05 	call	0xa9c	; 0xa9c <millis>
    24ee:	60 93 57 04 	sts	0x0457, r22
    24f2:	70 93 58 04 	sts	0x0458, r23
    24f6:	80 93 59 04 	sts	0x0459, r24
    24fa:	90 93 5a 04 	sts	0x045A, r25
    }
        

    if (main_loop_timer > (led_blink_task_last_run + LED_BLINK_TASK_PERIOD)) {
    24fe:	80 91 53 04 	lds	r24, 0x0453
    2502:	90 91 54 04 	lds	r25, 0x0454
    2506:	a0 91 55 04 	lds	r26, 0x0455
    250a:	b0 91 56 04 	lds	r27, 0x0456
    250e:	88 53       	subi	r24, 0x38	; 56
    2510:	9f 4f       	sbci	r25, 0xFF	; 255
    2512:	af 4f       	sbci	r26, 0xFF	; 255
    2514:	bf 4f       	sbci	r27, 0xFF	; 255
    2516:	40 91 4f 04 	lds	r20, 0x044F
    251a:	50 91 50 04 	lds	r21, 0x0450
    251e:	60 91 51 04 	lds	r22, 0x0451
    2522:	70 91 52 04 	lds	r23, 0x0452
    2526:	84 17       	cp	r24, r20
    2528:	95 07       	cpc	r25, r21
    252a:	a6 07       	cpc	r26, r22
    252c:	b7 07       	cpc	r27, r23
    252e:	90 f4       	brcc	.+36     	; 0x2554 <_Z4loopv+0x10a>
        Serial.println("LED blink runs");
    2530:	69 e8       	ldi	r22, 0x89	; 137
    2532:	73 e0       	ldi	r23, 0x03	; 3
    2534:	88 e9       	ldi	r24, 0x98	; 152
    2536:	93 e0       	ldi	r25, 0x03	; 3
    2538:	0e 94 38 03 	call	0x670	; 0x670 <_ZN5Print7printlnEPKc>
        do_led_blink_task();
    253c:	0e 94 39 10 	call	0x2072	; 0x2072 <_Z17do_led_blink_taskv>
        led_blink_task_last_run = millis();
    2540:	0e 94 4e 05 	call	0xa9c	; 0xa9c <millis>
    2544:	60 93 53 04 	sts	0x0453, r22
    2548:	70 93 54 04 	sts	0x0454, r23
    254c:	80 93 55 04 	sts	0x0455, r24
    2550:	90 93 56 04 	sts	0x0456, r25
    }
}
    2554:	1f 91       	pop	r17
    2556:	0f 91       	pop	r16
    2558:	08 95       	ret

0000255a <__udivmodsi4>:
    255a:	a1 e2       	ldi	r26, 0x21	; 33
    255c:	1a 2e       	mov	r1, r26
    255e:	aa 1b       	sub	r26, r26
    2560:	bb 1b       	sub	r27, r27
    2562:	fd 01       	movw	r30, r26
    2564:	0d c0       	rjmp	.+26     	; 0x2580 <__udivmodsi4_ep>

00002566 <__udivmodsi4_loop>:
    2566:	aa 1f       	adc	r26, r26
    2568:	bb 1f       	adc	r27, r27
    256a:	ee 1f       	adc	r30, r30
    256c:	ff 1f       	adc	r31, r31
    256e:	a2 17       	cp	r26, r18
    2570:	b3 07       	cpc	r27, r19
    2572:	e4 07       	cpc	r30, r20
    2574:	f5 07       	cpc	r31, r21
    2576:	20 f0       	brcs	.+8      	; 0x2580 <__udivmodsi4_ep>
    2578:	a2 1b       	sub	r26, r18
    257a:	b3 0b       	sbc	r27, r19
    257c:	e4 0b       	sbc	r30, r20
    257e:	f5 0b       	sbc	r31, r21

00002580 <__udivmodsi4_ep>:
    2580:	66 1f       	adc	r22, r22
    2582:	77 1f       	adc	r23, r23
    2584:	88 1f       	adc	r24, r24
    2586:	99 1f       	adc	r25, r25
    2588:	1a 94       	dec	r1
    258a:	69 f7       	brne	.-38     	; 0x2566 <__udivmodsi4_loop>
    258c:	60 95       	com	r22
    258e:	70 95       	com	r23
    2590:	80 95       	com	r24
    2592:	90 95       	com	r25
    2594:	9b 01       	movw	r18, r22
    2596:	ac 01       	movw	r20, r24
    2598:	bd 01       	movw	r22, r26
    259a:	cf 01       	movw	r24, r30
    259c:	08 95       	ret

0000259e <__tablejump2__>:
    259e:	ee 0f       	add	r30, r30
    25a0:	ff 1f       	adc	r31, r31

000025a2 <__tablejump__>:
    25a2:	05 90       	lpm	r0, Z+
    25a4:	f4 91       	lpm	r31, Z
    25a6:	e0 2d       	mov	r30, r0
    25a8:	09 94       	ijmp

000025aa <malloc>:
    25aa:	cf 93       	push	r28
    25ac:	df 93       	push	r29
    25ae:	82 30       	cpi	r24, 0x02	; 2
    25b0:	91 05       	cpc	r25, r1
    25b2:	10 f4       	brcc	.+4      	; 0x25b8 <malloc+0xe>
    25b4:	82 e0       	ldi	r24, 0x02	; 2
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	e0 91 b2 04 	lds	r30, 0x04B2
    25bc:	f0 91 b3 04 	lds	r31, 0x04B3
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	a0 e0       	ldi	r26, 0x00	; 0
    25c6:	b0 e0       	ldi	r27, 0x00	; 0
    25c8:	30 97       	sbiw	r30, 0x00	; 0
    25ca:	39 f1       	breq	.+78     	; 0x261a <malloc+0x70>
    25cc:	40 81       	ld	r20, Z
    25ce:	51 81       	ldd	r21, Z+1	; 0x01
    25d0:	48 17       	cp	r20, r24
    25d2:	59 07       	cpc	r21, r25
    25d4:	b8 f0       	brcs	.+46     	; 0x2604 <malloc+0x5a>
    25d6:	48 17       	cp	r20, r24
    25d8:	59 07       	cpc	r21, r25
    25da:	71 f4       	brne	.+28     	; 0x25f8 <malloc+0x4e>
    25dc:	82 81       	ldd	r24, Z+2	; 0x02
    25de:	93 81       	ldd	r25, Z+3	; 0x03
    25e0:	10 97       	sbiw	r26, 0x00	; 0
    25e2:	29 f0       	breq	.+10     	; 0x25ee <malloc+0x44>
    25e4:	13 96       	adiw	r26, 0x03	; 3
    25e6:	9c 93       	st	X, r25
    25e8:	8e 93       	st	-X, r24
    25ea:	12 97       	sbiw	r26, 0x02	; 2
    25ec:	2c c0       	rjmp	.+88     	; 0x2646 <malloc+0x9c>
    25ee:	90 93 b3 04 	sts	0x04B3, r25
    25f2:	80 93 b2 04 	sts	0x04B2, r24
    25f6:	27 c0       	rjmp	.+78     	; 0x2646 <malloc+0x9c>
    25f8:	21 15       	cp	r18, r1
    25fa:	31 05       	cpc	r19, r1
    25fc:	31 f0       	breq	.+12     	; 0x260a <malloc+0x60>
    25fe:	42 17       	cp	r20, r18
    2600:	53 07       	cpc	r21, r19
    2602:	18 f0       	brcs	.+6      	; 0x260a <malloc+0x60>
    2604:	a9 01       	movw	r20, r18
    2606:	db 01       	movw	r26, r22
    2608:	01 c0       	rjmp	.+2      	; 0x260c <malloc+0x62>
    260a:	ef 01       	movw	r28, r30
    260c:	9a 01       	movw	r18, r20
    260e:	bd 01       	movw	r22, r26
    2610:	df 01       	movw	r26, r30
    2612:	02 80       	ldd	r0, Z+2	; 0x02
    2614:	f3 81       	ldd	r31, Z+3	; 0x03
    2616:	e0 2d       	mov	r30, r0
    2618:	d7 cf       	rjmp	.-82     	; 0x25c8 <malloc+0x1e>
    261a:	21 15       	cp	r18, r1
    261c:	31 05       	cpc	r19, r1
    261e:	f9 f0       	breq	.+62     	; 0x265e <malloc+0xb4>
    2620:	28 1b       	sub	r18, r24
    2622:	39 0b       	sbc	r19, r25
    2624:	24 30       	cpi	r18, 0x04	; 4
    2626:	31 05       	cpc	r19, r1
    2628:	80 f4       	brcc	.+32     	; 0x264a <malloc+0xa0>
    262a:	8a 81       	ldd	r24, Y+2	; 0x02
    262c:	9b 81       	ldd	r25, Y+3	; 0x03
    262e:	61 15       	cp	r22, r1
    2630:	71 05       	cpc	r23, r1
    2632:	21 f0       	breq	.+8      	; 0x263c <malloc+0x92>
    2634:	fb 01       	movw	r30, r22
    2636:	93 83       	std	Z+3, r25	; 0x03
    2638:	82 83       	std	Z+2, r24	; 0x02
    263a:	04 c0       	rjmp	.+8      	; 0x2644 <malloc+0x9a>
    263c:	90 93 b3 04 	sts	0x04B3, r25
    2640:	80 93 b2 04 	sts	0x04B2, r24
    2644:	fe 01       	movw	r30, r28
    2646:	32 96       	adiw	r30, 0x02	; 2
    2648:	44 c0       	rjmp	.+136    	; 0x26d2 <malloc+0x128>
    264a:	fe 01       	movw	r30, r28
    264c:	e2 0f       	add	r30, r18
    264e:	f3 1f       	adc	r31, r19
    2650:	81 93       	st	Z+, r24
    2652:	91 93       	st	Z+, r25
    2654:	22 50       	subi	r18, 0x02	; 2
    2656:	31 09       	sbc	r19, r1
    2658:	39 83       	std	Y+1, r19	; 0x01
    265a:	28 83       	st	Y, r18
    265c:	3a c0       	rjmp	.+116    	; 0x26d2 <malloc+0x128>
    265e:	20 91 b0 04 	lds	r18, 0x04B0
    2662:	30 91 b1 04 	lds	r19, 0x04B1
    2666:	23 2b       	or	r18, r19
    2668:	41 f4       	brne	.+16     	; 0x267a <malloc+0xd0>
    266a:	20 91 02 01 	lds	r18, 0x0102
    266e:	30 91 03 01 	lds	r19, 0x0103
    2672:	30 93 b1 04 	sts	0x04B1, r19
    2676:	20 93 b0 04 	sts	0x04B0, r18
    267a:	20 91 00 01 	lds	r18, 0x0100
    267e:	30 91 01 01 	lds	r19, 0x0101
    2682:	21 15       	cp	r18, r1
    2684:	31 05       	cpc	r19, r1
    2686:	41 f4       	brne	.+16     	; 0x2698 <malloc+0xee>
    2688:	2d b7       	in	r18, 0x3d	; 61
    268a:	3e b7       	in	r19, 0x3e	; 62
    268c:	40 91 04 01 	lds	r20, 0x0104
    2690:	50 91 05 01 	lds	r21, 0x0105
    2694:	24 1b       	sub	r18, r20
    2696:	35 0b       	sbc	r19, r21
    2698:	e0 91 b0 04 	lds	r30, 0x04B0
    269c:	f0 91 b1 04 	lds	r31, 0x04B1
    26a0:	e2 17       	cp	r30, r18
    26a2:	f3 07       	cpc	r31, r19
    26a4:	a0 f4       	brcc	.+40     	; 0x26ce <malloc+0x124>
    26a6:	2e 1b       	sub	r18, r30
    26a8:	3f 0b       	sbc	r19, r31
    26aa:	28 17       	cp	r18, r24
    26ac:	39 07       	cpc	r19, r25
    26ae:	78 f0       	brcs	.+30     	; 0x26ce <malloc+0x124>
    26b0:	ac 01       	movw	r20, r24
    26b2:	4e 5f       	subi	r20, 0xFE	; 254
    26b4:	5f 4f       	sbci	r21, 0xFF	; 255
    26b6:	24 17       	cp	r18, r20
    26b8:	35 07       	cpc	r19, r21
    26ba:	48 f0       	brcs	.+18     	; 0x26ce <malloc+0x124>
    26bc:	4e 0f       	add	r20, r30
    26be:	5f 1f       	adc	r21, r31
    26c0:	50 93 b1 04 	sts	0x04B1, r21
    26c4:	40 93 b0 04 	sts	0x04B0, r20
    26c8:	81 93       	st	Z+, r24
    26ca:	91 93       	st	Z+, r25
    26cc:	02 c0       	rjmp	.+4      	; 0x26d2 <malloc+0x128>
    26ce:	e0 e0       	ldi	r30, 0x00	; 0
    26d0:	f0 e0       	ldi	r31, 0x00	; 0
    26d2:	cf 01       	movw	r24, r30
    26d4:	df 91       	pop	r29
    26d6:	cf 91       	pop	r28
    26d8:	08 95       	ret

000026da <free>:
    26da:	cf 93       	push	r28
    26dc:	df 93       	push	r29
    26de:	00 97       	sbiw	r24, 0x00	; 0
    26e0:	09 f4       	brne	.+2      	; 0x26e4 <free+0xa>
    26e2:	87 c0       	rjmp	.+270    	; 0x27f2 <free+0x118>
    26e4:	fc 01       	movw	r30, r24
    26e6:	32 97       	sbiw	r30, 0x02	; 2
    26e8:	13 82       	std	Z+3, r1	; 0x03
    26ea:	12 82       	std	Z+2, r1	; 0x02
    26ec:	c0 91 b2 04 	lds	r28, 0x04B2
    26f0:	d0 91 b3 04 	lds	r29, 0x04B3
    26f4:	20 97       	sbiw	r28, 0x00	; 0
    26f6:	81 f4       	brne	.+32     	; 0x2718 <free+0x3e>
    26f8:	20 81       	ld	r18, Z
    26fa:	31 81       	ldd	r19, Z+1	; 0x01
    26fc:	28 0f       	add	r18, r24
    26fe:	39 1f       	adc	r19, r25
    2700:	80 91 b0 04 	lds	r24, 0x04B0
    2704:	90 91 b1 04 	lds	r25, 0x04B1
    2708:	82 17       	cp	r24, r18
    270a:	93 07       	cpc	r25, r19
    270c:	79 f5       	brne	.+94     	; 0x276c <free+0x92>
    270e:	f0 93 b1 04 	sts	0x04B1, r31
    2712:	e0 93 b0 04 	sts	0x04B0, r30
    2716:	6d c0       	rjmp	.+218    	; 0x27f2 <free+0x118>
    2718:	de 01       	movw	r26, r28
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	ae 17       	cp	r26, r30
    2720:	bf 07       	cpc	r27, r31
    2722:	50 f4       	brcc	.+20     	; 0x2738 <free+0x5e>
    2724:	12 96       	adiw	r26, 0x02	; 2
    2726:	4d 91       	ld	r20, X+
    2728:	5c 91       	ld	r21, X
    272a:	13 97       	sbiw	r26, 0x03	; 3
    272c:	9d 01       	movw	r18, r26
    272e:	41 15       	cp	r20, r1
    2730:	51 05       	cpc	r21, r1
    2732:	09 f1       	breq	.+66     	; 0x2776 <free+0x9c>
    2734:	da 01       	movw	r26, r20
    2736:	f3 cf       	rjmp	.-26     	; 0x271e <free+0x44>
    2738:	b3 83       	std	Z+3, r27	; 0x03
    273a:	a2 83       	std	Z+2, r26	; 0x02
    273c:	40 81       	ld	r20, Z
    273e:	51 81       	ldd	r21, Z+1	; 0x01
    2740:	84 0f       	add	r24, r20
    2742:	95 1f       	adc	r25, r21
    2744:	8a 17       	cp	r24, r26
    2746:	9b 07       	cpc	r25, r27
    2748:	71 f4       	brne	.+28     	; 0x2766 <free+0x8c>
    274a:	8d 91       	ld	r24, X+
    274c:	9c 91       	ld	r25, X
    274e:	11 97       	sbiw	r26, 0x01	; 1
    2750:	84 0f       	add	r24, r20
    2752:	95 1f       	adc	r25, r21
    2754:	02 96       	adiw	r24, 0x02	; 2
    2756:	91 83       	std	Z+1, r25	; 0x01
    2758:	80 83       	st	Z, r24
    275a:	12 96       	adiw	r26, 0x02	; 2
    275c:	8d 91       	ld	r24, X+
    275e:	9c 91       	ld	r25, X
    2760:	13 97       	sbiw	r26, 0x03	; 3
    2762:	93 83       	std	Z+3, r25	; 0x03
    2764:	82 83       	std	Z+2, r24	; 0x02
    2766:	21 15       	cp	r18, r1
    2768:	31 05       	cpc	r19, r1
    276a:	29 f4       	brne	.+10     	; 0x2776 <free+0x9c>
    276c:	f0 93 b3 04 	sts	0x04B3, r31
    2770:	e0 93 b2 04 	sts	0x04B2, r30
    2774:	3e c0       	rjmp	.+124    	; 0x27f2 <free+0x118>
    2776:	d9 01       	movw	r26, r18
    2778:	13 96       	adiw	r26, 0x03	; 3
    277a:	fc 93       	st	X, r31
    277c:	ee 93       	st	-X, r30
    277e:	12 97       	sbiw	r26, 0x02	; 2
    2780:	4d 91       	ld	r20, X+
    2782:	5d 91       	ld	r21, X+
    2784:	a4 0f       	add	r26, r20
    2786:	b5 1f       	adc	r27, r21
    2788:	ea 17       	cp	r30, r26
    278a:	fb 07       	cpc	r31, r27
    278c:	79 f4       	brne	.+30     	; 0x27ac <free+0xd2>
    278e:	80 81       	ld	r24, Z
    2790:	91 81       	ldd	r25, Z+1	; 0x01
    2792:	84 0f       	add	r24, r20
    2794:	95 1f       	adc	r25, r21
    2796:	02 96       	adiw	r24, 0x02	; 2
    2798:	d9 01       	movw	r26, r18
    279a:	11 96       	adiw	r26, 0x01	; 1
    279c:	9c 93       	st	X, r25
    279e:	8e 93       	st	-X, r24
    27a0:	82 81       	ldd	r24, Z+2	; 0x02
    27a2:	93 81       	ldd	r25, Z+3	; 0x03
    27a4:	13 96       	adiw	r26, 0x03	; 3
    27a6:	9c 93       	st	X, r25
    27a8:	8e 93       	st	-X, r24
    27aa:	12 97       	sbiw	r26, 0x02	; 2
    27ac:	e0 e0       	ldi	r30, 0x00	; 0
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	8a 81       	ldd	r24, Y+2	; 0x02
    27b2:	9b 81       	ldd	r25, Y+3	; 0x03
    27b4:	00 97       	sbiw	r24, 0x00	; 0
    27b6:	19 f0       	breq	.+6      	; 0x27be <free+0xe4>
    27b8:	fe 01       	movw	r30, r28
    27ba:	ec 01       	movw	r28, r24
    27bc:	f9 cf       	rjmp	.-14     	; 0x27b0 <free+0xd6>
    27be:	ce 01       	movw	r24, r28
    27c0:	02 96       	adiw	r24, 0x02	; 2
    27c2:	28 81       	ld	r18, Y
    27c4:	39 81       	ldd	r19, Y+1	; 0x01
    27c6:	82 0f       	add	r24, r18
    27c8:	93 1f       	adc	r25, r19
    27ca:	20 91 b0 04 	lds	r18, 0x04B0
    27ce:	30 91 b1 04 	lds	r19, 0x04B1
    27d2:	28 17       	cp	r18, r24
    27d4:	39 07       	cpc	r19, r25
    27d6:	69 f4       	brne	.+26     	; 0x27f2 <free+0x118>
    27d8:	30 97       	sbiw	r30, 0x00	; 0
    27da:	29 f4       	brne	.+10     	; 0x27e6 <free+0x10c>
    27dc:	10 92 b3 04 	sts	0x04B3, r1
    27e0:	10 92 b2 04 	sts	0x04B2, r1
    27e4:	02 c0       	rjmp	.+4      	; 0x27ea <free+0x110>
    27e6:	13 82       	std	Z+3, r1	; 0x03
    27e8:	12 82       	std	Z+2, r1	; 0x02
    27ea:	d0 93 b1 04 	sts	0x04B1, r29
    27ee:	c0 93 b0 04 	sts	0x04B0, r28
    27f2:	df 91       	pop	r29
    27f4:	cf 91       	pop	r28
    27f6:	08 95       	ret

000027f8 <realloc>:
    27f8:	a0 e0       	ldi	r26, 0x00	; 0
    27fa:	b0 e0       	ldi	r27, 0x00	; 0
    27fc:	e2 e0       	ldi	r30, 0x02	; 2
    27fe:	f4 e1       	ldi	r31, 0x14	; 20
    2800:	0c 94 00 15 	jmp	0x2a00	; 0x2a00 <__prologue_saves__+0x8>
    2804:	ec 01       	movw	r28, r24
    2806:	cb 01       	movw	r24, r22
    2808:	20 97       	sbiw	r28, 0x00	; 0
    280a:	19 f4       	brne	.+6      	; 0x2812 <realloc+0x1a>
    280c:	0e 94 d5 12 	call	0x25aa	; 0x25aa <malloc>
    2810:	b8 c0       	rjmp	.+368    	; 0x2982 <realloc+0x18a>
    2812:	fe 01       	movw	r30, r28
    2814:	e6 0f       	add	r30, r22
    2816:	f7 1f       	adc	r31, r23
    2818:	9e 01       	movw	r18, r28
    281a:	22 50       	subi	r18, 0x02	; 2
    281c:	31 09       	sbc	r19, r1
    281e:	e2 17       	cp	r30, r18
    2820:	f3 07       	cpc	r31, r19
    2822:	08 f4       	brcc	.+2      	; 0x2826 <realloc+0x2e>
    2824:	ac c0       	rjmp	.+344    	; 0x297e <realloc+0x186>
    2826:	d9 01       	movw	r26, r18
    2828:	0d 91       	ld	r16, X+
    282a:	1c 91       	ld	r17, X
    282c:	11 97       	sbiw	r26, 0x01	; 1
    282e:	06 17       	cp	r16, r22
    2830:	17 07       	cpc	r17, r23
    2832:	b8 f0       	brcs	.+46     	; 0x2862 <realloc+0x6a>
    2834:	05 30       	cpi	r16, 0x05	; 5
    2836:	11 05       	cpc	r17, r1
    2838:	08 f4       	brcc	.+2      	; 0x283c <realloc+0x44>
    283a:	9f c0       	rjmp	.+318    	; 0x297a <realloc+0x182>
    283c:	a8 01       	movw	r20, r16
    283e:	44 50       	subi	r20, 0x04	; 4
    2840:	51 09       	sbc	r21, r1
    2842:	46 17       	cp	r20, r22
    2844:	57 07       	cpc	r21, r23
    2846:	08 f4       	brcc	.+2      	; 0x284a <realloc+0x52>
    2848:	98 c0       	rjmp	.+304    	; 0x297a <realloc+0x182>
    284a:	02 50       	subi	r16, 0x02	; 2
    284c:	11 09       	sbc	r17, r1
    284e:	06 1b       	sub	r16, r22
    2850:	17 0b       	sbc	r17, r23
    2852:	01 93       	st	Z+, r16
    2854:	11 93       	st	Z+, r17
    2856:	6d 93       	st	X+, r22
    2858:	7c 93       	st	X, r23
    285a:	cf 01       	movw	r24, r30
    285c:	0e 94 6d 13 	call	0x26da	; 0x26da <free>
    2860:	8c c0       	rjmp	.+280    	; 0x297a <realloc+0x182>
    2862:	5b 01       	movw	r10, r22
    2864:	a0 1a       	sub	r10, r16
    2866:	b1 0a       	sbc	r11, r17
    2868:	4e 01       	movw	r8, r28
    286a:	80 0e       	add	r8, r16
    286c:	91 1e       	adc	r9, r17
    286e:	a0 91 b2 04 	lds	r26, 0x04B2
    2872:	b0 91 b3 04 	lds	r27, 0x04B3
    2876:	61 2c       	mov	r6, r1
    2878:	71 2c       	mov	r7, r1
    287a:	60 e0       	ldi	r22, 0x00	; 0
    287c:	70 e0       	ldi	r23, 0x00	; 0
    287e:	10 97       	sbiw	r26, 0x00	; 0
    2880:	09 f4       	brne	.+2      	; 0x2884 <realloc+0x8c>
    2882:	49 c0       	rjmp	.+146    	; 0x2916 <realloc+0x11e>
    2884:	a8 15       	cp	r26, r8
    2886:	b9 05       	cpc	r27, r9
    2888:	c9 f5       	brne	.+114    	; 0x28fc <realloc+0x104>
    288a:	ed 90       	ld	r14, X+
    288c:	fc 90       	ld	r15, X
    288e:	11 97       	sbiw	r26, 0x01	; 1
    2890:	67 01       	movw	r12, r14
    2892:	42 e0       	ldi	r20, 0x02	; 2
    2894:	c4 0e       	add	r12, r20
    2896:	d1 1c       	adc	r13, r1
    2898:	ca 14       	cp	r12, r10
    289a:	db 04       	cpc	r13, r11
    289c:	78 f1       	brcs	.+94     	; 0x28fc <realloc+0x104>
    289e:	47 01       	movw	r8, r14
    28a0:	8a 18       	sub	r8, r10
    28a2:	9b 08       	sbc	r9, r11
    28a4:	64 01       	movw	r12, r8
    28a6:	42 e0       	ldi	r20, 0x02	; 2
    28a8:	c4 0e       	add	r12, r20
    28aa:	d1 1c       	adc	r13, r1
    28ac:	12 96       	adiw	r26, 0x02	; 2
    28ae:	bc 90       	ld	r11, X
    28b0:	12 97       	sbiw	r26, 0x02	; 2
    28b2:	13 96       	adiw	r26, 0x03	; 3
    28b4:	ac 91       	ld	r26, X
    28b6:	b5 e0       	ldi	r27, 0x05	; 5
    28b8:	cb 16       	cp	r12, r27
    28ba:	d1 04       	cpc	r13, r1
    28bc:	40 f0       	brcs	.+16     	; 0x28ce <realloc+0xd6>
    28be:	b2 82       	std	Z+2, r11	; 0x02
    28c0:	a3 83       	std	Z+3, r26	; 0x03
    28c2:	91 82       	std	Z+1, r9	; 0x01
    28c4:	80 82       	st	Z, r8
    28c6:	d9 01       	movw	r26, r18
    28c8:	8d 93       	st	X+, r24
    28ca:	9c 93       	st	X, r25
    28cc:	09 c0       	rjmp	.+18     	; 0x28e0 <realloc+0xe8>
    28ce:	0e 5f       	subi	r16, 0xFE	; 254
    28d0:	1f 4f       	sbci	r17, 0xFF	; 255
    28d2:	0e 0d       	add	r16, r14
    28d4:	1f 1d       	adc	r17, r15
    28d6:	f9 01       	movw	r30, r18
    28d8:	11 83       	std	Z+1, r17	; 0x01
    28da:	00 83       	st	Z, r16
    28dc:	eb 2d       	mov	r30, r11
    28de:	fa 2f       	mov	r31, r26
    28e0:	61 15       	cp	r22, r1
    28e2:	71 05       	cpc	r23, r1
    28e4:	31 f0       	breq	.+12     	; 0x28f2 <realloc+0xfa>
    28e6:	db 01       	movw	r26, r22
    28e8:	13 96       	adiw	r26, 0x03	; 3
    28ea:	fc 93       	st	X, r31
    28ec:	ee 93       	st	-X, r30
    28ee:	12 97       	sbiw	r26, 0x02	; 2
    28f0:	44 c0       	rjmp	.+136    	; 0x297a <realloc+0x182>
    28f2:	f0 93 b3 04 	sts	0x04B3, r31
    28f6:	e0 93 b2 04 	sts	0x04B2, r30
    28fa:	3f c0       	rjmp	.+126    	; 0x297a <realloc+0x182>
    28fc:	6d 91       	ld	r22, X+
    28fe:	7c 91       	ld	r23, X
    2900:	11 97       	sbiw	r26, 0x01	; 1
    2902:	66 16       	cp	r6, r22
    2904:	77 06       	cpc	r7, r23
    2906:	08 f4       	brcc	.+2      	; 0x290a <realloc+0x112>
    2908:	3b 01       	movw	r6, r22
    290a:	bd 01       	movw	r22, r26
    290c:	12 96       	adiw	r26, 0x02	; 2
    290e:	0d 90       	ld	r0, X+
    2910:	bc 91       	ld	r27, X
    2912:	a0 2d       	mov	r26, r0
    2914:	b4 cf       	rjmp	.-152    	; 0x287e <realloc+0x86>
    2916:	60 91 b0 04 	lds	r22, 0x04B0
    291a:	70 91 b1 04 	lds	r23, 0x04B1
    291e:	68 15       	cp	r22, r8
    2920:	79 05       	cpc	r23, r9
    2922:	e9 f4       	brne	.+58     	; 0x295e <realloc+0x166>
    2924:	68 16       	cp	r6, r24
    2926:	79 06       	cpc	r7, r25
    2928:	d0 f4       	brcc	.+52     	; 0x295e <realloc+0x166>
    292a:	40 91 00 01 	lds	r20, 0x0100
    292e:	50 91 01 01 	lds	r21, 0x0101
    2932:	41 15       	cp	r20, r1
    2934:	51 05       	cpc	r21, r1
    2936:	41 f4       	brne	.+16     	; 0x2948 <realloc+0x150>
    2938:	4d b7       	in	r20, 0x3d	; 61
    293a:	5e b7       	in	r21, 0x3e	; 62
    293c:	60 91 04 01 	lds	r22, 0x0104
    2940:	70 91 05 01 	lds	r23, 0x0105
    2944:	46 1b       	sub	r20, r22
    2946:	57 0b       	sbc	r21, r23
    2948:	e4 17       	cp	r30, r20
    294a:	f5 07       	cpc	r31, r21
    294c:	c0 f4       	brcc	.+48     	; 0x297e <realloc+0x186>
    294e:	f0 93 b1 04 	sts	0x04B1, r31
    2952:	e0 93 b0 04 	sts	0x04B0, r30
    2956:	f9 01       	movw	r30, r18
    2958:	91 83       	std	Z+1, r25	; 0x01
    295a:	80 83       	st	Z, r24
    295c:	0e c0       	rjmp	.+28     	; 0x297a <realloc+0x182>
    295e:	0e 94 d5 12 	call	0x25aa	; 0x25aa <malloc>
    2962:	7c 01       	movw	r14, r24
    2964:	00 97       	sbiw	r24, 0x00	; 0
    2966:	59 f0       	breq	.+22     	; 0x297e <realloc+0x186>
    2968:	a8 01       	movw	r20, r16
    296a:	be 01       	movw	r22, r28
    296c:	0e 94 c6 14 	call	0x298c	; 0x298c <memcpy>
    2970:	ce 01       	movw	r24, r28
    2972:	0e 94 6d 13 	call	0x26da	; 0x26da <free>
    2976:	c7 01       	movw	r24, r14
    2978:	04 c0       	rjmp	.+8      	; 0x2982 <realloc+0x18a>
    297a:	ce 01       	movw	r24, r28
    297c:	02 c0       	rjmp	.+4      	; 0x2982 <realloc+0x18a>
    297e:	80 e0       	ldi	r24, 0x00	; 0
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	cd b7       	in	r28, 0x3d	; 61
    2984:	de b7       	in	r29, 0x3e	; 62
    2986:	ee e0       	ldi	r30, 0x0E	; 14
    2988:	0c 94 1c 15 	jmp	0x2a38	; 0x2a38 <__epilogue_restores__+0x8>

0000298c <memcpy>:
    298c:	fb 01       	movw	r30, r22
    298e:	dc 01       	movw	r26, r24
    2990:	02 c0       	rjmp	.+4      	; 0x2996 <memcpy+0xa>
    2992:	01 90       	ld	r0, Z+
    2994:	0d 92       	st	X+, r0
    2996:	41 50       	subi	r20, 0x01	; 1
    2998:	50 40       	sbci	r21, 0x00	; 0
    299a:	d8 f7       	brcc	.-10     	; 0x2992 <memcpy+0x6>
    299c:	08 95       	ret

0000299e <strcmp>:
    299e:	fb 01       	movw	r30, r22
    29a0:	dc 01       	movw	r26, r24
    29a2:	8d 91       	ld	r24, X+
    29a4:	01 90       	ld	r0, Z+
    29a6:	80 19       	sub	r24, r0
    29a8:	01 10       	cpse	r0, r1
    29aa:	d9 f3       	breq	.-10     	; 0x29a2 <strcmp+0x4>
    29ac:	99 0b       	sbc	r25, r25
    29ae:	08 95       	ret

000029b0 <strcpy>:
    29b0:	fb 01       	movw	r30, r22
    29b2:	dc 01       	movw	r26, r24
    29b4:	01 90       	ld	r0, Z+
    29b6:	0d 92       	st	X+, r0
    29b8:	00 20       	and	r0, r0
    29ba:	e1 f7       	brne	.-8      	; 0x29b4 <strcpy+0x4>
    29bc:	08 95       	ret

000029be <strncmp>:
    29be:	fb 01       	movw	r30, r22
    29c0:	dc 01       	movw	r26, r24
    29c2:	41 50       	subi	r20, 0x01	; 1
    29c4:	50 40       	sbci	r21, 0x00	; 0
    29c6:	30 f0       	brcs	.+12     	; 0x29d4 <strncmp+0x16>
    29c8:	8d 91       	ld	r24, X+
    29ca:	01 90       	ld	r0, Z+
    29cc:	80 19       	sub	r24, r0
    29ce:	19 f4       	brne	.+6      	; 0x29d6 <strncmp+0x18>
    29d0:	00 20       	and	r0, r0
    29d2:	b9 f7       	brne	.-18     	; 0x29c2 <strncmp+0x4>
    29d4:	88 1b       	sub	r24, r24
    29d6:	99 0b       	sbc	r25, r25
    29d8:	08 95       	ret

000029da <strncpy>:
    29da:	fb 01       	movw	r30, r22
    29dc:	dc 01       	movw	r26, r24
    29de:	41 50       	subi	r20, 0x01	; 1
    29e0:	50 40       	sbci	r21, 0x00	; 0
    29e2:	48 f0       	brcs	.+18     	; 0x29f6 <strncpy+0x1c>
    29e4:	01 90       	ld	r0, Z+
    29e6:	0d 92       	st	X+, r0
    29e8:	00 20       	and	r0, r0
    29ea:	c9 f7       	brne	.-14     	; 0x29de <strncpy+0x4>
    29ec:	01 c0       	rjmp	.+2      	; 0x29f0 <strncpy+0x16>
    29ee:	1d 92       	st	X+, r1
    29f0:	41 50       	subi	r20, 0x01	; 1
    29f2:	50 40       	sbci	r21, 0x00	; 0
    29f4:	e0 f7       	brcc	.-8      	; 0x29ee <strncpy+0x14>
    29f6:	08 95       	ret

000029f8 <__prologue_saves__>:
    29f8:	2f 92       	push	r2
    29fa:	3f 92       	push	r3
    29fc:	4f 92       	push	r4
    29fe:	5f 92       	push	r5
    2a00:	6f 92       	push	r6
    2a02:	7f 92       	push	r7
    2a04:	8f 92       	push	r8
    2a06:	9f 92       	push	r9
    2a08:	af 92       	push	r10
    2a0a:	bf 92       	push	r11
    2a0c:	cf 92       	push	r12
    2a0e:	df 92       	push	r13
    2a10:	ef 92       	push	r14
    2a12:	ff 92       	push	r15
    2a14:	0f 93       	push	r16
    2a16:	1f 93       	push	r17
    2a18:	cf 93       	push	r28
    2a1a:	df 93       	push	r29
    2a1c:	cd b7       	in	r28, 0x3d	; 61
    2a1e:	de b7       	in	r29, 0x3e	; 62
    2a20:	ca 1b       	sub	r28, r26
    2a22:	db 0b       	sbc	r29, r27
    2a24:	0f b6       	in	r0, 0x3f	; 63
    2a26:	f8 94       	cli
    2a28:	de bf       	out	0x3e, r29	; 62
    2a2a:	0f be       	out	0x3f, r0	; 63
    2a2c:	cd bf       	out	0x3d, r28	; 61
    2a2e:	09 94       	ijmp

00002a30 <__epilogue_restores__>:
    2a30:	2a 88       	ldd	r2, Y+18	; 0x12
    2a32:	39 88       	ldd	r3, Y+17	; 0x11
    2a34:	48 88       	ldd	r4, Y+16	; 0x10
    2a36:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a38:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a3a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a3c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a3e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a40:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a42:	b9 84       	ldd	r11, Y+9	; 0x09
    2a44:	c8 84       	ldd	r12, Y+8	; 0x08
    2a46:	df 80       	ldd	r13, Y+7	; 0x07
    2a48:	ee 80       	ldd	r14, Y+6	; 0x06
    2a4a:	fd 80       	ldd	r15, Y+5	; 0x05
    2a4c:	0c 81       	ldd	r16, Y+4	; 0x04
    2a4e:	1b 81       	ldd	r17, Y+3	; 0x03
    2a50:	aa 81       	ldd	r26, Y+2	; 0x02
    2a52:	b9 81       	ldd	r27, Y+1	; 0x01
    2a54:	ce 0f       	add	r28, r30
    2a56:	d1 1d       	adc	r29, r1
    2a58:	0f b6       	in	r0, 0x3f	; 63
    2a5a:	f8 94       	cli
    2a5c:	de bf       	out	0x3e, r29	; 62
    2a5e:	0f be       	out	0x3f, r0	; 63
    2a60:	cd bf       	out	0x3d, r28	; 61
    2a62:	ed 01       	movw	r28, r26
    2a64:	08 95       	ret

00002a66 <__do_global_dtors>:
    2a66:	10 e0       	ldi	r17, 0x00	; 0
    2a68:	c0 ec       	ldi	r28, 0xC0	; 192
    2a6a:	d0 e0       	ldi	r29, 0x00	; 0
    2a6c:	04 c0       	rjmp	.+8      	; 0x2a76 <__do_global_dtors+0x10>
    2a6e:	fe 01       	movw	r30, r28
    2a70:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__tablejump__>
    2a74:	22 96       	adiw	r28, 0x02	; 2
    2a76:	c2 3c       	cpi	r28, 0xC2	; 194
    2a78:	d1 07       	cpc	r29, r17
    2a7a:	c9 f7       	brne	.-14     	; 0x2a6e <__do_global_dtors+0x8>
    2a7c:	f8 94       	cli

00002a7e <__stop_program>:
    2a7e:	ff cf       	rjmp	.-2      	; 0x2a7e <__stop_program>
