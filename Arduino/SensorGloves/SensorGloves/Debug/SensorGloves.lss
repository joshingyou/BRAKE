
SensorGloves.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b2  00800100  00002274  00002308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002274  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000116  008002b2  008002b2  000024ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000024ba  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000768  00000000  00000000  000024ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00011bf8  00000000  00000000  00002c52  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000273a  00000000  00000000  0001484a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002805  00000000  00000000  00016f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001adc  00000000  00000000  0001978c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000028db  00000000  00000000  0001b268  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00009042  00000000  00000000  0001db43  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000890  00000000  00000000  00026b85  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__dtors_end>
       4:	0c 94 44 04 	jmp	0x888	; 0x888 <__vector_1>
       8:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <__vector_2>
       c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      10:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      14:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      18:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      1c:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__vector_7>
      20:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      24:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      28:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      2c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      30:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      34:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      38:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      3c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      40:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__vector_16>
      44:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      48:	0c 94 ca 01 	jmp	0x394	; 0x394 <__vector_18>
      4c:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__vector_19>
      50:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      54:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      58:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      5c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      60:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      64:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	02 00       	.word	0x0002	; ????

00000069 <digital_pin_to_timer_PGM>:
      69:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      79:	00 00 00 00                                         ....

0000007d <digital_pin_to_bit_mask_PGM>:
      7d:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8d:	04 08 10 20                                         ... 

00000091 <digital_pin_to_port_PGM>:
      91:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a1:	03 03 03 03                                         ....

000000a5 <port_to_output_PGM>:
      a5:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000af <port_to_mode_PGM>:
      af:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000000ba <__ctors_start>:
      ba:	2c 02       	muls	r18, r28
      bc:	aa 02       	muls	r26, r26
      be:	b2 0d       	add	r27, r2

000000c0 <__ctors_end>:
      c0:	c4 0d       	add	r28, r4

000000c2 <__dtors_end>:
      c2:	11 24       	eor	r1, r1
      c4:	1f be       	out	0x3f, r1	; 63
      c6:	cf ef       	ldi	r28, 0xFF	; 255
      c8:	d8 e0       	ldi	r29, 0x08	; 8
      ca:	de bf       	out	0x3e, r29	; 62
      cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
      ce:	12 e0       	ldi	r17, 0x02	; 2
      d0:	a0 e0       	ldi	r26, 0x00	; 0
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	e4 e7       	ldi	r30, 0x74	; 116
      d6:	f2 e2       	ldi	r31, 0x22	; 34
      d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
      da:	05 90       	lpm	r0, Z+
      dc:	0d 92       	st	X+, r0
      de:	a2 3b       	cpi	r26, 0xB2	; 178
      e0:	b1 07       	cpc	r27, r17
      e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
      e4:	23 e0       	ldi	r18, 0x03	; 3
      e6:	a2 eb       	ldi	r26, 0xB2	; 178
      e8:	b2 e0       	ldi	r27, 0x02	; 2
      ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
      ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
      ee:	a8 3c       	cpi	r26, 0xC8	; 200
      f0:	b2 07       	cpc	r27, r18
      f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>

000000f4 <__do_global_ctors>:
      f4:	10 e0       	ldi	r17, 0x00	; 0
      f6:	c0 ec       	ldi	r28, 0xC0	; 192
      f8:	d0 e0       	ldi	r29, 0x00	; 0
      fa:	04 c0       	rjmp	.+8      	; 0x104 <__do_global_ctors+0x10>
      fc:	22 97       	sbiw	r28, 0x02	; 2
      fe:	fe 01       	movw	r30, r28
     100:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__tablejump__>
     104:	ca 3b       	cpi	r28, 0xBA	; 186
     106:	d1 07       	cpc	r29, r17
     108:	c9 f7       	brne	.-14     	; 0xfc <__do_global_ctors+0x8>
     10a:	0e 94 ac 0c 	call	0x1958	; 0x1958 <main>
     10e:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__do_global_dtors>

00000112 <__bad_interrupt>:
     112:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000116 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     116:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     118:	81 8d       	ldd	r24, Z+25	; 0x19
     11a:	22 8d       	ldd	r18, Z+26	; 0x1a
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	80 5c       	subi	r24, 0xC0	; 192
     120:	9f 4f       	sbci	r25, 0xFF	; 255
     122:	82 1b       	sub	r24, r18
     124:	91 09       	sbc	r25, r1
}
     126:	8f 73       	andi	r24, 0x3F	; 63
     128:	99 27       	eor	r25, r25
     12a:	08 95       	ret

0000012c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     12c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     12e:	91 8d       	ldd	r25, Z+25	; 0x19
     130:	82 8d       	ldd	r24, Z+26	; 0x1a
     132:	98 17       	cp	r25, r24
     134:	31 f0       	breq	.+12     	; 0x142 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     136:	82 8d       	ldd	r24, Z+26	; 0x1a
     138:	e8 0f       	add	r30, r24
     13a:	f1 1d       	adc	r31, r1
     13c:	85 8d       	ldd	r24, Z+29	; 0x1d
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     142:	8f ef       	ldi	r24, 0xFF	; 255
     144:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     146:	08 95       	ret

00000148 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     148:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     14a:	91 8d       	ldd	r25, Z+25	; 0x19
     14c:	82 8d       	ldd	r24, Z+26	; 0x1a
     14e:	98 17       	cp	r25, r24
     150:	61 f0       	breq	.+24     	; 0x16a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     152:	82 8d       	ldd	r24, Z+26	; 0x1a
     154:	df 01       	movw	r26, r30
     156:	a8 0f       	add	r26, r24
     158:	b1 1d       	adc	r27, r1
     15a:	5d 96       	adiw	r26, 0x1d	; 29
     15c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     15e:	92 8d       	ldd	r25, Z+26	; 0x1a
     160:	9f 5f       	subi	r25, 0xFF	; 255
     162:	9f 73       	andi	r25, 0x3F	; 63
     164:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     16a:	8f ef       	ldi	r24, 0xFF	; 255
     16c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     16e:	08 95       	ret

00000170 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     170:	82 e2       	ldi	r24, 0x22	; 34
     172:	92 e0       	ldi	r25, 0x02	; 2
     174:	89 2b       	or	r24, r25
     176:	49 f0       	breq	.+18     	; 0x18a <_Z14serialEventRunv+0x1a>
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	89 2b       	or	r24, r25
     17e:	29 f0       	breq	.+10     	; 0x18a <_Z14serialEventRunv+0x1a>
     180:	0e 94 22 02 	call	0x444	; 0x444 <_Z17Serial0_availablev>
     184:	81 11       	cpse	r24, r1
     186:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     18a:	08 95       	ret

0000018c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     18c:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     18e:	84 8d       	ldd	r24, Z+28	; 0x1c
     190:	df 01       	movw	r26, r30
     192:	a8 0f       	add	r26, r24
     194:	b1 1d       	adc	r27, r1
     196:	a3 5a       	subi	r26, 0xA3	; 163
     198:	bf 4f       	sbci	r27, 0xFF	; 255
     19a:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     19c:	84 8d       	ldd	r24, Z+28	; 0x1c
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	01 96       	adiw	r24, 0x01	; 1
     1a2:	8f 73       	andi	r24, 0x3F	; 63
     1a4:	99 27       	eor	r25, r25
     1a6:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     1a8:	a6 89       	ldd	r26, Z+22	; 0x16
     1aa:	b7 89       	ldd	r27, Z+23	; 0x17
     1ac:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     1ae:	a0 89       	ldd	r26, Z+16	; 0x10
     1b0:	b1 89       	ldd	r27, Z+17	; 0x11
     1b2:	8c 91       	ld	r24, X
     1b4:	80 64       	ori	r24, 0x40	; 64
     1b6:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     1b8:	93 8d       	ldd	r25, Z+27	; 0x1b
     1ba:	84 8d       	ldd	r24, Z+28	; 0x1c
     1bc:	98 13       	cpse	r25, r24
     1be:	06 c0       	rjmp	.+12     	; 0x1cc <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     1c0:	02 88       	ldd	r0, Z+18	; 0x12
     1c2:	f3 89       	ldd	r31, Z+19	; 0x13
     1c4:	e0 2d       	mov	r30, r0
     1c6:	80 81       	ld	r24, Z
     1c8:	8f 7d       	andi	r24, 0xDF	; 223
     1ca:	80 83       	st	Z, r24
     1cc:	08 95       	ret

000001ce <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     1ce:	cf 93       	push	r28
     1d0:	df 93       	push	r29
     1d2:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     1d4:	88 8d       	ldd	r24, Y+24	; 0x18
     1d6:	88 23       	and	r24, r24
     1d8:	c9 f0       	breq	.+50     	; 0x20c <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     1da:	ea 89       	ldd	r30, Y+18	; 0x12
     1dc:	fb 89       	ldd	r31, Y+19	; 0x13
     1de:	80 81       	ld	r24, Z
     1e0:	85 fd       	sbrc	r24, 5
     1e2:	05 c0       	rjmp	.+10     	; 0x1ee <_ZN14HardwareSerial5flushEv+0x20>
     1e4:	a8 89       	ldd	r26, Y+16	; 0x10
     1e6:	b9 89       	ldd	r27, Y+17	; 0x11
     1e8:	8c 91       	ld	r24, X
     1ea:	86 fd       	sbrc	r24, 6
     1ec:	0f c0       	rjmp	.+30     	; 0x20c <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	07 fc       	sbrc	r0, 7
     1f2:	f5 cf       	rjmp	.-22     	; 0x1de <_ZN14HardwareSerial5flushEv+0x10>
     1f4:	80 81       	ld	r24, Z
     1f6:	85 ff       	sbrs	r24, 5
     1f8:	f2 cf       	rjmp	.-28     	; 0x1de <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     1fa:	a8 89       	ldd	r26, Y+16	; 0x10
     1fc:	b9 89       	ldd	r27, Y+17	; 0x11
     1fe:	8c 91       	ld	r24, X
     200:	85 ff       	sbrs	r24, 5
     202:	ed cf       	rjmp	.-38     	; 0x1de <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     204:	ce 01       	movw	r24, r28
     206:	0e 94 c6 00 	call	0x18c	; 0x18c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     20a:	e7 cf       	rjmp	.-50     	; 0x1da <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     20c:	df 91       	pop	r29
     20e:	cf 91       	pop	r28
     210:	08 95       	ret

00000212 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     212:	cf 92       	push	r12
     214:	df 92       	push	r13
     216:	ff 92       	push	r15
     218:	0f 93       	push	r16
     21a:	1f 93       	push	r17
     21c:	cf 93       	push	r28
     21e:	df 93       	push	r29
     220:	1f 92       	push	r1
     222:	cd b7       	in	r28, 0x3d	; 61
     224:	de b7       	in	r29, 0x3e	; 62
     226:	6c 01       	movw	r12, r24
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     228:	dc 01       	movw	r26, r24
     22a:	5b 96       	adiw	r26, 0x1b	; 27
     22c:	9c 91       	ld	r25, X
     22e:	5b 97       	sbiw	r26, 0x1b	; 27
     230:	5c 96       	adiw	r26, 0x1c	; 28
     232:	8c 91       	ld	r24, X
     234:	5c 97       	sbiw	r26, 0x1c	; 28
     236:	98 13       	cpse	r25, r24
     238:	07 c0       	rjmp	.+14     	; 0x248 <_ZN14HardwareSerial5writeEh+0x36>
     23a:	50 96       	adiw	r26, 0x10	; 16
     23c:	ed 91       	ld	r30, X+
     23e:	fc 91       	ld	r31, X
     240:	51 97       	sbiw	r26, 0x11	; 17
     242:	80 81       	ld	r24, Z
     244:	85 fd       	sbrc	r24, 5
     246:	32 c0       	rjmp	.+100    	; 0x2ac <_ZN14HardwareSerial5writeEh+0x9a>
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     248:	f6 01       	movw	r30, r12
     24a:	03 8d       	ldd	r16, Z+27	; 0x1b
     24c:	10 e0       	ldi	r17, 0x00	; 0
     24e:	0f 5f       	subi	r16, 0xFF	; 255
     250:	1f 4f       	sbci	r17, 0xFF	; 255
     252:	0f 73       	andi	r16, 0x3F	; 63
     254:	11 27       	eor	r17, r17
     256:	f0 2e       	mov	r15, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     258:	f6 01       	movw	r30, r12
     25a:	84 8d       	ldd	r24, Z+28	; 0x1c
     25c:	f8 12       	cpse	r15, r24
     25e:	11 c0       	rjmp	.+34     	; 0x282 <_ZN14HardwareSerial5writeEh+0x70>
    if (bit_is_clear(SREG, SREG_I)) {
     260:	0f b6       	in	r0, 0x3f	; 63
     262:	07 fc       	sbrc	r0, 7
     264:	f9 cf       	rjmp	.-14     	; 0x258 <_ZN14HardwareSerial5writeEh+0x46>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     266:	d6 01       	movw	r26, r12
     268:	50 96       	adiw	r26, 0x10	; 16
     26a:	ed 91       	ld	r30, X+
     26c:	fc 91       	ld	r31, X
     26e:	51 97       	sbiw	r26, 0x11	; 17
     270:	80 81       	ld	r24, Z
     272:	85 ff       	sbrs	r24, 5
     274:	f1 cf       	rjmp	.-30     	; 0x258 <_ZN14HardwareSerial5writeEh+0x46>
	_tx_udr_empty_irq();
     276:	c6 01       	movw	r24, r12
     278:	69 83       	std	Y+1, r22	; 0x01
     27a:	0e 94 c6 00 	call	0x18c	; 0x18c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     27e:	69 81       	ldd	r22, Y+1	; 0x01
     280:	eb cf       	rjmp	.-42     	; 0x258 <_ZN14HardwareSerial5writeEh+0x46>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     282:	83 8d       	ldd	r24, Z+27	; 0x1b
     284:	e8 0f       	add	r30, r24
     286:	f1 1d       	adc	r31, r1
     288:	e3 5a       	subi	r30, 0xA3	; 163
     28a:	ff 4f       	sbci	r31, 0xFF	; 255
     28c:	60 83       	st	Z, r22
  _tx_buffer_head = i;
     28e:	d6 01       	movw	r26, r12
     290:	5b 96       	adiw	r26, 0x1b	; 27
     292:	0c 93       	st	X, r16
     294:	5b 97       	sbiw	r26, 0x1b	; 27
	
  sbi(*_ucsrb, UDRIE0);
     296:	52 96       	adiw	r26, 0x12	; 18
     298:	ed 91       	ld	r30, X+
     29a:	fc 91       	ld	r31, X
     29c:	53 97       	sbiw	r26, 0x13	; 19
     29e:	80 81       	ld	r24, Z
     2a0:	80 62       	ori	r24, 0x20	; 32
     2a2:	80 83       	st	Z, r24
  _written = true;
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	58 96       	adiw	r26, 0x18	; 24
     2a8:	8c 93       	st	X, r24
     2aa:	0d c0       	rjmp	.+26     	; 0x2c6 <_ZN14HardwareSerial5writeEh+0xb4>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     2ac:	d6 01       	movw	r26, r12
     2ae:	56 96       	adiw	r26, 0x16	; 22
     2b0:	ed 91       	ld	r30, X+
     2b2:	fc 91       	ld	r31, X
     2b4:	57 97       	sbiw	r26, 0x17	; 23
     2b6:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     2b8:	50 96       	adiw	r26, 0x10	; 16
     2ba:	ed 91       	ld	r30, X+
     2bc:	fc 91       	ld	r31, X
     2be:	51 97       	sbiw	r26, 0x11	; 17
     2c0:	80 81       	ld	r24, Z
     2c2:	80 64       	ori	r24, 0x40	; 64
     2c4:	80 83       	st	Z, r24
	
  sbi(*_ucsrb, UDRIE0);
  _written = true;
  
  return 1;
}
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	0f 90       	pop	r0
     2cc:	df 91       	pop	r29
     2ce:	cf 91       	pop	r28
     2d0:	1f 91       	pop	r17
     2d2:	0f 91       	pop	r16
     2d4:	ff 90       	pop	r15
     2d6:	df 90       	pop	r13
     2d8:	cf 90       	pop	r12
     2da:	08 95       	ret

000002dc <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     2dc:	bf 92       	push	r11
     2de:	cf 92       	push	r12
     2e0:	df 92       	push	r13
     2e2:	ef 92       	push	r14
     2e4:	ff 92       	push	r15
     2e6:	cf 93       	push	r28
     2e8:	df 93       	push	r29
     2ea:	ec 01       	movw	r28, r24
     2ec:	6a 01       	movw	r12, r20
     2ee:	7b 01       	movw	r14, r22
     2f0:	b2 2e       	mov	r11, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     2f2:	60 e8       	ldi	r22, 0x80	; 128
     2f4:	74 e8       	ldi	r23, 0x84	; 132
     2f6:	8e e1       	ldi	r24, 0x1E	; 30
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	a7 01       	movw	r20, r14
     2fc:	96 01       	movw	r18, r12
     2fe:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__udivmodsi4>
     302:	21 50       	subi	r18, 0x01	; 1
     304:	31 09       	sbc	r19, r1
     306:	41 09       	sbc	r20, r1
     308:	51 09       	sbc	r21, r1
     30a:	56 95       	lsr	r21
     30c:	47 95       	ror	r20
     30e:	37 95       	ror	r19
     310:	27 95       	ror	r18
  *_ucsra = 1 << U2X0;
     312:	e8 89       	ldd	r30, Y+16	; 0x10
     314:	f9 89       	ldd	r31, Y+17	; 0x11
     316:	82 e0       	ldi	r24, 0x02	; 2
     318:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     31a:	21 15       	cp	r18, r1
     31c:	80 e1       	ldi	r24, 0x10	; 16
     31e:	38 07       	cpc	r19, r24
     320:	98 f0       	brcs	.+38     	; 0x348 <_ZN14HardwareSerial5beginEmh+0x6c>
  {
    *_ucsra = 0;
     322:	e8 89       	ldd	r30, Y+16	; 0x10
     324:	f9 89       	ldd	r31, Y+17	; 0x11
     326:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     328:	60 e4       	ldi	r22, 0x40	; 64
     32a:	72 e4       	ldi	r23, 0x42	; 66
     32c:	8f e0       	ldi	r24, 0x0F	; 15
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	a7 01       	movw	r20, r14
     332:	96 01       	movw	r18, r12
     334:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__udivmodsi4>
     338:	21 50       	subi	r18, 0x01	; 1
     33a:	31 09       	sbc	r19, r1
     33c:	41 09       	sbc	r20, r1
     33e:	51 09       	sbc	r21, r1
     340:	56 95       	lsr	r21
     342:	47 95       	ror	r20
     344:	37 95       	ror	r19
     346:	27 95       	ror	r18
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     348:	ec 85       	ldd	r30, Y+12	; 0x0c
     34a:	fd 85       	ldd	r31, Y+13	; 0x0d
     34c:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     34e:	ee 85       	ldd	r30, Y+14	; 0x0e
     350:	ff 85       	ldd	r31, Y+15	; 0x0f
     352:	20 83       	st	Z, r18

  _written = false;
     354:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     356:	ec 89       	ldd	r30, Y+20	; 0x14
     358:	fd 89       	ldd	r31, Y+21	; 0x15
     35a:	b0 82       	st	Z, r11
  
  sbi(*_ucsrb, RXEN0);
     35c:	ea 89       	ldd	r30, Y+18	; 0x12
     35e:	fb 89       	ldd	r31, Y+19	; 0x13
     360:	80 81       	ld	r24, Z
     362:	80 61       	ori	r24, 0x10	; 16
     364:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     366:	ea 89       	ldd	r30, Y+18	; 0x12
     368:	fb 89       	ldd	r31, Y+19	; 0x13
     36a:	80 81       	ld	r24, Z
     36c:	88 60       	ori	r24, 0x08	; 8
     36e:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     370:	ea 89       	ldd	r30, Y+18	; 0x12
     372:	fb 89       	ldd	r31, Y+19	; 0x13
     374:	80 81       	ld	r24, Z
     376:	80 68       	ori	r24, 0x80	; 128
     378:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     37a:	ea 89       	ldd	r30, Y+18	; 0x12
     37c:	fb 89       	ldd	r31, Y+19	; 0x13
     37e:	80 81       	ld	r24, Z
     380:	8f 7d       	andi	r24, 0xDF	; 223
     382:	80 83       	st	Z, r24
}
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	ff 90       	pop	r15
     38a:	ef 90       	pop	r14
     38c:	df 90       	pop	r13
     38e:	cf 90       	pop	r12
     390:	bf 90       	pop	r11
     392:	08 95       	ret

00000394 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     394:	1f 92       	push	r1
     396:	0f 92       	push	r0
     398:	0f b6       	in	r0, 0x3f	; 63
     39a:	0f 92       	push	r0
     39c:	11 24       	eor	r1, r1
     39e:	2f 93       	push	r18
     3a0:	8f 93       	push	r24
     3a2:	9f 93       	push	r25
     3a4:	ef 93       	push	r30
     3a6:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     3a8:	e0 91 c2 02 	lds	r30, 0x02C2
     3ac:	f0 91 c3 02 	lds	r31, 0x02C3
     3b0:	80 81       	ld	r24, Z
     3b2:	e0 91 c8 02 	lds	r30, 0x02C8
     3b6:	f0 91 c9 02 	lds	r31, 0x02C9
     3ba:	82 fd       	sbrc	r24, 2
     3bc:	12 c0       	rjmp	.+36     	; 0x3e2 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     3be:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     3c0:	80 91 cb 02 	lds	r24, 0x02CB
     3c4:	8f 5f       	subi	r24, 0xFF	; 255
     3c6:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     3c8:	20 91 cc 02 	lds	r18, 0x02CC
     3cc:	82 17       	cp	r24, r18
     3ce:	51 f0       	breq	.+20     	; 0x3e4 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     3d0:	e0 91 cb 02 	lds	r30, 0x02CB
     3d4:	f0 e0       	ldi	r31, 0x00	; 0
     3d6:	ee 54       	subi	r30, 0x4E	; 78
     3d8:	fd 4f       	sbci	r31, 0xFD	; 253
     3da:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     3dc:	80 93 cb 02 	sts	0x02CB, r24
     3e0:	01 c0       	rjmp	.+2      	; 0x3e4 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     3e2:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     3e4:	ff 91       	pop	r31
     3e6:	ef 91       	pop	r30
     3e8:	9f 91       	pop	r25
     3ea:	8f 91       	pop	r24
     3ec:	2f 91       	pop	r18
     3ee:	0f 90       	pop	r0
     3f0:	0f be       	out	0x3f, r0	; 63
     3f2:	0f 90       	pop	r0
     3f4:	1f 90       	pop	r1
     3f6:	18 95       	reti

000003f8 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     3f8:	1f 92       	push	r1
     3fa:	0f 92       	push	r0
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	0f 92       	push	r0
     400:	11 24       	eor	r1, r1
     402:	2f 93       	push	r18
     404:	3f 93       	push	r19
     406:	4f 93       	push	r20
     408:	5f 93       	push	r21
     40a:	6f 93       	push	r22
     40c:	7f 93       	push	r23
     40e:	8f 93       	push	r24
     410:	9f 93       	push	r25
     412:	af 93       	push	r26
     414:	bf 93       	push	r27
     416:	ef 93       	push	r30
     418:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     41a:	82 eb       	ldi	r24, 0xB2	; 178
     41c:	92 e0       	ldi	r25, 0x02	; 2
     41e:	0e 94 c6 00 	call	0x18c	; 0x18c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     422:	ff 91       	pop	r31
     424:	ef 91       	pop	r30
     426:	bf 91       	pop	r27
     428:	af 91       	pop	r26
     42a:	9f 91       	pop	r25
     42c:	8f 91       	pop	r24
     42e:	7f 91       	pop	r23
     430:	6f 91       	pop	r22
     432:	5f 91       	pop	r21
     434:	4f 91       	pop	r20
     436:	3f 91       	pop	r19
     438:	2f 91       	pop	r18
     43a:	0f 90       	pop	r0
     43c:	0f be       	out	0x3f, r0	; 63
     43e:	0f 90       	pop	r0
     440:	1f 90       	pop	r1
     442:	18 95       	reti

00000444 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     444:	82 eb       	ldi	r24, 0xB2	; 178
     446:	92 e0       	ldi	r25, 0x02	; 2
     448:	0e 94 8b 00 	call	0x116	; 0x116 <_ZN14HardwareSerial9availableEv>
     44c:	21 e0       	ldi	r18, 0x01	; 1
     44e:	89 2b       	or	r24, r25
     450:	09 f4       	brne	.+2      	; 0x454 <_Z17Serial0_availablev+0x10>
     452:	20 e0       	ldi	r18, 0x00	; 0
}
     454:	82 2f       	mov	r24, r18
     456:	08 95       	ret

00000458 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     458:	10 92 b5 02 	sts	0x02B5, r1
     45c:	10 92 b4 02 	sts	0x02B4, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     460:	88 ee       	ldi	r24, 0xE8	; 232
     462:	93 e0       	ldi	r25, 0x03	; 3
     464:	a0 e0       	ldi	r26, 0x00	; 0
     466:	b0 e0       	ldi	r27, 0x00	; 0
     468:	80 93 b6 02 	sts	0x02B6, r24
     46c:	90 93 b7 02 	sts	0x02B7, r25
     470:	a0 93 b8 02 	sts	0x02B8, r26
     474:	b0 93 b9 02 	sts	0x02B9, r27
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     478:	8c e0       	ldi	r24, 0x0C	; 12
     47a:	91 e0       	ldi	r25, 0x01	; 1
     47c:	90 93 b3 02 	sts	0x02B3, r25
     480:	80 93 b2 02 	sts	0x02B2, r24
     484:	85 ec       	ldi	r24, 0xC5	; 197
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	90 93 bf 02 	sts	0x02BF, r25
     48c:	80 93 be 02 	sts	0x02BE, r24
     490:	84 ec       	ldi	r24, 0xC4	; 196
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	90 93 c1 02 	sts	0x02C1, r25
     498:	80 93 c0 02 	sts	0x02C0, r24
     49c:	80 ec       	ldi	r24, 0xC0	; 192
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	90 93 c3 02 	sts	0x02C3, r25
     4a4:	80 93 c2 02 	sts	0x02C2, r24
     4a8:	81 ec       	ldi	r24, 0xC1	; 193
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	90 93 c5 02 	sts	0x02C5, r25
     4b0:	80 93 c4 02 	sts	0x02C4, r24
     4b4:	82 ec       	ldi	r24, 0xC2	; 194
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	90 93 c7 02 	sts	0x02C7, r25
     4bc:	80 93 c6 02 	sts	0x02C6, r24
     4c0:	86 ec       	ldi	r24, 0xC6	; 198
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	90 93 c9 02 	sts	0x02C9, r25
     4c8:	80 93 c8 02 	sts	0x02C8, r24
     4cc:	10 92 cb 02 	sts	0x02CB, r1
     4d0:	10 92 cc 02 	sts	0x02CC, r1
     4d4:	10 92 cd 02 	sts	0x02CD, r1
     4d8:	10 92 ce 02 	sts	0x02CE, r1
     4dc:	08 95       	ret

000004de <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
     4de:	08 95       	ret

000004e0 <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
     4e0:	af 92       	push	r10
     4e2:	bf 92       	push	r11
     4e4:	cf 92       	push	r12
     4e6:	df 92       	push	r13
     4e8:	ef 92       	push	r14
     4ea:	ff 92       	push	r15
     4ec:	0f 93       	push	r16
     4ee:	1f 93       	push	r17
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	6c 01       	movw	r12, r24
     4f6:	7b 01       	movw	r14, r22
    size_t n = 0;
    for (int i =0; i < 3; i++)
     4f8:	c0 e0       	ldi	r28, 0x00	; 0
     4fa:	d0 e0       	ldi	r29, 0x00	; 0
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
     4fc:	00 e0       	ldi	r16, 0x00	; 0
     4fe:	10 e0       	ldi	r17, 0x00	; 0
     500:	f6 01       	movw	r30, r12
     502:	ec 0f       	add	r30, r28
     504:	fd 1f       	adc	r31, r29
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
     506:	4a e0       	ldi	r20, 0x0A	; 10
     508:	50 e0       	ldi	r21, 0x00	; 0
     50a:	62 81       	ldd	r22, Z+2	; 0x02
     50c:	c7 01       	movw	r24, r14
     50e:	0e 94 ac 03 	call	0x758	; 0x758 <_ZN5Print5printEhi>
     512:	5c 01       	movw	r10, r24
        n += p.print('.');
     514:	6e e2       	ldi	r22, 0x2E	; 46
     516:	c7 01       	movw	r24, r14
     518:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN5Print5printEc>
size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
     51c:	8a 0d       	add	r24, r10
     51e:	9b 1d       	adc	r25, r11
        n += p.print('.');
     520:	08 0f       	add	r16, r24
     522:	19 1f       	adc	r17, r25
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
     524:	21 96       	adiw	r28, 0x01	; 1
     526:	c3 30       	cpi	r28, 0x03	; 3
     528:	d1 05       	cpc	r29, r1
     52a:	51 f7       	brne	.-44     	; 0x500 <_ZNK9IPAddress7printToER5Print+0x20>
    {
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
     52c:	4a e0       	ldi	r20, 0x0A	; 10
     52e:	50 e0       	ldi	r21, 0x00	; 0
     530:	f6 01       	movw	r30, r12
     532:	65 81       	ldd	r22, Z+5	; 0x05
     534:	c7 01       	movw	r24, r14
     536:	0e 94 ac 03 	call	0x758	; 0x758 <_ZN5Print5printEhi>
    return n;
}
     53a:	80 0f       	add	r24, r16
     53c:	91 1f       	adc	r25, r17
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	1f 91       	pop	r17
     544:	0f 91       	pop	r16
     546:	ff 90       	pop	r15
     548:	ef 90       	pop	r14
     54a:	df 90       	pop	r13
     54c:	cf 90       	pop	r12
     54e:	bf 90       	pop	r11
     550:	af 90       	pop	r10
     552:	08 95       	ret

00000554 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
     554:	8c e1       	ldi	r24, 0x1C	; 28
     556:	91 e0       	ldi	r25, 0x01	; 1
     558:	90 93 50 03 	sts	0x0350, r25
     55c:	80 93 4f 03 	sts	0x034F, r24
{
    _address.bytes[0] = first_octet;
     560:	10 92 51 03 	sts	0x0351, r1
    _address.bytes[1] = second_octet;
     564:	10 92 52 03 	sts	0x0352, r1
    _address.bytes[2] = third_octet;
     568:	10 92 53 03 	sts	0x0353, r1
    _address.bytes[3] = fourth_octet;
     56c:	10 92 54 03 	sts	0x0354, r1
     570:	08 95       	ret

00000572 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     572:	cf 92       	push	r12
     574:	df 92       	push	r13
     576:	ef 92       	push	r14
     578:	ff 92       	push	r15
     57a:	0f 93       	push	r16
     57c:	1f 93       	push	r17
     57e:	cf 93       	push	r28
     580:	df 93       	push	r29
     582:	6c 01       	movw	r12, r24
     584:	7a 01       	movw	r14, r20
     586:	eb 01       	movw	r28, r22
     588:	e6 0e       	add	r14, r22
     58a:	f7 1e       	adc	r15, r23
  size_t n = 0;
     58c:	00 e0       	ldi	r16, 0x00	; 0
     58e:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
     590:	ce 15       	cp	r28, r14
     592:	df 05       	cpc	r29, r15
     594:	61 f0       	breq	.+24     	; 0x5ae <_ZN5Print5writeEPKhj+0x3c>
    n += write(*buffer++);
     596:	69 91       	ld	r22, Y+
     598:	d6 01       	movw	r26, r12
     59a:	ed 91       	ld	r30, X+
     59c:	fc 91       	ld	r31, X
     59e:	01 90       	ld	r0, Z+
     5a0:	f0 81       	ld	r31, Z
     5a2:	e0 2d       	mov	r30, r0
     5a4:	c6 01       	movw	r24, r12
     5a6:	09 95       	icall
     5a8:	08 0f       	add	r16, r24
     5aa:	19 1f       	adc	r17, r25
     5ac:	f1 cf       	rjmp	.-30     	; 0x590 <_ZN5Print5writeEPKhj+0x1e>
  }
  return n;
}
     5ae:	c8 01       	movw	r24, r16
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	1f 91       	pop	r17
     5b6:	0f 91       	pop	r16
     5b8:	ff 90       	pop	r15
     5ba:	ef 90       	pop	r14
     5bc:	df 90       	pop	r13
     5be:	cf 90       	pop	r12
     5c0:	08 95       	ret

000005c2 <_ZN5Print5writeEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     5c2:	61 15       	cp	r22, r1
     5c4:	71 05       	cpc	r23, r1
     5c6:	81 f0       	breq	.+32     	; 0x5e8 <_ZN5Print5writeEPKc+0x26>
      return write((const uint8_t *)str, strlen(str));
     5c8:	db 01       	movw	r26, r22
     5ca:	0d 90       	ld	r0, X+
     5cc:	00 20       	and	r0, r0
     5ce:	e9 f7       	brne	.-6      	; 0x5ca <_ZN5Print5writeEPKc+0x8>
     5d0:	ad 01       	movw	r20, r26
     5d2:	41 50       	subi	r20, 0x01	; 1
     5d4:	51 09       	sbc	r21, r1
     5d6:	46 1b       	sub	r20, r22
     5d8:	57 0b       	sbc	r21, r23
     5da:	dc 01       	movw	r26, r24
     5dc:	ed 91       	ld	r30, X+
     5de:	fc 91       	ld	r31, X
     5e0:	02 80       	ldd	r0, Z+2	; 0x02
     5e2:	f3 81       	ldd	r31, Z+3	; 0x03
     5e4:	e0 2d       	mov	r30, r0
     5e6:	09 94       	ijmp
    }
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	08 95       	ret

000005ee <_ZN5Print5printERK6String>:
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
     5ee:	dc 01       	movw	r26, r24
     5f0:	ed 91       	ld	r30, X+
     5f2:	fc 91       	ld	r31, X
     5f4:	db 01       	movw	r26, r22
     5f6:	14 96       	adiw	r26, 0x04	; 4
     5f8:	4d 91       	ld	r20, X+
     5fa:	5c 91       	ld	r21, X
     5fc:	15 97       	sbiw	r26, 0x05	; 5
     5fe:	6d 91       	ld	r22, X+
     600:	7c 91       	ld	r23, X
     602:	02 80       	ldd	r0, Z+2	; 0x02
     604:	f3 81       	ldd	r31, Z+3	; 0x03
     606:	e0 2d       	mov	r30, r0
     608:	09 94       	ijmp

0000060a <_ZN5Print5printEPKc>:
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     60a:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <_ZN5Print5writeEPKc>

0000060e <_ZN5Print5printEc>:
}

size_t Print::print(char c)
{
  return write(c);
     60e:	dc 01       	movw	r26, r24
     610:	ed 91       	ld	r30, X+
     612:	fc 91       	ld	r31, X
     614:	01 90       	ld	r0, Z+
     616:	f0 81       	ld	r31, Z
     618:	e0 2d       	mov	r30, r0
     61a:	09 94       	ijmp

0000061c <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
     61c:	0f 93       	push	r16
     61e:	1f 93       	push	r17
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
     624:	ec 01       	movw	r28, r24
  size_t n = print('\r');
     626:	6d e0       	ldi	r22, 0x0D	; 13
     628:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN5Print5printEc>
     62c:	8c 01       	movw	r16, r24
  n += print('\n');
     62e:	6a e0       	ldi	r22, 0x0A	; 10
     630:	ce 01       	movw	r24, r28
     632:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN5Print5printEc>
  return n;
}
     636:	80 0f       	add	r24, r16
     638:	91 1f       	adc	r25, r17
     63a:	df 91       	pop	r29
     63c:	cf 91       	pop	r28
     63e:	1f 91       	pop	r17
     640:	0f 91       	pop	r16
     642:	08 95       	ret

00000644 <_ZN5Print7printlnERK6String>:

size_t Print::println(const String &s)
{
     644:	0f 93       	push	r16
     646:	1f 93       	push	r17
     648:	cf 93       	push	r28
     64a:	df 93       	push	r29
     64c:	ec 01       	movw	r28, r24
  size_t n = print(s);
     64e:	0e 94 f7 02 	call	0x5ee	; 0x5ee <_ZN5Print5printERK6String>
     652:	8c 01       	movw	r16, r24
  n += println();
     654:	ce 01       	movw	r24, r28
     656:	0e 94 0e 03 	call	0x61c	; 0x61c <_ZN5Print7printlnEv>
  return n;
}
     65a:	80 0f       	add	r24, r16
     65c:	91 1f       	adc	r25, r17
     65e:	df 91       	pop	r29
     660:	cf 91       	pop	r28
     662:	1f 91       	pop	r17
     664:	0f 91       	pop	r16
     666:	08 95       	ret

00000668 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
     668:	0f 93       	push	r16
     66a:	1f 93       	push	r17
     66c:	cf 93       	push	r28
     66e:	df 93       	push	r29
     670:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     672:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <_ZN5Print5writeEPKc>
     676:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
     678:	ce 01       	movw	r24, r28
     67a:	0e 94 0e 03 	call	0x61c	; 0x61c <_ZN5Print7printlnEv>
  return n;
}
     67e:	80 0f       	add	r24, r16
     680:	91 1f       	adc	r25, r17
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	1f 91       	pop	r17
     688:	0f 91       	pop	r16
     68a:	08 95       	ret

0000068c <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
     68c:	8f 92       	push	r8
     68e:	9f 92       	push	r9
     690:	af 92       	push	r10
     692:	bf 92       	push	r11
     694:	cf 92       	push	r12
     696:	df 92       	push	r13
     698:	ef 92       	push	r14
     69a:	ff 92       	push	r15
     69c:	0f 93       	push	r16
     69e:	1f 93       	push	r17
     6a0:	cf 93       	push	r28
     6a2:	df 93       	push	r29
     6a4:	cd b7       	in	r28, 0x3d	; 61
     6a6:	de b7       	in	r29, 0x3e	; 62
     6a8:	a1 97       	sbiw	r28, 0x21	; 33
     6aa:	0f b6       	in	r0, 0x3f	; 63
     6ac:	f8 94       	cli
     6ae:	de bf       	out	0x3e, r29	; 62
     6b0:	0f be       	out	0x3f, r0	; 63
     6b2:	cd bf       	out	0x3d, r28	; 61
     6b4:	7c 01       	movw	r14, r24
     6b6:	c4 2e       	mov	r12, r20
     6b8:	e5 2f       	mov	r30, r21
     6ba:	cb 01       	movw	r24, r22
     6bc:	d2 2e       	mov	r13, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     6be:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     6c0:	21 e0       	ldi	r18, 0x01	; 1
     6c2:	2d 15       	cp	r18, r13
     6c4:	10 f0       	brcs	.+4      	; 0x6ca <_ZN5Print11printNumberEmh+0x3e>
     6c6:	2a e0       	ldi	r18, 0x0A	; 10
     6c8:	d2 2e       	mov	r13, r18
     6ca:	8e 01       	movw	r16, r28
     6cc:	0f 5d       	subi	r16, 0xDF	; 223
     6ce:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    unsigned long m = n;
    n /= base;
     6d0:	8d 2c       	mov	r8, r13
     6d2:	91 2c       	mov	r9, r1
     6d4:	a1 2c       	mov	r10, r1
     6d6:	b1 2c       	mov	r11, r1
     6d8:	6c 2d       	mov	r22, r12
     6da:	7e 2f       	mov	r23, r30
     6dc:	a5 01       	movw	r20, r10
     6de:	94 01       	movw	r18, r8
     6e0:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__udivmodsi4>
    char c = m - base * n;
     6e4:	8c 2d       	mov	r24, r12
     6e6:	d2 9e       	mul	r13, r18
     6e8:	80 19       	sub	r24, r0
     6ea:	11 24       	eor	r1, r1
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     6ec:	01 50       	subi	r16, 0x01	; 1
     6ee:	11 09       	sbc	r17, r1
     6f0:	8a 30       	cpi	r24, 0x0A	; 10
     6f2:	10 f4       	brcc	.+4      	; 0x6f8 <_ZN5Print11printNumberEmh+0x6c>
     6f4:	80 5d       	subi	r24, 0xD0	; 208
     6f6:	01 c0       	rjmp	.+2      	; 0x6fa <_ZN5Print11printNumberEmh+0x6e>
     6f8:	89 5c       	subi	r24, 0xC9	; 201
     6fa:	f8 01       	movw	r30, r16
     6fc:	80 83       	st	Z, r24
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
     6fe:	21 15       	cp	r18, r1
     700:	31 05       	cpc	r19, r1
     702:	41 05       	cpc	r20, r1
     704:	51 05       	cpc	r21, r1
     706:	21 f0       	breq	.+8      	; 0x710 <_ZN5Print11printNumberEmh+0x84>
    unsigned long m = n;
    n /= base;
     708:	c2 2e       	mov	r12, r18
     70a:	e3 2f       	mov	r30, r19
     70c:	ca 01       	movw	r24, r20
     70e:	e4 cf       	rjmp	.-56     	; 0x6d8 <_ZN5Print11printNumberEmh+0x4c>
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
     710:	b8 01       	movw	r22, r16
     712:	c7 01       	movw	r24, r14
     714:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <_ZN5Print5writeEPKc>
}
     718:	a1 96       	adiw	r28, 0x21	; 33
     71a:	0f b6       	in	r0, 0x3f	; 63
     71c:	f8 94       	cli
     71e:	de bf       	out	0x3e, r29	; 62
     720:	0f be       	out	0x3f, r0	; 63
     722:	cd bf       	out	0x3d, r28	; 61
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	1f 91       	pop	r17
     72a:	0f 91       	pop	r16
     72c:	ff 90       	pop	r15
     72e:	ef 90       	pop	r14
     730:	df 90       	pop	r13
     732:	cf 90       	pop	r12
     734:	bf 90       	pop	r11
     736:	af 90       	pop	r10
     738:	9f 90       	pop	r9
     73a:	8f 90       	pop	r8
     73c:	08 95       	ret

0000073e <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
     73e:	21 15       	cp	r18, r1
     740:	31 05       	cpc	r19, r1
     742:	41 f4       	brne	.+16     	; 0x754 <_ZN5Print5printEmi+0x16>
     744:	dc 01       	movw	r26, r24
     746:	ed 91       	ld	r30, X+
     748:	fc 91       	ld	r31, X
     74a:	01 90       	ld	r0, Z+
     74c:	f0 81       	ld	r31, Z
     74e:	e0 2d       	mov	r30, r0
     750:	64 2f       	mov	r22, r20
     752:	09 94       	ijmp
  else return printNumber(n, base);
     754:	0c 94 46 03 	jmp	0x68c	; 0x68c <_ZN5Print11printNumberEmh>

00000758 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
     758:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
     75a:	46 2f       	mov	r20, r22
     75c:	50 e0       	ldi	r21, 0x00	; 0
     75e:	60 e0       	ldi	r22, 0x00	; 0
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	0c 94 9f 03 	jmp	0x73e	; 0x73e <_ZN5Print5printEmi>

00000766 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
     766:	81 30       	cpi	r24, 0x01	; 1
     768:	39 f0       	breq	.+14     	; 0x778 <_Z12disableTimerh+0x12>
     76a:	18 f0       	brcs	.+6      	; 0x772 <_Z12disableTimerh+0xc>
     76c:	82 30       	cpi	r24, 0x02	; 2
     76e:	51 f0       	breq	.+20     	; 0x784 <_Z12disableTimerh+0x1e>
     770:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
     772:	10 92 6e 00 	sts	0x006E, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
     776:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
     778:	80 91 6f 00 	lds	r24, 0x006F
     77c:	8d 7f       	andi	r24, 0xFD	; 253
     77e:	80 93 6f 00 	sts	0x006F, r24
      break;
     782:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
     784:	80 91 70 00 	lds	r24, 0x0070
     788:	8d 7f       	andi	r24, 0xFD	; 253
     78a:	80 93 70 00 	sts	0x0070, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
     794:	80 91 b1 00 	lds	r24, 0x00B1
     798:	88 7f       	andi	r24, 0xF8	; 248
     79a:	84 60       	ori	r24, 0x04	; 4
     79c:	80 93 b1 00 	sts	0x00B1, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
     7a0:	10 92 b3 00 	sts	0x00B3, r1
     7a4:	08 95       	ret

000007a6 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
     7a6:	cf 93       	push	r28
     7a8:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
     7aa:	80 91 06 01 	lds	r24, 0x0106
     7ae:	8c 13       	cpse	r24, r28
     7b0:	07 c0       	rjmp	.+14     	; 0x7c0 <_Z6noToneh+0x1a>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
     7b2:	e8 e6       	ldi	r30, 0x68	; 104
     7b4:	f0 e0       	ldi	r31, 0x00	; 0
     7b6:	84 91       	lpm	r24, Z
      tone_pins[i] = 255;
     7b8:	9f ef       	ldi	r25, 0xFF	; 255
     7ba:	90 93 06 01 	sts	0x0106, r25
     7be:	01 c0       	rjmp	.+2      	; 0x7c2 <_Z6noToneh+0x1c>
}


void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
     7c0:	8f ef       	ldi	r24, 0xFF	; 255
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
      tone_pins[i] = 255;
    }
  }
  
  disableTimer(_timer);
     7c2:	0e 94 b3 03 	call	0x766	; 0x766 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
     7c6:	60 e0       	ldi	r22, 0x00	; 0
     7c8:	8c 2f       	mov	r24, r28
}
     7ca:	cf 91       	pop	r28
    }
  }
  
  disableTimer(_timer);

  digitalWrite(_pin, 0);
     7cc:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <digitalWrite>

000007d0 <__vector_7>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
     7d0:	1f 92       	push	r1
     7d2:	0f 92       	push	r0
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	0f 92       	push	r0
     7d8:	11 24       	eor	r1, r1
     7da:	2f 93       	push	r18
     7dc:	3f 93       	push	r19
     7de:	4f 93       	push	r20
     7e0:	5f 93       	push	r21
     7e2:	6f 93       	push	r22
     7e4:	7f 93       	push	r23
     7e6:	8f 93       	push	r24
     7e8:	9f 93       	push	r25
     7ea:	af 93       	push	r26
     7ec:	bf 93       	push	r27
     7ee:	ef 93       	push	r30
     7f0:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
     7f2:	80 91 58 03 	lds	r24, 0x0358
     7f6:	90 91 59 03 	lds	r25, 0x0359
     7fa:	a0 91 5a 03 	lds	r26, 0x035A
     7fe:	b0 91 5b 03 	lds	r27, 0x035B
     802:	89 2b       	or	r24, r25
     804:	8a 2b       	or	r24, r26
     806:	8b 2b       	or	r24, r27
     808:	51 f1       	breq	.+84     	; 0x85e <__vector_7+0x8e>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
     80a:	90 91 55 03 	lds	r25, 0x0355
     80e:	e0 91 56 03 	lds	r30, 0x0356
     812:	f0 91 57 03 	lds	r31, 0x0357
     816:	80 81       	ld	r24, Z
     818:	89 27       	eor	r24, r25
     81a:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
     81c:	80 91 58 03 	lds	r24, 0x0358
     820:	90 91 59 03 	lds	r25, 0x0359
     824:	a0 91 5a 03 	lds	r26, 0x035A
     828:	b0 91 5b 03 	lds	r27, 0x035B
     82c:	18 16       	cp	r1, r24
     82e:	19 06       	cpc	r1, r25
     830:	1a 06       	cpc	r1, r26
     832:	1b 06       	cpc	r1, r27
     834:	c4 f4       	brge	.+48     	; 0x866 <__vector_7+0x96>
      timer2_toggle_count--;
     836:	80 91 58 03 	lds	r24, 0x0358
     83a:	90 91 59 03 	lds	r25, 0x0359
     83e:	a0 91 5a 03 	lds	r26, 0x035A
     842:	b0 91 5b 03 	lds	r27, 0x035B
     846:	01 97       	sbiw	r24, 0x01	; 1
     848:	a1 09       	sbc	r26, r1
     84a:	b1 09       	sbc	r27, r1
     84c:	80 93 58 03 	sts	0x0358, r24
     850:	90 93 59 03 	sts	0x0359, r25
     854:	a0 93 5a 03 	sts	0x035A, r26
     858:	b0 93 5b 03 	sts	0x035B, r27
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__vector_7+0x96>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
     85e:	80 91 06 01 	lds	r24, 0x0106
     862:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
     866:	ff 91       	pop	r31
     868:	ef 91       	pop	r30
     86a:	bf 91       	pop	r27
     86c:	af 91       	pop	r26
     86e:	9f 91       	pop	r25
     870:	8f 91       	pop	r24
     872:	7f 91       	pop	r23
     874:	6f 91       	pop	r22
     876:	5f 91       	pop	r21
     878:	4f 91       	pop	r20
     87a:	3f 91       	pop	r19
     87c:	2f 91       	pop	r18
     87e:	0f 90       	pop	r0
     880:	0f be       	out	0x3f, r0	; 63
     882:	0f 90       	pop	r0
     884:	1f 90       	pop	r1
     886:	18 95       	reti

00000888 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

ISR(INT0_vect) {
     888:	1f 92       	push	r1
     88a:	0f 92       	push	r0
     88c:	0f b6       	in	r0, 0x3f	; 63
     88e:	0f 92       	push	r0
     890:	11 24       	eor	r1, r1
     892:	2f 93       	push	r18
     894:	3f 93       	push	r19
     896:	4f 93       	push	r20
     898:	5f 93       	push	r21
     89a:	6f 93       	push	r22
     89c:	7f 93       	push	r23
     89e:	8f 93       	push	r24
     8a0:	9f 93       	push	r25
     8a2:	af 93       	push	r26
     8a4:	bf 93       	push	r27
     8a6:	ef 93       	push	r30
     8a8:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
     8aa:	80 91 5c 03 	lds	r24, 0x035C
     8ae:	90 91 5d 03 	lds	r25, 0x035D
     8b2:	89 2b       	or	r24, r25
     8b4:	29 f0       	breq	.+10     	; 0x8c0 <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
     8b6:	e0 91 5c 03 	lds	r30, 0x035C
     8ba:	f0 91 5d 03 	lds	r31, 0x035D
     8be:	09 95       	icall
}
     8c0:	ff 91       	pop	r31
     8c2:	ef 91       	pop	r30
     8c4:	bf 91       	pop	r27
     8c6:	af 91       	pop	r26
     8c8:	9f 91       	pop	r25
     8ca:	8f 91       	pop	r24
     8cc:	7f 91       	pop	r23
     8ce:	6f 91       	pop	r22
     8d0:	5f 91       	pop	r21
     8d2:	4f 91       	pop	r20
     8d4:	3f 91       	pop	r19
     8d6:	2f 91       	pop	r18
     8d8:	0f 90       	pop	r0
     8da:	0f be       	out	0x3f, r0	; 63
     8dc:	0f 90       	pop	r0
     8de:	1f 90       	pop	r1
     8e0:	18 95       	reti

000008e2 <__vector_2>:

ISR(INT1_vect) {
     8e2:	1f 92       	push	r1
     8e4:	0f 92       	push	r0
     8e6:	0f b6       	in	r0, 0x3f	; 63
     8e8:	0f 92       	push	r0
     8ea:	11 24       	eor	r1, r1
     8ec:	2f 93       	push	r18
     8ee:	3f 93       	push	r19
     8f0:	4f 93       	push	r20
     8f2:	5f 93       	push	r21
     8f4:	6f 93       	push	r22
     8f6:	7f 93       	push	r23
     8f8:	8f 93       	push	r24
     8fa:	9f 93       	push	r25
     8fc:	af 93       	push	r26
     8fe:	bf 93       	push	r27
     900:	ef 93       	push	r30
     902:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
     904:	80 91 5e 03 	lds	r24, 0x035E
     908:	90 91 5f 03 	lds	r25, 0x035F
     90c:	89 2b       	or	r24, r25
     90e:	29 f0       	breq	.+10     	; 0x91a <__stack+0x1b>
    intFunc[EXTERNAL_INT_1]();
     910:	e0 91 5e 03 	lds	r30, 0x035E
     914:	f0 91 5f 03 	lds	r31, 0x035F
     918:	09 95       	icall
}
     91a:	ff 91       	pop	r31
     91c:	ef 91       	pop	r30
     91e:	bf 91       	pop	r27
     920:	af 91       	pop	r26
     922:	9f 91       	pop	r25
     924:	8f 91       	pop	r24
     926:	7f 91       	pop	r23
     928:	6f 91       	pop	r22
     92a:	5f 91       	pop	r21
     92c:	4f 91       	pop	r20
     92e:	3f 91       	pop	r19
     930:	2f 91       	pop	r18
     932:	0f 90       	pop	r0
     934:	0f be       	out	0x3f, r0	; 63
     936:	0f 90       	pop	r0
     938:	1f 90       	pop	r1
     93a:	18 95       	reti

0000093c <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     93c:	1f 92       	push	r1
     93e:	0f 92       	push	r0
     940:	0f b6       	in	r0, 0x3f	; 63
     942:	0f 92       	push	r0
     944:	11 24       	eor	r1, r1
     946:	2f 93       	push	r18
     948:	3f 93       	push	r19
     94a:	8f 93       	push	r24
     94c:	9f 93       	push	r25
     94e:	af 93       	push	r26
     950:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     952:	80 91 61 03 	lds	r24, 0x0361
     956:	90 91 62 03 	lds	r25, 0x0362
     95a:	a0 91 63 03 	lds	r26, 0x0363
     95e:	b0 91 64 03 	lds	r27, 0x0364
	unsigned char f = timer0_fract;
     962:	30 91 60 03 	lds	r19, 0x0360

	m += MILLIS_INC;
	f += FRACT_INC;
     966:	26 e0       	ldi	r18, 0x06	; 6
     968:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     96a:	2d 37       	cpi	r18, 0x7D	; 125
     96c:	20 f4       	brcc	.+8      	; 0x976 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     96e:	02 96       	adiw	r24, 0x02	; 2
     970:	a1 1d       	adc	r26, r1
     972:	b1 1d       	adc	r27, r1
     974:	05 c0       	rjmp	.+10     	; 0x980 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     976:	29 e8       	ldi	r18, 0x89	; 137
     978:	23 0f       	add	r18, r19
		m += 1;
     97a:	03 96       	adiw	r24, 0x03	; 3
     97c:	a1 1d       	adc	r26, r1
     97e:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     980:	20 93 60 03 	sts	0x0360, r18
	timer0_millis = m;
     984:	80 93 61 03 	sts	0x0361, r24
     988:	90 93 62 03 	sts	0x0362, r25
     98c:	a0 93 63 03 	sts	0x0363, r26
     990:	b0 93 64 03 	sts	0x0364, r27
	timer0_overflow_count++;
     994:	80 91 65 03 	lds	r24, 0x0365
     998:	90 91 66 03 	lds	r25, 0x0366
     99c:	a0 91 67 03 	lds	r26, 0x0367
     9a0:	b0 91 68 03 	lds	r27, 0x0368
     9a4:	01 96       	adiw	r24, 0x01	; 1
     9a6:	a1 1d       	adc	r26, r1
     9a8:	b1 1d       	adc	r27, r1
     9aa:	80 93 65 03 	sts	0x0365, r24
     9ae:	90 93 66 03 	sts	0x0366, r25
     9b2:	a0 93 67 03 	sts	0x0367, r26
     9b6:	b0 93 68 03 	sts	0x0368, r27
}
     9ba:	bf 91       	pop	r27
     9bc:	af 91       	pop	r26
     9be:	9f 91       	pop	r25
     9c0:	8f 91       	pop	r24
     9c2:	3f 91       	pop	r19
     9c4:	2f 91       	pop	r18
     9c6:	0f 90       	pop	r0
     9c8:	0f be       	out	0x3f, r0	; 63
     9ca:	0f 90       	pop	r0
     9cc:	1f 90       	pop	r1
     9ce:	18 95       	reti

000009d0 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     9d0:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     9d2:	f8 94       	cli
	m = timer0_millis;
     9d4:	60 91 61 03 	lds	r22, 0x0361
     9d8:	70 91 62 03 	lds	r23, 0x0362
     9dc:	80 91 63 03 	lds	r24, 0x0363
     9e0:	90 91 64 03 	lds	r25, 0x0364
	SREG = oldSREG;
     9e4:	2f bf       	out	0x3f, r18	; 63

	return m;
}
     9e6:	08 95       	ret

000009e8 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     9e8:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     9ea:	f8 94       	cli
	m = timer0_overflow_count;
     9ec:	80 91 65 03 	lds	r24, 0x0365
     9f0:	90 91 66 03 	lds	r25, 0x0366
     9f4:	a0 91 67 03 	lds	r26, 0x0367
     9f8:	b0 91 68 03 	lds	r27, 0x0368
#if defined(TCNT0)
	t = TCNT0;
     9fc:	26 b5       	in	r18, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     9fe:	a8 9b       	sbis	0x15, 0	; 21
     a00:	05 c0       	rjmp	.+10     	; 0xa0c <micros+0x24>
     a02:	2f 3f       	cpi	r18, 0xFF	; 255
     a04:	19 f0       	breq	.+6      	; 0xa0c <micros+0x24>
		m++;
     a06:	01 96       	adiw	r24, 0x01	; 1
     a08:	a1 1d       	adc	r26, r1
     a0a:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     a0c:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     a0e:	66 27       	eor	r22, r22
     a10:	78 2f       	mov	r23, r24
     a12:	89 2f       	mov	r24, r25
     a14:	9a 2f       	mov	r25, r26
     a16:	62 0f       	add	r22, r18
     a18:	71 1d       	adc	r23, r1
     a1a:	81 1d       	adc	r24, r1
     a1c:	91 1d       	adc	r25, r1
     a1e:	43 e0       	ldi	r20, 0x03	; 3
     a20:	66 0f       	add	r22, r22
     a22:	77 1f       	adc	r23, r23
     a24:	88 1f       	adc	r24, r24
     a26:	99 1f       	adc	r25, r25
     a28:	4a 95       	dec	r20
     a2a:	d1 f7       	brne	.-12     	; 0xa20 <micros+0x38>
}
     a2c:	08 95       	ret

00000a2e <delay>:

void delay(unsigned long ms)
{
     a2e:	cf 92       	push	r12
     a30:	df 92       	push	r13
     a32:	ef 92       	push	r14
     a34:	ff 92       	push	r15
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
     a3a:	6b 01       	movw	r12, r22
     a3c:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
     a3e:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <micros>
     a42:	eb 01       	movw	r28, r22

	while (ms > 0) {
     a44:	c1 14       	cp	r12, r1
     a46:	d1 04       	cpc	r13, r1
     a48:	e1 04       	cpc	r14, r1
     a4a:	f1 04       	cpc	r15, r1
     a4c:	89 f0       	breq	.+34     	; 0xa70 <delay+0x42>
		yield();
     a4e:	0e 94 6f 02 	call	0x4de	; 0x4de <yield>
		if (((uint16_t)micros() - start) >= 1000) {
     a52:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <micros>
     a56:	6c 1b       	sub	r22, r28
     a58:	7d 0b       	sbc	r23, r29
     a5a:	68 3e       	cpi	r22, 0xE8	; 232
     a5c:	73 40       	sbci	r23, 0x03	; 3
     a5e:	90 f3       	brcs	.-28     	; 0xa44 <delay+0x16>
			ms--;
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	c8 1a       	sub	r12, r24
     a64:	d1 08       	sbc	r13, r1
     a66:	e1 08       	sbc	r14, r1
     a68:	f1 08       	sbc	r15, r1
			start += 1000;
     a6a:	c8 51       	subi	r28, 0x18	; 24
     a6c:	dc 4f       	sbci	r29, 0xFC	; 252
     a6e:	ea cf       	rjmp	.-44     	; 0xa44 <delay+0x16>
		}
	}
}
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	ff 90       	pop	r15
     a76:	ef 90       	pop	r14
     a78:	df 90       	pop	r13
     a7a:	cf 90       	pop	r12
     a7c:	08 95       	ret

00000a7e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     a7e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     a80:	84 b5       	in	r24, 0x24	; 36
     a82:	82 60       	ori	r24, 0x02	; 2
     a84:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     a86:	84 b5       	in	r24, 0x24	; 36
     a88:	81 60       	ori	r24, 0x01	; 1
     a8a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     a8c:	85 b5       	in	r24, 0x25	; 37
     a8e:	82 60       	ori	r24, 0x02	; 2
     a90:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     a92:	85 b5       	in	r24, 0x25	; 37
     a94:	81 60       	ori	r24, 0x01	; 1
     a96:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     a98:	ee e6       	ldi	r30, 0x6E	; 110
     a9a:	f0 e0       	ldi	r31, 0x00	; 0
     a9c:	80 81       	ld	r24, Z
     a9e:	81 60       	ori	r24, 0x01	; 1
     aa0:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     aa2:	e1 e8       	ldi	r30, 0x81	; 129
     aa4:	f0 e0       	ldi	r31, 0x00	; 0
     aa6:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     aa8:	80 81       	ld	r24, Z
     aaa:	82 60       	ori	r24, 0x02	; 2
     aac:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     aae:	80 81       	ld	r24, Z
     ab0:	81 60       	ori	r24, 0x01	; 1
     ab2:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     ab4:	e0 e8       	ldi	r30, 0x80	; 128
     ab6:	f0 e0       	ldi	r31, 0x00	; 0
     ab8:	80 81       	ld	r24, Z
     aba:	81 60       	ori	r24, 0x01	; 1
     abc:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     abe:	e1 eb       	ldi	r30, 0xB1	; 177
     ac0:	f0 e0       	ldi	r31, 0x00	; 0
     ac2:	80 81       	ld	r24, Z
     ac4:	84 60       	ori	r24, 0x04	; 4
     ac6:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     ac8:	e0 eb       	ldi	r30, 0xB0	; 176
     aca:	f0 e0       	ldi	r31, 0x00	; 0
     acc:	80 81       	ld	r24, Z
     ace:	81 60       	ori	r24, 0x01	; 1
     ad0:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
     ad2:	ea e7       	ldi	r30, 0x7A	; 122
     ad4:	f0 e0       	ldi	r31, 0x00	; 0
     ad6:	80 81       	ld	r24, Z
     ad8:	84 60       	ori	r24, 0x04	; 4
     ada:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
     adc:	80 81       	ld	r24, Z
     ade:	82 60       	ori	r24, 0x02	; 2
     ae0:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
     ae2:	80 81       	ld	r24, Z
     ae4:	81 60       	ori	r24, 0x01	; 1
     ae6:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     ae8:	80 81       	ld	r24, Z
     aea:	80 68       	ori	r24, 0x80	; 128
     aec:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     aee:	10 92 c1 00 	sts	0x00C1, r1
     af2:	08 95       	ret

00000af4 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
     af4:	8e 30       	cpi	r24, 0x0E	; 14
     af6:	08 f0       	brcs	.+2      	; 0xafa <analogRead+0x6>
     af8:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
     afa:	87 70       	andi	r24, 0x07	; 7
     afc:	20 91 07 01 	lds	r18, 0x0107
     b00:	90 e4       	ldi	r25, 0x40	; 64
     b02:	29 9f       	mul	r18, r25
     b04:	90 01       	movw	r18, r0
     b06:	11 24       	eor	r1, r1
     b08:	82 2b       	or	r24, r18
     b0a:	80 93 7c 00 	sts	0x007C, r24
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
     b0e:	80 91 7a 00 	lds	r24, 0x007A
     b12:	80 64       	ori	r24, 0x40	; 64
     b14:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
     b18:	80 91 7a 00 	lds	r24, 0x007A
     b1c:	86 fd       	sbrc	r24, 6
     b1e:	fc cf       	rjmp	.-8      	; 0xb18 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
     b20:	80 91 78 00 	lds	r24, 0x0078
	high = ADCH;
     b24:	20 91 79 00 	lds	r18, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
     b28:	90 e0       	ldi	r25, 0x00	; 0
}
     b2a:	92 2b       	or	r25, r18
     b2c:	08 95       	ret

00000b2e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     b2e:	83 30       	cpi	r24, 0x03	; 3
     b30:	81 f0       	breq	.+32     	; 0xb52 <turnOffPWM+0x24>
     b32:	28 f4       	brcc	.+10     	; 0xb3e <turnOffPWM+0x10>
     b34:	81 30       	cpi	r24, 0x01	; 1
     b36:	99 f0       	breq	.+38     	; 0xb5e <turnOffPWM+0x30>
     b38:	82 30       	cpi	r24, 0x02	; 2
     b3a:	a1 f0       	breq	.+40     	; 0xb64 <turnOffPWM+0x36>
     b3c:	08 95       	ret
     b3e:	87 30       	cpi	r24, 0x07	; 7
     b40:	a9 f0       	breq	.+42     	; 0xb6c <turnOffPWM+0x3e>
     b42:	88 30       	cpi	r24, 0x08	; 8
     b44:	b9 f0       	breq	.+46     	; 0xb74 <turnOffPWM+0x46>
     b46:	84 30       	cpi	r24, 0x04	; 4
     b48:	d1 f4       	brne	.+52     	; 0xb7e <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     b4a:	80 91 80 00 	lds	r24, 0x0080
     b4e:	8f 7d       	andi	r24, 0xDF	; 223
     b50:	03 c0       	rjmp	.+6      	; 0xb58 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     b52:	80 91 80 00 	lds	r24, 0x0080
     b56:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     b58:	80 93 80 00 	sts	0x0080, r24
     b5c:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     b5e:	84 b5       	in	r24, 0x24	; 36
     b60:	8f 77       	andi	r24, 0x7F	; 127
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     b64:	84 b5       	in	r24, 0x24	; 36
     b66:	8f 7d       	andi	r24, 0xDF	; 223
     b68:	84 bd       	out	0x24, r24	; 36
     b6a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     b6c:	80 91 b0 00 	lds	r24, 0x00B0
     b70:	8f 77       	andi	r24, 0x7F	; 127
     b72:	03 c0       	rjmp	.+6      	; 0xb7a <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     b74:	80 91 b0 00 	lds	r24, 0x00B0
     b78:	8f 7d       	andi	r24, 0xDF	; 223
     b7a:	80 93 b0 00 	sts	0x00B0, r24
     b7e:	08 95       	ret

00000b80 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     b80:	cf 93       	push	r28
     b82:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	fc 01       	movw	r30, r24
     b88:	e3 58       	subi	r30, 0x83	; 131
     b8a:	ff 4f       	sbci	r31, 0xFF	; 255
     b8c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     b8e:	fc 01       	movw	r30, r24
     b90:	ef 56       	subi	r30, 0x6F	; 111
     b92:	ff 4f       	sbci	r31, 0xFF	; 255
     b94:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     b96:	88 23       	and	r24, r24
     b98:	49 f1       	breq	.+82     	; 0xbec <pinMode+0x6c>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	88 0f       	add	r24, r24
     b9e:	99 1f       	adc	r25, r25
     ba0:	fc 01       	movw	r30, r24
     ba2:	e1 55       	subi	r30, 0x51	; 81
     ba4:	ff 4f       	sbci	r31, 0xFF	; 255
     ba6:	a5 91       	lpm	r26, Z+
     ba8:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     baa:	8b 55       	subi	r24, 0x5B	; 91
     bac:	9f 4f       	sbci	r25, 0xFF	; 255
     bae:	fc 01       	movw	r30, r24
     bb0:	c5 91       	lpm	r28, Z+
     bb2:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
		uint8_t oldSREG = SREG;
     bb4:	9f b7       	in	r25, 0x3f	; 63

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
	out = portOutputRegister(port);

	if (mode == INPUT) { 
     bb6:	61 11       	cpse	r22, r1
     bb8:	08 c0       	rjmp	.+16     	; 0xbca <pinMode+0x4a>
		uint8_t oldSREG = SREG;
                cli();
     bba:	f8 94       	cli
		*reg &= ~bit;
     bbc:	8c 91       	ld	r24, X
     bbe:	20 95       	com	r18
     bc0:	82 23       	and	r24, r18
     bc2:	8c 93       	st	X, r24
		*out &= ~bit;
     bc4:	88 81       	ld	r24, Y
     bc6:	82 23       	and	r24, r18
     bc8:	0a c0       	rjmp	.+20     	; 0xbde <pinMode+0x5e>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     bca:	62 30       	cpi	r22, 0x02	; 2
     bcc:	51 f4       	brne	.+20     	; 0xbe2 <pinMode+0x62>
		uint8_t oldSREG = SREG;
                cli();
     bce:	f8 94       	cli
		*reg &= ~bit;
     bd0:	8c 91       	ld	r24, X
     bd2:	32 2f       	mov	r19, r18
     bd4:	30 95       	com	r19
     bd6:	83 23       	and	r24, r19
     bd8:	8c 93       	st	X, r24
		*out |= bit;
     bda:	88 81       	ld	r24, Y
     bdc:	82 2b       	or	r24, r18
     bde:	88 83       	st	Y, r24
     be0:	04 c0       	rjmp	.+8      	; 0xbea <pinMode+0x6a>
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
                cli();
     be2:	f8 94       	cli
		*reg |= bit;
     be4:	8c 91       	ld	r24, X
     be6:	82 2b       	or	r24, r18
     be8:	8c 93       	st	X, r24
		SREG = oldSREG;
     bea:	9f bf       	out	0x3f, r25	; 63
	}
}
     bec:	df 91       	pop	r29
     bee:	cf 91       	pop	r28
     bf0:	08 95       	ret

00000bf2 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     bf2:	0f 93       	push	r16
     bf4:	1f 93       	push	r17
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
     bfa:	1f 92       	push	r1
     bfc:	cd b7       	in	r28, 0x3d	; 61
     bfe:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
     c00:	28 2f       	mov	r18, r24
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	f9 01       	movw	r30, r18
     c06:	e7 59       	subi	r30, 0x97	; 151
     c08:	ff 4f       	sbci	r31, 0xFF	; 255
     c0a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     c0c:	f9 01       	movw	r30, r18
     c0e:	e3 58       	subi	r30, 0x83	; 131
     c10:	ff 4f       	sbci	r31, 0xFF	; 255
     c12:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
     c14:	f9 01       	movw	r30, r18
     c16:	ef 56       	subi	r30, 0x6F	; 111
     c18:	ff 4f       	sbci	r31, 0xFF	; 255
     c1a:	04 91       	lpm	r16, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     c1c:	00 23       	and	r16, r16
     c1e:	c9 f0       	breq	.+50     	; 0xc52 <digitalWrite+0x60>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     c20:	88 23       	and	r24, r24
     c22:	21 f0       	breq	.+8      	; 0xc2c <digitalWrite+0x3a>
     c24:	69 83       	std	Y+1, r22	; 0x01
     c26:	0e 94 97 05 	call	0xb2e	; 0xb2e <turnOffPWM>
     c2a:	69 81       	ldd	r22, Y+1	; 0x01

	out = portOutputRegister(port);
     c2c:	e0 2f       	mov	r30, r16
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	ee 0f       	add	r30, r30
     c32:	ff 1f       	adc	r31, r31
     c34:	eb 55       	subi	r30, 0x5B	; 91
     c36:	ff 4f       	sbci	r31, 0xFF	; 255
     c38:	a5 91       	lpm	r26, Z+
     c3a:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     c3c:	9f b7       	in	r25, 0x3f	; 63
	cli();
     c3e:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
     c40:	8c 91       	ld	r24, X
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
     c42:	61 11       	cpse	r22, r1
     c44:	03 c0       	rjmp	.+6      	; 0xc4c <digitalWrite+0x5a>
		*out &= ~bit;
     c46:	10 95       	com	r17
     c48:	81 23       	and	r24, r17
     c4a:	01 c0       	rjmp	.+2      	; 0xc4e <digitalWrite+0x5c>
	} else {
		*out |= bit;
     c4c:	81 2b       	or	r24, r17
     c4e:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
     c50:	9f bf       	out	0x3f, r25	; 63
}
     c52:	0f 90       	pop	r0
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	1f 91       	pop	r17
     c5a:	0f 91       	pop	r16
     c5c:	08 95       	ret

00000c5e <_ZN6StringD1Ev>:
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	free(buffer);
     c5e:	fc 01       	movw	r30, r24
     c60:	80 81       	ld	r24, Z
     c62:	91 81       	ldd	r25, Z+1	; 0x01
     c64:	0c 94 5c 0f 	jmp	0x1eb8	; 0x1eb8 <free>

00000c68 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
     c6e:	88 81       	ld	r24, Y
     c70:	99 81       	ldd	r25, Y+1	; 0x01
     c72:	00 97       	sbiw	r24, 0x00	; 0
     c74:	11 f0       	breq	.+4      	; 0xc7a <_ZN6String10invalidateEv+0x12>
     c76:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <free>
	buffer = NULL;
     c7a:	19 82       	std	Y+1, r1	; 0x01
     c7c:	18 82       	st	Y, r1
	capacity = len = 0;
     c7e:	1d 82       	std	Y+5, r1	; 0x05
     c80:	1c 82       	std	Y+4, r1	; 0x04
     c82:	1b 82       	std	Y+3, r1	; 0x03
     c84:	1a 82       	std	Y+2, r1	; 0x02
}
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	08 95       	ret

00000c8c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
     c8c:	0f 93       	push	r16
     c8e:	1f 93       	push	r17
     c90:	cf 93       	push	r28
     c92:	df 93       	push	r29
     c94:	ec 01       	movw	r28, r24
     c96:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     c98:	6f 5f       	subi	r22, 0xFF	; 255
     c9a:	7f 4f       	sbci	r23, 0xFF	; 255
     c9c:	88 81       	ld	r24, Y
     c9e:	99 81       	ldd	r25, Y+1	; 0x01
     ca0:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <realloc>
	if (newbuffer) {
     ca4:	00 97       	sbiw	r24, 0x00	; 0
     ca6:	31 f0       	breq	.+12     	; 0xcb4 <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
     ca8:	99 83       	std	Y+1, r25	; 0x01
     caa:	88 83       	st	Y, r24
		capacity = maxStrLen;
     cac:	1b 83       	std	Y+3, r17	; 0x03
     cae:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	01 c0       	rjmp	.+2      	; 0xcb6 <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
     cb4:	80 e0       	ldi	r24, 0x00	; 0
}
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	08 95       	ret

00000cc0 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
     cc6:	88 81       	ld	r24, Y
     cc8:	99 81       	ldd	r25, Y+1	; 0x01
     cca:	89 2b       	or	r24, r25
     ccc:	29 f0       	breq	.+10     	; 0xcd8 <_ZN6String7reserveEj+0x18>
     cce:	8a 81       	ldd	r24, Y+2	; 0x02
     cd0:	9b 81       	ldd	r25, Y+3	; 0x03
     cd2:	86 17       	cp	r24, r22
     cd4:	97 07       	cpc	r25, r23
     cd6:	60 f4       	brcc	.+24     	; 0xcf0 <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
     cd8:	ce 01       	movw	r24, r28
     cda:	0e 94 46 06 	call	0xc8c	; 0xc8c <_ZN6String12changeBufferEj>
     cde:	88 23       	and	r24, r24
     ce0:	41 f0       	breq	.+16     	; 0xcf2 <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
     ce2:	8c 81       	ldd	r24, Y+4	; 0x04
     ce4:	9d 81       	ldd	r25, Y+5	; 0x05
     ce6:	89 2b       	or	r24, r25
     ce8:	19 f4       	brne	.+6      	; 0xcf0 <_ZN6String7reserveEj+0x30>
     cea:	e8 81       	ld	r30, Y
     cec:	f9 81       	ldd	r31, Y+1	; 0x01
     cee:	10 82       	st	Z, r1
     cf0:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
     cf2:	df 91       	pop	r29
     cf4:	cf 91       	pop	r28
     cf6:	08 95       	ret

00000cf8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
     cf8:	ef 92       	push	r14
     cfa:	ff 92       	push	r15
     cfc:	0f 93       	push	r16
     cfe:	1f 93       	push	r17
     d00:	cf 93       	push	r28
     d02:	df 93       	push	r29
     d04:	ec 01       	movw	r28, r24
     d06:	7b 01       	movw	r14, r22
     d08:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
     d0a:	ba 01       	movw	r22, r20
     d0c:	0e 94 60 06 	call	0xcc0	; 0xcc0 <_ZN6String7reserveEj>
     d10:	81 11       	cpse	r24, r1
     d12:	04 c0       	rjmp	.+8      	; 0xd1c <_ZN6String4copyEPKcj+0x24>
		invalidate();
     d14:	ce 01       	movw	r24, r28
     d16:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN6String10invalidateEv>
		return *this;
     d1a:	07 c0       	rjmp	.+14     	; 0xd2a <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
     d1c:	1d 83       	std	Y+5, r17	; 0x05
     d1e:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
     d20:	b7 01       	movw	r22, r14
     d22:	88 81       	ld	r24, Y
     d24:	99 81       	ldd	r25, Y+1	; 0x01
     d26:	0e 94 cf 10 	call	0x219e	; 0x219e <strcpy>
	return *this;
}
     d2a:	ce 01       	movw	r24, r28
     d2c:	df 91       	pop	r29
     d2e:	cf 91       	pop	r28
     d30:	1f 91       	pop	r17
     d32:	0f 91       	pop	r16
     d34:	ff 90       	pop	r15
     d36:	ef 90       	pop	r14
     d38:	08 95       	ret

00000d3a <_ZN6StringC1EPKc>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
     d3a:	fc 01       	movw	r30, r24
     d3c:	11 82       	std	Z+1, r1	; 0x01
     d3e:	10 82       	st	Z, r1
	capacity = 0;
     d40:	13 82       	std	Z+3, r1	; 0x03
     d42:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
     d44:	15 82       	std	Z+5, r1	; 0x05
     d46:	14 82       	std	Z+4, r1	; 0x04
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
     d48:	61 15       	cp	r22, r1
     d4a:	71 05       	cpc	r23, r1
     d4c:	59 f0       	breq	.+22     	; 0xd64 <_ZN6StringC1EPKc+0x2a>
     d4e:	fb 01       	movw	r30, r22
     d50:	01 90       	ld	r0, Z+
     d52:	00 20       	and	r0, r0
     d54:	e9 f7       	brne	.-6      	; 0xd50 <_ZN6StringC1EPKc+0x16>
     d56:	af 01       	movw	r20, r30
     d58:	41 50       	subi	r20, 0x01	; 1
     d5a:	51 09       	sbc	r21, r1
     d5c:	46 1b       	sub	r20, r22
     d5e:	57 0b       	sbc	r21, r23
     d60:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <_ZN6String4copyEPKcj>
     d64:	08 95       	ret

00000d66 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
     d66:	cf 93       	push	r28
     d68:	df 93       	push	r29
     d6a:	ec 01       	movw	r28, r24
	if (cstr) copy(cstr, strlen(cstr));
     d6c:	61 15       	cp	r22, r1
     d6e:	71 05       	cpc	r23, r1
     d70:	61 f0       	breq	.+24     	; 0xd8a <_ZN6StringaSEPKc+0x24>
     d72:	fb 01       	movw	r30, r22
     d74:	01 90       	ld	r0, Z+
     d76:	00 20       	and	r0, r0
     d78:	e9 f7       	brne	.-6      	; 0xd74 <_ZN6StringaSEPKc+0xe>
     d7a:	af 01       	movw	r20, r30
     d7c:	41 50       	subi	r20, 0x01	; 1
     d7e:	51 09       	sbc	r21, r1
     d80:	46 1b       	sub	r20, r22
     d82:	57 0b       	sbc	r21, r23
     d84:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <_ZN6String4copyEPKcj>
     d88:	02 c0       	rjmp	.+4      	; 0xd8e <_ZN6StringaSEPKc+0x28>
	else invalidate();
     d8a:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN6String10invalidateEv>
	
	return *this;
}
     d8e:	ce 01       	movw	r24, r28
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	08 95       	ret

00000d96 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
     d96:	ef 92       	push	r14
     d98:	ff 92       	push	r15
     d9a:	0f 93       	push	r16
     d9c:	1f 93       	push	r17
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
     da2:	ec 01       	movw	r28, r24
     da4:	7b 01       	movw	r14, r22
	unsigned int newlen = len + length;
     da6:	0c 81       	ldd	r16, Y+4	; 0x04
     da8:	1d 81       	ldd	r17, Y+5	; 0x05
	if (!cstr) return 0;
     daa:	61 15       	cp	r22, r1
     dac:	71 05       	cpc	r23, r1
     dae:	11 f4       	brne	.+4      	; 0xdb4 <_ZN6String6concatEPKcj+0x1e>
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	16 c0       	rjmp	.+44     	; 0xde0 <_ZN6String6concatEPKcj+0x4a>
	if (length == 0) return 1;
     db4:	41 15       	cp	r20, r1
     db6:	51 05       	cpc	r21, r1
     db8:	91 f0       	breq	.+36     	; 0xdde <_ZN6String6concatEPKcj+0x48>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
     dba:	04 0f       	add	r16, r20
     dbc:	15 1f       	adc	r17, r21
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
     dbe:	b8 01       	movw	r22, r16
     dc0:	0e 94 60 06 	call	0xcc0	; 0xcc0 <_ZN6String7reserveEj>
     dc4:	88 23       	and	r24, r24
     dc6:	a1 f3       	breq	.-24     	; 0xdb0 <_ZN6String6concatEPKcj+0x1a>
	strcpy(buffer + len, cstr);
     dc8:	28 81       	ld	r18, Y
     dca:	39 81       	ldd	r19, Y+1	; 0x01
     dcc:	8c 81       	ldd	r24, Y+4	; 0x04
     dce:	9d 81       	ldd	r25, Y+5	; 0x05
     dd0:	b7 01       	movw	r22, r14
     dd2:	82 0f       	add	r24, r18
     dd4:	93 1f       	adc	r25, r19
     dd6:	0e 94 cf 10 	call	0x219e	; 0x219e <strcpy>
	len = newlen;
     dda:	1d 83       	std	Y+5, r17	; 0x05
     ddc:	0c 83       	std	Y+4, r16	; 0x04

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
     dde:	81 e0       	ldi	r24, 0x01	; 1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
     de0:	df 91       	pop	r29
     de2:	cf 91       	pop	r28
     de4:	1f 91       	pop	r17
     de6:	0f 91       	pop	r16
     de8:	ff 90       	pop	r15
     dea:	ef 90       	pop	r14
     dec:	08 95       	ret

00000dee <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
     dee:	61 15       	cp	r22, r1
     df0:	71 05       	cpc	r23, r1
     df2:	59 f0       	breq	.+22     	; 0xe0a <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
     df4:	fb 01       	movw	r30, r22
     df6:	01 90       	ld	r0, Z+
     df8:	00 20       	and	r0, r0
     dfa:	e9 f7       	brne	.-6      	; 0xdf6 <_ZN6String6concatEPKc+0x8>
     dfc:	af 01       	movw	r20, r30
     dfe:	41 50       	subi	r20, 0x01	; 1
     e00:	51 09       	sbc	r21, r1
     e02:	46 1b       	sub	r20, r22
     e04:	57 0b       	sbc	r21, r23
     e06:	0c 94 cb 06 	jmp	0xd96	; 0xd96 <_ZN6String6concatEPKcj>
}
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	08 95       	ret

00000e0e <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
     e0e:	cf 93       	push	r28
     e10:	df 93       	push	r29
     e12:	00 d0       	rcall	.+0      	; 0xe14 <_ZN6String6concatEc+0x6>
     e14:	cd b7       	in	r28, 0x3d	; 61
     e16:	de b7       	in	r29, 0x3e	; 62
	char buf[2];
	buf[0] = c;
     e18:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
     e1a:	1a 82       	std	Y+2, r1	; 0x02
	return concat(buf, 1);
     e1c:	41 e0       	ldi	r20, 0x01	; 1
     e1e:	50 e0       	ldi	r21, 0x00	; 0
     e20:	be 01       	movw	r22, r28
     e22:	6f 5f       	subi	r22, 0xFF	; 255
     e24:	7f 4f       	sbci	r23, 0xFF	; 255
     e26:	0e 94 cb 06 	call	0xd96	; 0xd96 <_ZN6String6concatEPKcj>
}
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	df 91       	pop	r29
     e30:	cf 91       	pop	r28
     e32:	08 95       	ret

00000e34 <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
     e34:	fa 01       	movw	r30, r20
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
     e36:	db 01       	movw	r26, r22
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	4d 91       	ld	r20, X+
     e3c:	5c 91       	ld	r21, X
     e3e:	15 97       	sbiw	r26, 0x05	; 5
     e40:	dc 01       	movw	r26, r24
     e42:	14 96       	adiw	r26, 0x04	; 4
     e44:	2d 91       	ld	r18, X+
     e46:	3c 91       	ld	r19, X
     e48:	15 97       	sbiw	r26, 0x05	; 5
     e4a:	24 1b       	sub	r18, r20
     e4c:	35 0b       	sbc	r19, r21
     e4e:	2e 17       	cp	r18, r30
     e50:	3f 07       	cpc	r19, r31
     e52:	88 f0       	brcs	.+34     	; 0xe76 <_ZNK6String10startsWithERKS_j+0x42>
     e54:	8d 91       	ld	r24, X+
     e56:	9c 91       	ld	r25, X
     e58:	00 97       	sbiw	r24, 0x00	; 0
     e5a:	69 f0       	breq	.+26     	; 0xe76 <_ZNK6String10startsWithERKS_j+0x42>
     e5c:	db 01       	movw	r26, r22
     e5e:	6d 91       	ld	r22, X+
     e60:	7c 91       	ld	r23, X
     e62:	61 15       	cp	r22, r1
     e64:	71 05       	cpc	r23, r1
     e66:	39 f0       	breq	.+14     	; 0xe76 <_ZNK6String10startsWithERKS_j+0x42>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
     e68:	8e 0f       	add	r24, r30
     e6a:	9f 1f       	adc	r25, r31
     e6c:	0e 94 d6 10 	call	0x21ac	; 0x21ac <strncmp>
     e70:	21 e0       	ldi	r18, 0x01	; 1
     e72:	89 2b       	or	r24, r25
     e74:	09 f0       	breq	.+2      	; 0xe78 <_ZNK6String10startsWithERKS_j+0x44>
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
     e76:	20 e0       	ldi	r18, 0x00	; 0
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}
     e78:	82 2f       	mov	r24, r18
     e7a:	08 95       	ret

00000e7c <_ZNK6String10startsWithERKS_>:
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
     e7c:	fc 01       	movw	r30, r24
     e7e:	44 81       	ldd	r20, Z+4	; 0x04
     e80:	55 81       	ldd	r21, Z+5	; 0x05
     e82:	fb 01       	movw	r30, r22
     e84:	24 81       	ldd	r18, Z+4	; 0x04
     e86:	35 81       	ldd	r19, Z+5	; 0x05
     e88:	42 17       	cp	r20, r18
     e8a:	53 07       	cpc	r21, r19
     e8c:	20 f0       	brcs	.+8      	; 0xe96 <_ZNK6String10startsWithERKS_+0x1a>
	return startsWith(s2, 0);
     e8e:	40 e0       	ldi	r20, 0x00	; 0
     e90:	50 e0       	ldi	r21, 0x00	; 0
     e92:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <_ZNK6String10startsWithERKS_j>
}
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	08 95       	ret

00000e9a <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
     e9a:	fc 01       	movw	r30, r24
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
     e9c:	84 81       	ldd	r24, Z+4	; 0x04
     e9e:	95 81       	ldd	r25, Z+5	; 0x05
     ea0:	db 01       	movw	r26, r22
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	4d 91       	ld	r20, X+
     ea6:	5c 91       	ld	r21, X
     ea8:	15 97       	sbiw	r26, 0x05	; 5
     eaa:	84 17       	cp	r24, r20
     eac:	95 07       	cpc	r25, r21
     eae:	98 f0       	brcs	.+38     	; 0xed6 <_ZNK6String8endsWithERKS_+0x3c>
     eb0:	20 81       	ld	r18, Z
     eb2:	31 81       	ldd	r19, Z+1	; 0x01
     eb4:	21 15       	cp	r18, r1
     eb6:	31 05       	cpc	r19, r1
     eb8:	71 f0       	breq	.+28     	; 0xed6 <_ZNK6String8endsWithERKS_+0x3c>
     eba:	6d 91       	ld	r22, X+
     ebc:	7c 91       	ld	r23, X
     ebe:	61 15       	cp	r22, r1
     ec0:	71 05       	cpc	r23, r1
     ec2:	49 f0       	breq	.+18     	; 0xed6 <_ZNK6String8endsWithERKS_+0x3c>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
     ec4:	84 1b       	sub	r24, r20
     ec6:	95 0b       	sbc	r25, r21
     ec8:	82 0f       	add	r24, r18
     eca:	93 1f       	adc	r25, r19
     ecc:	0e 94 c6 10 	call	0x218c	; 0x218c <strcmp>
     ed0:	21 e0       	ldi	r18, 0x01	; 1
     ed2:	89 2b       	or	r24, r25
     ed4:	09 f0       	breq	.+2      	; 0xed8 <_ZNK6String8endsWithERKS_+0x3e>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
     ed6:	20 e0       	ldi	r18, 0x00	; 0
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
}
     ed8:	82 2f       	mov	r24, r18
     eda:	08 95       	ret

00000edc <_ZN6String6removeEjj>:
	// below will take care of truncating it at the end of the
	// string.
	remove(index, (unsigned int)-1);
}

void String::remove(unsigned int index, unsigned int count){
     edc:	cf 93       	push	r28
     ede:	df 93       	push	r29
     ee0:	ec 01       	movw	r28, r24
     ee2:	cb 01       	movw	r24, r22
	if (index >= len) { return; }
     ee4:	2c 81       	ldd	r18, Y+4	; 0x04
     ee6:	3d 81       	ldd	r19, Y+5	; 0x05
     ee8:	62 17       	cp	r22, r18
     eea:	73 07       	cpc	r23, r19
     eec:	10 f5       	brcc	.+68     	; 0xf32 <_ZN6String6removeEjj+0x56>
	if (count <= 0) { return; }
     eee:	41 15       	cp	r20, r1
     ef0:	51 05       	cpc	r21, r1
     ef2:	f9 f0       	breq	.+62     	; 0xf32 <_ZN6String6removeEjj+0x56>
     ef4:	b9 01       	movw	r22, r18
     ef6:	68 1b       	sub	r22, r24
     ef8:	79 0b       	sbc	r23, r25
     efa:	46 17       	cp	r20, r22
     efc:	57 07       	cpc	r21, r23
     efe:	08 f4       	brcc	.+2      	; 0xf02 <_ZN6String6removeEjj+0x26>
     f00:	ba 01       	movw	r22, r20
	if (count > len - index) { count = len - index; }
	char *writeTo = buffer + index;
     f02:	e8 81       	ld	r30, Y
     f04:	f9 81       	ldd	r31, Y+1	; 0x01
	len = len - count;
     f06:	26 1b       	sub	r18, r22
     f08:	37 0b       	sbc	r19, r23
     f0a:	3d 83       	std	Y+5, r19	; 0x05
     f0c:	2c 83       	std	Y+4, r18	; 0x04
	strncpy(writeTo, buffer + index + count,len - index);
     f0e:	a9 01       	movw	r20, r18
     f10:	48 1b       	sub	r20, r24
     f12:	59 0b       	sbc	r21, r25
     f14:	68 0f       	add	r22, r24
     f16:	79 1f       	adc	r23, r25
     f18:	6e 0f       	add	r22, r30
     f1a:	7f 1f       	adc	r23, r31
     f1c:	8e 0f       	add	r24, r30
     f1e:	9f 1f       	adc	r25, r31
     f20:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <strncpy>
	buffer[len] = 0;
     f24:	e8 81       	ld	r30, Y
     f26:	f9 81       	ldd	r31, Y+1	; 0x01
     f28:	8c 81       	ldd	r24, Y+4	; 0x04
     f2a:	9d 81       	ldd	r25, Y+5	; 0x05
     f2c:	e8 0f       	add	r30, r24
     f2e:	f9 1f       	adc	r31, r25
     f30:	10 82       	st	Z, r1
}
     f32:	df 91       	pop	r29
     f34:	cf 91       	pop	r28
     f36:	08 95       	ret

00000f38 <_ZN6String4trimEv>:
		*p = toupper(*p);
	}
}

void String::trim(void)
{
     f38:	af 92       	push	r10
     f3a:	bf 92       	push	r11
     f3c:	cf 92       	push	r12
     f3e:	df 92       	push	r13
     f40:	ef 92       	push	r14
     f42:	ff 92       	push	r15
     f44:	0f 93       	push	r16
     f46:	1f 93       	push	r17
     f48:	cf 93       	push	r28
     f4a:	df 93       	push	r29
     f4c:	7c 01       	movw	r14, r24
	if (!buffer || len == 0) return;
     f4e:	dc 01       	movw	r26, r24
     f50:	cd 90       	ld	r12, X+
     f52:	dc 90       	ld	r13, X
     f54:	11 97       	sbiw	r26, 0x01	; 1
     f56:	c1 14       	cp	r12, r1
     f58:	d1 04       	cpc	r13, r1
     f5a:	e9 f1       	breq	.+122    	; 0xfd6 <_ZN6String4trimEv+0x9e>
     f5c:	14 96       	adiw	r26, 0x04	; 4
     f5e:	cd 91       	ld	r28, X+
     f60:	dc 91       	ld	r29, X
     f62:	15 97       	sbiw	r26, 0x05	; 5
     f64:	20 97       	sbiw	r28, 0x00	; 0
     f66:	b9 f1       	breq	.+110    	; 0xfd6 <_ZN6String4trimEv+0x9e>
     f68:	56 01       	movw	r10, r12
     f6a:	85 01       	movw	r16, r10
     f6c:	bf ef       	ldi	r27, 0xFF	; 255
     f6e:	ab 1a       	sub	r10, r27
     f70:	bb 0a       	sbc	r11, r27
	char *begin = buffer;
	while (isspace(*begin)) begin++;
     f72:	f8 01       	movw	r30, r16
     f74:	80 81       	ld	r24, Z
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	0e 94 b5 10 	call	0x216a	; 0x216a <isspace>
     f7c:	89 2b       	or	r24, r25
     f7e:	a9 f7       	brne	.-22     	; 0xf6a <_ZN6String4trimEv+0x32>
	char *end = buffer + len - 1;
     f80:	21 97       	sbiw	r28, 0x01	; 1
     f82:	cc 0d       	add	r28, r12
     f84:	dd 1d       	adc	r29, r13
	while (isspace(*end) && end >= begin) end--;
     f86:	88 81       	ld	r24, Y
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	0e 94 b5 10 	call	0x216a	; 0x216a <isspace>
     f8e:	89 2b       	or	r24, r25
     f90:	91 f4       	brne	.+36     	; 0xfb6 <_ZN6String4trimEv+0x7e>
	len = end + 1 - begin;
     f92:	ae 01       	movw	r20, r28
     f94:	4f 5f       	subi	r20, 0xFF	; 255
     f96:	5f 4f       	sbci	r21, 0xFF	; 255
     f98:	40 1b       	sub	r20, r16
     f9a:	51 0b       	sbc	r21, r17
     f9c:	d7 01       	movw	r26, r14
     f9e:	15 96       	adiw	r26, 0x05	; 5
     fa0:	5c 93       	st	X, r21
     fa2:	4e 93       	st	-X, r20
     fa4:	14 97       	sbiw	r26, 0x04	; 4
	if (begin > buffer) memcpy(buffer, begin, len);
     fa6:	c0 16       	cp	r12, r16
     fa8:	d1 06       	cpc	r13, r17
     faa:	50 f4       	brcc	.+20     	; 0xfc0 <_ZN6String4trimEv+0x88>
     fac:	b8 01       	movw	r22, r16
     fae:	c6 01       	movw	r24, r12
     fb0:	0e 94 bd 10 	call	0x217a	; 0x217a <memcpy>
     fb4:	05 c0       	rjmp	.+10     	; 0xfc0 <_ZN6String4trimEv+0x88>
{
	if (!buffer || len == 0) return;
	char *begin = buffer;
	while (isspace(*begin)) begin++;
	char *end = buffer + len - 1;
	while (isspace(*end) && end >= begin) end--;
     fb6:	c0 17       	cp	r28, r16
     fb8:	d1 07       	cpc	r29, r17
     fba:	58 f3       	brcs	.-42     	; 0xf92 <_ZN6String4trimEv+0x5a>
     fbc:	21 97       	sbiw	r28, 0x01	; 1
     fbe:	e3 cf       	rjmp	.-58     	; 0xf86 <_ZN6String4trimEv+0x4e>
	len = end + 1 - begin;
	if (begin > buffer) memcpy(buffer, begin, len);
	buffer[len] = 0;
     fc0:	d7 01       	movw	r26, r14
     fc2:	ed 91       	ld	r30, X+
     fc4:	fc 91       	ld	r31, X
     fc6:	11 97       	sbiw	r26, 0x01	; 1
     fc8:	14 96       	adiw	r26, 0x04	; 4
     fca:	8d 91       	ld	r24, X+
     fcc:	9c 91       	ld	r25, X
     fce:	15 97       	sbiw	r26, 0x05	; 5
     fd0:	e8 0f       	add	r30, r24
     fd2:	f9 1f       	adc	r31, r25
     fd4:	10 82       	st	Z, r1
}
     fd6:	df 91       	pop	r29
     fd8:	cf 91       	pop	r28
     fda:	1f 91       	pop	r17
     fdc:	0f 91       	pop	r16
     fde:	ff 90       	pop	r15
     fe0:	ef 90       	pop	r14
     fe2:	df 90       	pop	r13
     fe4:	cf 90       	pop	r12
     fe6:	bf 90       	pop	r11
     fe8:	af 90       	pop	r10
     fea:	08 95       	ret

00000fec <_ZN8BLEMate2C1EP6Stream>:
#include "SparkFun_BLEMate2.h"
#include "../Arduino/Arduino.h"

// Constructor. All we really need to do is link the user's Stream instance to
//  our local reference.
BLEMate2::BLEMate2(Stream *sp)
     fec:	cf 92       	push	r12
     fee:	df 92       	push	r13
     ff0:	ef 92       	push	r14
     ff2:	ff 92       	push	r15
     ff4:	0f 93       	push	r16
     ff6:	1f 93       	push	r17
     ff8:	cf 93       	push	r28
     ffa:	df 93       	push	r29
     ffc:	ec 01       	movw	r28, r24
     ffe:	7b 01       	movw	r14, r22
    1000:	8c 01       	movw	r16, r24
    1002:	0e 5f       	subi	r16, 0xFE	; 254
    1004:	1f 4f       	sbci	r17, 0xFF	; 255
    1006:	6c 01       	movw	r12, r24
    1008:	80 e2       	ldi	r24, 0x20	; 32
    100a:	c8 0e       	add	r12, r24
    100c:	d1 1c       	adc	r13, r1
    100e:	60 e2       	ldi	r22, 0x20	; 32
    1010:	71 e0       	ldi	r23, 0x01	; 1
    1012:	c8 01       	movw	r24, r16
    1014:	0e 94 9d 06 	call	0xd3a	; 0xd3a <_ZN6StringC1EPKc>
    1018:	0a 5f       	subi	r16, 0xFA	; 250
    101a:	1f 4f       	sbci	r17, 0xFF	; 255
    101c:	0c 15       	cp	r16, r12
    101e:	1d 05       	cpc	r17, r13
    1020:	b1 f7       	brne	.-20     	; 0x100e <_ZN8BLEMate2C1EP6Stream+0x22>
{
  _serialPort = sp;
    1022:	fa a2       	std	Y+34, r15	; 0x22
    1024:	e9 a2       	std	Y+33, r14	; 0x21
  _numAddresses = 0;
    1026:	18 a2       	std	Y+32, r1	; 0x20
}
    1028:	df 91       	pop	r29
    102a:	cf 91       	pop	r28
    102c:	1f 91       	pop	r17
    102e:	0f 91       	pop	r16
    1030:	ff 90       	pop	r15
    1032:	ef 90       	pop	r14
    1034:	df 90       	pop	r13
    1036:	cf 90       	pop	r12
    1038:	08 95       	ret

0000103a <_ZN8BLEMate210knownStartEv>:

// Create a known state for the module to start from. If a partial command is
//  already in the module's buffer, we can purge it by sending an EOL to the
//  the module. If not, we'll just get an error.
BLEMate2::opResult BLEMate2::knownStart()
{
    103a:	8f 92       	push	r8
    103c:	9f 92       	push	r9
    103e:	af 92       	push	r10
    1040:	bf 92       	push	r11
    1042:	cf 92       	push	r12
    1044:	df 92       	push	r13
    1046:	ef 92       	push	r14
    1048:	ff 92       	push	r15
    104a:	0f 93       	push	r16
    104c:	1f 93       	push	r17
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
    1056:	62 97       	sbiw	r28, 0x12	; 18
    1058:	0f b6       	in	r0, 0x3f	; 63
    105a:	f8 94       	cli
    105c:	de bf       	out	0x3e, r29	; 62
    105e:	0f be       	out	0x3f, r0	; 63
    1060:	cd bf       	out	0x3d, r28	; 61
    1062:	8c 01       	movw	r16, r24
  String EOL = String("\n\r");
    1064:	6e e1       	ldi	r22, 0x1E	; 30
    1066:	71 e0       	ldi	r23, 0x01	; 1
    1068:	ce 01       	movw	r24, r28
    106a:	0d 96       	adiw	r24, 0x0d	; 13
    106c:	0e 94 9d 06 	call	0xd3a	; 0xd3a <_ZN6StringC1EPKc>
  String buffer = "";
    1070:	60 e2       	ldi	r22, 0x20	; 32
    1072:	71 e0       	ldi	r23, 0x01	; 1
    1074:	ce 01       	movw	r24, r28
    1076:	07 96       	adiw	r24, 0x07	; 7
    1078:	0e 94 9d 06 	call	0xd3a	; 0xd3a <_ZN6StringC1EPKc>
  
  _serialPort->print("\r");
    107c:	6f e1       	ldi	r22, 0x1F	; 31
    107e:	71 e0       	ldi	r23, 0x01	; 1
    1080:	d8 01       	movw	r26, r16
    1082:	91 96       	adiw	r26, 0x21	; 33
    1084:	8d 91       	ld	r24, X+
    1086:	9c 91       	ld	r25, X
    1088:	92 97       	sbiw	r26, 0x22	; 34
    108a:	0e 94 05 03 	call	0x60a	; 0x60a <_ZN5Print5printEPKc>
  _serialPort->flush();
    108e:	f8 01       	movw	r30, r16
    1090:	81 a1       	ldd	r24, Z+33	; 0x21
    1092:	92 a1       	ldd	r25, Z+34	; 0x22
    1094:	dc 01       	movw	r26, r24
    1096:	ed 91       	ld	r30, X+
    1098:	fc 91       	ld	r31, X
    109a:	02 84       	ldd	r0, Z+10	; 0x0a
    109c:	f3 85       	ldd	r31, Z+11	; 0x0b
    109e:	e0 2d       	mov	r30, r0
    10a0:	09 95       	icall
  
  // We're going to use the internal timer to track the elapsed time since we
  //  issued the reset. Bog-standard Arduino stuff.
  unsigned long startTime = millis();
    10a2:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <millis>
    10a6:	6b 01       	movw	r12, r22
    10a8:	7c 01       	movw	r14, r24
  
  // This is our timeout loop. We're going to give our module 1s to come up
  //  with a new character, and return with a timeout failure otherwise.
  while (buffer.endsWith(EOL) != true)
    10aa:	be 01       	movw	r22, r28
    10ac:	63 5f       	subi	r22, 0xF3	; 243
    10ae:	7f 4f       	sbci	r23, 0xFF	; 255
    10b0:	ce 01       	movw	r24, r28
    10b2:	07 96       	adiw	r24, 0x07	; 7
    10b4:	0e 94 4d 07 	call	0xe9a	; 0xe9a <_ZNK6String8endsWithERKS_>
    10b8:	81 30       	cpi	r24, 0x01	; 1
    10ba:	89 f1       	breq	.+98     	; 0x111e <_ZN8BLEMate210knownStartEv+0xe4>
  {
    // Purge the serial data received from the module, along with any data in
    //  the buffer at the time this command was sent.
    if (_serialPort->available() > 0) 
    10bc:	f8 01       	movw	r30, r16
    10be:	81 a1       	ldd	r24, Z+33	; 0x21
    10c0:	92 a1       	ldd	r25, Z+34	; 0x22
    10c2:	dc 01       	movw	r26, r24
    10c4:	ed 91       	ld	r30, X+
    10c6:	fc 91       	ld	r31, X
    10c8:	04 80       	ldd	r0, Z+4	; 0x04
    10ca:	f5 81       	ldd	r31, Z+5	; 0x05
    10cc:	e0 2d       	mov	r30, r0
    10ce:	09 95       	icall
    10d0:	18 16       	cp	r1, r24
    10d2:	19 06       	cpc	r1, r25
    10d4:	9c f4       	brge	.+38     	; 0x10fc <_ZN8BLEMate210knownStartEv+0xc2>
    {
      buffer.concat(char(_serialPort->read()));
    10d6:	f8 01       	movw	r30, r16
    10d8:	81 a1       	ldd	r24, Z+33	; 0x21
    10da:	92 a1       	ldd	r25, Z+34	; 0x22
    10dc:	dc 01       	movw	r26, r24
    10de:	ed 91       	ld	r30, X+
    10e0:	fc 91       	ld	r31, X
    10e2:	06 80       	ldd	r0, Z+6	; 0x06
    10e4:	f7 81       	ldd	r31, Z+7	; 0x07
    10e6:	e0 2d       	mov	r30, r0
    10e8:	09 95       	icall
    10ea:	68 2f       	mov	r22, r24
    10ec:	ce 01       	movw	r24, r28
    10ee:	07 96       	adiw	r24, 0x07	; 7
    10f0:	0e 94 07 07 	call	0xe0e	; 0xe0e <_ZN6String6concatEc>
      startTime = millis();
    10f4:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <millis>
    10f8:	6b 01       	movw	r12, r22
    10fa:	7c 01       	movw	r14, r24
    }
    if ((startTime + 1000) < millis()) return TIMEOUT_ERROR;
    10fc:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <millis>
    1100:	46 01       	movw	r8, r12
    1102:	57 01       	movw	r10, r14
    1104:	b8 ee       	ldi	r27, 0xE8	; 232
    1106:	8b 0e       	add	r8, r27
    1108:	b3 e0       	ldi	r27, 0x03	; 3
    110a:	9b 1e       	adc	r9, r27
    110c:	a1 1c       	adc	r10, r1
    110e:	b1 1c       	adc	r11, r1
    1110:	86 16       	cp	r8, r22
    1112:	97 06       	cpc	r9, r23
    1114:	a8 06       	cpc	r10, r24
    1116:	b9 06       	cpc	r11, r25
    1118:	40 f6       	brcc	.-112    	; 0x10aa <_ZN8BLEMate210knownStartEv+0x70>
    111a:	1e ef       	ldi	r17, 0xFE	; 254
    111c:	12 c0       	rjmp	.+36     	; 0x1142 <_ZN8BLEMate210knownStartEv+0x108>
  }
  if (buffer.startsWith("ERR")) return SUCCESS;
    111e:	61 e2       	ldi	r22, 0x21	; 33
    1120:	71 e0       	ldi	r23, 0x01	; 1
    1122:	ce 01       	movw	r24, r28
    1124:	01 96       	adiw	r24, 0x01	; 1
    1126:	0e 94 9d 06 	call	0xd3a	; 0xd3a <_ZN6StringC1EPKc>
    112a:	be 01       	movw	r22, r28
    112c:	6f 5f       	subi	r22, 0xFF	; 255
    112e:	7f 4f       	sbci	r23, 0xFF	; 255
    1130:	ce 01       	movw	r24, r28
    1132:	07 96       	adiw	r24, 0x07	; 7
    1134:	0e 94 3e 07 	call	0xe7c	; 0xe7c <_ZNK6String10startsWithERKS_>
    1138:	ce 01       	movw	r24, r28
    113a:	01 96       	adiw	r24, 0x01	; 1
    113c:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN6StringD1Ev>
    1140:	11 e0       	ldi	r17, 0x01	; 1
//  already in the module's buffer, we can purge it by sending an EOL to the
//  the module. If not, we'll just get an error.
BLEMate2::opResult BLEMate2::knownStart()
{
  String EOL = String("\n\r");
  String buffer = "";
    1142:	ce 01       	movw	r24, r28
    1144:	07 96       	adiw	r24, 0x07	; 7
    1146:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN6StringD1Ev>
      startTime = millis();
    }
    if ((startTime + 1000) < millis()) return TIMEOUT_ERROR;
  }
  if (buffer.startsWith("ERR")) return SUCCESS;
  else return SUCCESS;
    114a:	ce 01       	movw	r24, r28
    114c:	0d 96       	adiw	r24, 0x0d	; 13
    114e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN6StringD1Ev>
}
    1152:	81 2f       	mov	r24, r17
    1154:	62 96       	adiw	r28, 0x12	; 18
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	f8 94       	cli
    115a:	de bf       	out	0x3e, r29	; 62
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	cd bf       	out	0x3d, r28	; 61
    1160:	df 91       	pop	r29
    1162:	cf 91       	pop	r28
    1164:	1f 91       	pop	r17
    1166:	0f 91       	pop	r16
    1168:	ff 90       	pop	r15
    116a:	ef 90       	pop	r14
    116c:	df 90       	pop	r13
    116e:	cf 90       	pop	r12
    1170:	bf 90       	pop	r11
    1172:	af 90       	pop	r10
    1174:	9f 90       	pop	r9
    1176:	8f 90       	pop	r8
    1178:	08 95       	ret

0000117a <_ZN8BLEMate26stdCmdE6String>:
}

// There are several commands that look for either OK or ERROR; let's abstract
//  support for those commands to one single private function, to save memory.
BLEMate2::opResult BLEMate2::stdCmd(String command)
{
    117a:	bf 92       	push	r11
    117c:	cf 92       	push	r12
    117e:	df 92       	push	r13
    1180:	ef 92       	push	r14
    1182:	ff 92       	push	r15
    1184:	0f 93       	push	r16
    1186:	1f 93       	push	r17
    1188:	cf 93       	push	r28
    118a:	df 93       	push	r29
    118c:	cd b7       	in	r28, 0x3d	; 61
    118e:	de b7       	in	r29, 0x3e	; 62
    1190:	62 97       	sbiw	r28, 0x12	; 18
    1192:	0f b6       	in	r0, 0x3f	; 63
    1194:	f8 94       	cli
    1196:	de bf       	out	0x3e, r29	; 62
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	cd bf       	out	0x3d, r28	; 61
    119c:	8c 01       	movw	r16, r24
    119e:	7b 01       	movw	r14, r22
  String buffer;
    11a0:	60 e2       	ldi	r22, 0x20	; 32
    11a2:	71 e0       	ldi	r23, 0x01	; 1
    11a4:	ce 01       	movw	r24, r28
    11a6:	0d 96       	adiw	r24, 0x0d	; 13
    11a8:	0e 94 9d 06 	call	0xd3a	; 0xd3a <_ZN6StringC1EPKc>
  String EOL = String("\n\r");
    11ac:	6e e1       	ldi	r22, 0x1E	; 30
    11ae:	71 e0       	ldi	r23, 0x01	; 1
    11b0:	ce 01       	movw	r24, r28
    11b2:	07 96       	adiw	r24, 0x07	; 7
    11b4:	0e 94 9d 06 	call	0xd3a	; 0xd3a <_ZN6StringC1EPKc>
  
  knownStart(); // Clear the serial buffer in the module and the Arduino.
    11b8:	c8 01       	movw	r24, r16
    11ba:	0e 94 1d 08 	call	0x103a	; 0x103a <_ZN8BLEMate210knownStartEv>
  
  _serialPort->print(command);
    11be:	b7 01       	movw	r22, r14
    11c0:	d8 01       	movw	r26, r16
    11c2:	91 96       	adiw	r26, 0x21	; 33
    11c4:	8d 91       	ld	r24, X+
    11c6:	9c 91       	ld	r25, X
    11c8:	92 97       	sbiw	r26, 0x22	; 34
    11ca:	0e 94 f7 02 	call	0x5ee	; 0x5ee <_ZN5Print5printERK6String>
  _serialPort->print("\r");
    11ce:	6f e1       	ldi	r22, 0x1F	; 31
    11d0:	71 e0       	ldi	r23, 0x01	; 1
    11d2:	f8 01       	movw	r30, r16
    11d4:	81 a1       	ldd	r24, Z+33	; 0x21
    11d6:	92 a1       	ldd	r25, Z+34	; 0x22
    11d8:	0e 94 05 03 	call	0x60a	; 0x60a <_ZN5Print5printEPKc>
  _serialPort->flush();
    11dc:	d8 01       	movw	r26, r16
    11de:	91 96       	adiw	r26, 0x21	; 33
    11e0:	8d 91       	ld	r24, X+
    11e2:	9c 91       	ld	r25, X
    11e4:	92 97       	sbiw	r26, 0x22	; 34
    11e6:	dc 01       	movw	r26, r24
    11e8:	ed 91       	ld	r30, X+
    11ea:	fc 91       	ld	r31, X
    11ec:	02 84       	ldd	r0, Z+10	; 0x0a
    11ee:	f3 85       	ldd	r31, Z+11	; 0x0b
    11f0:	e0 2d       	mov	r30, r0
    11f2:	09 95       	icall
  
  // We're going to use the internal timer to track the elapsed time since we
  //  issued the command. Bog-standard Arduino stuff.
  unsigned long startTime = millis();
    11f4:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <millis>
    11f8:	6b 01       	movw	r12, r22
    11fa:	7c 01       	movw	r14, r24
    
  // This is our timeout loop. We'll give the module 3 seconds.
  while ((startTime + 3000) > millis())
    11fc:	b8 eb       	ldi	r27, 0xB8	; 184
    11fe:	cb 0e       	add	r12, r27
    1200:	bb e0       	ldi	r27, 0x0B	; 11
    1202:	db 1e       	adc	r13, r27
    1204:	e1 1c       	adc	r14, r1
    1206:	f1 1c       	adc	r15, r1
    1208:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <millis>
    120c:	6c 15       	cp	r22, r12
    120e:	7d 05       	cpc	r23, r13
    1210:	8e 05       	cpc	r24, r14
    1212:	9f 05       	cpc	r25, r15
    1214:	08 f0       	brcs	.+2      	; 0x1218 <_ZN8BLEMate26stdCmdE6String+0x9e>
    1216:	54 c0       	rjmp	.+168    	; 0x12c0 <_ZN8BLEMate26stdCmdE6String+0x146>
  {
    // Grow the current buffered data, until we receive the EOL string.    
    if (_serialPort->available() > 0) buffer.concat(char(_serialPort->read()));
    1218:	f8 01       	movw	r30, r16
    121a:	81 a1       	ldd	r24, Z+33	; 0x21
    121c:	92 a1       	ldd	r25, Z+34	; 0x22
    121e:	dc 01       	movw	r26, r24
    1220:	ed 91       	ld	r30, X+
    1222:	fc 91       	ld	r31, X
    1224:	04 80       	ldd	r0, Z+4	; 0x04
    1226:	f5 81       	ldd	r31, Z+5	; 0x05
    1228:	e0 2d       	mov	r30, r0
    122a:	09 95       	icall
    122c:	18 16       	cp	r1, r24
    122e:	19 06       	cpc	r1, r25
    1230:	7c f4       	brge	.+30     	; 0x1250 <_ZN8BLEMate26stdCmdE6String+0xd6>
    1232:	f8 01       	movw	r30, r16
    1234:	81 a1       	ldd	r24, Z+33	; 0x21
    1236:	92 a1       	ldd	r25, Z+34	; 0x22
    1238:	dc 01       	movw	r26, r24
    123a:	ed 91       	ld	r30, X+
    123c:	fc 91       	ld	r31, X
    123e:	06 80       	ldd	r0, Z+6	; 0x06
    1240:	f7 81       	ldd	r31, Z+7	; 0x07
    1242:	e0 2d       	mov	r30, r0
    1244:	09 95       	icall
    1246:	68 2f       	mov	r22, r24
    1248:	ce 01       	movw	r24, r28
    124a:	0d 96       	adiw	r24, 0x0d	; 13
    124c:	0e 94 07 07 	call	0xe0e	; 0xe0e <_ZN6String6concatEc>

    if (buffer.endsWith(EOL))
    1250:	be 01       	movw	r22, r28
    1252:	69 5f       	subi	r22, 0xF9	; 249
    1254:	7f 4f       	sbci	r23, 0xFF	; 255
    1256:	ce 01       	movw	r24, r28
    1258:	0d 96       	adiw	r24, 0x0d	; 13
    125a:	0e 94 4d 07 	call	0xe9a	; 0xe9a <_ZNK6String8endsWithERKS_>
    125e:	88 23       	and	r24, r24
    1260:	99 f2       	breq	.-90     	; 0x1208 <_ZN8BLEMate26stdCmdE6String+0x8e>
    {
      if (buffer.startsWith("ER")) return MODULE_ERROR;
    1262:	6a e2       	ldi	r22, 0x2A	; 42
    1264:	71 e0       	ldi	r23, 0x01	; 1
    1266:	ce 01       	movw	r24, r28
    1268:	01 96       	adiw	r24, 0x01	; 1
    126a:	0e 94 9d 06 	call	0xd3a	; 0xd3a <_ZN6StringC1EPKc>
    126e:	be 01       	movw	r22, r28
    1270:	6f 5f       	subi	r22, 0xFF	; 255
    1272:	7f 4f       	sbci	r23, 0xFF	; 255
    1274:	ce 01       	movw	r24, r28
    1276:	0d 96       	adiw	r24, 0x0d	; 13
    1278:	0e 94 3e 07 	call	0xe7c	; 0xe7c <_ZNK6String10startsWithERKS_>
    127c:	b8 2e       	mov	r11, r24
    127e:	ce 01       	movw	r24, r28
    1280:	01 96       	adiw	r24, 0x01	; 1
    1282:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN6StringD1Ev>
    1286:	b1 10       	cpse	r11, r1
    1288:	1d c0       	rjmp	.+58     	; 0x12c4 <_ZN8BLEMate26stdCmdE6String+0x14a>
      if (buffer.startsWith("OK")) return SUCCESS;
    128a:	63 e3       	ldi	r22, 0x33	; 51
    128c:	71 e0       	ldi	r23, 0x01	; 1
    128e:	ce 01       	movw	r24, r28
    1290:	01 96       	adiw	r24, 0x01	; 1
    1292:	0e 94 9d 06 	call	0xd3a	; 0xd3a <_ZN6StringC1EPKc>
    1296:	be 01       	movw	r22, r28
    1298:	6f 5f       	subi	r22, 0xFF	; 255
    129a:	7f 4f       	sbci	r23, 0xFF	; 255
    129c:	ce 01       	movw	r24, r28
    129e:	0d 96       	adiw	r24, 0x0d	; 13
    12a0:	0e 94 3e 07 	call	0xe7c	; 0xe7c <_ZNK6String10startsWithERKS_>
    12a4:	b8 2e       	mov	r11, r24
    12a6:	ce 01       	movw	r24, r28
    12a8:	01 96       	adiw	r24, 0x01	; 1
    12aa:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN6StringD1Ev>
    12ae:	b1 10       	cpse	r11, r1
    12b0:	0b c0       	rjmp	.+22     	; 0x12c8 <_ZN8BLEMate26stdCmdE6String+0x14e>
      buffer = "";
    12b2:	60 e2       	ldi	r22, 0x20	; 32
    12b4:	71 e0       	ldi	r23, 0x01	; 1
    12b6:	ce 01       	movw	r24, r28
    12b8:	0d 96       	adiw	r24, 0x0d	; 13
    12ba:	0e 94 b3 06 	call	0xd66	; 0xd66 <_ZN6StringaSEPKc>
    12be:	a4 cf       	rjmp	.-184    	; 0x1208 <_ZN8BLEMate26stdCmdE6String+0x8e>
    }    
  }
  return TIMEOUT_ERROR;
    12c0:	1e ef       	ldi	r17, 0xFE	; 254
    12c2:	03 c0       	rjmp	.+6      	; 0x12ca <_ZN8BLEMate26stdCmdE6String+0x150>
    // Grow the current buffered data, until we receive the EOL string.    
    if (_serialPort->available() > 0) buffer.concat(char(_serialPort->read()));

    if (buffer.endsWith(EOL))
    {
      if (buffer.startsWith("ER")) return MODULE_ERROR;
    12c4:	1f ef       	ldi	r17, 0xFF	; 255
    12c6:	01 c0       	rjmp	.+2      	; 0x12ca <_ZN8BLEMate26stdCmdE6String+0x150>
      if (buffer.startsWith("OK")) return SUCCESS;
    12c8:	11 e0       	ldi	r17, 0x01	; 1
// There are several commands that look for either OK or ERROR; let's abstract
//  support for those commands to one single private function, to save memory.
BLEMate2::opResult BLEMate2::stdCmd(String command)
{
  String buffer;
  String EOL = String("\n\r");
    12ca:	ce 01       	movw	r24, r28
    12cc:	07 96       	adiw	r24, 0x07	; 7
    12ce:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN6StringD1Ev>
      if (buffer.startsWith("ER")) return MODULE_ERROR;
      if (buffer.startsWith("OK")) return SUCCESS;
      buffer = "";
    }    
  }
  return TIMEOUT_ERROR;
    12d2:	ce 01       	movw	r24, r28
    12d4:	0d 96       	adiw	r24, 0x0d	; 13
    12d6:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN6StringD1Ev>
}
    12da:	81 2f       	mov	r24, r17
    12dc:	62 96       	adiw	r28, 0x12	; 18
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	f8 94       	cli
    12e2:	de bf       	out	0x3e, r29	; 62
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	cd bf       	out	0x3d, r28	; 61
    12e8:	df 91       	pop	r29
    12ea:	cf 91       	pop	r28
    12ec:	1f 91       	pop	r17
    12ee:	0f 91       	pop	r16
    12f0:	ff 90       	pop	r15
    12f2:	ef 90       	pop	r14
    12f4:	df 90       	pop	r13
    12f6:	cf 90       	pop	r12
    12f8:	bf 90       	pop	r11
    12fa:	08 95       	ret

000012fc <_ZN8BLEMate27restoreEv>:

// Issue the "RESTORE" command over the serial port to the BC118. This will
//  reset the device to factory default settings, which is a good thing to do
//  once in a while.
BLEMate2::opResult BLEMate2::restore()
{
    12fc:	0f 93       	push	r16
    12fe:	1f 93       	push	r17
    1300:	cf 93       	push	r28
    1302:	df 93       	push	r29
    1304:	00 d0       	rcall	.+0      	; 0x1306 <_ZN8BLEMate27restoreEv+0xa>
    1306:	00 d0       	rcall	.+0      	; 0x1308 <_ZN8BLEMate27restoreEv+0xc>
    1308:	00 d0       	rcall	.+0      	; 0x130a <_ZN8BLEMate27restoreEv+0xe>
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
    130e:	8c 01       	movw	r16, r24
  return stdCmd("RTR");
    1310:	66 e3       	ldi	r22, 0x36	; 54
    1312:	71 e0       	ldi	r23, 0x01	; 1
    1314:	ce 01       	movw	r24, r28
    1316:	01 96       	adiw	r24, 0x01	; 1
    1318:	0e 94 9d 06 	call	0xd3a	; 0xd3a <_ZN6StringC1EPKc>
    131c:	be 01       	movw	r22, r28
    131e:	6f 5f       	subi	r22, 0xFF	; 255
    1320:	7f 4f       	sbci	r23, 0xFF	; 255
    1322:	c8 01       	movw	r24, r16
    1324:	0e 94 bd 08 	call	0x117a	; 0x117a <_ZN8BLEMate26stdCmdE6String>
    1328:	18 2f       	mov	r17, r24
    132a:	ce 01       	movw	r24, r28
    132c:	01 96       	adiw	r24, 0x01	; 1
    132e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN6StringD1Ev>
}
    1332:	81 2f       	mov	r24, r17
    1334:	26 96       	adiw	r28, 0x06	; 6
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	de bf       	out	0x3e, r29	; 62
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	cd bf       	out	0x3d, r28	; 61
    1340:	df 91       	pop	r29
    1342:	cf 91       	pop	r28
    1344:	1f 91       	pop	r17
    1346:	0f 91       	pop	r16
    1348:	08 95       	ret

0000134a <_ZN8BLEMate211writeConfigEv>:

// Issue the "WRITE" command over the serial port to the BC118. This will
//  save the current settings to NVM, so they will be applied after a reset
//  or power cycle.
BLEMate2::opResult BLEMate2::writeConfig()
{
    134a:	0f 93       	push	r16
    134c:	1f 93       	push	r17
    134e:	cf 93       	push	r28
    1350:	df 93       	push	r29
    1352:	00 d0       	rcall	.+0      	; 0x1354 <_ZN8BLEMate211writeConfigEv+0xa>
    1354:	00 d0       	rcall	.+0      	; 0x1356 <_ZN8BLEMate211writeConfigEv+0xc>
    1356:	00 d0       	rcall	.+0      	; 0x1358 <_ZN8BLEMate211writeConfigEv+0xe>
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
    135c:	8c 01       	movw	r16, r24
  return stdCmd("WRT");
    135e:	6a e3       	ldi	r22, 0x3A	; 58
    1360:	71 e0       	ldi	r23, 0x01	; 1
    1362:	ce 01       	movw	r24, r28
    1364:	01 96       	adiw	r24, 0x01	; 1
    1366:	0e 94 9d 06 	call	0xd3a	; 0xd3a <_ZN6StringC1EPKc>
    136a:	be 01       	movw	r22, r28
    136c:	6f 5f       	subi	r22, 0xFF	; 255
    136e:	7f 4f       	sbci	r23, 0xFF	; 255
    1370:	c8 01       	movw	r24, r16
    1372:	0e 94 bd 08 	call	0x117a	; 0x117a <_ZN8BLEMate26stdCmdE6String>
    1376:	18 2f       	mov	r17, r24
    1378:	ce 01       	movw	r24, r28
    137a:	01 96       	adiw	r24, 0x01	; 1
    137c:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN6StringD1Ev>
}
    1380:	81 2f       	mov	r24, r17
    1382:	26 96       	adiw	r28, 0x06	; 6
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	f8 94       	cli
    1388:	de bf       	out	0x3e, r29	; 62
    138a:	0f be       	out	0x3f, r0	; 63
    138c:	cd bf       	out	0x3d, r28	; 61
    138e:	df 91       	pop	r29
    1390:	cf 91       	pop	r28
    1392:	1f 91       	pop	r17
    1394:	0f 91       	pop	r16
    1396:	08 95       	ret

00001398 <_ZN8BLEMate25resetEv>:
//    READY
// If there is some sort of error, the module will respond with
//    ERR
// We'll buffer characters until we see an EOL (\n\r), then check the string.
BLEMate2::opResult BLEMate2::reset()
{
    1398:	bf 92       	push	r11
    139a:	cf 92       	push	r12
    139c:	df 92       	push	r13
    139e:	ef 92       	push	r14
    13a0:	ff 92       	push	r15
    13a2:	0f 93       	push	r16
    13a4:	1f 93       	push	r17
    13a6:	cf 93       	push	r28
    13a8:	df 93       	push	r29
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
    13ae:	62 97       	sbiw	r28, 0x12	; 18
    13b0:	0f b6       	in	r0, 0x3f	; 63
    13b2:	f8 94       	cli
    13b4:	de bf       	out	0x3e, r29	; 62
    13b6:	0f be       	out	0x3f, r0	; 63
    13b8:	cd bf       	out	0x3d, r28	; 61
    13ba:	8c 01       	movw	r16, r24
  String buffer;
    13bc:	60 e2       	ldi	r22, 0x20	; 32
    13be:	71 e0       	ldi	r23, 0x01	; 1
    13c0:	ce 01       	movw	r24, r28
    13c2:	0d 96       	adiw	r24, 0x0d	; 13
    13c4:	0e 94 9d 06 	call	0xd3a	; 0xd3a <_ZN6StringC1EPKc>
  String EOL = String("\n\r");
    13c8:	6e e1       	ldi	r22, 0x1E	; 30
    13ca:	71 e0       	ldi	r23, 0x01	; 1
    13cc:	ce 01       	movw	r24, r28
    13ce:	07 96       	adiw	r24, 0x07	; 7
    13d0:	0e 94 9d 06 	call	0xd3a	; 0xd3a <_ZN6StringC1EPKc>
  
  knownStart();
    13d4:	c8 01       	movw	r24, r16
    13d6:	0e 94 1d 08 	call	0x103a	; 0x103a <_ZN8BLEMate210knownStartEv>
  
  // Now issue the reset command.
  _serialPort->print("RST");
    13da:	6b e6       	ldi	r22, 0x6B	; 107
    13dc:	71 e0       	ldi	r23, 0x01	; 1
    13de:	d8 01       	movw	r26, r16
    13e0:	91 96       	adiw	r26, 0x21	; 33
    13e2:	8d 91       	ld	r24, X+
    13e4:	9c 91       	ld	r25, X
    13e6:	92 97       	sbiw	r26, 0x22	; 34
    13e8:	0e 94 05 03 	call	0x60a	; 0x60a <_ZN5Print5printEPKc>
  _serialPort->print("\r");
    13ec:	6f e1       	ldi	r22, 0x1F	; 31
    13ee:	71 e0       	ldi	r23, 0x01	; 1
    13f0:	f8 01       	movw	r30, r16
    13f2:	81 a1       	ldd	r24, Z+33	; 0x21
    13f4:	92 a1       	ldd	r25, Z+34	; 0x22
    13f6:	0e 94 05 03 	call	0x60a	; 0x60a <_ZN5Print5printEPKc>
  _serialPort->flush();
    13fa:	d8 01       	movw	r26, r16
    13fc:	91 96       	adiw	r26, 0x21	; 33
    13fe:	8d 91       	ld	r24, X+
    1400:	9c 91       	ld	r25, X
    1402:	92 97       	sbiw	r26, 0x22	; 34
    1404:	dc 01       	movw	r26, r24
    1406:	ed 91       	ld	r30, X+
    1408:	fc 91       	ld	r31, X
    140a:	02 84       	ldd	r0, Z+10	; 0x0a
    140c:	f3 85       	ldd	r31, Z+11	; 0x0b
    140e:	e0 2d       	mov	r30, r0
    1410:	09 95       	icall
  
  // We're going to use the internal timer to track the elapsed time since we
  //  issued the reset. Bog-standard Arduino stuff.
  unsigned long resetStart = millis();
    1412:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <millis>
    1416:	6b 01       	movw	r12, r22
    1418:	7c 01       	movw	r14, r24
  
  // This is our timeout loop. We'll give the module 6 seconds to reset.
  while ((resetStart + 6000) > millis())
    141a:	b0 e7       	ldi	r27, 0x70	; 112
    141c:	cb 0e       	add	r12, r27
    141e:	b7 e1       	ldi	r27, 0x17	; 23
    1420:	db 1e       	adc	r13, r27
    1422:	e1 1c       	adc	r14, r1
    1424:	f1 1c       	adc	r15, r1
    1426:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <millis>
    142a:	6c 15       	cp	r22, r12
    142c:	7d 05       	cpc	r23, r13
    142e:	8e 05       	cpc	r24, r14
    1430:	9f 05       	cpc	r25, r15
    1432:	08 f0       	brcs	.+2      	; 0x1436 <_ZN8BLEMate25resetEv+0x9e>
    1434:	83 c0       	rjmp	.+262    	; 0x153c <_ZN8BLEMate25resetEv+0x1a4>
  {
    // Grow the current buffered data, until we receive the EOL string.    
    if (_serialPort->available() > 0) 
    1436:	f8 01       	movw	r30, r16
    1438:	81 a1       	ldd	r24, Z+33	; 0x21
    143a:	92 a1       	ldd	r25, Z+34	; 0x22
    143c:	dc 01       	movw	r26, r24
    143e:	ed 91       	ld	r30, X+
    1440:	fc 91       	ld	r31, X
    1442:	04 80       	ldd	r0, Z+4	; 0x04
    1444:	f5 81       	ldd	r31, Z+5	; 0x05
    1446:	e0 2d       	mov	r30, r0
    1448:	09 95       	icall
    144a:	18 16       	cp	r1, r24
    144c:	19 06       	cpc	r1, r25
    144e:	7c f4       	brge	.+30     	; 0x146e <_ZN8BLEMate25resetEv+0xd6>
    {
      char temp = _serialPort->read();
    1450:	f8 01       	movw	r30, r16
    1452:	81 a1       	ldd	r24, Z+33	; 0x21
    1454:	92 a1       	ldd	r25, Z+34	; 0x22
    1456:	dc 01       	movw	r26, r24
    1458:	ed 91       	ld	r30, X+
    145a:	fc 91       	ld	r31, X
    145c:	06 80       	ldd	r0, Z+6	; 0x06
    145e:	f7 81       	ldd	r31, Z+7	; 0x07
    1460:	e0 2d       	mov	r30, r0
    1462:	09 95       	icall
      buffer.concat(temp);
    1464:	68 2f       	mov	r22, r24
    1466:	ce 01       	movw	r24, r28
    1468:	0d 96       	adiw	r24, 0x0d	; 13
    146a:	0e 94 07 07 	call	0xe0e	; 0xe0e <_ZN6String6concatEc>
    }
    
    if (buffer.endsWith(EOL))
    146e:	be 01       	movw	r22, r28
    1470:	69 5f       	subi	r22, 0xF9	; 249
    1472:	7f 4f       	sbci	r23, 0xFF	; 255
    1474:	ce 01       	movw	r24, r28
    1476:	0d 96       	adiw	r24, 0x0d	; 13
    1478:	0e 94 4d 07 	call	0xe9a	; 0xe9a <_ZNK6String8endsWithERKS_>
    147c:	88 23       	and	r24, r24
    147e:	99 f2       	breq	.-90     	; 0x1426 <_ZN8BLEMate25resetEv+0x8e>
    {
      // If ERR or READY, we've finished the reset. Otherwise, just discard
      //  the data and wait for the next EOL.
      if (buffer.startsWith("ER")) return MODULE_ERROR;
    1480:	6a e2       	ldi	r22, 0x2A	; 42
    1482:	71 e0       	ldi	r23, 0x01	; 1
    1484:	ce 01       	movw	r24, r28
    1486:	01 96       	adiw	r24, 0x01	; 1
    1488:	0e 94 9d 06 	call	0xd3a	; 0xd3a <_ZN6StringC1EPKc>
    148c:	be 01       	movw	r22, r28
    148e:	6f 5f       	subi	r22, 0xFF	; 255
    1490:	7f 4f       	sbci	r23, 0xFF	; 255
    1492:	ce 01       	movw	r24, r28
    1494:	0d 96       	adiw	r24, 0x0d	; 13
    1496:	0e 94 3e 07 	call	0xe7c	; 0xe7c <_ZNK6String10startsWithERKS_>
    149a:	b8 2e       	mov	r11, r24
    149c:	ce 01       	movw	r24, r28
    149e:	01 96       	adiw	r24, 0x01	; 1
    14a0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN6StringD1Ev>
    14a4:	b1 10       	cpse	r11, r1
    14a6:	4c c0       	rjmp	.+152    	; 0x1540 <_ZN8BLEMate25resetEv+0x1a8>
      if (buffer.startsWith("RE")) 
    14a8:	6f e6       	ldi	r22, 0x6F	; 111
    14aa:	71 e0       	ldi	r23, 0x01	; 1
    14ac:	ce 01       	movw	r24, r28
    14ae:	01 96       	adiw	r24, 0x01	; 1
    14b0:	0e 94 9d 06 	call	0xd3a	; 0xd3a <_ZN6StringC1EPKc>
    14b4:	be 01       	movw	r22, r28
    14b6:	6f 5f       	subi	r22, 0xFF	; 255
    14b8:	7f 4f       	sbci	r23, 0xFF	; 255
    14ba:	ce 01       	movw	r24, r28
    14bc:	0d 96       	adiw	r24, 0x0d	; 13
    14be:	0e 94 3e 07 	call	0xe7c	; 0xe7c <_ZNK6String10startsWithERKS_>
    14c2:	b8 2e       	mov	r11, r24
    14c4:	ce 01       	movw	r24, r28
    14c6:	01 96       	adiw	r24, 0x01	; 1
    14c8:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN6StringD1Ev>
    14cc:	bb 20       	and	r11, r11
    14ce:	79 f1       	breq	.+94     	; 0x152e <_ZN8BLEMate25resetEv+0x196>
      {
        stdCmd("SCN OFF"); // When we come out of reset, we *could* be
    14d0:	62 e7       	ldi	r22, 0x72	; 114
    14d2:	71 e0       	ldi	r23, 0x01	; 1
    14d4:	ce 01       	movw	r24, r28
    14d6:	01 96       	adiw	r24, 0x01	; 1
    14d8:	0e 94 9d 06 	call	0xd3a	; 0xd3a <_ZN6StringC1EPKc>
    14dc:	be 01       	movw	r22, r28
    14de:	6f 5f       	subi	r22, 0xFF	; 255
    14e0:	7f 4f       	sbci	r23, 0xFF	; 255
    14e2:	c8 01       	movw	r24, r16
    14e4:	0e 94 bd 08 	call	0x117a	; 0x117a <_ZN8BLEMate26stdCmdE6String>
    14e8:	ce 01       	movw	r24, r28
    14ea:	01 96       	adiw	r24, 0x01	; 1
    14ec:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN6StringD1Ev>
                           //  in scan mode. We don't want that; it's too
                           //  random and noisy.
        delay(500);        // Let the scanning noise complete.
    14f0:	64 ef       	ldi	r22, 0xF4	; 244
    14f2:	71 e0       	ldi	r23, 0x01	; 1
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	0e 94 17 05 	call	0xa2e	; 0xa2e <delay>
        while(_serialPort->available())
    14fc:	f8 01       	movw	r30, r16
    14fe:	81 a1       	ldd	r24, Z+33	; 0x21
    1500:	92 a1       	ldd	r25, Z+34	; 0x22
    1502:	dc 01       	movw	r26, r24
    1504:	ed 91       	ld	r30, X+
    1506:	fc 91       	ld	r31, X
    1508:	04 80       	ldd	r0, Z+4	; 0x04
    150a:	f5 81       	ldd	r31, Z+5	; 0x05
    150c:	e0 2d       	mov	r30, r0
    150e:	09 95       	icall
    1510:	89 2b       	or	r24, r25
    1512:	59 f0       	breq	.+22     	; 0x152a <_ZN8BLEMate25resetEv+0x192>
        {
          _serialPort->read();
    1514:	f8 01       	movw	r30, r16
    1516:	81 a1       	ldd	r24, Z+33	; 0x21
    1518:	92 a1       	ldd	r25, Z+34	; 0x22
    151a:	dc 01       	movw	r26, r24
    151c:	ed 91       	ld	r30, X+
    151e:	fc 91       	ld	r31, X
    1520:	06 80       	ldd	r0, Z+6	; 0x06
    1522:	f7 81       	ldd	r31, Z+7	; 0x07
    1524:	e0 2d       	mov	r30, r0
    1526:	09 95       	icall
    1528:	e9 cf       	rjmp	.-46     	; 0x14fc <_ZN8BLEMate25resetEv+0x164>
        } 
        return SUCCESS;
    152a:	11 e0       	ldi	r17, 0x01	; 1
    152c:	0a c0       	rjmp	.+20     	; 0x1542 <_ZN8BLEMate25resetEv+0x1aa>
      }
      buffer = "";
    152e:	60 e2       	ldi	r22, 0x20	; 32
    1530:	71 e0       	ldi	r23, 0x01	; 1
    1532:	ce 01       	movw	r24, r28
    1534:	0d 96       	adiw	r24, 0x0d	; 13
    1536:	0e 94 b3 06 	call	0xd66	; 0xd66 <_ZN6StringaSEPKc>
    153a:	75 cf       	rjmp	.-278    	; 0x1426 <_ZN8BLEMate25resetEv+0x8e>
    }    
  }
  return TIMEOUT_ERROR;
    153c:	1e ef       	ldi	r17, 0xFE	; 254
    153e:	01 c0       	rjmp	.+2      	; 0x1542 <_ZN8BLEMate25resetEv+0x1aa>
    
    if (buffer.endsWith(EOL))
    {
      // If ERR or READY, we've finished the reset. Otherwise, just discard
      //  the data and wait for the next EOL.
      if (buffer.startsWith("ER")) return MODULE_ERROR;
    1540:	1f ef       	ldi	r17, 0xFF	; 255
//    ERR
// We'll buffer characters until we see an EOL (\n\r), then check the string.
BLEMate2::opResult BLEMate2::reset()
{
  String buffer;
  String EOL = String("\n\r");
    1542:	ce 01       	movw	r24, r28
    1544:	07 96       	adiw	r24, 0x07	; 7
    1546:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN6StringD1Ev>
        return SUCCESS;
      }
      buffer = "";
    }    
  }
  return TIMEOUT_ERROR;
    154a:	ce 01       	movw	r24, r28
    154c:	0d 96       	adiw	r24, 0x0d	; 13
    154e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN6StringD1Ev>
}
    1552:	81 2f       	mov	r24, r17
    1554:	62 96       	adiw	r28, 0x12	; 18
    1556:	0f b6       	in	r0, 0x3f	; 63
    1558:	f8 94       	cli
    155a:	de bf       	out	0x3e, r29	; 62
    155c:	0f be       	out	0x3f, r0	; 63
    155e:	cd bf       	out	0x3d, r28	; 61
    1560:	df 91       	pop	r29
    1562:	cf 91       	pop	r28
    1564:	1f 91       	pop	r17
    1566:	0f 91       	pop	r16
    1568:	ff 90       	pop	r15
    156a:	ef 90       	pop	r14
    156c:	df 90       	pop	r13
    156e:	cf 90       	pop	r12
    1570:	bf 90       	pop	r11
    1572:	08 95       	ret

00001574 <setup_leds>:
unsigned long timer_top_arrow = 0;
unsigned long timer_right_arrow = 0;
unsigned long timer_status_led = 0;

void setup_leds()
{
    1574:	cf 93       	push	r28
    1576:	c2 e0       	ldi	r28, 0x02	; 2
    for (int i = 2; i < 12; i++) {
        pinMode(i, OUTPUT);
    1578:	61 e0       	ldi	r22, 0x01	; 1
    157a:	8c 2f       	mov	r24, r28
    157c:	0e 94 c0 05 	call	0xb80	; 0xb80 <pinMode>
    1580:	cf 5f       	subi	r28, 0xFF	; 255
unsigned long timer_right_arrow = 0;
unsigned long timer_status_led = 0;

void setup_leds()
{
    for (int i = 2; i < 12; i++) {
    1582:	cc 30       	cpi	r28, 0x0C	; 12
    1584:	c9 f7       	brne	.-14     	; 0x1578 <setup_leds+0x4>
    1586:	c2 e0       	ldi	r28, 0x02	; 2
        pinMode(i, OUTPUT);
    }
    for (int i = 2; i < 12; i++) {
        digitalWrite(i, HIGH);
    1588:	61 e0       	ldi	r22, 0x01	; 1
    158a:	8c 2f       	mov	r24, r28
    158c:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <digitalWrite>
        delay(500);
    1590:	64 ef       	ldi	r22, 0xF4	; 244
    1592:	71 e0       	ldi	r23, 0x01	; 1
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	0e 94 17 05 	call	0xa2e	; 0xa2e <delay>
        digitalWrite(i, LOW);
    159c:	60 e0       	ldi	r22, 0x00	; 0
    159e:	8c 2f       	mov	r24, r28
    15a0:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <digitalWrite>
    15a4:	cf 5f       	subi	r28, 0xFF	; 255
void setup_leds()
{
    for (int i = 2; i < 12; i++) {
        pinMode(i, OUTPUT);
    }
    for (int i = 2; i < 12; i++) {
    15a6:	cc 30       	cpi	r28, 0x0C	; 12
    15a8:	79 f7       	brne	.-34     	; 0x1588 <setup_leds+0x14>
        digitalWrite(i, HIGH);
        delay(500);
        digitalWrite(i, LOW);
    }
}
    15aa:	cf 91       	pop	r28
    15ac:	08 95       	ret

000015ae <blink_left_arrow>:

void blink_left_arrow ()
{ 
    15ae:	0f 93       	push	r16
    15b0:	1f 93       	push	r17
    if ((!left_arrow_is_on) && (millis() - timer_left_arrow > 500)) {
    15b2:	80 91 c1 03 	lds	r24, 0x03C1
    15b6:	81 11       	cpse	r24, r1
    15b8:	2c c0       	rjmp	.+88     	; 0x1612 <blink_left_arrow+0x64>
    15ba:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <millis>
    15be:	00 91 75 03 	lds	r16, 0x0375
    15c2:	10 91 76 03 	lds	r17, 0x0376
    15c6:	20 91 77 03 	lds	r18, 0x0377
    15ca:	30 91 78 03 	lds	r19, 0x0378
    15ce:	60 1b       	sub	r22, r16
    15d0:	71 0b       	sbc	r23, r17
    15d2:	82 0b       	sbc	r24, r18
    15d4:	93 0b       	sbc	r25, r19
    15d6:	65 3f       	cpi	r22, 0xF5	; 245
    15d8:	71 40       	sbci	r23, 0x01	; 1
    15da:	81 05       	cpc	r24, r1
    15dc:	91 05       	cpc	r25, r1
    15de:	c8 f0       	brcs	.+50     	; 0x1612 <blink_left_arrow+0x64>
            digitalWrite(7, HIGH);
    15e0:	61 e0       	ldi	r22, 0x01	; 1
    15e2:	87 e0       	ldi	r24, 0x07	; 7
    15e4:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <digitalWrite>
            digitalWrite(3, HIGH);
    15e8:	61 e0       	ldi	r22, 0x01	; 1
    15ea:	83 e0       	ldi	r24, 0x03	; 3
    15ec:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <digitalWrite>
            digitalWrite(2, HIGH);
    15f0:	61 e0       	ldi	r22, 0x01	; 1
    15f2:	82 e0       	ldi	r24, 0x02	; 2
    15f4:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <digitalWrite>
            timer_left_arrow = millis();
    15f8:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <millis>
    15fc:	60 93 75 03 	sts	0x0375, r22
    1600:	70 93 76 03 	sts	0x0376, r23
    1604:	80 93 77 03 	sts	0x0377, r24
    1608:	90 93 78 03 	sts	0x0378, r25
            left_arrow_is_on = true;
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	80 93 c1 03 	sts	0x03C1, r24
    }
    if (left_arrow_is_on && (millis() - timer_left_arrow > 500)) {
    1612:	80 91 c1 03 	lds	r24, 0x03C1
    1616:	88 23       	and	r24, r24
    1618:	59 f1       	breq	.+86     	; 0x1670 <blink_left_arrow+0xc2>
    161a:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <millis>
    161e:	00 91 75 03 	lds	r16, 0x0375
    1622:	10 91 76 03 	lds	r17, 0x0376
    1626:	20 91 77 03 	lds	r18, 0x0377
    162a:	30 91 78 03 	lds	r19, 0x0378
    162e:	60 1b       	sub	r22, r16
    1630:	71 0b       	sbc	r23, r17
    1632:	82 0b       	sbc	r24, r18
    1634:	93 0b       	sbc	r25, r19
    1636:	65 3f       	cpi	r22, 0xF5	; 245
    1638:	71 40       	sbci	r23, 0x01	; 1
    163a:	81 05       	cpc	r24, r1
    163c:	91 05       	cpc	r25, r1
    163e:	c0 f0       	brcs	.+48     	; 0x1670 <blink_left_arrow+0xc2>
            digitalWrite(7, LOW);
    1640:	60 e0       	ldi	r22, 0x00	; 0
    1642:	87 e0       	ldi	r24, 0x07	; 7
    1644:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <digitalWrite>
            digitalWrite(3, LOW);
    1648:	60 e0       	ldi	r22, 0x00	; 0
    164a:	83 e0       	ldi	r24, 0x03	; 3
    164c:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <digitalWrite>
            digitalWrite(2, LOW);
    1650:	60 e0       	ldi	r22, 0x00	; 0
    1652:	82 e0       	ldi	r24, 0x02	; 2
    1654:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <digitalWrite>
            timer_left_arrow = millis();
    1658:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <millis>
    165c:	60 93 75 03 	sts	0x0375, r22
    1660:	70 93 76 03 	sts	0x0376, r23
    1664:	80 93 77 03 	sts	0x0377, r24
    1668:	90 93 78 03 	sts	0x0378, r25
            left_arrow_is_on = false;
    166c:	10 92 c1 03 	sts	0x03C1, r1
    }
}
    1670:	1f 91       	pop	r17
    1672:	0f 91       	pop	r16
    1674:	08 95       	ret

00001676 <turn_off_left_arrow>:

void turn_off_left_arrow()
{
    digitalWrite(7, LOW);
    1676:	60 e0       	ldi	r22, 0x00	; 0
    1678:	87 e0       	ldi	r24, 0x07	; 7
    167a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <digitalWrite>
    digitalWrite(3, LOW);
    167e:	60 e0       	ldi	r22, 0x00	; 0
    1680:	83 e0       	ldi	r24, 0x03	; 3
    1682:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <digitalWrite>
    digitalWrite(2, LOW);
    1686:	60 e0       	ldi	r22, 0x00	; 0
    1688:	82 e0       	ldi	r24, 0x02	; 2
    168a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <digitalWrite>
    timer_left_arrow = 0;
    168e:	10 92 75 03 	sts	0x0375, r1
    1692:	10 92 76 03 	sts	0x0376, r1
    1696:	10 92 77 03 	sts	0x0377, r1
    169a:	10 92 78 03 	sts	0x0378, r1
    left_arrow_is_on = false;
    169e:	10 92 c1 03 	sts	0x03C1, r1
    16a2:	08 95       	ret

000016a4 <blink_right_arrow>:
}

void blink_right_arrow ()
{
    16a4:	0f 93       	push	r16
    16a6:	1f 93       	push	r17
    if ((!right_arrow_is_on) && (millis() - timer_right_arrow > 500)) {
    16a8:	80 91 c0 03 	lds	r24, 0x03C0
    16ac:	81 11       	cpse	r24, r1
    16ae:	2c c0       	rjmp	.+88     	; 0x1708 <blink_right_arrow+0x64>
    16b0:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <millis>
    16b4:	00 91 6d 03 	lds	r16, 0x036D
    16b8:	10 91 6e 03 	lds	r17, 0x036E
    16bc:	20 91 6f 03 	lds	r18, 0x036F
    16c0:	30 91 70 03 	lds	r19, 0x0370
    16c4:	60 1b       	sub	r22, r16
    16c6:	71 0b       	sbc	r23, r17
    16c8:	82 0b       	sbc	r24, r18
    16ca:	93 0b       	sbc	r25, r19
    16cc:	65 3f       	cpi	r22, 0xF5	; 245
    16ce:	71 40       	sbci	r23, 0x01	; 1
    16d0:	81 05       	cpc	r24, r1
    16d2:	91 05       	cpc	r25, r1
    16d4:	c8 f0       	brcs	.+50     	; 0x1708 <blink_right_arrow+0x64>
        digitalWrite(8, HIGH);
    16d6:	61 e0       	ldi	r22, 0x01	; 1
    16d8:	88 e0       	ldi	r24, 0x08	; 8
    16da:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <digitalWrite>
        digitalWrite(10, HIGH);
    16de:	61 e0       	ldi	r22, 0x01	; 1
    16e0:	8a e0       	ldi	r24, 0x0A	; 10
    16e2:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <digitalWrite>
        digitalWrite(5, HIGH);
    16e6:	61 e0       	ldi	r22, 0x01	; 1
    16e8:	85 e0       	ldi	r24, 0x05	; 5
    16ea:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <digitalWrite>
        timer_right_arrow = millis();
    16ee:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <millis>
    16f2:	60 93 6d 03 	sts	0x036D, r22
    16f6:	70 93 6e 03 	sts	0x036E, r23
    16fa:	80 93 6f 03 	sts	0x036F, r24
    16fe:	90 93 70 03 	sts	0x0370, r25
        right_arrow_is_on = true;
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	80 93 c0 03 	sts	0x03C0, r24
    }
    if (right_arrow_is_on && (millis() - timer_right_arrow > 500)) {
    1708:	80 91 c0 03 	lds	r24, 0x03C0
    170c:	88 23       	and	r24, r24
    170e:	59 f1       	breq	.+86     	; 0x1766 <blink_right_arrow+0xc2>
    1710:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <millis>
    1714:	00 91 6d 03 	lds	r16, 0x036D
    1718:	10 91 6e 03 	lds	r17, 0x036E
    171c:	20 91 6f 03 	lds	r18, 0x036F
    1720:	30 91 70 03 	lds	r19, 0x0370
    1724:	60 1b       	sub	r22, r16
    1726:	71 0b       	sbc	r23, r17
    1728:	82 0b       	sbc	r24, r18
    172a:	93 0b       	sbc	r25, r19
    172c:	65 3f       	cpi	r22, 0xF5	; 245
    172e:	71 40       	sbci	r23, 0x01	; 1
    1730:	81 05       	cpc	r24, r1
    1732:	91 05       	cpc	r25, r1
    1734:	c0 f0       	brcs	.+48     	; 0x1766 <blink_right_arrow+0xc2>
        digitalWrite(8, LOW);
    1736:	60 e0       	ldi	r22, 0x00	; 0
    1738:	88 e0       	ldi	r24, 0x08	; 8
    173a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <digitalWrite>
        digitalWrite(10, LOW);
    173e:	60 e0       	ldi	r22, 0x00	; 0
    1740:	8a e0       	ldi	r24, 0x0A	; 10
    1742:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <digitalWrite>
        digitalWrite(5, LOW);
    1746:	60 e0       	ldi	r22, 0x00	; 0
    1748:	85 e0       	ldi	r24, 0x05	; 5
    174a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <digitalWrite>
        timer_right_arrow = millis();
    174e:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <millis>
    1752:	60 93 6d 03 	sts	0x036D, r22
    1756:	70 93 6e 03 	sts	0x036E, r23
    175a:	80 93 6f 03 	sts	0x036F, r24
    175e:	90 93 70 03 	sts	0x0370, r25
        right_arrow_is_on = false;
    1762:	10 92 c0 03 	sts	0x03C0, r1
    }
}
    1766:	1f 91       	pop	r17
    1768:	0f 91       	pop	r16
    176a:	08 95       	ret

0000176c <turn_off_right_arrow>:

void turn_off_right_arrow()
{
    digitalWrite(8, LOW);
    176c:	60 e0       	ldi	r22, 0x00	; 0
    176e:	88 e0       	ldi	r24, 0x08	; 8
    1770:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <digitalWrite>
    digitalWrite(10, LOW);
    1774:	60 e0       	ldi	r22, 0x00	; 0
    1776:	8a e0       	ldi	r24, 0x0A	; 10
    1778:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <digitalWrite>
    digitalWrite(5, LOW);
    177c:	60 e0       	ldi	r22, 0x00	; 0
    177e:	85 e0       	ldi	r24, 0x05	; 5
    1780:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <digitalWrite>
    timer_right_arrow = 0;
    1784:	10 92 6d 03 	sts	0x036D, r1
    1788:	10 92 6e 03 	sts	0x036E, r1
    178c:	10 92 6f 03 	sts	0x036F, r1
    1790:	10 92 70 03 	sts	0x0370, r1
    right_arrow_is_on = false;
    1794:	10 92 c0 03 	sts	0x03C0, r1
    1798:	08 95       	ret

0000179a <blink_top_arrow>:
}

void blink_top_arrow ()
{
    179a:	0f 93       	push	r16
    179c:	1f 93       	push	r17
    if ((!top_arrow_is_on) && (millis() - timer_top_arrow > 500)) {
    179e:	80 91 c2 03 	lds	r24, 0x03C2
    17a2:	81 11       	cpse	r24, r1
    17a4:	2c c0       	rjmp	.+88     	; 0x17fe <blink_top_arrow+0x64>
    17a6:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <millis>
    17aa:	00 91 71 03 	lds	r16, 0x0371
    17ae:	10 91 72 03 	lds	r17, 0x0372
    17b2:	20 91 73 03 	lds	r18, 0x0373
    17b6:	30 91 74 03 	lds	r19, 0x0374
    17ba:	60 1b       	sub	r22, r16
    17bc:	71 0b       	sbc	r23, r17
    17be:	82 0b       	sbc	r24, r18
    17c0:	93 0b       	sbc	r25, r19
    17c2:	65 3f       	cpi	r22, 0xF5	; 245
    17c4:	71 40       	sbci	r23, 0x01	; 1
    17c6:	81 05       	cpc	r24, r1
    17c8:	91 05       	cpc	r25, r1
    17ca:	c8 f0       	brcs	.+50     	; 0x17fe <blink_top_arrow+0x64>
        digitalWrite(4, HIGH);
    17cc:	61 e0       	ldi	r22, 0x01	; 1
    17ce:	84 e0       	ldi	r24, 0x04	; 4
    17d0:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <digitalWrite>
        digitalWrite(9, HIGH);
    17d4:	61 e0       	ldi	r22, 0x01	; 1
    17d6:	89 e0       	ldi	r24, 0x09	; 9
    17d8:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <digitalWrite>
        digitalWrite(6, HIGH);
    17dc:	61 e0       	ldi	r22, 0x01	; 1
    17de:	86 e0       	ldi	r24, 0x06	; 6
    17e0:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <digitalWrite>
        timer_top_arrow = millis();
    17e4:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <millis>
    17e8:	60 93 71 03 	sts	0x0371, r22
    17ec:	70 93 72 03 	sts	0x0372, r23
    17f0:	80 93 73 03 	sts	0x0373, r24
    17f4:	90 93 74 03 	sts	0x0374, r25
        top_arrow_is_on = true;
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	80 93 c2 03 	sts	0x03C2, r24
    }
    if (top_arrow_is_on && (millis() - timer_top_arrow > 500)) {
    17fe:	80 91 c2 03 	lds	r24, 0x03C2
    1802:	88 23       	and	r24, r24
    1804:	59 f1       	breq	.+86     	; 0x185c <blink_top_arrow+0xc2>
    1806:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <millis>
    180a:	00 91 71 03 	lds	r16, 0x0371
    180e:	10 91 72 03 	lds	r17, 0x0372
    1812:	20 91 73 03 	lds	r18, 0x0373
    1816:	30 91 74 03 	lds	r19, 0x0374
    181a:	60 1b       	sub	r22, r16
    181c:	71 0b       	sbc	r23, r17
    181e:	82 0b       	sbc	r24, r18
    1820:	93 0b       	sbc	r25, r19
    1822:	65 3f       	cpi	r22, 0xF5	; 245
    1824:	71 40       	sbci	r23, 0x01	; 1
    1826:	81 05       	cpc	r24, r1
    1828:	91 05       	cpc	r25, r1
    182a:	c0 f0       	brcs	.+48     	; 0x185c <blink_top_arrow+0xc2>
        digitalWrite(4, LOW);
    182c:	60 e0       	ldi	r22, 0x00	; 0
    182e:	84 e0       	ldi	r24, 0x04	; 4
    1830:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <digitalWrite>
        digitalWrite(9, LOW);
    1834:	60 e0       	ldi	r22, 0x00	; 0
    1836:	89 e0       	ldi	r24, 0x09	; 9
    1838:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <digitalWrite>
        digitalWrite(6, LOW);
    183c:	60 e0       	ldi	r22, 0x00	; 0
    183e:	86 e0       	ldi	r24, 0x06	; 6
    1840:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <digitalWrite>
        timer_top_arrow = millis();
    1844:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <millis>
    1848:	60 93 71 03 	sts	0x0371, r22
    184c:	70 93 72 03 	sts	0x0372, r23
    1850:	80 93 73 03 	sts	0x0373, r24
    1854:	90 93 74 03 	sts	0x0374, r25
        top_arrow_is_on = false;
    1858:	10 92 c2 03 	sts	0x03C2, r1
    }
}
    185c:	1f 91       	pop	r17
    185e:	0f 91       	pop	r16
    1860:	08 95       	ret

00001862 <turn_off_top_arrow>:

void turn_off_top_arrow()
{
    digitalWrite(4, LOW);
    1862:	60 e0       	ldi	r22, 0x00	; 0
    1864:	84 e0       	ldi	r24, 0x04	; 4
    1866:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <digitalWrite>
    digitalWrite(9, LOW);
    186a:	60 e0       	ldi	r22, 0x00	; 0
    186c:	89 e0       	ldi	r24, 0x09	; 9
    186e:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <digitalWrite>
    digitalWrite(6, LOW);
    1872:	60 e0       	ldi	r22, 0x00	; 0
    1874:	86 e0       	ldi	r24, 0x06	; 6
    1876:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <digitalWrite>
    timer_top_arrow = 0;
    187a:	10 92 71 03 	sts	0x0371, r1
    187e:	10 92 72 03 	sts	0x0372, r1
    1882:	10 92 73 03 	sts	0x0373, r1
    1886:	10 92 74 03 	sts	0x0374, r1
    top_arrow_is_on = false;
    188a:	10 92 c2 03 	sts	0x03C2, r1
    188e:	08 95       	ret

00001890 <blink_status_led>:
}

void blink_status_led()
{
    1890:	0f 93       	push	r16
    1892:	1f 93       	push	r17

    if ((!status_led_is_on) && (millis() - timer_status_led > 500)) {
    1894:	80 91 c3 03 	lds	r24, 0x03C3
    1898:	81 11       	cpse	r24, r1
    189a:	24 c0       	rjmp	.+72     	; 0x18e4 <blink_status_led+0x54>
    189c:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <millis>
    18a0:	00 91 69 03 	lds	r16, 0x0369
    18a4:	10 91 6a 03 	lds	r17, 0x036A
    18a8:	20 91 6b 03 	lds	r18, 0x036B
    18ac:	30 91 6c 03 	lds	r19, 0x036C
    18b0:	60 1b       	sub	r22, r16
    18b2:	71 0b       	sbc	r23, r17
    18b4:	82 0b       	sbc	r24, r18
    18b6:	93 0b       	sbc	r25, r19
    18b8:	65 3f       	cpi	r22, 0xF5	; 245
    18ba:	71 40       	sbci	r23, 0x01	; 1
    18bc:	81 05       	cpc	r24, r1
    18be:	91 05       	cpc	r25, r1
    18c0:	88 f0       	brcs	.+34     	; 0x18e4 <blink_status_led+0x54>
        digitalWrite(11, HIGH);
    18c2:	61 e0       	ldi	r22, 0x01	; 1
    18c4:	8b e0       	ldi	r24, 0x0B	; 11
    18c6:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <digitalWrite>
        timer_status_led = millis();
    18ca:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <millis>
    18ce:	60 93 69 03 	sts	0x0369, r22
    18d2:	70 93 6a 03 	sts	0x036A, r23
    18d6:	80 93 6b 03 	sts	0x036B, r24
    18da:	90 93 6c 03 	sts	0x036C, r25
        status_led_is_on = true;
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	80 93 c3 03 	sts	0x03C3, r24
    }
    if (status_led_is_on && (millis() - timer_status_led > 500)) {
    18e4:	80 91 c3 03 	lds	r24, 0x03C3
    18e8:	88 23       	and	r24, r24
    18ea:	19 f1       	breq	.+70     	; 0x1932 <blink_status_led+0xa2>
    18ec:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <millis>
    18f0:	00 91 69 03 	lds	r16, 0x0369
    18f4:	10 91 6a 03 	lds	r17, 0x036A
    18f8:	20 91 6b 03 	lds	r18, 0x036B
    18fc:	30 91 6c 03 	lds	r19, 0x036C
    1900:	60 1b       	sub	r22, r16
    1902:	71 0b       	sbc	r23, r17
    1904:	82 0b       	sbc	r24, r18
    1906:	93 0b       	sbc	r25, r19
    1908:	65 3f       	cpi	r22, 0xF5	; 245
    190a:	71 40       	sbci	r23, 0x01	; 1
    190c:	81 05       	cpc	r24, r1
    190e:	91 05       	cpc	r25, r1
    1910:	80 f0       	brcs	.+32     	; 0x1932 <blink_status_led+0xa2>
        digitalWrite(11, LOW);
    1912:	60 e0       	ldi	r22, 0x00	; 0
    1914:	8b e0       	ldi	r24, 0x0B	; 11
    1916:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <digitalWrite>
        timer_status_led = millis();
    191a:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <millis>
    191e:	60 93 69 03 	sts	0x0369, r22
    1922:	70 93 6a 03 	sts	0x036A, r23
    1926:	80 93 6b 03 	sts	0x036B, r24
    192a:	90 93 6c 03 	sts	0x036C, r25
        status_led_is_on = false;
    192e:	10 92 c3 03 	sts	0x03C3, r1
    }
      
}
    1932:	1f 91       	pop	r17
    1934:	0f 91       	pop	r16
    1936:	08 95       	ret

00001938 <turn_off_status_led>:

void turn_off_status_led()
{
    digitalWrite(11, LOW);
    1938:	60 e0       	ldi	r22, 0x00	; 0
    193a:	8b e0       	ldi	r24, 0x0B	; 11
    193c:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <digitalWrite>
    timer_status_led = 0;
    1940:	10 92 69 03 	sts	0x0369, r1
    1944:	10 92 6a 03 	sts	0x036A, r1
    1948:	10 92 6b 03 	sts	0x036B, r1
    194c:	10 92 6c 03 	sts	0x036C, r1
    status_led_is_on = false;
    1950:	10 92 c3 03 	sts	0x03C3, r1
    1954:	08 95       	ret

00001956 <initVariant>:
int atexit(void (*func)()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    1956:	08 95       	ret

00001958 <main>:

int main(void)
{
	init();
    1958:	0e 94 3f 05 	call	0xa7e	; 0xa7e <init>

	initVariant();
    195c:	0e 94 ab 0c 	call	0x1956	; 0x1956 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1960:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_Z5setupv>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1964:	c8 eb       	ldi	r28, 0xB8	; 184
    1966:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    1968:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <_Z4loopv>
		if (serialEventRun) serialEventRun();
    196c:	20 97       	sbiw	r28, 0x00	; 0
    196e:	e1 f3       	breq	.-8      	; 0x1968 <main+0x10>
    1970:	0e 94 b8 00 	call	0x170	; 0x170 <_Z14serialEventRunv>
    1974:	f9 cf       	rjmp	.-14     	; 0x1968 <main+0x10>

00001976 <_Z41__static_initialization_and_destruction_0ii.part.1>:
    if (status_led_on) {
        blink_status_led();
    } else {
        turn_off_status_led();
    }
}
    1976:	cf 93       	push	r28
    1978:	df 93       	push	r29
#ifndef BLEMate2_h
#define BLEMate2_h

#include "../Arduino/Arduino.h"

class BLEMate2
    197a:	8f e8       	ldi	r24, 0x8F	; 143
    197c:	93 e0       	ldi	r25, 0x03	; 3
    197e:	89 2b       	or	r24, r25
    1980:	51 f4       	brne	.+20     	; 0x1996 <_Z41__static_initialization_and_destruction_0ii.part.1+0x20>
}
#include "../lib/Arduino/Arduino.h"
#include "../lib/SparkFun_BLEMate2/SparkFun_BLEMate2.h"

String inputBuffer;
String sendBuffer;
    1982:	84 eb       	ldi	r24, 0xB4	; 180
    1984:	93 e0       	ldi	r25, 0x03	; 3
    1986:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN6StringD1Ev>
    #include "blink_leds.h"
}
#include "../lib/Arduino/Arduino.h"
#include "../lib/SparkFun_BLEMate2/SparkFun_BLEMate2.h"

String inputBuffer;
    198a:	8a eb       	ldi	r24, 0xBA	; 186
    198c:	93 e0       	ldi	r25, 0x03	; 3
    if (status_led_on) {
        blink_status_led();
    } else {
        turn_off_status_led();
    }
}
    198e:	df 91       	pop	r29
    1990:	cf 91       	pop	r28
    #include "blink_leds.h"
}
#include "../lib/Arduino/Arduino.h"
#include "../lib/SparkFun_BLEMate2/SparkFun_BLEMate2.h"

String inputBuffer;
    1992:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <_ZN6StringD1Ev>
    1996:	cd ea       	ldi	r28, 0xAD	; 173
    1998:	d3 e0       	ldi	r29, 0x03	; 3
    199a:	26 97       	sbiw	r28, 0x06	; 6
    199c:	ce 01       	movw	r24, r28
    199e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN6StringD1Ev>
    19a2:	83 e0       	ldi	r24, 0x03	; 3
    19a4:	cf 38       	cpi	r28, 0x8F	; 143
    19a6:	d8 07       	cpc	r29, r24
    19a8:	c1 f7       	brne	.-16     	; 0x199a <_Z41__static_initialization_and_destruction_0ii.part.1+0x24>
    19aa:	eb cf       	rjmp	.-42     	; 0x1982 <_Z41__static_initialization_and_destruction_0ii.part.1+0xc>

000019ac <_Z5setupv>:
unsigned long flex_sensor_read_task_last_run = 0;
unsigned long led_blink_task_last_run = 0;


void setup()
{
    19ac:	ff 92       	push	r15
    19ae:	0f 93       	push	r16
    19b0:	1f 93       	push	r17
    19b2:	cf 93       	push	r28
    19b4:	df 93       	push	r29
    setup_leds();
    19b6:	0e 94 ba 0a 	call	0x1574	; 0x1574 <setup_leds>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    19ba:	26 e0       	ldi	r18, 0x06	; 6
    19bc:	40 e8       	ldi	r20, 0x80	; 128
    19be:	55 e2       	ldi	r21, 0x25	; 37
    19c0:	60 e0       	ldi	r22, 0x00	; 0
    19c2:	70 e0       	ldi	r23, 0x00	; 0
    19c4:	82 eb       	ldi	r24, 0xB2	; 178
    19c6:	92 e0       	ldi	r25, 0x02	; 2
    19c8:	0e 94 6e 01 	call	0x2dc	; 0x2dc <_ZN14HardwareSerial5beginEmh>
    
    Serial.begin(9600);           // This is the BC118 default baud rate.

    #ifdef DEBUG
    Serial.println("Serial has started...");
    19cc:	68 e8       	ldi	r22, 0x88	; 136
    19ce:	71 e0       	ldi	r23, 0x01	; 1
    19d0:	82 eb       	ldi	r24, 0xB2	; 178
    19d2:	92 e0       	ldi	r25, 0x02	; 2
    19d4:	0e 94 34 03 	call	0x668	; 0x668 <_ZN5Print7printlnEPKc>
    19d8:	ca e0       	ldi	r28, 0x0A	; 10
    19da:	d0 e0       	ldi	r29, 0x00	; 0
    //  SUCCESS - What it says.


    boolean firstResetSuccess = false;
    boolean restoreSuccess = false;
    boolean writeConfigSuccess = false;
    19dc:	f1 2c       	mov	r15, r1
    //                  commands and parameters outside the built-ins.
    //  SUCCESS - What it says.


    boolean firstResetSuccess = false;
    boolean restoreSuccess = false;
    19de:	00 e0       	ldi	r16, 0x00	; 0
    //                  This will probably only occur when you attempt to send
    //                  commands and parameters outside the built-ins.
    //  SUCCESS - What it says.


    boolean firstResetSuccess = false;
    19e0:	10 e0       	ldi	r17, 0x00	; 0
        //  the "SCN OFF" command after the reset is completed. Why is this important?
        //  Because if the device is in central mode, it *will* be scanning on reset.
        //  No way to change that. The text traffic generated by the scanning will
        //  interfere with the firmware on the Arduino properly identifying response
        //  strings from the BC118.
        if (BTModu.reset() == BLEMate2::SUCCESS)
    19e2:	8d e8       	ldi	r24, 0x8D	; 141
    19e4:	93 e0       	ldi	r25, 0x03	; 3
    19e6:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN8BLEMate25resetEv>
    19ea:	81 30       	cpi	r24, 0x01	; 1
    19ec:	b1 f4       	brne	.+44     	; 0x1a1a <_Z5setupv+0x6e>
        // restore() resets the module to factory defaults; you'll need to perform
        //  a writeConfig() and reset() to make those settings take effect. We don't
        //  do that automatically because there may be things the user wants to
        //  change before committing the settings to non-volatile memory and
        //  resetting.
        if (BTModu.restore() == BLEMate2::SUCCESS)
    19ee:	8d e8       	ldi	r24, 0x8D	; 141
    19f0:	93 e0       	ldi	r25, 0x03	; 3
    19f2:	0e 94 7e 09 	call	0x12fc	; 0x12fc <_ZN8BLEMate27restoreEv>
    19f6:	81 30       	cpi	r24, 0x01	; 1
    19f8:	c9 f4       	brne	.+50     	; 0x1a2c <_Z5setupv+0x80>
        }
        // writeConfig() stores the current settings in non-volatile memory, so they
        //  will be in place on the next reboot of the module. Note that some, but
        //  not all, settings changes require a reboot. It's probably in general best
        //  to write/reset when changing anything.
        if (BTModu.writeConfig() == BLEMate2::SUCCESS)
    19fa:	8d e8       	ldi	r24, 0x8D	; 141
    19fc:	93 e0       	ldi	r25, 0x03	; 3
    19fe:	0e 94 a5 09 	call	0x134a	; 0x134a <_ZN8BLEMate211writeConfigEv>
    1a02:	81 30       	cpi	r24, 0x01	; 1
    1a04:	c1 f4       	brne	.+48     	; 0x1a36 <_Z5setupv+0x8a>
        // One more reset, to make the changes take effect.
        // NB!!!!!!!!!!!!! This write/reset thing is *really* important.
        //  The status command (STS) and the LEDs *will* lie to you and tell you that
        //  you are e.g. advertising or in central mode when in fact that is not the
        //  case and the module still needs to be reset before that is actually true.
        if (BTModu.reset() == BLEMate2::SUCCESS)
    1a06:	8d e8       	ldi	r24, 0x8D	; 141
    1a08:	93 e0       	ldi	r25, 0x03	; 3
    1a0a:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN8BLEMate25resetEv>
    1a0e:	81 30       	cpi	r24, 0x01	; 1
    1a10:	01 f1       	breq	.+64     	; 0x1a52 <_Z5setupv+0xa6>
        //  will be in place on the next reboot of the module. Note that some, but
        //  not all, settings changes require a reboot. It's probably in general best
        //  to write/reset when changing anything.
        if (BTModu.writeConfig() == BLEMate2::SUCCESS)
        {
            writeConfigSuccess = true;
    1a12:	ff 24       	eor	r15, r15
    1a14:	f3 94       	inc	r15
        //  do that automatically because there may be things the user wants to
        //  change before committing the settings to non-volatile memory and
        //  resetting.
        if (BTModu.restore() == BLEMate2::SUCCESS)
        {
            restoreSuccess = true;
    1a16:	01 e0       	ldi	r16, 0x01	; 1
    1a18:	14 c0       	rjmp	.+40     	; 0x1a42 <_Z5setupv+0x96>
            goto setup_try_again;
        }

        setup_try_again:
        //#ifdef DEBUG
        if (!firstResetSuccess) {
    1a1a:	11 11       	cpse	r17, r1
    1a1c:	07 c0       	rjmp	.+14     	; 0x1a2c <_Z5setupv+0x80>
            Serial.println("Module reset error!");
    1a1e:	6e e9       	ldi	r22, 0x9E	; 158
    1a20:	71 e0       	ldi	r23, 0x01	; 1
    1a22:	82 eb       	ldi	r24, 0xB2	; 178
    1a24:	92 e0       	ldi	r25, 0x02	; 2
    1a26:	0e 94 34 03 	call	0x668	; 0x668 <_ZN5Print7printlnEPKc>
    1a2a:	2a c0       	rjmp	.+84     	; 0x1a80 <_Z5setupv+0xd4>
            } else if (!restoreSuccess) {
    1a2c:	01 11       	cpse	r16, r1
    1a2e:	04 c0       	rjmp	.+8      	; 0x1a38 <_Z5setupv+0x8c>
            Serial.println("Module restore error!");
    1a30:	62 eb       	ldi	r22, 0xB2	; 178
    1a32:	71 e0       	ldi	r23, 0x01	; 1
    1a34:	08 c0       	rjmp	.+16     	; 0x1a46 <_Z5setupv+0x9a>
        //  do that automatically because there may be things the user wants to
        //  change before committing the settings to non-volatile memory and
        //  resetting.
        if (BTModu.restore() == BLEMate2::SUCCESS)
        {
            restoreSuccess = true;
    1a36:	01 e0       	ldi	r16, 0x01	; 1
        //#ifdef DEBUG
        if (!firstResetSuccess) {
            Serial.println("Module reset error!");
            } else if (!restoreSuccess) {
            Serial.println("Module restore error!");
            } else if (!writeConfigSuccess) {
    1a38:	f1 10       	cpse	r15, r1
    1a3a:	03 c0       	rjmp	.+6      	; 0x1a42 <_Z5setupv+0x96>
            Serial.println("Module write config error!");
    1a3c:	68 ec       	ldi	r22, 0xC8	; 200
    1a3e:	71 e0       	ldi	r23, 0x01	; 1
    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <_Z5setupv+0x9a>
            } else if (!secondResetSuccess) {
            Serial.println("Second module reset error!");
    1a42:	63 ee       	ldi	r22, 0xE3	; 227
    1a44:	71 e0       	ldi	r23, 0x01	; 1
    1a46:	82 eb       	ldi	r24, 0xB2	; 178
    1a48:	92 e0       	ldi	r25, 0x02	; 2
    1a4a:	0e 94 34 03 	call	0x668	; 0x668 <_ZN5Print7printlnEPKc>
    1a4e:	11 e0       	ldi	r17, 0x01	; 1
    1a50:	17 c0       	rjmp	.+46     	; 0x1a80 <_Z5setupv+0xd4>
            } else {
            Serial.println("Reset/Restore/Write Config PASSED...");
    1a52:	6e ef       	ldi	r22, 0xFE	; 254
    1a54:	71 e0       	ldi	r23, 0x01	; 1
    1a56:	82 eb       	ldi	r24, 0xB2	; 178
    1a58:	92 e0       	ldi	r25, 0x02	; 2
    1a5a:	0e 94 34 03 	call	0x668	; 0x668 <_ZN5Print7printlnEPKc>
        #endif
        while(1) {}
    }
    
    #ifdef DEBUG
    Serial.println("Reset/Restore/Write Config DONE!");
    1a5e:	61 e6       	ldi	r22, 0x61	; 97
    1a60:	72 e0       	ldi	r23, 0x02	; 2
    1a62:	82 eb       	ldi	r24, 0xB2	; 178
    1a64:	92 e0       	ldi	r25, 0x02	; 2
    1a66:	0e 94 34 03 	call	0x668	; 0x668 <_ZN5Print7printlnEPKc>
    #endif
    delay(1000);
    1a6a:	68 ee       	ldi	r22, 0xE8	; 232
    1a6c:	73 e0       	ldi	r23, 0x03	; 3
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	90 e0       	ldi	r25, 0x00	; 0
}
    1a72:	df 91       	pop	r29
    1a74:	cf 91       	pop	r28
    1a76:	1f 91       	pop	r17
    1a78:	0f 91       	pop	r16
    1a7a:	ff 90       	pop	r15
    }
    
    #ifdef DEBUG
    Serial.println("Reset/Restore/Write Config DONE!");
    #endif
    delay(1000);
    1a7c:	0c 94 17 05 	jmp	0xa2e	; 0xa2e <delay>
    1a80:	21 97       	sbiw	r28, 0x01	; 1

    boolean firstResetSuccess = false;
    boolean restoreSuccess = false;
    boolean writeConfigSuccess = false;
    boolean secondResetSuccess = false;
    for (int i = 0; i < 10; i++) {
    1a82:	20 97       	sbiw	r28, 0x00	; 0
    1a84:	09 f0       	breq	.+2      	; 0x1a88 <_Z5setupv+0xdc>
    1a86:	ad cf       	rjmp	.-166    	; 0x19e2 <_Z5setupv+0x36>
        //#endif
    }
    if (!(firstResetSuccess && restoreSuccess && writeConfigSuccess && secondResetSuccess)) {
        // Setup failed after 10 tries
        #ifdef DEBUG
        Serial.println("Reset/Restore/Write Config FAILED 10 TIMES. STOP EXECUTION...");
    1a88:	63 e2       	ldi	r22, 0x23	; 35
    1a8a:	72 e0       	ldi	r23, 0x02	; 2
    1a8c:	82 eb       	ldi	r24, 0xB2	; 178
    1a8e:	92 e0       	ldi	r25, 0x02	; 2
    1a90:	0e 94 34 03 	call	0x668	; 0x668 <_ZN5Print7printlnEPKc>
    1a94:	ff cf       	rjmp	.-2      	; 0x1a94 <_Z5setupv+0xe8>

00001a96 <_Z24do_flex_sensor_read_taskv>:

void do_flex_sensor_read_task()
{
    //read them flex sensors here
    #ifdef LEFTGLOVE
    leftThumbReading = analogRead(LEFTTHUMBPIN);
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <analogRead>
    1a9c:	90 93 8a 03 	sts	0x038A, r25
    1aa0:	80 93 89 03 	sts	0x0389, r24
    leftIndexReading = analogRead(LEFTINDEXPIN);
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <analogRead>
    1aaa:	90 93 88 03 	sts	0x0388, r25
    1aae:	80 93 87 03 	sts	0x0387, r24
    leftMiddleReading = analogRead(LEFTMIDDLEPIN);
    1ab2:	82 e0       	ldi	r24, 0x02	; 2
    1ab4:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <analogRead>
    1ab8:	90 93 86 03 	sts	0x0386, r25
    1abc:	80 93 85 03 	sts	0x0385, r24
    //Serial.println("Right Flex Reading (T, I, M): ");
    //Serial.println(leftThumbReading);
    //Serial.println(leftIndexReading);
    //Serial.println(leftMiddleReading);
    if ((leftThumbReading > 530) && (leftIndexReading > 530) && (leftMiddleReading > 530) && (turnSignalSent == 0)) {
    1ac0:	20 91 89 03 	lds	r18, 0x0389
    1ac4:	30 91 8a 03 	lds	r19, 0x038A
    1ac8:	23 31       	cpi	r18, 0x13	; 19
    1aca:	32 40       	sbci	r19, 0x02	; 2
    1acc:	44 f1       	brlt	.+80     	; 0x1b1e <_Z24do_flex_sensor_read_taskv+0x88>
    1ace:	20 91 87 03 	lds	r18, 0x0387
    1ad2:	30 91 88 03 	lds	r19, 0x0388
    1ad6:	23 31       	cpi	r18, 0x13	; 19
    1ad8:	32 40       	sbci	r19, 0x02	; 2
    1ada:	0c f1       	brlt	.+66     	; 0x1b1e <_Z24do_flex_sensor_read_taskv+0x88>
    1adc:	83 31       	cpi	r24, 0x13	; 19
    1ade:	92 40       	sbci	r25, 0x02	; 2
    1ae0:	f4 f0       	brlt	.+60     	; 0x1b1e <_Z24do_flex_sensor_read_taskv+0x88>
    1ae2:	80 91 8b 03 	lds	r24, 0x038B
    1ae6:	90 91 8c 03 	lds	r25, 0x038C
    1aea:	89 2b       	or	r24, r25
    1aec:	c1 f4       	brne	.+48     	; 0x1b1e <_Z24do_flex_sensor_read_taskv+0x88>
        //Serial.flush();
        sendBuffer.concat(BPLGHEADER);
    1aee:	68 ea       	ldi	r22, 0xA8	; 168
    1af0:	72 e0       	ldi	r23, 0x02	; 2
    1af2:	84 eb       	ldi	r24, 0xB4	; 180
    1af4:	93 e0       	ldi	r25, 0x03	; 3
    1af6:	0e 94 f7 06 	call	0xdee	; 0xdee <_ZN6String6concatEPKc>
        sendBuffer.concat("1");
    1afa:	6b ea       	ldi	r22, 0xAB	; 171
    1afc:	72 e0       	ldi	r23, 0x02	; 2
    1afe:	84 eb       	ldi	r24, 0xB4	; 180
    1b00:	93 e0       	ldi	r25, 0x03	; 3
    1b02:	0e 94 f7 06 	call	0xdee	; 0xdee <_ZN6String6concatEPKc>
        //BTModu.sendData(sendBuffer);
        sendBuffer = "";
    1b06:	60 e2       	ldi	r22, 0x20	; 32
    1b08:	71 e0       	ldi	r23, 0x01	; 1
    1b0a:	84 eb       	ldi	r24, 0xB4	; 180
    1b0c:	93 e0       	ldi	r25, 0x03	; 3
    1b0e:	0e 94 b3 06 	call	0xd66	; 0xd66 <_ZN6StringaSEPKc>
        turnSignalSent = 1;
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	90 93 8c 03 	sts	0x038C, r25
    1b1a:	80 93 8b 03 	sts	0x038B, r24
    1b1e:	08 95       	ret

00001b20 <_Z17do_led_blink_taskv>:
    #endif
}

void do_led_blink_task()
{
    if (left_arrow_on) {
    1b20:	80 91 b3 03 	lds	r24, 0x03B3
    1b24:	88 23       	and	r24, r24
    1b26:	19 f0       	breq	.+6      	; 0x1b2e <_Z17do_led_blink_taskv+0xe>
        blink_left_arrow();
    1b28:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <blink_left_arrow>
    1b2c:	02 c0       	rjmp	.+4      	; 0x1b32 <_Z17do_led_blink_taskv+0x12>
    } else {
        turn_off_left_arrow();
    1b2e:	0e 94 3b 0b 	call	0x1676	; 0x1676 <turn_off_left_arrow>
    }
    
    if (right_arrow_on) {
    1b32:	80 91 b2 03 	lds	r24, 0x03B2
    1b36:	88 23       	and	r24, r24
    1b38:	19 f0       	breq	.+6      	; 0x1b40 <_Z17do_led_blink_taskv+0x20>
        blink_right_arrow();
    1b3a:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <blink_right_arrow>
    1b3e:	02 c0       	rjmp	.+4      	; 0x1b44 <_Z17do_led_blink_taskv+0x24>
    } else {
        turn_off_right_arrow();
    1b40:	0e 94 b6 0b 	call	0x176c	; 0x176c <turn_off_right_arrow>
    }
    
    if (top_arrow_on) {
    1b44:	80 91 b1 03 	lds	r24, 0x03B1
    1b48:	88 23       	and	r24, r24
    1b4a:	19 f0       	breq	.+6      	; 0x1b52 <_Z17do_led_blink_taskv+0x32>
        blink_top_arrow();
    1b4c:	0e 94 cd 0b 	call	0x179a	; 0x179a <blink_top_arrow>
    1b50:	02 c0       	rjmp	.+4      	; 0x1b56 <_Z17do_led_blink_taskv+0x36>
    } else {
        turn_off_top_arrow();
    1b52:	0e 94 31 0c 	call	0x1862	; 0x1862 <turn_off_top_arrow>
    }
    
    if (status_led_on) {
    1b56:	80 91 b0 03 	lds	r24, 0x03B0
    1b5a:	81 11       	cpse	r24, r1
        blink_status_led();
    1b5c:	0c 94 48 0c 	jmp	0x1890	; 0x1890 <blink_status_led>
    } else {
        turn_off_status_led();
    1b60:	0c 94 9c 0c 	jmp	0x1938	; 0x1938 <turn_off_status_led>

00001b64 <_GLOBAL__sub_I_inputBuffer>:
    #include "blink_leds.h"
}
#include "../lib/Arduino/Arduino.h"
#include "../lib/SparkFun_BLEMate2/SparkFun_BLEMate2.h"

String inputBuffer;
    1b64:	60 e2       	ldi	r22, 0x20	; 32
    1b66:	71 e0       	ldi	r23, 0x01	; 1
    1b68:	8a eb       	ldi	r24, 0xBA	; 186
    1b6a:	93 e0       	ldi	r25, 0x03	; 3
    1b6c:	0e 94 9d 06 	call	0xd3a	; 0xd3a <_ZN6StringC1EPKc>
String sendBuffer;
    1b70:	60 e2       	ldi	r22, 0x20	; 32
    1b72:	71 e0       	ldi	r23, 0x01	; 1
    1b74:	84 eb       	ldi	r24, 0xB4	; 180
    1b76:	93 e0       	ldi	r25, 0x03	; 3
    1b78:	0e 94 9d 06 	call	0xd3a	; 0xd3a <_ZN6StringC1EPKc>
boolean left_arrow_on;
boolean right_arrow_on;
boolean top_arrow_on;
boolean status_led_on;

BLEMate2 BTModu(&Serial);
    1b7c:	62 eb       	ldi	r22, 0xB2	; 178
    1b7e:	72 e0       	ldi	r23, 0x02	; 2
    1b80:	8d e8       	ldi	r24, 0x8D	; 141
    1b82:	93 e0       	ldi	r25, 0x03	; 3
    1b84:	0c 94 f6 07 	jmp	0xfec	; 0xfec <_ZN8BLEMate2C1EP6Stream>

00001b88 <_GLOBAL__sub_D_inputBuffer>:
    if (status_led_on) {
        blink_status_led();
    } else {
        turn_off_status_led();
    }
}
    1b88:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <_Z41__static_initialization_and_destruction_0ii.part.1>

00001b8c <_Z14do_serial_taskv>:

    // We're set up to allow anything to connect to us now.
}

void do_serial_task()
{
    1b8c:	1f 93       	push	r17
    1b8e:	cf 93       	push	r28
    1b90:	df 93       	push	r29
    1b92:	00 d0       	rcall	.+0      	; 0x1b94 <_Z14do_serial_taskv+0x8>
    1b94:	00 d0       	rcall	.+0      	; 0x1b96 <_Z14do_serial_taskv+0xa>
    1b96:	00 d0       	rcall	.+0      	; 0x1b98 <_Z14do_serial_taskv+0xc>
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
    //unsigned long serial_task_start = millis();
    digitalWrite(11,HIGH);
    1b9c:	61 e0       	ldi	r22, 0x01	; 1
    1b9e:	8b e0       	ldi	r24, 0x0B	; 11
    1ba0:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <digitalWrite>
    //while ((millis() - serial_task_start) < 500)
    while (Serial.available() > 0)
    1ba4:	82 eb       	ldi	r24, 0xB2	; 178
    1ba6:	92 e0       	ldi	r25, 0x02	; 2
    1ba8:	0e 94 8b 00 	call	0x116	; 0x116 <_ZN14HardwareSerial9availableEv>
    1bac:	18 16       	cp	r1, r24
    1bae:	19 06       	cpc	r1, r25
    1bb0:	84 f4       	brge	.+32     	; 0x1bd2 <_Z14do_serial_taskv+0x46>
    {        
        inputBuffer.concat((char)Serial.read());
    1bb2:	82 eb       	ldi	r24, 0xB2	; 178
    1bb4:	92 e0       	ldi	r25, 0x02	; 2
    1bb6:	0e 94 a4 00 	call	0x148	; 0x148 <_ZN14HardwareSerial4readEv>
    1bba:	68 2f       	mov	r22, r24
    1bbc:	8a eb       	ldi	r24, 0xBA	; 186
    1bbe:	93 e0       	ldi	r25, 0x03	; 3
    1bc0:	0e 94 07 07 	call	0xe0e	; 0xe0e <_ZN6String6concatEc>
        delay(50);
    1bc4:	62 e3       	ldi	r22, 0x32	; 50
    1bc6:	70 e0       	ldi	r23, 0x00	; 0
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	0e 94 17 05 	call	0xa2e	; 0xa2e <delay>
    1bd0:	e9 cf       	rjmp	.-46     	; 0x1ba4 <_Z14do_serial_taskv+0x18>
    }
    digitalWrite(11,LOW);
    1bd2:	60 e0       	ldi	r22, 0x00	; 0
    1bd4:	8b e0       	ldi	r24, 0x0B	; 11
    1bd6:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <digitalWrite>

    // The state machine for capturing that can be pretty easy: when we've read
    // in \n\r, check to see if the string began with "RCV=". If yes, do
    // something. If no, discard it.

    if (inputBuffer.endsWith("\n\r")) {
    1bda:	6e e1       	ldi	r22, 0x1E	; 30
    1bdc:	71 e0       	ldi	r23, 0x01	; 1
    1bde:	ce 01       	movw	r24, r28
    1be0:	01 96       	adiw	r24, 0x01	; 1
    1be2:	0e 94 9d 06 	call	0xd3a	; 0xd3a <_ZN6StringC1EPKc>
    1be6:	be 01       	movw	r22, r28
    1be8:	6f 5f       	subi	r22, 0xFF	; 255
    1bea:	7f 4f       	sbci	r23, 0xFF	; 255
    1bec:	8a eb       	ldi	r24, 0xBA	; 186
    1bee:	93 e0       	ldi	r25, 0x03	; 3
    1bf0:	0e 94 4d 07 	call	0xe9a	; 0xe9a <_ZNK6String8endsWithERKS_>
    1bf4:	18 2f       	mov	r17, r24
    1bf6:	ce 01       	movw	r24, r28
    1bf8:	01 96       	adiw	r24, 0x01	; 1
    1bfa:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN6StringD1Ev>
    1bfe:	11 23       	and	r17, r17
    1c00:	49 f1       	breq	.+82     	; 0x1c54 <_Z14do_serial_taskv+0xc8>
        if (inputBuffer.startsWith("RCV=")) {
    1c02:	6d ea       	ldi	r22, 0xAD	; 173
    1c04:	72 e0       	ldi	r23, 0x02	; 2
    1c06:	ce 01       	movw	r24, r28
    1c08:	01 96       	adiw	r24, 0x01	; 1
    1c0a:	0e 94 9d 06 	call	0xd3a	; 0xd3a <_ZN6StringC1EPKc>
    1c0e:	be 01       	movw	r22, r28
    1c10:	6f 5f       	subi	r22, 0xFF	; 255
    1c12:	7f 4f       	sbci	r23, 0xFF	; 255
    1c14:	8a eb       	ldi	r24, 0xBA	; 186
    1c16:	93 e0       	ldi	r25, 0x03	; 3
    1c18:	0e 94 3e 07 	call	0xe7c	; 0xe7c <_ZNK6String10startsWithERKS_>
    1c1c:	18 2f       	mov	r17, r24
    1c1e:	ce 01       	movw	r24, r28
    1c20:	01 96       	adiw	r24, 0x01	; 1
    1c22:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN6StringD1Ev>
    1c26:	11 23       	and	r17, r17
    1c28:	a9 f0       	breq	.+42     	; 0x1c54 <_Z14do_serial_taskv+0xc8>
            inputBuffer.trim();
    1c2a:	8a eb       	ldi	r24, 0xBA	; 186
    1c2c:	93 e0       	ldi	r25, 0x03	; 3
    1c2e:	0e 94 9c 07 	call	0xf38	; 0xf38 <_ZN6String4trimEv>
            inputBuffer.remove(0, 4);
    1c32:	44 e0       	ldi	r20, 0x04	; 4
    1c34:	50 e0       	ldi	r21, 0x00	; 0
    1c36:	60 e0       	ldi	r22, 0x00	; 0
    1c38:	70 e0       	ldi	r23, 0x00	; 0
    1c3a:	8a eb       	ldi	r24, 0xBA	; 186
    1c3c:	93 e0       	ldi	r25, 0x03	; 3
    1c3e:	0e 94 6e 07 	call	0xedc	; 0xedc <_ZN6String6removeEjj>
            Serial.println(inputBuffer);
    1c42:	6a eb       	ldi	r22, 0xBA	; 186
    1c44:	73 e0       	ldi	r23, 0x03	; 3
    1c46:	82 eb       	ldi	r24, 0xB2	; 178
    1c48:	92 e0       	ldi	r25, 0x02	; 2
    1c4a:	0e 94 22 03 	call	0x644	; 0x644 <_ZN5Print7printlnERK6String>
            left_arrow_on = true;
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	80 93 b3 03 	sts	0x03B3, r24
            inputBuffer = "";
        } else {
            inputBuffer = "";
    1c54:	60 e2       	ldi	r22, 0x20	; 32
    1c56:	71 e0       	ldi	r23, 0x01	; 1
    1c58:	8a eb       	ldi	r24, 0xBA	; 186
    1c5a:	93 e0       	ldi	r25, 0x03	; 3
    1c5c:	0e 94 b3 06 	call	0xd66	; 0xd66 <_ZN6StringaSEPKc>
        inputBuffer = "";
    } else {
        inputBuffer = "";
    }
    */
}
    1c60:	26 96       	adiw	r28, 0x06	; 6
    1c62:	0f b6       	in	r0, 0x3f	; 63
    1c64:	f8 94       	cli
    1c66:	de bf       	out	0x3e, r29	; 62
    1c68:	0f be       	out	0x3f, r0	; 63
    1c6a:	cd bf       	out	0x3d, r28	; 61
    1c6c:	df 91       	pop	r29
    1c6e:	cf 91       	pop	r28
    1c70:	1f 91       	pop	r17
    1c72:	08 95       	ret

00001c74 <_Z4loopv>:
    }
    return foundpos;
}

void loop()
{
    1c74:	0f 93       	push	r16
    1c76:	1f 93       	push	r17
    if (millis() > (serial_task_last_run + SERIAL_READ_TASK_PERIOD)) {
    1c78:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <millis>
    1c7c:	00 91 81 03 	lds	r16, 0x0381
    1c80:	10 91 82 03 	lds	r17, 0x0382
    1c84:	20 91 83 03 	lds	r18, 0x0383
    1c88:	30 91 84 03 	lds	r19, 0x0384
    1c8c:	08 51       	subi	r16, 0x18	; 24
    1c8e:	1c 4f       	sbci	r17, 0xFC	; 252
    1c90:	2f 4f       	sbci	r18, 0xFF	; 255
    1c92:	3f 4f       	sbci	r19, 0xFF	; 255
    1c94:	06 17       	cp	r16, r22
    1c96:	17 07       	cpc	r17, r23
    1c98:	28 07       	cpc	r18, r24
    1c9a:	39 07       	cpc	r19, r25
    1c9c:	60 f4       	brcc	.+24     	; 0x1cb6 <_Z4loopv+0x42>
        //Serial.println("Serial runs");
        do_serial_task();
    1c9e:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <_Z14do_serial_taskv>
        serial_task_last_run = millis();
    1ca2:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <millis>
    1ca6:	60 93 81 03 	sts	0x0381, r22
    1caa:	70 93 82 03 	sts	0x0382, r23
    1cae:	80 93 83 03 	sts	0x0383, r24
    1cb2:	90 93 84 03 	sts	0x0384, r25
    }

    if (millis() > (flex_sensor_read_task_last_run + FLEX_SENSOR_READ_TASK_PERIOD)) {
    1cb6:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <millis>
    1cba:	00 91 7d 03 	lds	r16, 0x037D
    1cbe:	10 91 7e 03 	lds	r17, 0x037E
    1cc2:	20 91 7f 03 	lds	r18, 0x037F
    1cc6:	30 91 80 03 	lds	r19, 0x0380
    1cca:	0c 50       	subi	r16, 0x0C	; 12
    1ccc:	1e 4f       	sbci	r17, 0xFE	; 254
    1cce:	2f 4f       	sbci	r18, 0xFF	; 255
    1cd0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cd2:	06 17       	cp	r16, r22
    1cd4:	17 07       	cpc	r17, r23
    1cd6:	28 07       	cpc	r18, r24
    1cd8:	39 07       	cpc	r19, r25
    1cda:	60 f4       	brcc	.+24     	; 0x1cf4 <_Z4loopv+0x80>
        //Serial.println("Flex read runs");
        do_flex_sensor_read_task();
    1cdc:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <_Z24do_flex_sensor_read_taskv>
        flex_sensor_read_task_last_run = millis();
    1ce0:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <millis>
    1ce4:	60 93 7d 03 	sts	0x037D, r22
    1ce8:	70 93 7e 03 	sts	0x037E, r23
    1cec:	80 93 7f 03 	sts	0x037F, r24
    1cf0:	90 93 80 03 	sts	0x0380, r25
    }
        

    if (millis() > (led_blink_task_last_run + LED_BLINK_TASK_PERIOD)) {
    1cf4:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <millis>
    1cf8:	00 91 79 03 	lds	r16, 0x0379
    1cfc:	10 91 7a 03 	lds	r17, 0x037A
    1d00:	20 91 7b 03 	lds	r18, 0x037B
    1d04:	30 91 7c 03 	lds	r19, 0x037C
    1d08:	0c 50       	subi	r16, 0x0C	; 12
    1d0a:	1e 4f       	sbci	r17, 0xFE	; 254
    1d0c:	2f 4f       	sbci	r18, 0xFF	; 255
    1d0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d10:	06 17       	cp	r16, r22
    1d12:	17 07       	cpc	r17, r23
    1d14:	28 07       	cpc	r18, r24
    1d16:	39 07       	cpc	r19, r25
    1d18:	60 f4       	brcc	.+24     	; 0x1d32 <_Z4loopv+0xbe>
        //Serial.println("LED blink runs");
        do_led_blink_task();
    1d1a:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <_Z17do_led_blink_taskv>
        led_blink_task_last_run = millis();
    1d1e:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <millis>
    1d22:	60 93 79 03 	sts	0x0379, r22
    1d26:	70 93 7a 03 	sts	0x037A, r23
    1d2a:	80 93 7b 03 	sts	0x037B, r24
    1d2e:	90 93 7c 03 	sts	0x037C, r25
    }
}
    1d32:	1f 91       	pop	r17
    1d34:	0f 91       	pop	r16
    1d36:	08 95       	ret

00001d38 <__udivmodsi4>:
    1d38:	a1 e2       	ldi	r26, 0x21	; 33
    1d3a:	1a 2e       	mov	r1, r26
    1d3c:	aa 1b       	sub	r26, r26
    1d3e:	bb 1b       	sub	r27, r27
    1d40:	fd 01       	movw	r30, r26
    1d42:	0d c0       	rjmp	.+26     	; 0x1d5e <__udivmodsi4_ep>

00001d44 <__udivmodsi4_loop>:
    1d44:	aa 1f       	adc	r26, r26
    1d46:	bb 1f       	adc	r27, r27
    1d48:	ee 1f       	adc	r30, r30
    1d4a:	ff 1f       	adc	r31, r31
    1d4c:	a2 17       	cp	r26, r18
    1d4e:	b3 07       	cpc	r27, r19
    1d50:	e4 07       	cpc	r30, r20
    1d52:	f5 07       	cpc	r31, r21
    1d54:	20 f0       	brcs	.+8      	; 0x1d5e <__udivmodsi4_ep>
    1d56:	a2 1b       	sub	r26, r18
    1d58:	b3 0b       	sbc	r27, r19
    1d5a:	e4 0b       	sbc	r30, r20
    1d5c:	f5 0b       	sbc	r31, r21

00001d5e <__udivmodsi4_ep>:
    1d5e:	66 1f       	adc	r22, r22
    1d60:	77 1f       	adc	r23, r23
    1d62:	88 1f       	adc	r24, r24
    1d64:	99 1f       	adc	r25, r25
    1d66:	1a 94       	dec	r1
    1d68:	69 f7       	brne	.-38     	; 0x1d44 <__udivmodsi4_loop>
    1d6a:	60 95       	com	r22
    1d6c:	70 95       	com	r23
    1d6e:	80 95       	com	r24
    1d70:	90 95       	com	r25
    1d72:	9b 01       	movw	r18, r22
    1d74:	ac 01       	movw	r20, r24
    1d76:	bd 01       	movw	r22, r26
    1d78:	cf 01       	movw	r24, r30
    1d7a:	08 95       	ret

00001d7c <__tablejump2__>:
    1d7c:	ee 0f       	add	r30, r30
    1d7e:	ff 1f       	adc	r31, r31

00001d80 <__tablejump__>:
    1d80:	05 90       	lpm	r0, Z+
    1d82:	f4 91       	lpm	r31, Z
    1d84:	e0 2d       	mov	r30, r0
    1d86:	09 94       	ijmp

00001d88 <malloc>:
    1d88:	cf 93       	push	r28
    1d8a:	df 93       	push	r29
    1d8c:	82 30       	cpi	r24, 0x02	; 2
    1d8e:	91 05       	cpc	r25, r1
    1d90:	10 f4       	brcc	.+4      	; 0x1d96 <malloc+0xe>
    1d92:	82 e0       	ldi	r24, 0x02	; 2
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	e0 91 c6 03 	lds	r30, 0x03C6
    1d9a:	f0 91 c7 03 	lds	r31, 0x03C7
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	a0 e0       	ldi	r26, 0x00	; 0
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	30 97       	sbiw	r30, 0x00	; 0
    1da8:	39 f1       	breq	.+78     	; 0x1df8 <malloc+0x70>
    1daa:	40 81       	ld	r20, Z
    1dac:	51 81       	ldd	r21, Z+1	; 0x01
    1dae:	48 17       	cp	r20, r24
    1db0:	59 07       	cpc	r21, r25
    1db2:	b8 f0       	brcs	.+46     	; 0x1de2 <malloc+0x5a>
    1db4:	48 17       	cp	r20, r24
    1db6:	59 07       	cpc	r21, r25
    1db8:	71 f4       	brne	.+28     	; 0x1dd6 <malloc+0x4e>
    1dba:	82 81       	ldd	r24, Z+2	; 0x02
    1dbc:	93 81       	ldd	r25, Z+3	; 0x03
    1dbe:	10 97       	sbiw	r26, 0x00	; 0
    1dc0:	29 f0       	breq	.+10     	; 0x1dcc <malloc+0x44>
    1dc2:	13 96       	adiw	r26, 0x03	; 3
    1dc4:	9c 93       	st	X, r25
    1dc6:	8e 93       	st	-X, r24
    1dc8:	12 97       	sbiw	r26, 0x02	; 2
    1dca:	2c c0       	rjmp	.+88     	; 0x1e24 <malloc+0x9c>
    1dcc:	90 93 c7 03 	sts	0x03C7, r25
    1dd0:	80 93 c6 03 	sts	0x03C6, r24
    1dd4:	27 c0       	rjmp	.+78     	; 0x1e24 <malloc+0x9c>
    1dd6:	21 15       	cp	r18, r1
    1dd8:	31 05       	cpc	r19, r1
    1dda:	31 f0       	breq	.+12     	; 0x1de8 <malloc+0x60>
    1ddc:	42 17       	cp	r20, r18
    1dde:	53 07       	cpc	r21, r19
    1de0:	18 f0       	brcs	.+6      	; 0x1de8 <malloc+0x60>
    1de2:	a9 01       	movw	r20, r18
    1de4:	db 01       	movw	r26, r22
    1de6:	01 c0       	rjmp	.+2      	; 0x1dea <malloc+0x62>
    1de8:	ef 01       	movw	r28, r30
    1dea:	9a 01       	movw	r18, r20
    1dec:	bd 01       	movw	r22, r26
    1dee:	df 01       	movw	r26, r30
    1df0:	02 80       	ldd	r0, Z+2	; 0x02
    1df2:	f3 81       	ldd	r31, Z+3	; 0x03
    1df4:	e0 2d       	mov	r30, r0
    1df6:	d7 cf       	rjmp	.-82     	; 0x1da6 <malloc+0x1e>
    1df8:	21 15       	cp	r18, r1
    1dfa:	31 05       	cpc	r19, r1
    1dfc:	f9 f0       	breq	.+62     	; 0x1e3c <malloc+0xb4>
    1dfe:	28 1b       	sub	r18, r24
    1e00:	39 0b       	sbc	r19, r25
    1e02:	24 30       	cpi	r18, 0x04	; 4
    1e04:	31 05       	cpc	r19, r1
    1e06:	80 f4       	brcc	.+32     	; 0x1e28 <malloc+0xa0>
    1e08:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e0c:	61 15       	cp	r22, r1
    1e0e:	71 05       	cpc	r23, r1
    1e10:	21 f0       	breq	.+8      	; 0x1e1a <malloc+0x92>
    1e12:	fb 01       	movw	r30, r22
    1e14:	93 83       	std	Z+3, r25	; 0x03
    1e16:	82 83       	std	Z+2, r24	; 0x02
    1e18:	04 c0       	rjmp	.+8      	; 0x1e22 <malloc+0x9a>
    1e1a:	90 93 c7 03 	sts	0x03C7, r25
    1e1e:	80 93 c6 03 	sts	0x03C6, r24
    1e22:	fe 01       	movw	r30, r28
    1e24:	32 96       	adiw	r30, 0x02	; 2
    1e26:	44 c0       	rjmp	.+136    	; 0x1eb0 <malloc+0x128>
    1e28:	fe 01       	movw	r30, r28
    1e2a:	e2 0f       	add	r30, r18
    1e2c:	f3 1f       	adc	r31, r19
    1e2e:	81 93       	st	Z+, r24
    1e30:	91 93       	st	Z+, r25
    1e32:	22 50       	subi	r18, 0x02	; 2
    1e34:	31 09       	sbc	r19, r1
    1e36:	39 83       	std	Y+1, r19	; 0x01
    1e38:	28 83       	st	Y, r18
    1e3a:	3a c0       	rjmp	.+116    	; 0x1eb0 <malloc+0x128>
    1e3c:	20 91 c4 03 	lds	r18, 0x03C4
    1e40:	30 91 c5 03 	lds	r19, 0x03C5
    1e44:	23 2b       	or	r18, r19
    1e46:	41 f4       	brne	.+16     	; 0x1e58 <malloc+0xd0>
    1e48:	20 91 02 01 	lds	r18, 0x0102
    1e4c:	30 91 03 01 	lds	r19, 0x0103
    1e50:	30 93 c5 03 	sts	0x03C5, r19
    1e54:	20 93 c4 03 	sts	0x03C4, r18
    1e58:	20 91 00 01 	lds	r18, 0x0100
    1e5c:	30 91 01 01 	lds	r19, 0x0101
    1e60:	21 15       	cp	r18, r1
    1e62:	31 05       	cpc	r19, r1
    1e64:	41 f4       	brne	.+16     	; 0x1e76 <malloc+0xee>
    1e66:	2d b7       	in	r18, 0x3d	; 61
    1e68:	3e b7       	in	r19, 0x3e	; 62
    1e6a:	40 91 04 01 	lds	r20, 0x0104
    1e6e:	50 91 05 01 	lds	r21, 0x0105
    1e72:	24 1b       	sub	r18, r20
    1e74:	35 0b       	sbc	r19, r21
    1e76:	e0 91 c4 03 	lds	r30, 0x03C4
    1e7a:	f0 91 c5 03 	lds	r31, 0x03C5
    1e7e:	e2 17       	cp	r30, r18
    1e80:	f3 07       	cpc	r31, r19
    1e82:	a0 f4       	brcc	.+40     	; 0x1eac <malloc+0x124>
    1e84:	2e 1b       	sub	r18, r30
    1e86:	3f 0b       	sbc	r19, r31
    1e88:	28 17       	cp	r18, r24
    1e8a:	39 07       	cpc	r19, r25
    1e8c:	78 f0       	brcs	.+30     	; 0x1eac <malloc+0x124>
    1e8e:	ac 01       	movw	r20, r24
    1e90:	4e 5f       	subi	r20, 0xFE	; 254
    1e92:	5f 4f       	sbci	r21, 0xFF	; 255
    1e94:	24 17       	cp	r18, r20
    1e96:	35 07       	cpc	r19, r21
    1e98:	48 f0       	brcs	.+18     	; 0x1eac <malloc+0x124>
    1e9a:	4e 0f       	add	r20, r30
    1e9c:	5f 1f       	adc	r21, r31
    1e9e:	50 93 c5 03 	sts	0x03C5, r21
    1ea2:	40 93 c4 03 	sts	0x03C4, r20
    1ea6:	81 93       	st	Z+, r24
    1ea8:	91 93       	st	Z+, r25
    1eaa:	02 c0       	rjmp	.+4      	; 0x1eb0 <malloc+0x128>
    1eac:	e0 e0       	ldi	r30, 0x00	; 0
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	cf 01       	movw	r24, r30
    1eb2:	df 91       	pop	r29
    1eb4:	cf 91       	pop	r28
    1eb6:	08 95       	ret

00001eb8 <free>:
    1eb8:	cf 93       	push	r28
    1eba:	df 93       	push	r29
    1ebc:	00 97       	sbiw	r24, 0x00	; 0
    1ebe:	09 f4       	brne	.+2      	; 0x1ec2 <free+0xa>
    1ec0:	87 c0       	rjmp	.+270    	; 0x1fd0 <free+0x118>
    1ec2:	fc 01       	movw	r30, r24
    1ec4:	32 97       	sbiw	r30, 0x02	; 2
    1ec6:	13 82       	std	Z+3, r1	; 0x03
    1ec8:	12 82       	std	Z+2, r1	; 0x02
    1eca:	c0 91 c6 03 	lds	r28, 0x03C6
    1ece:	d0 91 c7 03 	lds	r29, 0x03C7
    1ed2:	20 97       	sbiw	r28, 0x00	; 0
    1ed4:	81 f4       	brne	.+32     	; 0x1ef6 <free+0x3e>
    1ed6:	20 81       	ld	r18, Z
    1ed8:	31 81       	ldd	r19, Z+1	; 0x01
    1eda:	28 0f       	add	r18, r24
    1edc:	39 1f       	adc	r19, r25
    1ede:	80 91 c4 03 	lds	r24, 0x03C4
    1ee2:	90 91 c5 03 	lds	r25, 0x03C5
    1ee6:	82 17       	cp	r24, r18
    1ee8:	93 07       	cpc	r25, r19
    1eea:	79 f5       	brne	.+94     	; 0x1f4a <free+0x92>
    1eec:	f0 93 c5 03 	sts	0x03C5, r31
    1ef0:	e0 93 c4 03 	sts	0x03C4, r30
    1ef4:	6d c0       	rjmp	.+218    	; 0x1fd0 <free+0x118>
    1ef6:	de 01       	movw	r26, r28
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	ae 17       	cp	r26, r30
    1efe:	bf 07       	cpc	r27, r31
    1f00:	50 f4       	brcc	.+20     	; 0x1f16 <free+0x5e>
    1f02:	12 96       	adiw	r26, 0x02	; 2
    1f04:	4d 91       	ld	r20, X+
    1f06:	5c 91       	ld	r21, X
    1f08:	13 97       	sbiw	r26, 0x03	; 3
    1f0a:	9d 01       	movw	r18, r26
    1f0c:	41 15       	cp	r20, r1
    1f0e:	51 05       	cpc	r21, r1
    1f10:	09 f1       	breq	.+66     	; 0x1f54 <free+0x9c>
    1f12:	da 01       	movw	r26, r20
    1f14:	f3 cf       	rjmp	.-26     	; 0x1efc <free+0x44>
    1f16:	b3 83       	std	Z+3, r27	; 0x03
    1f18:	a2 83       	std	Z+2, r26	; 0x02
    1f1a:	40 81       	ld	r20, Z
    1f1c:	51 81       	ldd	r21, Z+1	; 0x01
    1f1e:	84 0f       	add	r24, r20
    1f20:	95 1f       	adc	r25, r21
    1f22:	8a 17       	cp	r24, r26
    1f24:	9b 07       	cpc	r25, r27
    1f26:	71 f4       	brne	.+28     	; 0x1f44 <free+0x8c>
    1f28:	8d 91       	ld	r24, X+
    1f2a:	9c 91       	ld	r25, X
    1f2c:	11 97       	sbiw	r26, 0x01	; 1
    1f2e:	84 0f       	add	r24, r20
    1f30:	95 1f       	adc	r25, r21
    1f32:	02 96       	adiw	r24, 0x02	; 2
    1f34:	91 83       	std	Z+1, r25	; 0x01
    1f36:	80 83       	st	Z, r24
    1f38:	12 96       	adiw	r26, 0x02	; 2
    1f3a:	8d 91       	ld	r24, X+
    1f3c:	9c 91       	ld	r25, X
    1f3e:	13 97       	sbiw	r26, 0x03	; 3
    1f40:	93 83       	std	Z+3, r25	; 0x03
    1f42:	82 83       	std	Z+2, r24	; 0x02
    1f44:	21 15       	cp	r18, r1
    1f46:	31 05       	cpc	r19, r1
    1f48:	29 f4       	brne	.+10     	; 0x1f54 <free+0x9c>
    1f4a:	f0 93 c7 03 	sts	0x03C7, r31
    1f4e:	e0 93 c6 03 	sts	0x03C6, r30
    1f52:	3e c0       	rjmp	.+124    	; 0x1fd0 <free+0x118>
    1f54:	d9 01       	movw	r26, r18
    1f56:	13 96       	adiw	r26, 0x03	; 3
    1f58:	fc 93       	st	X, r31
    1f5a:	ee 93       	st	-X, r30
    1f5c:	12 97       	sbiw	r26, 0x02	; 2
    1f5e:	4d 91       	ld	r20, X+
    1f60:	5d 91       	ld	r21, X+
    1f62:	a4 0f       	add	r26, r20
    1f64:	b5 1f       	adc	r27, r21
    1f66:	ea 17       	cp	r30, r26
    1f68:	fb 07       	cpc	r31, r27
    1f6a:	79 f4       	brne	.+30     	; 0x1f8a <free+0xd2>
    1f6c:	80 81       	ld	r24, Z
    1f6e:	91 81       	ldd	r25, Z+1	; 0x01
    1f70:	84 0f       	add	r24, r20
    1f72:	95 1f       	adc	r25, r21
    1f74:	02 96       	adiw	r24, 0x02	; 2
    1f76:	d9 01       	movw	r26, r18
    1f78:	11 96       	adiw	r26, 0x01	; 1
    1f7a:	9c 93       	st	X, r25
    1f7c:	8e 93       	st	-X, r24
    1f7e:	82 81       	ldd	r24, Z+2	; 0x02
    1f80:	93 81       	ldd	r25, Z+3	; 0x03
    1f82:	13 96       	adiw	r26, 0x03	; 3
    1f84:	9c 93       	st	X, r25
    1f86:	8e 93       	st	-X, r24
    1f88:	12 97       	sbiw	r26, 0x02	; 2
    1f8a:	e0 e0       	ldi	r30, 0x00	; 0
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f90:	9b 81       	ldd	r25, Y+3	; 0x03
    1f92:	00 97       	sbiw	r24, 0x00	; 0
    1f94:	19 f0       	breq	.+6      	; 0x1f9c <free+0xe4>
    1f96:	fe 01       	movw	r30, r28
    1f98:	ec 01       	movw	r28, r24
    1f9a:	f9 cf       	rjmp	.-14     	; 0x1f8e <free+0xd6>
    1f9c:	ce 01       	movw	r24, r28
    1f9e:	02 96       	adiw	r24, 0x02	; 2
    1fa0:	28 81       	ld	r18, Y
    1fa2:	39 81       	ldd	r19, Y+1	; 0x01
    1fa4:	82 0f       	add	r24, r18
    1fa6:	93 1f       	adc	r25, r19
    1fa8:	20 91 c4 03 	lds	r18, 0x03C4
    1fac:	30 91 c5 03 	lds	r19, 0x03C5
    1fb0:	28 17       	cp	r18, r24
    1fb2:	39 07       	cpc	r19, r25
    1fb4:	69 f4       	brne	.+26     	; 0x1fd0 <free+0x118>
    1fb6:	30 97       	sbiw	r30, 0x00	; 0
    1fb8:	29 f4       	brne	.+10     	; 0x1fc4 <free+0x10c>
    1fba:	10 92 c7 03 	sts	0x03C7, r1
    1fbe:	10 92 c6 03 	sts	0x03C6, r1
    1fc2:	02 c0       	rjmp	.+4      	; 0x1fc8 <free+0x110>
    1fc4:	13 82       	std	Z+3, r1	; 0x03
    1fc6:	12 82       	std	Z+2, r1	; 0x02
    1fc8:	d0 93 c5 03 	sts	0x03C5, r29
    1fcc:	c0 93 c4 03 	sts	0x03C4, r28
    1fd0:	df 91       	pop	r29
    1fd2:	cf 91       	pop	r28
    1fd4:	08 95       	ret

00001fd6 <realloc>:
    1fd6:	a0 e0       	ldi	r26, 0x00	; 0
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	e1 ef       	ldi	r30, 0xF1	; 241
    1fdc:	ff e0       	ldi	r31, 0x0F	; 15
    1fde:	0c 94 fa 10 	jmp	0x21f4	; 0x21f4 <__prologue_saves__+0x8>
    1fe2:	ec 01       	movw	r28, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	20 97       	sbiw	r28, 0x00	; 0
    1fe8:	19 f4       	brne	.+6      	; 0x1ff0 <realloc+0x1a>
    1fea:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <malloc>
    1fee:	b8 c0       	rjmp	.+368    	; 0x2160 <realloc+0x18a>
    1ff0:	fe 01       	movw	r30, r28
    1ff2:	e6 0f       	add	r30, r22
    1ff4:	f7 1f       	adc	r31, r23
    1ff6:	9e 01       	movw	r18, r28
    1ff8:	22 50       	subi	r18, 0x02	; 2
    1ffa:	31 09       	sbc	r19, r1
    1ffc:	e2 17       	cp	r30, r18
    1ffe:	f3 07       	cpc	r31, r19
    2000:	08 f4       	brcc	.+2      	; 0x2004 <realloc+0x2e>
    2002:	ac c0       	rjmp	.+344    	; 0x215c <realloc+0x186>
    2004:	d9 01       	movw	r26, r18
    2006:	0d 91       	ld	r16, X+
    2008:	1c 91       	ld	r17, X
    200a:	11 97       	sbiw	r26, 0x01	; 1
    200c:	06 17       	cp	r16, r22
    200e:	17 07       	cpc	r17, r23
    2010:	b8 f0       	brcs	.+46     	; 0x2040 <realloc+0x6a>
    2012:	05 30       	cpi	r16, 0x05	; 5
    2014:	11 05       	cpc	r17, r1
    2016:	08 f4       	brcc	.+2      	; 0x201a <realloc+0x44>
    2018:	9f c0       	rjmp	.+318    	; 0x2158 <realloc+0x182>
    201a:	a8 01       	movw	r20, r16
    201c:	44 50       	subi	r20, 0x04	; 4
    201e:	51 09       	sbc	r21, r1
    2020:	46 17       	cp	r20, r22
    2022:	57 07       	cpc	r21, r23
    2024:	08 f4       	brcc	.+2      	; 0x2028 <realloc+0x52>
    2026:	98 c0       	rjmp	.+304    	; 0x2158 <realloc+0x182>
    2028:	02 50       	subi	r16, 0x02	; 2
    202a:	11 09       	sbc	r17, r1
    202c:	06 1b       	sub	r16, r22
    202e:	17 0b       	sbc	r17, r23
    2030:	01 93       	st	Z+, r16
    2032:	11 93       	st	Z+, r17
    2034:	6d 93       	st	X+, r22
    2036:	7c 93       	st	X, r23
    2038:	cf 01       	movw	r24, r30
    203a:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <free>
    203e:	8c c0       	rjmp	.+280    	; 0x2158 <realloc+0x182>
    2040:	5b 01       	movw	r10, r22
    2042:	a0 1a       	sub	r10, r16
    2044:	b1 0a       	sbc	r11, r17
    2046:	4e 01       	movw	r8, r28
    2048:	80 0e       	add	r8, r16
    204a:	91 1e       	adc	r9, r17
    204c:	a0 91 c6 03 	lds	r26, 0x03C6
    2050:	b0 91 c7 03 	lds	r27, 0x03C7
    2054:	61 2c       	mov	r6, r1
    2056:	71 2c       	mov	r7, r1
    2058:	60 e0       	ldi	r22, 0x00	; 0
    205a:	70 e0       	ldi	r23, 0x00	; 0
    205c:	10 97       	sbiw	r26, 0x00	; 0
    205e:	09 f4       	brne	.+2      	; 0x2062 <realloc+0x8c>
    2060:	49 c0       	rjmp	.+146    	; 0x20f4 <realloc+0x11e>
    2062:	a8 15       	cp	r26, r8
    2064:	b9 05       	cpc	r27, r9
    2066:	c9 f5       	brne	.+114    	; 0x20da <realloc+0x104>
    2068:	ed 90       	ld	r14, X+
    206a:	fc 90       	ld	r15, X
    206c:	11 97       	sbiw	r26, 0x01	; 1
    206e:	67 01       	movw	r12, r14
    2070:	42 e0       	ldi	r20, 0x02	; 2
    2072:	c4 0e       	add	r12, r20
    2074:	d1 1c       	adc	r13, r1
    2076:	ca 14       	cp	r12, r10
    2078:	db 04       	cpc	r13, r11
    207a:	78 f1       	brcs	.+94     	; 0x20da <realloc+0x104>
    207c:	47 01       	movw	r8, r14
    207e:	8a 18       	sub	r8, r10
    2080:	9b 08       	sbc	r9, r11
    2082:	64 01       	movw	r12, r8
    2084:	42 e0       	ldi	r20, 0x02	; 2
    2086:	c4 0e       	add	r12, r20
    2088:	d1 1c       	adc	r13, r1
    208a:	12 96       	adiw	r26, 0x02	; 2
    208c:	bc 90       	ld	r11, X
    208e:	12 97       	sbiw	r26, 0x02	; 2
    2090:	13 96       	adiw	r26, 0x03	; 3
    2092:	ac 91       	ld	r26, X
    2094:	b5 e0       	ldi	r27, 0x05	; 5
    2096:	cb 16       	cp	r12, r27
    2098:	d1 04       	cpc	r13, r1
    209a:	40 f0       	brcs	.+16     	; 0x20ac <realloc+0xd6>
    209c:	b2 82       	std	Z+2, r11	; 0x02
    209e:	a3 83       	std	Z+3, r26	; 0x03
    20a0:	91 82       	std	Z+1, r9	; 0x01
    20a2:	80 82       	st	Z, r8
    20a4:	d9 01       	movw	r26, r18
    20a6:	8d 93       	st	X+, r24
    20a8:	9c 93       	st	X, r25
    20aa:	09 c0       	rjmp	.+18     	; 0x20be <realloc+0xe8>
    20ac:	0e 5f       	subi	r16, 0xFE	; 254
    20ae:	1f 4f       	sbci	r17, 0xFF	; 255
    20b0:	0e 0d       	add	r16, r14
    20b2:	1f 1d       	adc	r17, r15
    20b4:	f9 01       	movw	r30, r18
    20b6:	11 83       	std	Z+1, r17	; 0x01
    20b8:	00 83       	st	Z, r16
    20ba:	eb 2d       	mov	r30, r11
    20bc:	fa 2f       	mov	r31, r26
    20be:	61 15       	cp	r22, r1
    20c0:	71 05       	cpc	r23, r1
    20c2:	31 f0       	breq	.+12     	; 0x20d0 <realloc+0xfa>
    20c4:	db 01       	movw	r26, r22
    20c6:	13 96       	adiw	r26, 0x03	; 3
    20c8:	fc 93       	st	X, r31
    20ca:	ee 93       	st	-X, r30
    20cc:	12 97       	sbiw	r26, 0x02	; 2
    20ce:	44 c0       	rjmp	.+136    	; 0x2158 <realloc+0x182>
    20d0:	f0 93 c7 03 	sts	0x03C7, r31
    20d4:	e0 93 c6 03 	sts	0x03C6, r30
    20d8:	3f c0       	rjmp	.+126    	; 0x2158 <realloc+0x182>
    20da:	6d 91       	ld	r22, X+
    20dc:	7c 91       	ld	r23, X
    20de:	11 97       	sbiw	r26, 0x01	; 1
    20e0:	66 16       	cp	r6, r22
    20e2:	77 06       	cpc	r7, r23
    20e4:	08 f4       	brcc	.+2      	; 0x20e8 <realloc+0x112>
    20e6:	3b 01       	movw	r6, r22
    20e8:	bd 01       	movw	r22, r26
    20ea:	12 96       	adiw	r26, 0x02	; 2
    20ec:	0d 90       	ld	r0, X+
    20ee:	bc 91       	ld	r27, X
    20f0:	a0 2d       	mov	r26, r0
    20f2:	b4 cf       	rjmp	.-152    	; 0x205c <realloc+0x86>
    20f4:	60 91 c4 03 	lds	r22, 0x03C4
    20f8:	70 91 c5 03 	lds	r23, 0x03C5
    20fc:	68 15       	cp	r22, r8
    20fe:	79 05       	cpc	r23, r9
    2100:	e9 f4       	brne	.+58     	; 0x213c <realloc+0x166>
    2102:	68 16       	cp	r6, r24
    2104:	79 06       	cpc	r7, r25
    2106:	d0 f4       	brcc	.+52     	; 0x213c <realloc+0x166>
    2108:	40 91 00 01 	lds	r20, 0x0100
    210c:	50 91 01 01 	lds	r21, 0x0101
    2110:	41 15       	cp	r20, r1
    2112:	51 05       	cpc	r21, r1
    2114:	41 f4       	brne	.+16     	; 0x2126 <realloc+0x150>
    2116:	4d b7       	in	r20, 0x3d	; 61
    2118:	5e b7       	in	r21, 0x3e	; 62
    211a:	60 91 04 01 	lds	r22, 0x0104
    211e:	70 91 05 01 	lds	r23, 0x0105
    2122:	46 1b       	sub	r20, r22
    2124:	57 0b       	sbc	r21, r23
    2126:	e4 17       	cp	r30, r20
    2128:	f5 07       	cpc	r31, r21
    212a:	c0 f4       	brcc	.+48     	; 0x215c <realloc+0x186>
    212c:	f0 93 c5 03 	sts	0x03C5, r31
    2130:	e0 93 c4 03 	sts	0x03C4, r30
    2134:	f9 01       	movw	r30, r18
    2136:	91 83       	std	Z+1, r25	; 0x01
    2138:	80 83       	st	Z, r24
    213a:	0e c0       	rjmp	.+28     	; 0x2158 <realloc+0x182>
    213c:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <malloc>
    2140:	7c 01       	movw	r14, r24
    2142:	00 97       	sbiw	r24, 0x00	; 0
    2144:	59 f0       	breq	.+22     	; 0x215c <realloc+0x186>
    2146:	a8 01       	movw	r20, r16
    2148:	be 01       	movw	r22, r28
    214a:	0e 94 bd 10 	call	0x217a	; 0x217a <memcpy>
    214e:	ce 01       	movw	r24, r28
    2150:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <free>
    2154:	c7 01       	movw	r24, r14
    2156:	04 c0       	rjmp	.+8      	; 0x2160 <realloc+0x18a>
    2158:	ce 01       	movw	r24, r28
    215a:	02 c0       	rjmp	.+4      	; 0x2160 <realloc+0x18a>
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	cd b7       	in	r28, 0x3d	; 61
    2162:	de b7       	in	r29, 0x3e	; 62
    2164:	ee e0       	ldi	r30, 0x0E	; 14
    2166:	0c 94 16 11 	jmp	0x222c	; 0x222c <__epilogue_restores__+0x8>

0000216a <isspace>:
    216a:	91 11       	cpse	r25, r1
    216c:	3c c0       	rjmp	.+120    	; 0x21e6 <__ctype_isfalse>
    216e:	80 32       	cpi	r24, 0x20	; 32
    2170:	19 f0       	breq	.+6      	; 0x2178 <isspace+0xe>
    2172:	89 50       	subi	r24, 0x09	; 9
    2174:	85 50       	subi	r24, 0x05	; 5
    2176:	d0 f7       	brcc	.-12     	; 0x216c <isspace+0x2>
    2178:	08 95       	ret

0000217a <memcpy>:
    217a:	fb 01       	movw	r30, r22
    217c:	dc 01       	movw	r26, r24
    217e:	02 c0       	rjmp	.+4      	; 0x2184 <memcpy+0xa>
    2180:	01 90       	ld	r0, Z+
    2182:	0d 92       	st	X+, r0
    2184:	41 50       	subi	r20, 0x01	; 1
    2186:	50 40       	sbci	r21, 0x00	; 0
    2188:	d8 f7       	brcc	.-10     	; 0x2180 <memcpy+0x6>
    218a:	08 95       	ret

0000218c <strcmp>:
    218c:	fb 01       	movw	r30, r22
    218e:	dc 01       	movw	r26, r24
    2190:	8d 91       	ld	r24, X+
    2192:	01 90       	ld	r0, Z+
    2194:	80 19       	sub	r24, r0
    2196:	01 10       	cpse	r0, r1
    2198:	d9 f3       	breq	.-10     	; 0x2190 <strcmp+0x4>
    219a:	99 0b       	sbc	r25, r25
    219c:	08 95       	ret

0000219e <strcpy>:
    219e:	fb 01       	movw	r30, r22
    21a0:	dc 01       	movw	r26, r24
    21a2:	01 90       	ld	r0, Z+
    21a4:	0d 92       	st	X+, r0
    21a6:	00 20       	and	r0, r0
    21a8:	e1 f7       	brne	.-8      	; 0x21a2 <strcpy+0x4>
    21aa:	08 95       	ret

000021ac <strncmp>:
    21ac:	fb 01       	movw	r30, r22
    21ae:	dc 01       	movw	r26, r24
    21b0:	41 50       	subi	r20, 0x01	; 1
    21b2:	50 40       	sbci	r21, 0x00	; 0
    21b4:	30 f0       	brcs	.+12     	; 0x21c2 <strncmp+0x16>
    21b6:	8d 91       	ld	r24, X+
    21b8:	01 90       	ld	r0, Z+
    21ba:	80 19       	sub	r24, r0
    21bc:	19 f4       	brne	.+6      	; 0x21c4 <strncmp+0x18>
    21be:	00 20       	and	r0, r0
    21c0:	b9 f7       	brne	.-18     	; 0x21b0 <strncmp+0x4>
    21c2:	88 1b       	sub	r24, r24
    21c4:	99 0b       	sbc	r25, r25
    21c6:	08 95       	ret

000021c8 <strncpy>:
    21c8:	fb 01       	movw	r30, r22
    21ca:	dc 01       	movw	r26, r24
    21cc:	41 50       	subi	r20, 0x01	; 1
    21ce:	50 40       	sbci	r21, 0x00	; 0
    21d0:	48 f0       	brcs	.+18     	; 0x21e4 <strncpy+0x1c>
    21d2:	01 90       	ld	r0, Z+
    21d4:	0d 92       	st	X+, r0
    21d6:	00 20       	and	r0, r0
    21d8:	c9 f7       	brne	.-14     	; 0x21cc <strncpy+0x4>
    21da:	01 c0       	rjmp	.+2      	; 0x21de <strncpy+0x16>
    21dc:	1d 92       	st	X+, r1
    21de:	41 50       	subi	r20, 0x01	; 1
    21e0:	50 40       	sbci	r21, 0x00	; 0
    21e2:	e0 f7       	brcc	.-8      	; 0x21dc <strncpy+0x14>
    21e4:	08 95       	ret

000021e6 <__ctype_isfalse>:
    21e6:	99 27       	eor	r25, r25
    21e8:	88 27       	eor	r24, r24

000021ea <__ctype_istrue>:
    21ea:	08 95       	ret

000021ec <__prologue_saves__>:
    21ec:	2f 92       	push	r2
    21ee:	3f 92       	push	r3
    21f0:	4f 92       	push	r4
    21f2:	5f 92       	push	r5
    21f4:	6f 92       	push	r6
    21f6:	7f 92       	push	r7
    21f8:	8f 92       	push	r8
    21fa:	9f 92       	push	r9
    21fc:	af 92       	push	r10
    21fe:	bf 92       	push	r11
    2200:	cf 92       	push	r12
    2202:	df 92       	push	r13
    2204:	ef 92       	push	r14
    2206:	ff 92       	push	r15
    2208:	0f 93       	push	r16
    220a:	1f 93       	push	r17
    220c:	cf 93       	push	r28
    220e:	df 93       	push	r29
    2210:	cd b7       	in	r28, 0x3d	; 61
    2212:	de b7       	in	r29, 0x3e	; 62
    2214:	ca 1b       	sub	r28, r26
    2216:	db 0b       	sbc	r29, r27
    2218:	0f b6       	in	r0, 0x3f	; 63
    221a:	f8 94       	cli
    221c:	de bf       	out	0x3e, r29	; 62
    221e:	0f be       	out	0x3f, r0	; 63
    2220:	cd bf       	out	0x3d, r28	; 61
    2222:	09 94       	ijmp

00002224 <__epilogue_restores__>:
    2224:	2a 88       	ldd	r2, Y+18	; 0x12
    2226:	39 88       	ldd	r3, Y+17	; 0x11
    2228:	48 88       	ldd	r4, Y+16	; 0x10
    222a:	5f 84       	ldd	r5, Y+15	; 0x0f
    222c:	6e 84       	ldd	r6, Y+14	; 0x0e
    222e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2230:	8c 84       	ldd	r8, Y+12	; 0x0c
    2232:	9b 84       	ldd	r9, Y+11	; 0x0b
    2234:	aa 84       	ldd	r10, Y+10	; 0x0a
    2236:	b9 84       	ldd	r11, Y+9	; 0x09
    2238:	c8 84       	ldd	r12, Y+8	; 0x08
    223a:	df 80       	ldd	r13, Y+7	; 0x07
    223c:	ee 80       	ldd	r14, Y+6	; 0x06
    223e:	fd 80       	ldd	r15, Y+5	; 0x05
    2240:	0c 81       	ldd	r16, Y+4	; 0x04
    2242:	1b 81       	ldd	r17, Y+3	; 0x03
    2244:	aa 81       	ldd	r26, Y+2	; 0x02
    2246:	b9 81       	ldd	r27, Y+1	; 0x01
    2248:	ce 0f       	add	r28, r30
    224a:	d1 1d       	adc	r29, r1
    224c:	0f b6       	in	r0, 0x3f	; 63
    224e:	f8 94       	cli
    2250:	de bf       	out	0x3e, r29	; 62
    2252:	0f be       	out	0x3f, r0	; 63
    2254:	cd bf       	out	0x3d, r28	; 61
    2256:	ed 01       	movw	r28, r26
    2258:	08 95       	ret

0000225a <__do_global_dtors>:
    225a:	10 e0       	ldi	r17, 0x00	; 0
    225c:	c0 ec       	ldi	r28, 0xC0	; 192
    225e:	d0 e0       	ldi	r29, 0x00	; 0
    2260:	04 c0       	rjmp	.+8      	; 0x226a <__do_global_dtors+0x10>
    2262:	fe 01       	movw	r30, r28
    2264:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <__tablejump__>
    2268:	22 96       	adiw	r28, 0x02	; 2
    226a:	c2 3c       	cpi	r28, 0xC2	; 194
    226c:	d1 07       	cpc	r29, r17
    226e:	c9 f7       	brne	.-14     	; 0x2262 <__do_global_dtors+0x8>
    2270:	f8 94       	cli

00002272 <__stop_program>:
    2272:	ff cf       	rjmp	.-2      	; 0x2272 <__stop_program>
