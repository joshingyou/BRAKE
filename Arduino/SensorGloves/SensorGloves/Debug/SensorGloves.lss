
SensorGloves.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ec  00800100  00002622  000026b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002622  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f4  008002ec  008002ec  000028a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000028a2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000760  00000000  00000000  000028d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00011ec4  00000000  00000000  00003032  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000027c3  00000000  00000000  00014ef6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002932  00000000  00000000  000176b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001a80  00000000  00000000  00019fec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002733  00000000  00000000  0001ba6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00009115  00000000  00000000  0001e19f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000878  00000000  00000000  000272b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__dtors_end>
       4:	0c 94 48 04 	jmp	0x890	; 0x890 <__vector_1>
       8:	0c 94 75 04 	jmp	0x8ea	; 0x8ea <__vector_2>
       c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      10:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      14:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      18:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      1c:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <__vector_7>
      20:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      24:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      28:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      2c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      30:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      34:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      38:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      3c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      40:	0c 94 a2 04 	jmp	0x944	; 0x944 <__vector_16>
      44:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      48:	0c 94 ca 01 	jmp	0x394	; 0x394 <__vector_18>
      4c:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__vector_19>
      50:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      54:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      58:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      5c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      60:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      64:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	02 00       	.word	0x0002	; ????

00000069 <digital_pin_to_timer_PGM>:
      69:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      79:	00 00 00 00                                         ....

0000007d <digital_pin_to_bit_mask_PGM>:
      7d:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8d:	04 08 10 20                                         ... 

00000091 <digital_pin_to_port_PGM>:
      91:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a1:	03 03 03 03                                         ....

000000a5 <port_to_output_PGM>:
      a5:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000af <port_to_mode_PGM>:
      af:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000000ba <__ctors_start>:
      ba:	2c 02       	muls	r18, r28
      bc:	aa 02       	muls	r26, r26
      be:	33 0f       	add	r19, r19

000000c0 <__ctors_end>:
      c0:	4b 0f       	add	r20, r27

000000c2 <__dtors_end>:
      c2:	11 24       	eor	r1, r1
      c4:	1f be       	out	0x3f, r1	; 63
      c6:	cf ef       	ldi	r28, 0xFF	; 255
      c8:	d8 e0       	ldi	r29, 0x08	; 8
      ca:	de bf       	out	0x3e, r29	; 62
      cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
      ce:	12 e0       	ldi	r17, 0x02	; 2
      d0:	a0 e0       	ldi	r26, 0x00	; 0
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	e2 e2       	ldi	r30, 0x22	; 34
      d6:	f6 e2       	ldi	r31, 0x26	; 38
      d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
      da:	05 90       	lpm	r0, Z+
      dc:	0d 92       	st	X+, r0
      de:	ac 3e       	cpi	r26, 0xEC	; 236
      e0:	b1 07       	cpc	r27, r17
      e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
      e4:	23 e0       	ldi	r18, 0x03	; 3
      e6:	ac ee       	ldi	r26, 0xEC	; 236
      e8:	b2 e0       	ldi	r27, 0x02	; 2
      ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
      ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
      ee:	a0 3e       	cpi	r26, 0xE0	; 224
      f0:	b2 07       	cpc	r27, r18
      f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>

000000f4 <__do_global_ctors>:
      f4:	10 e0       	ldi	r17, 0x00	; 0
      f6:	c0 ec       	ldi	r28, 0xC0	; 192
      f8:	d0 e0       	ldi	r29, 0x00	; 0
      fa:	04 c0       	rjmp	.+8      	; 0x104 <__do_global_ctors+0x10>
      fc:	22 97       	sbiw	r28, 0x02	; 2
      fe:	fe 01       	movw	r30, r28
     100:	0e 94 a2 10 	call	0x2144	; 0x2144 <__tablejump__>
     104:	ca 3b       	cpi	r28, 0xBA	; 186
     106:	d1 07       	cpc	r29, r17
     108:	c9 f7       	brne	.-14     	; 0xfc <__do_global_ctors+0x8>
     10a:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <main>
     10e:	0c 94 04 13 	jmp	0x2608	; 0x2608 <__do_global_dtors>

00000112 <__bad_interrupt>:
     112:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000116 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     116:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     118:	81 8d       	ldd	r24, Z+25	; 0x19
     11a:	22 8d       	ldd	r18, Z+26	; 0x1a
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	80 5c       	subi	r24, 0xC0	; 192
     120:	9f 4f       	sbci	r25, 0xFF	; 255
     122:	82 1b       	sub	r24, r18
     124:	91 09       	sbc	r25, r1
}
     126:	8f 73       	andi	r24, 0x3F	; 63
     128:	99 27       	eor	r25, r25
     12a:	08 95       	ret

0000012c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     12c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     12e:	91 8d       	ldd	r25, Z+25	; 0x19
     130:	82 8d       	ldd	r24, Z+26	; 0x1a
     132:	98 17       	cp	r25, r24
     134:	31 f0       	breq	.+12     	; 0x142 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     136:	82 8d       	ldd	r24, Z+26	; 0x1a
     138:	e8 0f       	add	r30, r24
     13a:	f1 1d       	adc	r31, r1
     13c:	85 8d       	ldd	r24, Z+29	; 0x1d
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     142:	8f ef       	ldi	r24, 0xFF	; 255
     144:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     146:	08 95       	ret

00000148 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     148:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     14a:	91 8d       	ldd	r25, Z+25	; 0x19
     14c:	82 8d       	ldd	r24, Z+26	; 0x1a
     14e:	98 17       	cp	r25, r24
     150:	61 f0       	breq	.+24     	; 0x16a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     152:	82 8d       	ldd	r24, Z+26	; 0x1a
     154:	df 01       	movw	r26, r30
     156:	a8 0f       	add	r26, r24
     158:	b1 1d       	adc	r27, r1
     15a:	5d 96       	adiw	r26, 0x1d	; 29
     15c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     15e:	92 8d       	ldd	r25, Z+26	; 0x1a
     160:	9f 5f       	subi	r25, 0xFF	; 255
     162:	9f 73       	andi	r25, 0x3F	; 63
     164:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     16a:	8f ef       	ldi	r24, 0xFF	; 255
     16c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     16e:	08 95       	ret

00000170 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     170:	82 e2       	ldi	r24, 0x22	; 34
     172:	92 e0       	ldi	r25, 0x02	; 2
     174:	89 2b       	or	r24, r25
     176:	49 f0       	breq	.+18     	; 0x18a <_Z14serialEventRunv+0x1a>
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	89 2b       	or	r24, r25
     17e:	29 f0       	breq	.+10     	; 0x18a <_Z14serialEventRunv+0x1a>
     180:	0e 94 22 02 	call	0x444	; 0x444 <_Z17Serial0_availablev>
     184:	81 11       	cpse	r24, r1
     186:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     18a:	08 95       	ret

0000018c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     18c:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     18e:	84 8d       	ldd	r24, Z+28	; 0x1c
     190:	df 01       	movw	r26, r30
     192:	a8 0f       	add	r26, r24
     194:	b1 1d       	adc	r27, r1
     196:	a3 5a       	subi	r26, 0xA3	; 163
     198:	bf 4f       	sbci	r27, 0xFF	; 255
     19a:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     19c:	84 8d       	ldd	r24, Z+28	; 0x1c
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	01 96       	adiw	r24, 0x01	; 1
     1a2:	8f 73       	andi	r24, 0x3F	; 63
     1a4:	99 27       	eor	r25, r25
     1a6:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     1a8:	a6 89       	ldd	r26, Z+22	; 0x16
     1aa:	b7 89       	ldd	r27, Z+23	; 0x17
     1ac:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     1ae:	a0 89       	ldd	r26, Z+16	; 0x10
     1b0:	b1 89       	ldd	r27, Z+17	; 0x11
     1b2:	8c 91       	ld	r24, X
     1b4:	80 64       	ori	r24, 0x40	; 64
     1b6:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     1b8:	93 8d       	ldd	r25, Z+27	; 0x1b
     1ba:	84 8d       	ldd	r24, Z+28	; 0x1c
     1bc:	98 13       	cpse	r25, r24
     1be:	06 c0       	rjmp	.+12     	; 0x1cc <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     1c0:	02 88       	ldd	r0, Z+18	; 0x12
     1c2:	f3 89       	ldd	r31, Z+19	; 0x13
     1c4:	e0 2d       	mov	r30, r0
     1c6:	80 81       	ld	r24, Z
     1c8:	8f 7d       	andi	r24, 0xDF	; 223
     1ca:	80 83       	st	Z, r24
     1cc:	08 95       	ret

000001ce <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     1ce:	cf 93       	push	r28
     1d0:	df 93       	push	r29
     1d2:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     1d4:	88 8d       	ldd	r24, Y+24	; 0x18
     1d6:	88 23       	and	r24, r24
     1d8:	c9 f0       	breq	.+50     	; 0x20c <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     1da:	ea 89       	ldd	r30, Y+18	; 0x12
     1dc:	fb 89       	ldd	r31, Y+19	; 0x13
     1de:	80 81       	ld	r24, Z
     1e0:	85 fd       	sbrc	r24, 5
     1e2:	05 c0       	rjmp	.+10     	; 0x1ee <_ZN14HardwareSerial5flushEv+0x20>
     1e4:	a8 89       	ldd	r26, Y+16	; 0x10
     1e6:	b9 89       	ldd	r27, Y+17	; 0x11
     1e8:	8c 91       	ld	r24, X
     1ea:	86 fd       	sbrc	r24, 6
     1ec:	0f c0       	rjmp	.+30     	; 0x20c <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	07 fc       	sbrc	r0, 7
     1f2:	f5 cf       	rjmp	.-22     	; 0x1de <_ZN14HardwareSerial5flushEv+0x10>
     1f4:	80 81       	ld	r24, Z
     1f6:	85 ff       	sbrs	r24, 5
     1f8:	f2 cf       	rjmp	.-28     	; 0x1de <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     1fa:	a8 89       	ldd	r26, Y+16	; 0x10
     1fc:	b9 89       	ldd	r27, Y+17	; 0x11
     1fe:	8c 91       	ld	r24, X
     200:	85 ff       	sbrs	r24, 5
     202:	ed cf       	rjmp	.-38     	; 0x1de <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     204:	ce 01       	movw	r24, r28
     206:	0e 94 c6 00 	call	0x18c	; 0x18c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     20a:	e7 cf       	rjmp	.-50     	; 0x1da <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     20c:	df 91       	pop	r29
     20e:	cf 91       	pop	r28
     210:	08 95       	ret

00000212 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     212:	cf 92       	push	r12
     214:	df 92       	push	r13
     216:	ff 92       	push	r15
     218:	0f 93       	push	r16
     21a:	1f 93       	push	r17
     21c:	cf 93       	push	r28
     21e:	df 93       	push	r29
     220:	1f 92       	push	r1
     222:	cd b7       	in	r28, 0x3d	; 61
     224:	de b7       	in	r29, 0x3e	; 62
     226:	6c 01       	movw	r12, r24
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     228:	dc 01       	movw	r26, r24
     22a:	5b 96       	adiw	r26, 0x1b	; 27
     22c:	9c 91       	ld	r25, X
     22e:	5b 97       	sbiw	r26, 0x1b	; 27
     230:	5c 96       	adiw	r26, 0x1c	; 28
     232:	8c 91       	ld	r24, X
     234:	5c 97       	sbiw	r26, 0x1c	; 28
     236:	98 13       	cpse	r25, r24
     238:	07 c0       	rjmp	.+14     	; 0x248 <_ZN14HardwareSerial5writeEh+0x36>
     23a:	50 96       	adiw	r26, 0x10	; 16
     23c:	ed 91       	ld	r30, X+
     23e:	fc 91       	ld	r31, X
     240:	51 97       	sbiw	r26, 0x11	; 17
     242:	80 81       	ld	r24, Z
     244:	85 fd       	sbrc	r24, 5
     246:	32 c0       	rjmp	.+100    	; 0x2ac <_ZN14HardwareSerial5writeEh+0x9a>
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     248:	f6 01       	movw	r30, r12
     24a:	03 8d       	ldd	r16, Z+27	; 0x1b
     24c:	10 e0       	ldi	r17, 0x00	; 0
     24e:	0f 5f       	subi	r16, 0xFF	; 255
     250:	1f 4f       	sbci	r17, 0xFF	; 255
     252:	0f 73       	andi	r16, 0x3F	; 63
     254:	11 27       	eor	r17, r17
     256:	f0 2e       	mov	r15, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     258:	f6 01       	movw	r30, r12
     25a:	84 8d       	ldd	r24, Z+28	; 0x1c
     25c:	f8 12       	cpse	r15, r24
     25e:	11 c0       	rjmp	.+34     	; 0x282 <_ZN14HardwareSerial5writeEh+0x70>
    if (bit_is_clear(SREG, SREG_I)) {
     260:	0f b6       	in	r0, 0x3f	; 63
     262:	07 fc       	sbrc	r0, 7
     264:	f9 cf       	rjmp	.-14     	; 0x258 <_ZN14HardwareSerial5writeEh+0x46>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     266:	d6 01       	movw	r26, r12
     268:	50 96       	adiw	r26, 0x10	; 16
     26a:	ed 91       	ld	r30, X+
     26c:	fc 91       	ld	r31, X
     26e:	51 97       	sbiw	r26, 0x11	; 17
     270:	80 81       	ld	r24, Z
     272:	85 ff       	sbrs	r24, 5
     274:	f1 cf       	rjmp	.-30     	; 0x258 <_ZN14HardwareSerial5writeEh+0x46>
	_tx_udr_empty_irq();
     276:	c6 01       	movw	r24, r12
     278:	69 83       	std	Y+1, r22	; 0x01
     27a:	0e 94 c6 00 	call	0x18c	; 0x18c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     27e:	69 81       	ldd	r22, Y+1	; 0x01
     280:	eb cf       	rjmp	.-42     	; 0x258 <_ZN14HardwareSerial5writeEh+0x46>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     282:	83 8d       	ldd	r24, Z+27	; 0x1b
     284:	e8 0f       	add	r30, r24
     286:	f1 1d       	adc	r31, r1
     288:	e3 5a       	subi	r30, 0xA3	; 163
     28a:	ff 4f       	sbci	r31, 0xFF	; 255
     28c:	60 83       	st	Z, r22
  _tx_buffer_head = i;
     28e:	d6 01       	movw	r26, r12
     290:	5b 96       	adiw	r26, 0x1b	; 27
     292:	0c 93       	st	X, r16
     294:	5b 97       	sbiw	r26, 0x1b	; 27
	
  sbi(*_ucsrb, UDRIE0);
     296:	52 96       	adiw	r26, 0x12	; 18
     298:	ed 91       	ld	r30, X+
     29a:	fc 91       	ld	r31, X
     29c:	53 97       	sbiw	r26, 0x13	; 19
     29e:	80 81       	ld	r24, Z
     2a0:	80 62       	ori	r24, 0x20	; 32
     2a2:	80 83       	st	Z, r24
  _written = true;
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	58 96       	adiw	r26, 0x18	; 24
     2a8:	8c 93       	st	X, r24
     2aa:	0d c0       	rjmp	.+26     	; 0x2c6 <_ZN14HardwareSerial5writeEh+0xb4>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     2ac:	d6 01       	movw	r26, r12
     2ae:	56 96       	adiw	r26, 0x16	; 22
     2b0:	ed 91       	ld	r30, X+
     2b2:	fc 91       	ld	r31, X
     2b4:	57 97       	sbiw	r26, 0x17	; 23
     2b6:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     2b8:	50 96       	adiw	r26, 0x10	; 16
     2ba:	ed 91       	ld	r30, X+
     2bc:	fc 91       	ld	r31, X
     2be:	51 97       	sbiw	r26, 0x11	; 17
     2c0:	80 81       	ld	r24, Z
     2c2:	80 64       	ori	r24, 0x40	; 64
     2c4:	80 83       	st	Z, r24
	
  sbi(*_ucsrb, UDRIE0);
  _written = true;
  
  return 1;
}
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	0f 90       	pop	r0
     2cc:	df 91       	pop	r29
     2ce:	cf 91       	pop	r28
     2d0:	1f 91       	pop	r17
     2d2:	0f 91       	pop	r16
     2d4:	ff 90       	pop	r15
     2d6:	df 90       	pop	r13
     2d8:	cf 90       	pop	r12
     2da:	08 95       	ret

000002dc <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     2dc:	bf 92       	push	r11
     2de:	cf 92       	push	r12
     2e0:	df 92       	push	r13
     2e2:	ef 92       	push	r14
     2e4:	ff 92       	push	r15
     2e6:	cf 93       	push	r28
     2e8:	df 93       	push	r29
     2ea:	ec 01       	movw	r28, r24
     2ec:	6a 01       	movw	r12, r20
     2ee:	7b 01       	movw	r14, r22
     2f0:	b2 2e       	mov	r11, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     2f2:	60 e8       	ldi	r22, 0x80	; 128
     2f4:	74 e8       	ldi	r23, 0x84	; 132
     2f6:	8e e1       	ldi	r24, 0x1E	; 30
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	a7 01       	movw	r20, r14
     2fc:	96 01       	movw	r18, r12
     2fe:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__udivmodsi4>
     302:	21 50       	subi	r18, 0x01	; 1
     304:	31 09       	sbc	r19, r1
     306:	41 09       	sbc	r20, r1
     308:	51 09       	sbc	r21, r1
     30a:	56 95       	lsr	r21
     30c:	47 95       	ror	r20
     30e:	37 95       	ror	r19
     310:	27 95       	ror	r18
  *_ucsra = 1 << U2X0;
     312:	e8 89       	ldd	r30, Y+16	; 0x10
     314:	f9 89       	ldd	r31, Y+17	; 0x11
     316:	82 e0       	ldi	r24, 0x02	; 2
     318:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     31a:	21 15       	cp	r18, r1
     31c:	80 e1       	ldi	r24, 0x10	; 16
     31e:	38 07       	cpc	r19, r24
     320:	98 f0       	brcs	.+38     	; 0x348 <_ZN14HardwareSerial5beginEmh+0x6c>
  {
    *_ucsra = 0;
     322:	e8 89       	ldd	r30, Y+16	; 0x10
     324:	f9 89       	ldd	r31, Y+17	; 0x11
     326:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     328:	60 e4       	ldi	r22, 0x40	; 64
     32a:	72 e4       	ldi	r23, 0x42	; 66
     32c:	8f e0       	ldi	r24, 0x0F	; 15
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	a7 01       	movw	r20, r14
     332:	96 01       	movw	r18, r12
     334:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__udivmodsi4>
     338:	21 50       	subi	r18, 0x01	; 1
     33a:	31 09       	sbc	r19, r1
     33c:	41 09       	sbc	r20, r1
     33e:	51 09       	sbc	r21, r1
     340:	56 95       	lsr	r21
     342:	47 95       	ror	r20
     344:	37 95       	ror	r19
     346:	27 95       	ror	r18
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     348:	ec 85       	ldd	r30, Y+12	; 0x0c
     34a:	fd 85       	ldd	r31, Y+13	; 0x0d
     34c:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     34e:	ee 85       	ldd	r30, Y+14	; 0x0e
     350:	ff 85       	ldd	r31, Y+15	; 0x0f
     352:	20 83       	st	Z, r18

  _written = false;
     354:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     356:	ec 89       	ldd	r30, Y+20	; 0x14
     358:	fd 89       	ldd	r31, Y+21	; 0x15
     35a:	b0 82       	st	Z, r11
  
  sbi(*_ucsrb, RXEN0);
     35c:	ea 89       	ldd	r30, Y+18	; 0x12
     35e:	fb 89       	ldd	r31, Y+19	; 0x13
     360:	80 81       	ld	r24, Z
     362:	80 61       	ori	r24, 0x10	; 16
     364:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     366:	ea 89       	ldd	r30, Y+18	; 0x12
     368:	fb 89       	ldd	r31, Y+19	; 0x13
     36a:	80 81       	ld	r24, Z
     36c:	88 60       	ori	r24, 0x08	; 8
     36e:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     370:	ea 89       	ldd	r30, Y+18	; 0x12
     372:	fb 89       	ldd	r31, Y+19	; 0x13
     374:	80 81       	ld	r24, Z
     376:	80 68       	ori	r24, 0x80	; 128
     378:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     37a:	ea 89       	ldd	r30, Y+18	; 0x12
     37c:	fb 89       	ldd	r31, Y+19	; 0x13
     37e:	80 81       	ld	r24, Z
     380:	8f 7d       	andi	r24, 0xDF	; 223
     382:	80 83       	st	Z, r24
}
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	ff 90       	pop	r15
     38a:	ef 90       	pop	r14
     38c:	df 90       	pop	r13
     38e:	cf 90       	pop	r12
     390:	bf 90       	pop	r11
     392:	08 95       	ret

00000394 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     394:	1f 92       	push	r1
     396:	0f 92       	push	r0
     398:	0f b6       	in	r0, 0x3f	; 63
     39a:	0f 92       	push	r0
     39c:	11 24       	eor	r1, r1
     39e:	2f 93       	push	r18
     3a0:	8f 93       	push	r24
     3a2:	9f 93       	push	r25
     3a4:	ef 93       	push	r30
     3a6:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     3a8:	e0 91 fc 02 	lds	r30, 0x02FC
     3ac:	f0 91 fd 02 	lds	r31, 0x02FD
     3b0:	80 81       	ld	r24, Z
     3b2:	e0 91 02 03 	lds	r30, 0x0302
     3b6:	f0 91 03 03 	lds	r31, 0x0303
     3ba:	82 fd       	sbrc	r24, 2
     3bc:	12 c0       	rjmp	.+36     	; 0x3e2 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     3be:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     3c0:	80 91 05 03 	lds	r24, 0x0305
     3c4:	8f 5f       	subi	r24, 0xFF	; 255
     3c6:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     3c8:	20 91 06 03 	lds	r18, 0x0306
     3cc:	82 17       	cp	r24, r18
     3ce:	51 f0       	breq	.+20     	; 0x3e4 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     3d0:	e0 91 05 03 	lds	r30, 0x0305
     3d4:	f0 e0       	ldi	r31, 0x00	; 0
     3d6:	e4 51       	subi	r30, 0x14	; 20
     3d8:	fd 4f       	sbci	r31, 0xFD	; 253
     3da:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     3dc:	80 93 05 03 	sts	0x0305, r24
     3e0:	01 c0       	rjmp	.+2      	; 0x3e4 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     3e2:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     3e4:	ff 91       	pop	r31
     3e6:	ef 91       	pop	r30
     3e8:	9f 91       	pop	r25
     3ea:	8f 91       	pop	r24
     3ec:	2f 91       	pop	r18
     3ee:	0f 90       	pop	r0
     3f0:	0f be       	out	0x3f, r0	; 63
     3f2:	0f 90       	pop	r0
     3f4:	1f 90       	pop	r1
     3f6:	18 95       	reti

000003f8 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     3f8:	1f 92       	push	r1
     3fa:	0f 92       	push	r0
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	0f 92       	push	r0
     400:	11 24       	eor	r1, r1
     402:	2f 93       	push	r18
     404:	3f 93       	push	r19
     406:	4f 93       	push	r20
     408:	5f 93       	push	r21
     40a:	6f 93       	push	r22
     40c:	7f 93       	push	r23
     40e:	8f 93       	push	r24
     410:	9f 93       	push	r25
     412:	af 93       	push	r26
     414:	bf 93       	push	r27
     416:	ef 93       	push	r30
     418:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     41a:	8c ee       	ldi	r24, 0xEC	; 236
     41c:	92 e0       	ldi	r25, 0x02	; 2
     41e:	0e 94 c6 00 	call	0x18c	; 0x18c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     422:	ff 91       	pop	r31
     424:	ef 91       	pop	r30
     426:	bf 91       	pop	r27
     428:	af 91       	pop	r26
     42a:	9f 91       	pop	r25
     42c:	8f 91       	pop	r24
     42e:	7f 91       	pop	r23
     430:	6f 91       	pop	r22
     432:	5f 91       	pop	r21
     434:	4f 91       	pop	r20
     436:	3f 91       	pop	r19
     438:	2f 91       	pop	r18
     43a:	0f 90       	pop	r0
     43c:	0f be       	out	0x3f, r0	; 63
     43e:	0f 90       	pop	r0
     440:	1f 90       	pop	r1
     442:	18 95       	reti

00000444 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     444:	8c ee       	ldi	r24, 0xEC	; 236
     446:	92 e0       	ldi	r25, 0x02	; 2
     448:	0e 94 8b 00 	call	0x116	; 0x116 <_ZN14HardwareSerial9availableEv>
     44c:	21 e0       	ldi	r18, 0x01	; 1
     44e:	89 2b       	or	r24, r25
     450:	09 f4       	brne	.+2      	; 0x454 <_Z17Serial0_availablev+0x10>
     452:	20 e0       	ldi	r18, 0x00	; 0
}
     454:	82 2f       	mov	r24, r18
     456:	08 95       	ret

00000458 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     458:	10 92 ef 02 	sts	0x02EF, r1
     45c:	10 92 ee 02 	sts	0x02EE, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     460:	88 ee       	ldi	r24, 0xE8	; 232
     462:	93 e0       	ldi	r25, 0x03	; 3
     464:	a0 e0       	ldi	r26, 0x00	; 0
     466:	b0 e0       	ldi	r27, 0x00	; 0
     468:	80 93 f0 02 	sts	0x02F0, r24
     46c:	90 93 f1 02 	sts	0x02F1, r25
     470:	a0 93 f2 02 	sts	0x02F2, r26
     474:	b0 93 f3 02 	sts	0x02F3, r27
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     478:	8c e0       	ldi	r24, 0x0C	; 12
     47a:	91 e0       	ldi	r25, 0x01	; 1
     47c:	90 93 ed 02 	sts	0x02ED, r25
     480:	80 93 ec 02 	sts	0x02EC, r24
     484:	85 ec       	ldi	r24, 0xC5	; 197
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	90 93 f9 02 	sts	0x02F9, r25
     48c:	80 93 f8 02 	sts	0x02F8, r24
     490:	84 ec       	ldi	r24, 0xC4	; 196
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	90 93 fb 02 	sts	0x02FB, r25
     498:	80 93 fa 02 	sts	0x02FA, r24
     49c:	80 ec       	ldi	r24, 0xC0	; 192
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	90 93 fd 02 	sts	0x02FD, r25
     4a4:	80 93 fc 02 	sts	0x02FC, r24
     4a8:	81 ec       	ldi	r24, 0xC1	; 193
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	90 93 ff 02 	sts	0x02FF, r25
     4b0:	80 93 fe 02 	sts	0x02FE, r24
     4b4:	82 ec       	ldi	r24, 0xC2	; 194
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	90 93 01 03 	sts	0x0301, r25
     4bc:	80 93 00 03 	sts	0x0300, r24
     4c0:	86 ec       	ldi	r24, 0xC6	; 198
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	90 93 03 03 	sts	0x0303, r25
     4c8:	80 93 02 03 	sts	0x0302, r24
     4cc:	10 92 05 03 	sts	0x0305, r1
     4d0:	10 92 06 03 	sts	0x0306, r1
     4d4:	10 92 07 03 	sts	0x0307, r1
     4d8:	10 92 08 03 	sts	0x0308, r1
     4dc:	08 95       	ret

000004de <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
     4de:	08 95       	ret

000004e0 <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
     4e0:	af 92       	push	r10
     4e2:	bf 92       	push	r11
     4e4:	cf 92       	push	r12
     4e6:	df 92       	push	r13
     4e8:	ef 92       	push	r14
     4ea:	ff 92       	push	r15
     4ec:	0f 93       	push	r16
     4ee:	1f 93       	push	r17
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	6c 01       	movw	r12, r24
     4f6:	7b 01       	movw	r14, r22
    size_t n = 0;
    for (int i =0; i < 3; i++)
     4f8:	c0 e0       	ldi	r28, 0x00	; 0
     4fa:	d0 e0       	ldi	r29, 0x00	; 0
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
     4fc:	00 e0       	ldi	r16, 0x00	; 0
     4fe:	10 e0       	ldi	r17, 0x00	; 0
     500:	f6 01       	movw	r30, r12
     502:	ec 0f       	add	r30, r28
     504:	fd 1f       	adc	r31, r29
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
     506:	4a e0       	ldi	r20, 0x0A	; 10
     508:	50 e0       	ldi	r21, 0x00	; 0
     50a:	62 81       	ldd	r22, Z+2	; 0x02
     50c:	c7 01       	movw	r24, r14
     50e:	0e 94 b0 03 	call	0x760	; 0x760 <_ZN5Print5printEhi>
     512:	5c 01       	movw	r10, r24
        n += p.print('.');
     514:	6e e2       	ldi	r22, 0x2E	; 46
     516:	c7 01       	movw	r24, r14
     518:	0e 94 0b 03 	call	0x616	; 0x616 <_ZN5Print5printEc>
size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
     51c:	8a 0d       	add	r24, r10
     51e:	9b 1d       	adc	r25, r11
        n += p.print('.');
     520:	08 0f       	add	r16, r24
     522:	19 1f       	adc	r17, r25
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
     524:	21 96       	adiw	r28, 0x01	; 1
     526:	c3 30       	cpi	r28, 0x03	; 3
     528:	d1 05       	cpc	r29, r1
     52a:	51 f7       	brne	.-44     	; 0x500 <_ZNK9IPAddress7printToER5Print+0x20>
    {
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
     52c:	4a e0       	ldi	r20, 0x0A	; 10
     52e:	50 e0       	ldi	r21, 0x00	; 0
     530:	f6 01       	movw	r30, r12
     532:	65 81       	ldd	r22, Z+5	; 0x05
     534:	c7 01       	movw	r24, r14
     536:	0e 94 b0 03 	call	0x760	; 0x760 <_ZN5Print5printEhi>
    return n;
}
     53a:	80 0f       	add	r24, r16
     53c:	91 1f       	adc	r25, r17
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	1f 91       	pop	r17
     544:	0f 91       	pop	r16
     546:	ff 90       	pop	r15
     548:	ef 90       	pop	r14
     54a:	df 90       	pop	r13
     54c:	cf 90       	pop	r12
     54e:	bf 90       	pop	r11
     550:	af 90       	pop	r10
     552:	08 95       	ret

00000554 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
     554:	8c e1       	ldi	r24, 0x1C	; 28
     556:	91 e0       	ldi	r25, 0x01	; 1
     558:	90 93 8a 03 	sts	0x038A, r25
     55c:	80 93 89 03 	sts	0x0389, r24
{
    _address.bytes[0] = first_octet;
     560:	10 92 8b 03 	sts	0x038B, r1
    _address.bytes[1] = second_octet;
     564:	10 92 8c 03 	sts	0x038C, r1
    _address.bytes[2] = third_octet;
     568:	10 92 8d 03 	sts	0x038D, r1
    _address.bytes[3] = fourth_octet;
     56c:	10 92 8e 03 	sts	0x038E, r1
     570:	08 95       	ret

00000572 <_Znaj>:
void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
  return malloc(size);
     572:	0c 94 a6 10 	jmp	0x214c	; 0x214c <malloc>

00000576 <_ZdlPv>:
}

void operator delete(void * ptr) {
  free(ptr);
     576:	0c 94 3e 11 	jmp	0x227c	; 0x227c <free>

0000057a <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     57a:	cf 92       	push	r12
     57c:	df 92       	push	r13
     57e:	ef 92       	push	r14
     580:	ff 92       	push	r15
     582:	0f 93       	push	r16
     584:	1f 93       	push	r17
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	6c 01       	movw	r12, r24
     58c:	7a 01       	movw	r14, r20
     58e:	eb 01       	movw	r28, r22
     590:	e6 0e       	add	r14, r22
     592:	f7 1e       	adc	r15, r23
  size_t n = 0;
     594:	00 e0       	ldi	r16, 0x00	; 0
     596:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
     598:	ce 15       	cp	r28, r14
     59a:	df 05       	cpc	r29, r15
     59c:	61 f0       	breq	.+24     	; 0x5b6 <_ZN5Print5writeEPKhj+0x3c>
    n += write(*buffer++);
     59e:	69 91       	ld	r22, Y+
     5a0:	d6 01       	movw	r26, r12
     5a2:	ed 91       	ld	r30, X+
     5a4:	fc 91       	ld	r31, X
     5a6:	01 90       	ld	r0, Z+
     5a8:	f0 81       	ld	r31, Z
     5aa:	e0 2d       	mov	r30, r0
     5ac:	c6 01       	movw	r24, r12
     5ae:	09 95       	icall
     5b0:	08 0f       	add	r16, r24
     5b2:	19 1f       	adc	r17, r25
     5b4:	f1 cf       	rjmp	.-30     	; 0x598 <_ZN5Print5writeEPKhj+0x1e>
  }
  return n;
}
     5b6:	c8 01       	movw	r24, r16
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	1f 91       	pop	r17
     5be:	0f 91       	pop	r16
     5c0:	ff 90       	pop	r15
     5c2:	ef 90       	pop	r14
     5c4:	df 90       	pop	r13
     5c6:	cf 90       	pop	r12
     5c8:	08 95       	ret

000005ca <_ZN5Print5writeEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     5ca:	61 15       	cp	r22, r1
     5cc:	71 05       	cpc	r23, r1
     5ce:	81 f0       	breq	.+32     	; 0x5f0 <_ZN5Print5writeEPKc+0x26>
      return write((const uint8_t *)str, strlen(str));
     5d0:	db 01       	movw	r26, r22
     5d2:	0d 90       	ld	r0, X+
     5d4:	00 20       	and	r0, r0
     5d6:	e9 f7       	brne	.-6      	; 0x5d2 <_ZN5Print5writeEPKc+0x8>
     5d8:	ad 01       	movw	r20, r26
     5da:	41 50       	subi	r20, 0x01	; 1
     5dc:	51 09       	sbc	r21, r1
     5de:	46 1b       	sub	r20, r22
     5e0:	57 0b       	sbc	r21, r23
     5e2:	dc 01       	movw	r26, r24
     5e4:	ed 91       	ld	r30, X+
     5e6:	fc 91       	ld	r31, X
     5e8:	02 80       	ldd	r0, Z+2	; 0x02
     5ea:	f3 81       	ldd	r31, Z+3	; 0x03
     5ec:	e0 2d       	mov	r30, r0
     5ee:	09 94       	ijmp
    }
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	08 95       	ret

000005f6 <_ZN5Print5printERK6String>:
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
     5f6:	dc 01       	movw	r26, r24
     5f8:	ed 91       	ld	r30, X+
     5fa:	fc 91       	ld	r31, X
     5fc:	db 01       	movw	r26, r22
     5fe:	14 96       	adiw	r26, 0x04	; 4
     600:	4d 91       	ld	r20, X+
     602:	5c 91       	ld	r21, X
     604:	15 97       	sbiw	r26, 0x05	; 5
     606:	6d 91       	ld	r22, X+
     608:	7c 91       	ld	r23, X
     60a:	02 80       	ldd	r0, Z+2	; 0x02
     60c:	f3 81       	ldd	r31, Z+3	; 0x03
     60e:	e0 2d       	mov	r30, r0
     610:	09 94       	ijmp

00000612 <_ZN5Print5printEPKc>:
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     612:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <_ZN5Print5writeEPKc>

00000616 <_ZN5Print5printEc>:
}

size_t Print::print(char c)
{
  return write(c);
     616:	dc 01       	movw	r26, r24
     618:	ed 91       	ld	r30, X+
     61a:	fc 91       	ld	r31, X
     61c:	01 90       	ld	r0, Z+
     61e:	f0 81       	ld	r31, Z
     620:	e0 2d       	mov	r30, r0
     622:	09 94       	ijmp

00000624 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
     624:	0f 93       	push	r16
     626:	1f 93       	push	r17
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
     62c:	ec 01       	movw	r28, r24
  size_t n = print('\r');
     62e:	6d e0       	ldi	r22, 0x0D	; 13
     630:	0e 94 0b 03 	call	0x616	; 0x616 <_ZN5Print5printEc>
     634:	8c 01       	movw	r16, r24
  n += print('\n');
     636:	6a e0       	ldi	r22, 0x0A	; 10
     638:	ce 01       	movw	r24, r28
     63a:	0e 94 0b 03 	call	0x616	; 0x616 <_ZN5Print5printEc>
  return n;
}
     63e:	80 0f       	add	r24, r16
     640:	91 1f       	adc	r25, r17
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	1f 91       	pop	r17
     648:	0f 91       	pop	r16
     64a:	08 95       	ret

0000064c <_ZN5Print7printlnERK6String>:

size_t Print::println(const String &s)
{
     64c:	0f 93       	push	r16
     64e:	1f 93       	push	r17
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	ec 01       	movw	r28, r24
  size_t n = print(s);
     656:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printERK6String>
     65a:	8c 01       	movw	r16, r24
  n += println();
     65c:	ce 01       	movw	r24, r28
     65e:	0e 94 12 03 	call	0x624	; 0x624 <_ZN5Print7printlnEv>
  return n;
}
     662:	80 0f       	add	r24, r16
     664:	91 1f       	adc	r25, r17
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	1f 91       	pop	r17
     66c:	0f 91       	pop	r16
     66e:	08 95       	ret

00000670 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
     670:	0f 93       	push	r16
     672:	1f 93       	push	r17
     674:	cf 93       	push	r28
     676:	df 93       	push	r29
     678:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     67a:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN5Print5writeEPKc>
     67e:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
     680:	ce 01       	movw	r24, r28
     682:	0e 94 12 03 	call	0x624	; 0x624 <_ZN5Print7printlnEv>
  return n;
}
     686:	80 0f       	add	r24, r16
     688:	91 1f       	adc	r25, r17
     68a:	df 91       	pop	r29
     68c:	cf 91       	pop	r28
     68e:	1f 91       	pop	r17
     690:	0f 91       	pop	r16
     692:	08 95       	ret

00000694 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
     694:	8f 92       	push	r8
     696:	9f 92       	push	r9
     698:	af 92       	push	r10
     69a:	bf 92       	push	r11
     69c:	cf 92       	push	r12
     69e:	df 92       	push	r13
     6a0:	ef 92       	push	r14
     6a2:	ff 92       	push	r15
     6a4:	0f 93       	push	r16
     6a6:	1f 93       	push	r17
     6a8:	cf 93       	push	r28
     6aa:	df 93       	push	r29
     6ac:	cd b7       	in	r28, 0x3d	; 61
     6ae:	de b7       	in	r29, 0x3e	; 62
     6b0:	a1 97       	sbiw	r28, 0x21	; 33
     6b2:	0f b6       	in	r0, 0x3f	; 63
     6b4:	f8 94       	cli
     6b6:	de bf       	out	0x3e, r29	; 62
     6b8:	0f be       	out	0x3f, r0	; 63
     6ba:	cd bf       	out	0x3d, r28	; 61
     6bc:	7c 01       	movw	r14, r24
     6be:	c4 2e       	mov	r12, r20
     6c0:	e5 2f       	mov	r30, r21
     6c2:	cb 01       	movw	r24, r22
     6c4:	d2 2e       	mov	r13, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     6c6:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     6c8:	21 e0       	ldi	r18, 0x01	; 1
     6ca:	2d 15       	cp	r18, r13
     6cc:	10 f0       	brcs	.+4      	; 0x6d2 <_ZN5Print11printNumberEmh+0x3e>
     6ce:	2a e0       	ldi	r18, 0x0A	; 10
     6d0:	d2 2e       	mov	r13, r18
     6d2:	8e 01       	movw	r16, r28
     6d4:	0f 5d       	subi	r16, 0xDF	; 223
     6d6:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    unsigned long m = n;
    n /= base;
     6d8:	8d 2c       	mov	r8, r13
     6da:	91 2c       	mov	r9, r1
     6dc:	a1 2c       	mov	r10, r1
     6de:	b1 2c       	mov	r11, r1
     6e0:	6c 2d       	mov	r22, r12
     6e2:	7e 2f       	mov	r23, r30
     6e4:	a5 01       	movw	r20, r10
     6e6:	94 01       	movw	r18, r8
     6e8:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__udivmodsi4>
    char c = m - base * n;
     6ec:	8c 2d       	mov	r24, r12
     6ee:	d2 9e       	mul	r13, r18
     6f0:	80 19       	sub	r24, r0
     6f2:	11 24       	eor	r1, r1
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     6f4:	01 50       	subi	r16, 0x01	; 1
     6f6:	11 09       	sbc	r17, r1
     6f8:	8a 30       	cpi	r24, 0x0A	; 10
     6fa:	10 f4       	brcc	.+4      	; 0x700 <_ZN5Print11printNumberEmh+0x6c>
     6fc:	80 5d       	subi	r24, 0xD0	; 208
     6fe:	01 c0       	rjmp	.+2      	; 0x702 <_ZN5Print11printNumberEmh+0x6e>
     700:	89 5c       	subi	r24, 0xC9	; 201
     702:	f8 01       	movw	r30, r16
     704:	80 83       	st	Z, r24
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
     706:	21 15       	cp	r18, r1
     708:	31 05       	cpc	r19, r1
     70a:	41 05       	cpc	r20, r1
     70c:	51 05       	cpc	r21, r1
     70e:	21 f0       	breq	.+8      	; 0x718 <_ZN5Print11printNumberEmh+0x84>
    unsigned long m = n;
    n /= base;
     710:	c2 2e       	mov	r12, r18
     712:	e3 2f       	mov	r30, r19
     714:	ca 01       	movw	r24, r20
     716:	e4 cf       	rjmp	.-56     	; 0x6e0 <_ZN5Print11printNumberEmh+0x4c>
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
     718:	b8 01       	movw	r22, r16
     71a:	c7 01       	movw	r24, r14
     71c:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN5Print5writeEPKc>
}
     720:	a1 96       	adiw	r28, 0x21	; 33
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	f8 94       	cli
     726:	de bf       	out	0x3e, r29	; 62
     728:	0f be       	out	0x3f, r0	; 63
     72a:	cd bf       	out	0x3d, r28	; 61
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	1f 91       	pop	r17
     732:	0f 91       	pop	r16
     734:	ff 90       	pop	r15
     736:	ef 90       	pop	r14
     738:	df 90       	pop	r13
     73a:	cf 90       	pop	r12
     73c:	bf 90       	pop	r11
     73e:	af 90       	pop	r10
     740:	9f 90       	pop	r9
     742:	8f 90       	pop	r8
     744:	08 95       	ret

00000746 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
     746:	21 15       	cp	r18, r1
     748:	31 05       	cpc	r19, r1
     74a:	41 f4       	brne	.+16     	; 0x75c <_ZN5Print5printEmi+0x16>
     74c:	dc 01       	movw	r26, r24
     74e:	ed 91       	ld	r30, X+
     750:	fc 91       	ld	r31, X
     752:	01 90       	ld	r0, Z+
     754:	f0 81       	ld	r31, Z
     756:	e0 2d       	mov	r30, r0
     758:	64 2f       	mov	r22, r20
     75a:	09 94       	ijmp
  else return printNumber(n, base);
     75c:	0c 94 4a 03 	jmp	0x694	; 0x694 <_ZN5Print11printNumberEmh>

00000760 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
     760:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
     762:	46 2f       	mov	r20, r22
     764:	50 e0       	ldi	r21, 0x00	; 0
     766:	60 e0       	ldi	r22, 0x00	; 0
     768:	70 e0       	ldi	r23, 0x00	; 0
     76a:	0c 94 a3 03 	jmp	0x746	; 0x746 <_ZN5Print5printEmi>

0000076e <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
     76e:	81 30       	cpi	r24, 0x01	; 1
     770:	39 f0       	breq	.+14     	; 0x780 <_Z12disableTimerh+0x12>
     772:	18 f0       	brcs	.+6      	; 0x77a <_Z12disableTimerh+0xc>
     774:	82 30       	cpi	r24, 0x02	; 2
     776:	51 f0       	breq	.+20     	; 0x78c <_Z12disableTimerh+0x1e>
     778:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
     77a:	10 92 6e 00 	sts	0x006E, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
     77e:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
     780:	80 91 6f 00 	lds	r24, 0x006F
     784:	8d 7f       	andi	r24, 0xFD	; 253
     786:	80 93 6f 00 	sts	0x006F, r24
      break;
     78a:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
     78c:	80 91 70 00 	lds	r24, 0x0070
     790:	8d 7f       	andi	r24, 0xFD	; 253
     792:	80 93 70 00 	sts	0x0070, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
     79c:	80 91 b1 00 	lds	r24, 0x00B1
     7a0:	88 7f       	andi	r24, 0xF8	; 248
     7a2:	84 60       	ori	r24, 0x04	; 4
     7a4:	80 93 b1 00 	sts	0x00B1, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
     7a8:	10 92 b3 00 	sts	0x00B3, r1
     7ac:	08 95       	ret

000007ae <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
     7ae:	cf 93       	push	r28
     7b0:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
     7b2:	80 91 06 01 	lds	r24, 0x0106
     7b6:	8c 13       	cpse	r24, r28
     7b8:	07 c0       	rjmp	.+14     	; 0x7c8 <_Z6noToneh+0x1a>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
     7ba:	e8 e6       	ldi	r30, 0x68	; 104
     7bc:	f0 e0       	ldi	r31, 0x00	; 0
     7be:	84 91       	lpm	r24, Z
      tone_pins[i] = 255;
     7c0:	9f ef       	ldi	r25, 0xFF	; 255
     7c2:	90 93 06 01 	sts	0x0106, r25
     7c6:	01 c0       	rjmp	.+2      	; 0x7ca <_Z6noToneh+0x1c>
}


void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
     7c8:	8f ef       	ldi	r24, 0xFF	; 255
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
      tone_pins[i] = 255;
    }
  }
  
  disableTimer(_timer);
     7ca:	0e 94 b7 03 	call	0x76e	; 0x76e <_Z12disableTimerh>

  digitalWrite(_pin, 0);
     7ce:	60 e0       	ldi	r22, 0x00	; 0
     7d0:	8c 2f       	mov	r24, r28
}
     7d2:	cf 91       	pop	r28
    }
  }
  
  disableTimer(_timer);

  digitalWrite(_pin, 0);
     7d4:	0c 94 fd 05 	jmp	0xbfa	; 0xbfa <digitalWrite>

000007d8 <__vector_7>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
     7d8:	1f 92       	push	r1
     7da:	0f 92       	push	r0
     7dc:	0f b6       	in	r0, 0x3f	; 63
     7de:	0f 92       	push	r0
     7e0:	11 24       	eor	r1, r1
     7e2:	2f 93       	push	r18
     7e4:	3f 93       	push	r19
     7e6:	4f 93       	push	r20
     7e8:	5f 93       	push	r21
     7ea:	6f 93       	push	r22
     7ec:	7f 93       	push	r23
     7ee:	8f 93       	push	r24
     7f0:	9f 93       	push	r25
     7f2:	af 93       	push	r26
     7f4:	bf 93       	push	r27
     7f6:	ef 93       	push	r30
     7f8:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
     7fa:	80 91 92 03 	lds	r24, 0x0392
     7fe:	90 91 93 03 	lds	r25, 0x0393
     802:	a0 91 94 03 	lds	r26, 0x0394
     806:	b0 91 95 03 	lds	r27, 0x0395
     80a:	89 2b       	or	r24, r25
     80c:	8a 2b       	or	r24, r26
     80e:	8b 2b       	or	r24, r27
     810:	51 f1       	breq	.+84     	; 0x866 <__vector_7+0x8e>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
     812:	90 91 8f 03 	lds	r25, 0x038F
     816:	e0 91 90 03 	lds	r30, 0x0390
     81a:	f0 91 91 03 	lds	r31, 0x0391
     81e:	80 81       	ld	r24, Z
     820:	89 27       	eor	r24, r25
     822:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
     824:	80 91 92 03 	lds	r24, 0x0392
     828:	90 91 93 03 	lds	r25, 0x0393
     82c:	a0 91 94 03 	lds	r26, 0x0394
     830:	b0 91 95 03 	lds	r27, 0x0395
     834:	18 16       	cp	r1, r24
     836:	19 06       	cpc	r1, r25
     838:	1a 06       	cpc	r1, r26
     83a:	1b 06       	cpc	r1, r27
     83c:	c4 f4       	brge	.+48     	; 0x86e <__vector_7+0x96>
      timer2_toggle_count--;
     83e:	80 91 92 03 	lds	r24, 0x0392
     842:	90 91 93 03 	lds	r25, 0x0393
     846:	a0 91 94 03 	lds	r26, 0x0394
     84a:	b0 91 95 03 	lds	r27, 0x0395
     84e:	01 97       	sbiw	r24, 0x01	; 1
     850:	a1 09       	sbc	r26, r1
     852:	b1 09       	sbc	r27, r1
     854:	80 93 92 03 	sts	0x0392, r24
     858:	90 93 93 03 	sts	0x0393, r25
     85c:	a0 93 94 03 	sts	0x0394, r26
     860:	b0 93 95 03 	sts	0x0395, r27
     864:	04 c0       	rjmp	.+8      	; 0x86e <__vector_7+0x96>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
     866:	80 91 06 01 	lds	r24, 0x0106
     86a:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
     86e:	ff 91       	pop	r31
     870:	ef 91       	pop	r30
     872:	bf 91       	pop	r27
     874:	af 91       	pop	r26
     876:	9f 91       	pop	r25
     878:	8f 91       	pop	r24
     87a:	7f 91       	pop	r23
     87c:	6f 91       	pop	r22
     87e:	5f 91       	pop	r21
     880:	4f 91       	pop	r20
     882:	3f 91       	pop	r19
     884:	2f 91       	pop	r18
     886:	0f 90       	pop	r0
     888:	0f be       	out	0x3f, r0	; 63
     88a:	0f 90       	pop	r0
     88c:	1f 90       	pop	r1
     88e:	18 95       	reti

00000890 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

ISR(INT0_vect) {
     890:	1f 92       	push	r1
     892:	0f 92       	push	r0
     894:	0f b6       	in	r0, 0x3f	; 63
     896:	0f 92       	push	r0
     898:	11 24       	eor	r1, r1
     89a:	2f 93       	push	r18
     89c:	3f 93       	push	r19
     89e:	4f 93       	push	r20
     8a0:	5f 93       	push	r21
     8a2:	6f 93       	push	r22
     8a4:	7f 93       	push	r23
     8a6:	8f 93       	push	r24
     8a8:	9f 93       	push	r25
     8aa:	af 93       	push	r26
     8ac:	bf 93       	push	r27
     8ae:	ef 93       	push	r30
     8b0:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
     8b2:	80 91 96 03 	lds	r24, 0x0396
     8b6:	90 91 97 03 	lds	r25, 0x0397
     8ba:	89 2b       	or	r24, r25
     8bc:	29 f0       	breq	.+10     	; 0x8c8 <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
     8be:	e0 91 96 03 	lds	r30, 0x0396
     8c2:	f0 91 97 03 	lds	r31, 0x0397
     8c6:	09 95       	icall
}
     8c8:	ff 91       	pop	r31
     8ca:	ef 91       	pop	r30
     8cc:	bf 91       	pop	r27
     8ce:	af 91       	pop	r26
     8d0:	9f 91       	pop	r25
     8d2:	8f 91       	pop	r24
     8d4:	7f 91       	pop	r23
     8d6:	6f 91       	pop	r22
     8d8:	5f 91       	pop	r21
     8da:	4f 91       	pop	r20
     8dc:	3f 91       	pop	r19
     8de:	2f 91       	pop	r18
     8e0:	0f 90       	pop	r0
     8e2:	0f be       	out	0x3f, r0	; 63
     8e4:	0f 90       	pop	r0
     8e6:	1f 90       	pop	r1
     8e8:	18 95       	reti

000008ea <__vector_2>:

ISR(INT1_vect) {
     8ea:	1f 92       	push	r1
     8ec:	0f 92       	push	r0
     8ee:	0f b6       	in	r0, 0x3f	; 63
     8f0:	0f 92       	push	r0
     8f2:	11 24       	eor	r1, r1
     8f4:	2f 93       	push	r18
     8f6:	3f 93       	push	r19
     8f8:	4f 93       	push	r20
     8fa:	5f 93       	push	r21
     8fc:	6f 93       	push	r22
     8fe:	7f 93       	push	r23
     900:	8f 93       	push	r24
     902:	9f 93       	push	r25
     904:	af 93       	push	r26
     906:	bf 93       	push	r27
     908:	ef 93       	push	r30
     90a:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
     90c:	80 91 98 03 	lds	r24, 0x0398
     910:	90 91 99 03 	lds	r25, 0x0399
     914:	89 2b       	or	r24, r25
     916:	29 f0       	breq	.+10     	; 0x922 <__stack+0x23>
    intFunc[EXTERNAL_INT_1]();
     918:	e0 91 98 03 	lds	r30, 0x0398
     91c:	f0 91 99 03 	lds	r31, 0x0399
     920:	09 95       	icall
}
     922:	ff 91       	pop	r31
     924:	ef 91       	pop	r30
     926:	bf 91       	pop	r27
     928:	af 91       	pop	r26
     92a:	9f 91       	pop	r25
     92c:	8f 91       	pop	r24
     92e:	7f 91       	pop	r23
     930:	6f 91       	pop	r22
     932:	5f 91       	pop	r21
     934:	4f 91       	pop	r20
     936:	3f 91       	pop	r19
     938:	2f 91       	pop	r18
     93a:	0f 90       	pop	r0
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	0f 90       	pop	r0
     940:	1f 90       	pop	r1
     942:	18 95       	reti

00000944 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     944:	1f 92       	push	r1
     946:	0f 92       	push	r0
     948:	0f b6       	in	r0, 0x3f	; 63
     94a:	0f 92       	push	r0
     94c:	11 24       	eor	r1, r1
     94e:	2f 93       	push	r18
     950:	3f 93       	push	r19
     952:	8f 93       	push	r24
     954:	9f 93       	push	r25
     956:	af 93       	push	r26
     958:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     95a:	80 91 9b 03 	lds	r24, 0x039B
     95e:	90 91 9c 03 	lds	r25, 0x039C
     962:	a0 91 9d 03 	lds	r26, 0x039D
     966:	b0 91 9e 03 	lds	r27, 0x039E
	unsigned char f = timer0_fract;
     96a:	30 91 9a 03 	lds	r19, 0x039A

	m += MILLIS_INC;
	f += FRACT_INC;
     96e:	26 e0       	ldi	r18, 0x06	; 6
     970:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     972:	2d 37       	cpi	r18, 0x7D	; 125
     974:	20 f4       	brcc	.+8      	; 0x97e <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     976:	02 96       	adiw	r24, 0x02	; 2
     978:	a1 1d       	adc	r26, r1
     97a:	b1 1d       	adc	r27, r1
     97c:	05 c0       	rjmp	.+10     	; 0x988 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     97e:	29 e8       	ldi	r18, 0x89	; 137
     980:	23 0f       	add	r18, r19
		m += 1;
     982:	03 96       	adiw	r24, 0x03	; 3
     984:	a1 1d       	adc	r26, r1
     986:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     988:	20 93 9a 03 	sts	0x039A, r18
	timer0_millis = m;
     98c:	80 93 9b 03 	sts	0x039B, r24
     990:	90 93 9c 03 	sts	0x039C, r25
     994:	a0 93 9d 03 	sts	0x039D, r26
     998:	b0 93 9e 03 	sts	0x039E, r27
	timer0_overflow_count++;
     99c:	80 91 9f 03 	lds	r24, 0x039F
     9a0:	90 91 a0 03 	lds	r25, 0x03A0
     9a4:	a0 91 a1 03 	lds	r26, 0x03A1
     9a8:	b0 91 a2 03 	lds	r27, 0x03A2
     9ac:	01 96       	adiw	r24, 0x01	; 1
     9ae:	a1 1d       	adc	r26, r1
     9b0:	b1 1d       	adc	r27, r1
     9b2:	80 93 9f 03 	sts	0x039F, r24
     9b6:	90 93 a0 03 	sts	0x03A0, r25
     9ba:	a0 93 a1 03 	sts	0x03A1, r26
     9be:	b0 93 a2 03 	sts	0x03A2, r27
}
     9c2:	bf 91       	pop	r27
     9c4:	af 91       	pop	r26
     9c6:	9f 91       	pop	r25
     9c8:	8f 91       	pop	r24
     9ca:	3f 91       	pop	r19
     9cc:	2f 91       	pop	r18
     9ce:	0f 90       	pop	r0
     9d0:	0f be       	out	0x3f, r0	; 63
     9d2:	0f 90       	pop	r0
     9d4:	1f 90       	pop	r1
     9d6:	18 95       	reti

000009d8 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     9d8:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     9da:	f8 94       	cli
	m = timer0_millis;
     9dc:	60 91 9b 03 	lds	r22, 0x039B
     9e0:	70 91 9c 03 	lds	r23, 0x039C
     9e4:	80 91 9d 03 	lds	r24, 0x039D
     9e8:	90 91 9e 03 	lds	r25, 0x039E
	SREG = oldSREG;
     9ec:	2f bf       	out	0x3f, r18	; 63

	return m;
}
     9ee:	08 95       	ret

000009f0 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     9f0:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     9f2:	f8 94       	cli
	m = timer0_overflow_count;
     9f4:	80 91 9f 03 	lds	r24, 0x039F
     9f8:	90 91 a0 03 	lds	r25, 0x03A0
     9fc:	a0 91 a1 03 	lds	r26, 0x03A1
     a00:	b0 91 a2 03 	lds	r27, 0x03A2
#if defined(TCNT0)
	t = TCNT0;
     a04:	26 b5       	in	r18, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     a06:	a8 9b       	sbis	0x15, 0	; 21
     a08:	05 c0       	rjmp	.+10     	; 0xa14 <micros+0x24>
     a0a:	2f 3f       	cpi	r18, 0xFF	; 255
     a0c:	19 f0       	breq	.+6      	; 0xa14 <micros+0x24>
		m++;
     a0e:	01 96       	adiw	r24, 0x01	; 1
     a10:	a1 1d       	adc	r26, r1
     a12:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     a14:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     a16:	66 27       	eor	r22, r22
     a18:	78 2f       	mov	r23, r24
     a1a:	89 2f       	mov	r24, r25
     a1c:	9a 2f       	mov	r25, r26
     a1e:	62 0f       	add	r22, r18
     a20:	71 1d       	adc	r23, r1
     a22:	81 1d       	adc	r24, r1
     a24:	91 1d       	adc	r25, r1
     a26:	43 e0       	ldi	r20, 0x03	; 3
     a28:	66 0f       	add	r22, r22
     a2a:	77 1f       	adc	r23, r23
     a2c:	88 1f       	adc	r24, r24
     a2e:	99 1f       	adc	r25, r25
     a30:	4a 95       	dec	r20
     a32:	d1 f7       	brne	.-12     	; 0xa28 <micros+0x38>
}
     a34:	08 95       	ret

00000a36 <delay>:

void delay(unsigned long ms)
{
     a36:	cf 92       	push	r12
     a38:	df 92       	push	r13
     a3a:	ef 92       	push	r14
     a3c:	ff 92       	push	r15
     a3e:	cf 93       	push	r28
     a40:	df 93       	push	r29
     a42:	6b 01       	movw	r12, r22
     a44:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
     a46:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <micros>
     a4a:	eb 01       	movw	r28, r22

	while (ms > 0) {
     a4c:	c1 14       	cp	r12, r1
     a4e:	d1 04       	cpc	r13, r1
     a50:	e1 04       	cpc	r14, r1
     a52:	f1 04       	cpc	r15, r1
     a54:	89 f0       	breq	.+34     	; 0xa78 <delay+0x42>
		yield();
     a56:	0e 94 6f 02 	call	0x4de	; 0x4de <yield>
		if (((uint16_t)micros() - start) >= 1000) {
     a5a:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <micros>
     a5e:	6c 1b       	sub	r22, r28
     a60:	7d 0b       	sbc	r23, r29
     a62:	68 3e       	cpi	r22, 0xE8	; 232
     a64:	73 40       	sbci	r23, 0x03	; 3
     a66:	90 f3       	brcs	.-28     	; 0xa4c <delay+0x16>
			ms--;
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	c8 1a       	sub	r12, r24
     a6c:	d1 08       	sbc	r13, r1
     a6e:	e1 08       	sbc	r14, r1
     a70:	f1 08       	sbc	r15, r1
			start += 1000;
     a72:	c8 51       	subi	r28, 0x18	; 24
     a74:	dc 4f       	sbci	r29, 0xFC	; 252
     a76:	ea cf       	rjmp	.-44     	; 0xa4c <delay+0x16>
		}
	}
}
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	ff 90       	pop	r15
     a7e:	ef 90       	pop	r14
     a80:	df 90       	pop	r13
     a82:	cf 90       	pop	r12
     a84:	08 95       	ret

00000a86 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     a86:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     a88:	84 b5       	in	r24, 0x24	; 36
     a8a:	82 60       	ori	r24, 0x02	; 2
     a8c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     a8e:	84 b5       	in	r24, 0x24	; 36
     a90:	81 60       	ori	r24, 0x01	; 1
     a92:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     a94:	85 b5       	in	r24, 0x25	; 37
     a96:	82 60       	ori	r24, 0x02	; 2
     a98:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     a9a:	85 b5       	in	r24, 0x25	; 37
     a9c:	81 60       	ori	r24, 0x01	; 1
     a9e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     aa0:	ee e6       	ldi	r30, 0x6E	; 110
     aa2:	f0 e0       	ldi	r31, 0x00	; 0
     aa4:	80 81       	ld	r24, Z
     aa6:	81 60       	ori	r24, 0x01	; 1
     aa8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     aaa:	e1 e8       	ldi	r30, 0x81	; 129
     aac:	f0 e0       	ldi	r31, 0x00	; 0
     aae:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     ab0:	80 81       	ld	r24, Z
     ab2:	82 60       	ori	r24, 0x02	; 2
     ab4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     ab6:	80 81       	ld	r24, Z
     ab8:	81 60       	ori	r24, 0x01	; 1
     aba:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     abc:	e0 e8       	ldi	r30, 0x80	; 128
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	80 81       	ld	r24, Z
     ac2:	81 60       	ori	r24, 0x01	; 1
     ac4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     ac6:	e1 eb       	ldi	r30, 0xB1	; 177
     ac8:	f0 e0       	ldi	r31, 0x00	; 0
     aca:	80 81       	ld	r24, Z
     acc:	84 60       	ori	r24, 0x04	; 4
     ace:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     ad0:	e0 eb       	ldi	r30, 0xB0	; 176
     ad2:	f0 e0       	ldi	r31, 0x00	; 0
     ad4:	80 81       	ld	r24, Z
     ad6:	81 60       	ori	r24, 0x01	; 1
     ad8:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
     ada:	ea e7       	ldi	r30, 0x7A	; 122
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	80 81       	ld	r24, Z
     ae0:	84 60       	ori	r24, 0x04	; 4
     ae2:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
     ae4:	80 81       	ld	r24, Z
     ae6:	82 60       	ori	r24, 0x02	; 2
     ae8:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
     aea:	80 81       	ld	r24, Z
     aec:	81 60       	ori	r24, 0x01	; 1
     aee:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     af0:	80 81       	ld	r24, Z
     af2:	80 68       	ori	r24, 0x80	; 128
     af4:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     af6:	10 92 c1 00 	sts	0x00C1, r1
     afa:	08 95       	ret

00000afc <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
     afc:	8e 30       	cpi	r24, 0x0E	; 14
     afe:	08 f0       	brcs	.+2      	; 0xb02 <analogRead+0x6>
     b00:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
     b02:	87 70       	andi	r24, 0x07	; 7
     b04:	20 91 07 01 	lds	r18, 0x0107
     b08:	90 e4       	ldi	r25, 0x40	; 64
     b0a:	29 9f       	mul	r18, r25
     b0c:	90 01       	movw	r18, r0
     b0e:	11 24       	eor	r1, r1
     b10:	82 2b       	or	r24, r18
     b12:	80 93 7c 00 	sts	0x007C, r24
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
     b16:	80 91 7a 00 	lds	r24, 0x007A
     b1a:	80 64       	ori	r24, 0x40	; 64
     b1c:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
     b20:	80 91 7a 00 	lds	r24, 0x007A
     b24:	86 fd       	sbrc	r24, 6
     b26:	fc cf       	rjmp	.-8      	; 0xb20 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
     b28:	80 91 78 00 	lds	r24, 0x0078
	high = ADCH;
     b2c:	20 91 79 00 	lds	r18, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
     b30:	90 e0       	ldi	r25, 0x00	; 0
}
     b32:	92 2b       	or	r25, r18
     b34:	08 95       	ret

00000b36 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     b36:	83 30       	cpi	r24, 0x03	; 3
     b38:	81 f0       	breq	.+32     	; 0xb5a <turnOffPWM+0x24>
     b3a:	28 f4       	brcc	.+10     	; 0xb46 <turnOffPWM+0x10>
     b3c:	81 30       	cpi	r24, 0x01	; 1
     b3e:	99 f0       	breq	.+38     	; 0xb66 <turnOffPWM+0x30>
     b40:	82 30       	cpi	r24, 0x02	; 2
     b42:	a1 f0       	breq	.+40     	; 0xb6c <turnOffPWM+0x36>
     b44:	08 95       	ret
     b46:	87 30       	cpi	r24, 0x07	; 7
     b48:	a9 f0       	breq	.+42     	; 0xb74 <turnOffPWM+0x3e>
     b4a:	88 30       	cpi	r24, 0x08	; 8
     b4c:	b9 f0       	breq	.+46     	; 0xb7c <turnOffPWM+0x46>
     b4e:	84 30       	cpi	r24, 0x04	; 4
     b50:	d1 f4       	brne	.+52     	; 0xb86 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     b52:	80 91 80 00 	lds	r24, 0x0080
     b56:	8f 7d       	andi	r24, 0xDF	; 223
     b58:	03 c0       	rjmp	.+6      	; 0xb60 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     b5a:	80 91 80 00 	lds	r24, 0x0080
     b5e:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     b60:	80 93 80 00 	sts	0x0080, r24
     b64:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     b66:	84 b5       	in	r24, 0x24	; 36
     b68:	8f 77       	andi	r24, 0x7F	; 127
     b6a:	02 c0       	rjmp	.+4      	; 0xb70 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     b6c:	84 b5       	in	r24, 0x24	; 36
     b6e:	8f 7d       	andi	r24, 0xDF	; 223
     b70:	84 bd       	out	0x24, r24	; 36
     b72:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     b74:	80 91 b0 00 	lds	r24, 0x00B0
     b78:	8f 77       	andi	r24, 0x7F	; 127
     b7a:	03 c0       	rjmp	.+6      	; 0xb82 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     b7c:	80 91 b0 00 	lds	r24, 0x00B0
     b80:	8f 7d       	andi	r24, 0xDF	; 223
     b82:	80 93 b0 00 	sts	0x00B0, r24
     b86:	08 95       	ret

00000b88 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     b88:	cf 93       	push	r28
     b8a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	fc 01       	movw	r30, r24
     b90:	e3 58       	subi	r30, 0x83	; 131
     b92:	ff 4f       	sbci	r31, 0xFF	; 255
     b94:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     b96:	fc 01       	movw	r30, r24
     b98:	ef 56       	subi	r30, 0x6F	; 111
     b9a:	ff 4f       	sbci	r31, 0xFF	; 255
     b9c:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     b9e:	88 23       	and	r24, r24
     ba0:	49 f1       	breq	.+82     	; 0xbf4 <pinMode+0x6c>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	88 0f       	add	r24, r24
     ba6:	99 1f       	adc	r25, r25
     ba8:	fc 01       	movw	r30, r24
     baa:	e1 55       	subi	r30, 0x51	; 81
     bac:	ff 4f       	sbci	r31, 0xFF	; 255
     bae:	a5 91       	lpm	r26, Z+
     bb0:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     bb2:	8b 55       	subi	r24, 0x5B	; 91
     bb4:	9f 4f       	sbci	r25, 0xFF	; 255
     bb6:	fc 01       	movw	r30, r24
     bb8:	c5 91       	lpm	r28, Z+
     bba:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
		uint8_t oldSREG = SREG;
     bbc:	9f b7       	in	r25, 0x3f	; 63

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
	out = portOutputRegister(port);

	if (mode == INPUT) { 
     bbe:	61 11       	cpse	r22, r1
     bc0:	08 c0       	rjmp	.+16     	; 0xbd2 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
                cli();
     bc2:	f8 94       	cli
		*reg &= ~bit;
     bc4:	8c 91       	ld	r24, X
     bc6:	20 95       	com	r18
     bc8:	82 23       	and	r24, r18
     bca:	8c 93       	st	X, r24
		*out &= ~bit;
     bcc:	88 81       	ld	r24, Y
     bce:	82 23       	and	r24, r18
     bd0:	0a c0       	rjmp	.+20     	; 0xbe6 <pinMode+0x5e>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     bd2:	62 30       	cpi	r22, 0x02	; 2
     bd4:	51 f4       	brne	.+20     	; 0xbea <pinMode+0x62>
		uint8_t oldSREG = SREG;
                cli();
     bd6:	f8 94       	cli
		*reg &= ~bit;
     bd8:	8c 91       	ld	r24, X
     bda:	32 2f       	mov	r19, r18
     bdc:	30 95       	com	r19
     bde:	83 23       	and	r24, r19
     be0:	8c 93       	st	X, r24
		*out |= bit;
     be2:	88 81       	ld	r24, Y
     be4:	82 2b       	or	r24, r18
     be6:	88 83       	st	Y, r24
     be8:	04 c0       	rjmp	.+8      	; 0xbf2 <pinMode+0x6a>
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
                cli();
     bea:	f8 94       	cli
		*reg |= bit;
     bec:	8c 91       	ld	r24, X
     bee:	82 2b       	or	r24, r18
     bf0:	8c 93       	st	X, r24
		SREG = oldSREG;
     bf2:	9f bf       	out	0x3f, r25	; 63
	}
}
     bf4:	df 91       	pop	r29
     bf6:	cf 91       	pop	r28
     bf8:	08 95       	ret

00000bfa <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     bfa:	0f 93       	push	r16
     bfc:	1f 93       	push	r17
     bfe:	cf 93       	push	r28
     c00:	df 93       	push	r29
     c02:	1f 92       	push	r1
     c04:	cd b7       	in	r28, 0x3d	; 61
     c06:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
     c08:	28 2f       	mov	r18, r24
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	f9 01       	movw	r30, r18
     c0e:	e7 59       	subi	r30, 0x97	; 151
     c10:	ff 4f       	sbci	r31, 0xFF	; 255
     c12:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     c14:	f9 01       	movw	r30, r18
     c16:	e3 58       	subi	r30, 0x83	; 131
     c18:	ff 4f       	sbci	r31, 0xFF	; 255
     c1a:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
     c1c:	f9 01       	movw	r30, r18
     c1e:	ef 56       	subi	r30, 0x6F	; 111
     c20:	ff 4f       	sbci	r31, 0xFF	; 255
     c22:	04 91       	lpm	r16, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     c24:	00 23       	and	r16, r16
     c26:	c9 f0       	breq	.+50     	; 0xc5a <digitalWrite+0x60>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     c28:	88 23       	and	r24, r24
     c2a:	21 f0       	breq	.+8      	; 0xc34 <digitalWrite+0x3a>
     c2c:	69 83       	std	Y+1, r22	; 0x01
     c2e:	0e 94 9b 05 	call	0xb36	; 0xb36 <turnOffPWM>
     c32:	69 81       	ldd	r22, Y+1	; 0x01

	out = portOutputRegister(port);
     c34:	e0 2f       	mov	r30, r16
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	ee 0f       	add	r30, r30
     c3a:	ff 1f       	adc	r31, r31
     c3c:	eb 55       	subi	r30, 0x5B	; 91
     c3e:	ff 4f       	sbci	r31, 0xFF	; 255
     c40:	a5 91       	lpm	r26, Z+
     c42:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     c44:	9f b7       	in	r25, 0x3f	; 63
	cli();
     c46:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
     c48:	8c 91       	ld	r24, X
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
     c4a:	61 11       	cpse	r22, r1
     c4c:	03 c0       	rjmp	.+6      	; 0xc54 <digitalWrite+0x5a>
		*out &= ~bit;
     c4e:	10 95       	com	r17
     c50:	81 23       	and	r24, r17
     c52:	01 c0       	rjmp	.+2      	; 0xc56 <digitalWrite+0x5c>
	} else {
		*out |= bit;
     c54:	81 2b       	or	r24, r17
     c56:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
     c58:	9f bf       	out	0x3f, r25	; 63
}
     c5a:	0f 90       	pop	r0
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	1f 91       	pop	r17
     c62:	0f 91       	pop	r16
     c64:	08 95       	ret

00000c66 <_ZN6StringD1Ev>:
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	free(buffer);
     c66:	fc 01       	movw	r30, r24
     c68:	80 81       	ld	r24, Z
     c6a:	91 81       	ldd	r25, Z+1	; 0x01
     c6c:	0c 94 3e 11 	jmp	0x227c	; 0x227c <free>

00000c70 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
     c70:	cf 93       	push	r28
     c72:	df 93       	push	r29
     c74:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
     c76:	88 81       	ld	r24, Y
     c78:	99 81       	ldd	r25, Y+1	; 0x01
     c7a:	00 97       	sbiw	r24, 0x00	; 0
     c7c:	11 f0       	breq	.+4      	; 0xc82 <_ZN6String10invalidateEv+0x12>
     c7e:	0e 94 3e 11 	call	0x227c	; 0x227c <free>
	buffer = NULL;
     c82:	19 82       	std	Y+1, r1	; 0x01
     c84:	18 82       	st	Y, r1
	capacity = len = 0;
     c86:	1d 82       	std	Y+5, r1	; 0x05
     c88:	1c 82       	std	Y+4, r1	; 0x04
     c8a:	1b 82       	std	Y+3, r1	; 0x03
     c8c:	1a 82       	std	Y+2, r1	; 0x02
}
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	08 95       	ret

00000c94 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
     c94:	0f 93       	push	r16
     c96:	1f 93       	push	r17
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29
     c9c:	ec 01       	movw	r28, r24
     c9e:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     ca0:	6f 5f       	subi	r22, 0xFF	; 255
     ca2:	7f 4f       	sbci	r23, 0xFF	; 255
     ca4:	88 81       	ld	r24, Y
     ca6:	99 81       	ldd	r25, Y+1	; 0x01
     ca8:	0e 94 cd 11 	call	0x239a	; 0x239a <realloc>
	if (newbuffer) {
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	31 f0       	breq	.+12     	; 0xcbc <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
     cb0:	99 83       	std	Y+1, r25	; 0x01
     cb2:	88 83       	st	Y, r24
		capacity = maxStrLen;
     cb4:	1b 83       	std	Y+3, r17	; 0x03
     cb6:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	01 c0       	rjmp	.+2      	; 0xcbe <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
     cbc:	80 e0       	ldi	r24, 0x00	; 0
}
     cbe:	df 91       	pop	r29
     cc0:	cf 91       	pop	r28
     cc2:	1f 91       	pop	r17
     cc4:	0f 91       	pop	r16
     cc6:	08 95       	ret

00000cc8 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
     cc8:	cf 93       	push	r28
     cca:	df 93       	push	r29
     ccc:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
     cce:	88 81       	ld	r24, Y
     cd0:	99 81       	ldd	r25, Y+1	; 0x01
     cd2:	89 2b       	or	r24, r25
     cd4:	29 f0       	breq	.+10     	; 0xce0 <_ZN6String7reserveEj+0x18>
     cd6:	8a 81       	ldd	r24, Y+2	; 0x02
     cd8:	9b 81       	ldd	r25, Y+3	; 0x03
     cda:	86 17       	cp	r24, r22
     cdc:	97 07       	cpc	r25, r23
     cde:	60 f4       	brcc	.+24     	; 0xcf8 <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
     ce0:	ce 01       	movw	r24, r28
     ce2:	0e 94 4a 06 	call	0xc94	; 0xc94 <_ZN6String12changeBufferEj>
     ce6:	88 23       	and	r24, r24
     ce8:	41 f0       	breq	.+16     	; 0xcfa <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
     cea:	8c 81       	ldd	r24, Y+4	; 0x04
     cec:	9d 81       	ldd	r25, Y+5	; 0x05
     cee:	89 2b       	or	r24, r25
     cf0:	19 f4       	brne	.+6      	; 0xcf8 <_ZN6String7reserveEj+0x30>
     cf2:	e8 81       	ld	r30, Y
     cf4:	f9 81       	ldd	r31, Y+1	; 0x01
     cf6:	10 82       	st	Z, r1
     cf8:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	08 95       	ret

00000d00 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
     d00:	ef 92       	push	r14
     d02:	ff 92       	push	r15
     d04:	0f 93       	push	r16
     d06:	1f 93       	push	r17
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	ec 01       	movw	r28, r24
     d0e:	7b 01       	movw	r14, r22
     d10:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
     d12:	ba 01       	movw	r22, r20
     d14:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN6String7reserveEj>
     d18:	81 11       	cpse	r24, r1
     d1a:	04 c0       	rjmp	.+8      	; 0xd24 <_ZN6String4copyEPKcj+0x24>
		invalidate();
     d1c:	ce 01       	movw	r24, r28
     d1e:	0e 94 38 06 	call	0xc70	; 0xc70 <_ZN6String10invalidateEv>
		return *this;
     d22:	07 c0       	rjmp	.+14     	; 0xd32 <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
     d24:	1d 83       	std	Y+5, r17	; 0x05
     d26:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
     d28:	b7 01       	movw	r22, r14
     d2a:	88 81       	ld	r24, Y
     d2c:	99 81       	ldd	r25, Y+1	; 0x01
     d2e:	0e 94 a9 12 	call	0x2552	; 0x2552 <strcpy>
	return *this;
}
     d32:	ce 01       	movw	r24, r28
     d34:	df 91       	pop	r29
     d36:	cf 91       	pop	r28
     d38:	1f 91       	pop	r17
     d3a:	0f 91       	pop	r16
     d3c:	ff 90       	pop	r15
     d3e:	ef 90       	pop	r14
     d40:	08 95       	ret

00000d42 <_ZN6StringC1EPKc>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
     d42:	fc 01       	movw	r30, r24
     d44:	11 82       	std	Z+1, r1	; 0x01
     d46:	10 82       	st	Z, r1
	capacity = 0;
     d48:	13 82       	std	Z+3, r1	; 0x03
     d4a:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
     d4c:	15 82       	std	Z+5, r1	; 0x05
     d4e:	14 82       	std	Z+4, r1	; 0x04
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
     d50:	61 15       	cp	r22, r1
     d52:	71 05       	cpc	r23, r1
     d54:	59 f0       	breq	.+22     	; 0xd6c <_ZN6StringC1EPKc+0x2a>
     d56:	fb 01       	movw	r30, r22
     d58:	01 90       	ld	r0, Z+
     d5a:	00 20       	and	r0, r0
     d5c:	e9 f7       	brne	.-6      	; 0xd58 <_ZN6StringC1EPKc+0x16>
     d5e:	af 01       	movw	r20, r30
     d60:	41 50       	subi	r20, 0x01	; 1
     d62:	51 09       	sbc	r21, r1
     d64:	46 1b       	sub	r20, r22
     d66:	57 0b       	sbc	r21, r23
     d68:	0c 94 80 06 	jmp	0xd00	; 0xd00 <_ZN6String4copyEPKcj>
     d6c:	08 95       	ret

00000d6e <_ZN6StringaSERKS_>:
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
     d6e:	cf 93       	push	r28
     d70:	df 93       	push	r29
     d72:	ec 01       	movw	r28, r24
     d74:	fb 01       	movw	r30, r22
	if (this == &rhs) return *this;
     d76:	86 17       	cp	r24, r22
     d78:	97 07       	cpc	r25, r23
     d7a:	61 f0       	breq	.+24     	; 0xd94 <_ZN6StringaSERKS_+0x26>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
     d7c:	60 81       	ld	r22, Z
     d7e:	71 81       	ldd	r23, Z+1	; 0x01
     d80:	61 15       	cp	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	29 f0       	breq	.+10     	; 0xd90 <_ZN6StringaSERKS_+0x22>
     d86:	44 81       	ldd	r20, Z+4	; 0x04
     d88:	55 81       	ldd	r21, Z+5	; 0x05
     d8a:	0e 94 80 06 	call	0xd00	; 0xd00 <_ZN6String4copyEPKcj>
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <_ZN6StringaSERKS_+0x26>
	else invalidate();
     d90:	0e 94 38 06 	call	0xc70	; 0xc70 <_ZN6String10invalidateEv>
	
	return *this;
}
     d94:	ce 01       	movw	r24, r28
     d96:	df 91       	pop	r29
     d98:	cf 91       	pop	r28
     d9a:	08 95       	ret

00000d9c <_ZN6StringC1ERKS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
     d9c:	fc 01       	movw	r30, r24
     d9e:	11 82       	std	Z+1, r1	; 0x01
     da0:	10 82       	st	Z, r1
	capacity = 0;
     da2:	13 82       	std	Z+3, r1	; 0x03
     da4:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
     da6:	15 82       	std	Z+5, r1	; 0x05
     da8:	14 82       	std	Z+4, r1	; 0x04
}

String::String(const String &value)
{
	init();
	*this = value;
     daa:	0c 94 b7 06 	jmp	0xd6e	; 0xd6e <_ZN6StringaSERKS_>

00000dae <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
     dae:	cf 93       	push	r28
     db0:	df 93       	push	r29
     db2:	ec 01       	movw	r28, r24
	if (cstr) copy(cstr, strlen(cstr));
     db4:	61 15       	cp	r22, r1
     db6:	71 05       	cpc	r23, r1
     db8:	61 f0       	breq	.+24     	; 0xdd2 <_ZN6StringaSEPKc+0x24>
     dba:	fb 01       	movw	r30, r22
     dbc:	01 90       	ld	r0, Z+
     dbe:	00 20       	and	r0, r0
     dc0:	e9 f7       	brne	.-6      	; 0xdbc <_ZN6StringaSEPKc+0xe>
     dc2:	af 01       	movw	r20, r30
     dc4:	41 50       	subi	r20, 0x01	; 1
     dc6:	51 09       	sbc	r21, r1
     dc8:	46 1b       	sub	r20, r22
     dca:	57 0b       	sbc	r21, r23
     dcc:	0e 94 80 06 	call	0xd00	; 0xd00 <_ZN6String4copyEPKcj>
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <_ZN6StringaSEPKc+0x28>
	else invalidate();
     dd2:	0e 94 38 06 	call	0xc70	; 0xc70 <_ZN6String10invalidateEv>
	
	return *this;
}
     dd6:	ce 01       	movw	r24, r28
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	08 95       	ret

00000dde <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
     dde:	ef 92       	push	r14
     de0:	ff 92       	push	r15
     de2:	0f 93       	push	r16
     de4:	1f 93       	push	r17
     de6:	cf 93       	push	r28
     de8:	df 93       	push	r29
     dea:	ec 01       	movw	r28, r24
     dec:	7b 01       	movw	r14, r22
	unsigned int newlen = len + length;
     dee:	0c 81       	ldd	r16, Y+4	; 0x04
     df0:	1d 81       	ldd	r17, Y+5	; 0x05
	if (!cstr) return 0;
     df2:	61 15       	cp	r22, r1
     df4:	71 05       	cpc	r23, r1
     df6:	11 f4       	brne	.+4      	; 0xdfc <_ZN6String6concatEPKcj+0x1e>
     df8:	80 e0       	ldi	r24, 0x00	; 0
     dfa:	16 c0       	rjmp	.+44     	; 0xe28 <_ZN6String6concatEPKcj+0x4a>
	if (length == 0) return 1;
     dfc:	41 15       	cp	r20, r1
     dfe:	51 05       	cpc	r21, r1
     e00:	91 f0       	breq	.+36     	; 0xe26 <_ZN6String6concatEPKcj+0x48>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
     e02:	04 0f       	add	r16, r20
     e04:	15 1f       	adc	r17, r21
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
     e06:	b8 01       	movw	r22, r16
     e08:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN6String7reserveEj>
     e0c:	88 23       	and	r24, r24
     e0e:	a1 f3       	breq	.-24     	; 0xdf8 <_ZN6String6concatEPKcj+0x1a>
	strcpy(buffer + len, cstr);
     e10:	28 81       	ld	r18, Y
     e12:	39 81       	ldd	r19, Y+1	; 0x01
     e14:	8c 81       	ldd	r24, Y+4	; 0x04
     e16:	9d 81       	ldd	r25, Y+5	; 0x05
     e18:	b7 01       	movw	r22, r14
     e1a:	82 0f       	add	r24, r18
     e1c:	93 1f       	adc	r25, r19
     e1e:	0e 94 a9 12 	call	0x2552	; 0x2552 <strcpy>
	len = newlen;
     e22:	1d 83       	std	Y+5, r17	; 0x05
     e24:	0c 83       	std	Y+4, r16	; 0x04

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
     e26:	81 e0       	ldi	r24, 0x01	; 1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	1f 91       	pop	r17
     e2e:	0f 91       	pop	r16
     e30:	ff 90       	pop	r15
     e32:	ef 90       	pop	r14
     e34:	08 95       	ret

00000e36 <_ZN6String6concatERKS_>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
     e36:	fb 01       	movw	r30, r22
     e38:	44 81       	ldd	r20, Z+4	; 0x04
     e3a:	55 81       	ldd	r21, Z+5	; 0x05
     e3c:	60 81       	ld	r22, Z
     e3e:	71 81       	ldd	r23, Z+1	; 0x01
     e40:	0c 94 ef 06 	jmp	0xdde	; 0xdde <_ZN6String6concatEPKcj>

00000e44 <_ZN6String6concatEPKc>:
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
     e44:	61 15       	cp	r22, r1
     e46:	71 05       	cpc	r23, r1
     e48:	59 f0       	breq	.+22     	; 0xe60 <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
     e4a:	fb 01       	movw	r30, r22
     e4c:	01 90       	ld	r0, Z+
     e4e:	00 20       	and	r0, r0
     e50:	e9 f7       	brne	.-6      	; 0xe4c <_ZN6String6concatEPKc+0x8>
     e52:	af 01       	movw	r20, r30
     e54:	41 50       	subi	r20, 0x01	; 1
     e56:	51 09       	sbc	r21, r1
     e58:	46 1b       	sub	r20, r22
     e5a:	57 0b       	sbc	r21, r23
     e5c:	0c 94 ef 06 	jmp	0xdde	; 0xdde <_ZN6String6concatEPKcj>
}
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	08 95       	ret

00000e64 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
     e64:	cf 93       	push	r28
     e66:	df 93       	push	r29
     e68:	00 d0       	rcall	.+0      	; 0xe6a <_ZN6String6concatEc+0x6>
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
	char buf[2];
	buf[0] = c;
     e6e:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
     e70:	1a 82       	std	Y+2, r1	; 0x02
	return concat(buf, 1);
     e72:	41 e0       	ldi	r20, 0x01	; 1
     e74:	50 e0       	ldi	r21, 0x00	; 0
     e76:	be 01       	movw	r22, r28
     e78:	6f 5f       	subi	r22, 0xFF	; 255
     e7a:	7f 4f       	sbci	r23, 0xFF	; 255
     e7c:	0e 94 ef 06 	call	0xdde	; 0xdde <_ZN6String6concatEPKcj>
}
     e80:	0f 90       	pop	r0
     e82:	0f 90       	pop	r0
     e84:	df 91       	pop	r29
     e86:	cf 91       	pop	r28
     e88:	08 95       	ret

00000e8a <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
     e8a:	cf 93       	push	r28
     e8c:	df 93       	push	r29
     e8e:	ec 01       	movw	r28, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
     e90:	fb 01       	movw	r30, r22
     e92:	44 81       	ldd	r20, Z+4	; 0x04
     e94:	55 81       	ldd	r21, Z+5	; 0x05
     e96:	60 81       	ld	r22, Z
     e98:	71 81       	ldd	r23, Z+1	; 0x01
     e9a:	0e 94 ef 06 	call	0xdde	; 0xdde <_ZN6String6concatEPKcj>
     e9e:	81 11       	cpse	r24, r1
     ea0:	03 c0       	rjmp	.+6      	; 0xea8 <_ZplRK15StringSumHelperRK6String+0x1e>
     ea2:	ce 01       	movw	r24, r28
     ea4:	0e 94 38 06 	call	0xc70	; 0xc70 <_ZN6String10invalidateEv>
	return a;
}
     ea8:	ce 01       	movw	r24, r28
     eaa:	df 91       	pop	r29
     eac:	cf 91       	pop	r28
     eae:	08 95       	ret

00000eb0 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
     eb4:	ec 01       	movw	r28, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
     eb6:	61 15       	cp	r22, r1
     eb8:	71 05       	cpc	r23, r1
     eba:	69 f0       	breq	.+26     	; 0xed6 <_ZplRK15StringSumHelperPKc+0x26>
     ebc:	fb 01       	movw	r30, r22
     ebe:	01 90       	ld	r0, Z+
     ec0:	00 20       	and	r0, r0
     ec2:	e9 f7       	brne	.-6      	; 0xebe <_ZplRK15StringSumHelperPKc+0xe>
     ec4:	af 01       	movw	r20, r30
     ec6:	41 50       	subi	r20, 0x01	; 1
     ec8:	51 09       	sbc	r21, r1
     eca:	46 1b       	sub	r20, r22
     ecc:	57 0b       	sbc	r21, r23
     ece:	0e 94 ef 06 	call	0xdde	; 0xdde <_ZN6String6concatEPKcj>
     ed2:	81 11       	cpse	r24, r1
     ed4:	03 c0       	rjmp	.+6      	; 0xedc <_ZplRK15StringSumHelperPKc+0x2c>
     ed6:	ce 01       	movw	r24, r28
     ed8:	0e 94 38 06 	call	0xc70	; 0xc70 <_ZN6String10invalidateEv>
	return a;
}
     edc:	ce 01       	movw	r24, r28
     ede:	df 91       	pop	r29
     ee0:	cf 91       	pop	r28
     ee2:	08 95       	ret

00000ee4 <_ZNK6String9compareToERKS_>:
/*********************************************/
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
     ee4:	cf 93       	push	r28
     ee6:	df 93       	push	r29
	if (!buffer || !s.buffer) {
     ee8:	dc 01       	movw	r26, r24
     eea:	ed 91       	ld	r30, X+
     eec:	fc 91       	ld	r31, X
     eee:	eb 01       	movw	r28, r22
     ef0:	a8 81       	ld	r26, Y
     ef2:	b9 81       	ldd	r27, Y+1	; 0x01
     ef4:	30 97       	sbiw	r30, 0x00	; 0
     ef6:	11 f0       	breq	.+4      	; 0xefc <_ZNK6String9compareToERKS_+0x18>
     ef8:	10 97       	sbiw	r26, 0x00	; 0
     efa:	c9 f4       	brne	.+50     	; 0xf2e <_ZNK6String9compareToERKS_+0x4a>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
     efc:	10 97       	sbiw	r26, 0x00	; 0
     efe:	59 f0       	breq	.+22     	; 0xf16 <_ZNK6String9compareToERKS_+0x32>
     f00:	eb 01       	movw	r28, r22
     f02:	2c 81       	ldd	r18, Y+4	; 0x04
     f04:	3d 81       	ldd	r19, Y+5	; 0x05
     f06:	23 2b       	or	r18, r19
     f08:	31 f0       	breq	.+12     	; 0xf16 <_ZNK6String9compareToERKS_+0x32>
     f0a:	8c 91       	ld	r24, X
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	91 95       	neg	r25
     f10:	81 95       	neg	r24
     f12:	91 09       	sbc	r25, r1
     f14:	14 c0       	rjmp	.+40     	; 0xf3e <_ZNK6String9compareToERKS_+0x5a>
		if (buffer && len > 0) return *(unsigned char *)buffer;
     f16:	30 97       	sbiw	r30, 0x00	; 0
     f18:	81 f0       	breq	.+32     	; 0xf3a <_ZNK6String9compareToERKS_+0x56>
     f1a:	dc 01       	movw	r26, r24
     f1c:	14 96       	adiw	r26, 0x04	; 4
     f1e:	8d 91       	ld	r24, X+
     f20:	9c 91       	ld	r25, X
     f22:	15 97       	sbiw	r26, 0x05	; 5
     f24:	89 2b       	or	r24, r25
     f26:	49 f0       	breq	.+18     	; 0xf3a <_ZNK6String9compareToERKS_+0x56>
     f28:	80 81       	ld	r24, Z
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	08 c0       	rjmp	.+16     	; 0xf3e <_ZNK6String9compareToERKS_+0x5a>
		return 0;
	}
	return strcmp(buffer, s.buffer);
     f2e:	bd 01       	movw	r22, r26
     f30:	cf 01       	movw	r24, r30
}
     f32:	df 91       	pop	r29
     f34:	cf 91       	pop	r28
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
		return 0;
	}
	return strcmp(buffer, s.buffer);
     f36:	0c 94 a0 12 	jmp	0x2540	; 0x2540 <strcmp>
int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
		return 0;
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	90 e0       	ldi	r25, 0x00	; 0
	}
	return strcmp(buffer, s.buffer);
}
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	08 95       	ret

00000f44 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
     f44:	fc 01       	movw	r30, r24
     f46:	44 81       	ldd	r20, Z+4	; 0x04
     f48:	55 81       	ldd	r21, Z+5	; 0x05
     f4a:	fb 01       	movw	r30, r22
     f4c:	24 81       	ldd	r18, Z+4	; 0x04
     f4e:	35 81       	ldd	r19, Z+5	; 0x05
     f50:	42 17       	cp	r20, r18
     f52:	53 07       	cpc	r21, r19
     f54:	41 f4       	brne	.+16     	; 0xf66 <_ZNK6String6equalsERKS_+0x22>
     f56:	0e 94 72 07 	call	0xee4	; 0xee4 <_ZNK6String9compareToERKS_>
     f5a:	21 e0       	ldi	r18, 0x01	; 1
     f5c:	89 2b       	or	r24, r25
     f5e:	09 f0       	breq	.+2      	; 0xf62 <_ZNK6String6equalsERKS_+0x1e>
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	82 2f       	mov	r24, r18
     f64:	08 95       	ret
     f66:	80 e0       	ldi	r24, 0x00	; 0
}
     f68:	08 95       	ret

00000f6a <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
     f6a:	fc 01       	movw	r30, r24
     f6c:	24 81       	ldd	r18, Z+4	; 0x04
     f6e:	35 81       	ldd	r19, Z+5	; 0x05
     f70:	23 2b       	or	r18, r19
     f72:	31 f4       	brne	.+12     	; 0xf80 <_ZNK6String6equalsEPKc+0x16>
     f74:	21 e0       	ldi	r18, 0x01	; 1
     f76:	61 15       	cp	r22, r1
     f78:	71 05       	cpc	r23, r1
     f7a:	a1 f0       	breq	.+40     	; 0xfa4 <_ZNK6String6equalsEPKc+0x3a>
     f7c:	fb 01       	movw	r30, r22
     f7e:	08 c0       	rjmp	.+16     	; 0xf90 <_ZNK6String6equalsEPKc+0x26>
     f80:	fc 01       	movw	r30, r24
     f82:	80 81       	ld	r24, Z
     f84:	91 81       	ldd	r25, Z+1	; 0x01
	if (cstr == NULL) return buffer[0] == 0;
     f86:	61 15       	cp	r22, r1
     f88:	71 05       	cpc	r23, r1
     f8a:	31 f4       	brne	.+12     	; 0xf98 <_ZNK6String6equalsEPKc+0x2e>
     f8c:	21 e0       	ldi	r18, 0x01	; 1
     f8e:	fc 01       	movw	r30, r24
     f90:	80 81       	ld	r24, Z
     f92:	88 23       	and	r24, r24
     f94:	39 f0       	breq	.+14     	; 0xfa4 <_ZNK6String6equalsEPKc+0x3a>
     f96:	05 c0       	rjmp	.+10     	; 0xfa2 <_ZNK6String6equalsEPKc+0x38>
	return strcmp(buffer, cstr) == 0;
     f98:	0e 94 a0 12 	call	0x2540	; 0x2540 <strcmp>
     f9c:	21 e0       	ldi	r18, 0x01	; 1
     f9e:	89 2b       	or	r24, r25
     fa0:	09 f0       	breq	.+2      	; 0xfa4 <_ZNK6String6equalsEPKc+0x3a>
     fa2:	20 e0       	ldi	r18, 0x00	; 0
}
     fa4:	82 2f       	mov	r24, r18
     fa6:	08 95       	ret

00000fa8 <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
     fa8:	fa 01       	movw	r30, r20
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
     faa:	db 01       	movw	r26, r22
     fac:	14 96       	adiw	r26, 0x04	; 4
     fae:	4d 91       	ld	r20, X+
     fb0:	5c 91       	ld	r21, X
     fb2:	15 97       	sbiw	r26, 0x05	; 5
     fb4:	dc 01       	movw	r26, r24
     fb6:	14 96       	adiw	r26, 0x04	; 4
     fb8:	2d 91       	ld	r18, X+
     fba:	3c 91       	ld	r19, X
     fbc:	15 97       	sbiw	r26, 0x05	; 5
     fbe:	24 1b       	sub	r18, r20
     fc0:	35 0b       	sbc	r19, r21
     fc2:	2e 17       	cp	r18, r30
     fc4:	3f 07       	cpc	r19, r31
     fc6:	88 f0       	brcs	.+34     	; 0xfea <_ZNK6String10startsWithERKS_j+0x42>
     fc8:	8d 91       	ld	r24, X+
     fca:	9c 91       	ld	r25, X
     fcc:	00 97       	sbiw	r24, 0x00	; 0
     fce:	69 f0       	breq	.+26     	; 0xfea <_ZNK6String10startsWithERKS_j+0x42>
     fd0:	db 01       	movw	r26, r22
     fd2:	6d 91       	ld	r22, X+
     fd4:	7c 91       	ld	r23, X
     fd6:	61 15       	cp	r22, r1
     fd8:	71 05       	cpc	r23, r1
     fda:	39 f0       	breq	.+14     	; 0xfea <_ZNK6String10startsWithERKS_j+0x42>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
     fdc:	8e 0f       	add	r24, r30
     fde:	9f 1f       	adc	r25, r31
     fe0:	0e 94 b0 12 	call	0x2560	; 0x2560 <strncmp>
     fe4:	21 e0       	ldi	r18, 0x01	; 1
     fe6:	89 2b       	or	r24, r25
     fe8:	09 f0       	breq	.+2      	; 0xfec <_ZNK6String10startsWithERKS_j+0x44>
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
     fea:	20 e0       	ldi	r18, 0x00	; 0
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}
     fec:	82 2f       	mov	r24, r18
     fee:	08 95       	ret

00000ff0 <_ZNK6String10startsWithERKS_>:
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
     ff0:	fc 01       	movw	r30, r24
     ff2:	44 81       	ldd	r20, Z+4	; 0x04
     ff4:	55 81       	ldd	r21, Z+5	; 0x05
     ff6:	fb 01       	movw	r30, r22
     ff8:	24 81       	ldd	r18, Z+4	; 0x04
     ffa:	35 81       	ldd	r19, Z+5	; 0x05
     ffc:	42 17       	cp	r20, r18
     ffe:	53 07       	cpc	r21, r19
    1000:	20 f0       	brcs	.+8      	; 0x100a <_ZNK6String10startsWithERKS_+0x1a>
	return startsWith(s2, 0);
    1002:	40 e0       	ldi	r20, 0x00	; 0
    1004:	50 e0       	ldi	r21, 0x00	; 0
    1006:	0c 94 d4 07 	jmp	0xfa8	; 0xfa8 <_ZNK6String10startsWithERKS_j>
}
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	08 95       	ret

0000100e <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
    100e:	fc 01       	movw	r30, r24
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    1010:	84 81       	ldd	r24, Z+4	; 0x04
    1012:	95 81       	ldd	r25, Z+5	; 0x05
    1014:	db 01       	movw	r26, r22
    1016:	14 96       	adiw	r26, 0x04	; 4
    1018:	4d 91       	ld	r20, X+
    101a:	5c 91       	ld	r21, X
    101c:	15 97       	sbiw	r26, 0x05	; 5
    101e:	84 17       	cp	r24, r20
    1020:	95 07       	cpc	r25, r21
    1022:	98 f0       	brcs	.+38     	; 0x104a <_ZNK6String8endsWithERKS_+0x3c>
    1024:	20 81       	ld	r18, Z
    1026:	31 81       	ldd	r19, Z+1	; 0x01
    1028:	21 15       	cp	r18, r1
    102a:	31 05       	cpc	r19, r1
    102c:	71 f0       	breq	.+28     	; 0x104a <_ZNK6String8endsWithERKS_+0x3c>
    102e:	6d 91       	ld	r22, X+
    1030:	7c 91       	ld	r23, X
    1032:	61 15       	cp	r22, r1
    1034:	71 05       	cpc	r23, r1
    1036:	49 f0       	breq	.+18     	; 0x104a <_ZNK6String8endsWithERKS_+0x3c>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
    1038:	84 1b       	sub	r24, r20
    103a:	95 0b       	sbc	r25, r21
    103c:	82 0f       	add	r24, r18
    103e:	93 1f       	adc	r25, r19
    1040:	0e 94 a0 12 	call	0x2540	; 0x2540 <strcmp>
    1044:	21 e0       	ldi	r18, 0x01	; 1
    1046:	89 2b       	or	r24, r25
    1048:	09 f0       	breq	.+2      	; 0x104c <_ZNK6String8endsWithERKS_+0x3e>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    104a:	20 e0       	ldi	r18, 0x00	; 0
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
}
    104c:	82 2f       	mov	r24, r18
    104e:	08 95       	ret

00001050 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
    1050:	fc 01       	movw	r30, r24
    1052:	24 81       	ldd	r18, Z+4	; 0x04
    1054:	35 81       	ldd	r19, Z+5	; 0x05
    1056:	62 17       	cp	r22, r18
    1058:	73 07       	cpc	r23, r19
    105a:	48 f4       	brcc	.+18     	; 0x106e <_ZNK6StringixEj+0x1e>
    105c:	80 81       	ld	r24, Z
    105e:	91 81       	ldd	r25, Z+1	; 0x01
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	29 f0       	breq	.+10     	; 0x106e <_ZNK6StringixEj+0x1e>
	return buffer[index];
    1064:	fc 01       	movw	r30, r24
    1066:	e6 0f       	add	r30, r22
    1068:	f7 1f       	adc	r31, r23
    106a:	80 81       	ld	r24, Z
    106c:	08 95       	ret
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
    106e:	80 e0       	ldi	r24, 0x00	; 0
	return buffer[index];
}
    1070:	08 95       	ret

00001072 <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
    1072:	0c 94 28 08 	jmp	0x1050	; 0x1050 <_ZNK6StringixEj>

00001076 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    1076:	0f 93       	push	r16
    1078:	1f 93       	push	r17
    107a:	cf 93       	push	r28
    107c:	df 93       	push	r29
    107e:	eb 01       	movw	r28, r22
	if (!bufsize || !buf) return;
    1080:	41 15       	cp	r20, r1
    1082:	51 05       	cpc	r21, r1
    1084:	e9 f0       	breq	.+58     	; 0x10c0 <_ZNK6String8getBytesEPhjj+0x4a>
    1086:	20 97       	sbiw	r28, 0x00	; 0
    1088:	d9 f0       	breq	.+54     	; 0x10c0 <_ZNK6String8getBytesEPhjj+0x4a>
	if (index >= len) {
    108a:	fc 01       	movw	r30, r24
    108c:	64 81       	ldd	r22, Z+4	; 0x04
    108e:	75 81       	ldd	r23, Z+5	; 0x05
    1090:	26 17       	cp	r18, r22
    1092:	37 07       	cpc	r19, r23
    1094:	a0 f4       	brcc	.+40     	; 0x10be <_ZNK6String8getBytesEPhjj+0x48>
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
    1096:	62 1b       	sub	r22, r18
    1098:	73 0b       	sbc	r23, r19
    109a:	8a 01       	movw	r16, r20
    109c:	01 50       	subi	r16, 0x01	; 1
    109e:	11 09       	sbc	r17, r1
    10a0:	60 17       	cp	r22, r16
    10a2:	71 07       	cpc	r23, r17
    10a4:	08 f4       	brcc	.+2      	; 0x10a8 <_ZNK6String8getBytesEPhjj+0x32>
    10a6:	8b 01       	movw	r16, r22
	strncpy((char *)buf, buffer + index, n);
    10a8:	fc 01       	movw	r30, r24
    10aa:	60 81       	ld	r22, Z
    10ac:	71 81       	ldd	r23, Z+1	; 0x01
    10ae:	62 0f       	add	r22, r18
    10b0:	73 1f       	adc	r23, r19
    10b2:	a8 01       	movw	r20, r16
    10b4:	ce 01       	movw	r24, r28
    10b6:	0e 94 be 12 	call	0x257c	; 0x257c <strncpy>
	buf[n] = 0;
    10ba:	c0 0f       	add	r28, r16
    10bc:	d1 1f       	adc	r29, r17
    10be:	18 82       	st	Y, r1
}
    10c0:	df 91       	pop	r29
    10c2:	cf 91       	pop	r28
    10c4:	1f 91       	pop	r17
    10c6:	0f 91       	pop	r16
    10c8:	08 95       	ret

000010ca <_ZNK6String9substringEjj>:
	}
	return found;
}

String String::substring(unsigned int left, unsigned int right) const
{
    10ca:	bf 92       	push	r11
    10cc:	cf 92       	push	r12
    10ce:	df 92       	push	r13
    10d0:	ef 92       	push	r14
    10d2:	ff 92       	push	r15
    10d4:	0f 93       	push	r16
    10d6:	1f 93       	push	r17
    10d8:	cf 93       	push	r28
    10da:	df 93       	push	r29
    10dc:	6c 01       	movw	r12, r24
    10de:	7b 01       	movw	r14, r22
    10e0:	ea 01       	movw	r28, r20
    10e2:	89 01       	movw	r16, r18
	if (left > right) {
    10e4:	24 17       	cp	r18, r20
    10e6:	35 07       	cpc	r19, r21
    10e8:	20 f4       	brcc	.+8      	; 0x10f2 <_ZNK6String9substringEjj+0x28>
    10ea:	8d 2f       	mov	r24, r29
    10ec:	e9 01       	movw	r28, r18
    10ee:	04 2f       	mov	r16, r20
    10f0:	18 2f       	mov	r17, r24
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
    10f2:	60 e2       	ldi	r22, 0x20	; 32
    10f4:	71 e0       	ldi	r23, 0x01	; 1
    10f6:	c6 01       	movw	r24, r12
    10f8:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
	if (left >= len) return out;
    10fc:	d7 01       	movw	r26, r14
    10fe:	14 96       	adiw	r26, 0x04	; 4
    1100:	8d 91       	ld	r24, X+
    1102:	9c 91       	ld	r25, X
    1104:	15 97       	sbiw	r26, 0x05	; 5
    1106:	c8 17       	cp	r28, r24
    1108:	d9 07       	cpc	r29, r25
    110a:	c8 f4       	brcc	.+50     	; 0x113e <_ZNK6String9substringEjj+0x74>
    110c:	80 17       	cp	r24, r16
    110e:	91 07       	cpc	r25, r17
    1110:	08 f4       	brcc	.+2      	; 0x1114 <_ZNK6String9substringEjj+0x4a>
    1112:	8c 01       	movw	r16, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    1114:	d7 01       	movw	r26, r14
    1116:	ed 91       	ld	r30, X+
    1118:	fc 91       	ld	r31, X
    111a:	11 97       	sbiw	r26, 0x01	; 1
    111c:	e0 0f       	add	r30, r16
    111e:	f1 1f       	adc	r31, r17
    1120:	b0 80       	ld	r11, Z
	buffer[right] = '\0';	
    1122:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    1124:	6d 91       	ld	r22, X+
    1126:	7c 91       	ld	r23, X
    1128:	6c 0f       	add	r22, r28
    112a:	7d 1f       	adc	r23, r29
    112c:	c6 01       	movw	r24, r12
    112e:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    1132:	d7 01       	movw	r26, r14
    1134:	ed 91       	ld	r30, X+
    1136:	fc 91       	ld	r31, X
    1138:	e0 0f       	add	r30, r16
    113a:	f1 1f       	adc	r31, r17
    113c:	b0 82       	st	Z, r11
	return out;
}
    113e:	c6 01       	movw	r24, r12
    1140:	df 91       	pop	r29
    1142:	cf 91       	pop	r28
    1144:	1f 91       	pop	r17
    1146:	0f 91       	pop	r16
    1148:	ff 90       	pop	r15
    114a:	ef 90       	pop	r14
    114c:	df 90       	pop	r13
    114e:	cf 90       	pop	r12
    1150:	bf 90       	pop	r11
    1152:	08 95       	ret

00001154 <_ZN6String6removeEjj>:
	// below will take care of truncating it at the end of the
	// string.
	remove(index, (unsigned int)-1);
}

void String::remove(unsigned int index, unsigned int count){
    1154:	cf 93       	push	r28
    1156:	df 93       	push	r29
    1158:	ec 01       	movw	r28, r24
    115a:	cb 01       	movw	r24, r22
	if (index >= len) { return; }
    115c:	2c 81       	ldd	r18, Y+4	; 0x04
    115e:	3d 81       	ldd	r19, Y+5	; 0x05
    1160:	62 17       	cp	r22, r18
    1162:	73 07       	cpc	r23, r19
    1164:	10 f5       	brcc	.+68     	; 0x11aa <_ZN6String6removeEjj+0x56>
	if (count <= 0) { return; }
    1166:	41 15       	cp	r20, r1
    1168:	51 05       	cpc	r21, r1
    116a:	f9 f0       	breq	.+62     	; 0x11aa <_ZN6String6removeEjj+0x56>
    116c:	b9 01       	movw	r22, r18
    116e:	68 1b       	sub	r22, r24
    1170:	79 0b       	sbc	r23, r25
    1172:	46 17       	cp	r20, r22
    1174:	57 07       	cpc	r21, r23
    1176:	08 f4       	brcc	.+2      	; 0x117a <_ZN6String6removeEjj+0x26>
    1178:	ba 01       	movw	r22, r20
	if (count > len - index) { count = len - index; }
	char *writeTo = buffer + index;
    117a:	e8 81       	ld	r30, Y
    117c:	f9 81       	ldd	r31, Y+1	; 0x01
	len = len - count;
    117e:	26 1b       	sub	r18, r22
    1180:	37 0b       	sbc	r19, r23
    1182:	3d 83       	std	Y+5, r19	; 0x05
    1184:	2c 83       	std	Y+4, r18	; 0x04
	strncpy(writeTo, buffer + index + count,len - index);
    1186:	a9 01       	movw	r20, r18
    1188:	48 1b       	sub	r20, r24
    118a:	59 0b       	sbc	r21, r25
    118c:	68 0f       	add	r22, r24
    118e:	79 1f       	adc	r23, r25
    1190:	6e 0f       	add	r22, r30
    1192:	7f 1f       	adc	r23, r31
    1194:	8e 0f       	add	r24, r30
    1196:	9f 1f       	adc	r25, r31
    1198:	0e 94 be 12 	call	0x257c	; 0x257c <strncpy>
	buffer[len] = 0;
    119c:	e8 81       	ld	r30, Y
    119e:	f9 81       	ldd	r31, Y+1	; 0x01
    11a0:	8c 81       	ldd	r24, Y+4	; 0x04
    11a2:	9d 81       	ldd	r25, Y+5	; 0x05
    11a4:	e8 0f       	add	r30, r24
    11a6:	f9 1f       	adc	r31, r25
    11a8:	10 82       	st	Z, r1
}
    11aa:	df 91       	pop	r29
    11ac:	cf 91       	pop	r28
    11ae:	08 95       	ret

000011b0 <_ZN6String6removeEj>:

void String::remove(unsigned int index){
	// Pass the biggest integer as the count. The remove method
	// below will take care of truncating it at the end of the
	// string.
	remove(index, (unsigned int)-1);
    11b0:	4f ef       	ldi	r20, 0xFF	; 255
    11b2:	5f ef       	ldi	r21, 0xFF	; 255
    11b4:	0c 94 aa 08 	jmp	0x1154	; 0x1154 <_ZN6String6removeEjj>

000011b8 <_ZN8BLEMate2C1EP6Stream>:
#include "SparkFun_BLEMate2.h"
#include "../Arduino/Arduino.h"

// Constructor. All we really need to do is link the user's Stream instance to
//  our local reference.
BLEMate2::BLEMate2(Stream *sp)
    11b8:	cf 92       	push	r12
    11ba:	df 92       	push	r13
    11bc:	ef 92       	push	r14
    11be:	ff 92       	push	r15
    11c0:	0f 93       	push	r16
    11c2:	1f 93       	push	r17
    11c4:	cf 93       	push	r28
    11c6:	df 93       	push	r29
    11c8:	ec 01       	movw	r28, r24
    11ca:	7b 01       	movw	r14, r22
    11cc:	8c 01       	movw	r16, r24
    11ce:	0e 5f       	subi	r16, 0xFE	; 254
    11d0:	1f 4f       	sbci	r17, 0xFF	; 255
    11d2:	6c 01       	movw	r12, r24
    11d4:	80 e2       	ldi	r24, 0x20	; 32
    11d6:	c8 0e       	add	r12, r24
    11d8:	d1 1c       	adc	r13, r1
    11da:	60 e2       	ldi	r22, 0x20	; 32
    11dc:	71 e0       	ldi	r23, 0x01	; 1
    11de:	c8 01       	movw	r24, r16
    11e0:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
    11e4:	0a 5f       	subi	r16, 0xFA	; 250
    11e6:	1f 4f       	sbci	r17, 0xFF	; 255
    11e8:	0c 15       	cp	r16, r12
    11ea:	1d 05       	cpc	r17, r13
    11ec:	b1 f7       	brne	.-20     	; 0x11da <_ZN8BLEMate2C1EP6Stream+0x22>
{
  _serialPort = sp;
    11ee:	fa a2       	std	Y+34, r15	; 0x22
    11f0:	e9 a2       	std	Y+33, r14	; 0x21
  _numAddresses = 0;
    11f2:	18 a2       	std	Y+32, r1	; 0x20
}
    11f4:	df 91       	pop	r29
    11f6:	cf 91       	pop	r28
    11f8:	1f 91       	pop	r17
    11fa:	0f 91       	pop	r16
    11fc:	ff 90       	pop	r15
    11fe:	ef 90       	pop	r14
    1200:	df 90       	pop	r13
    1202:	cf 90       	pop	r12
    1204:	08 95       	ret

00001206 <_ZN8BLEMate210knownStartEv>:

// Create a known state for the module to start from. If a partial command is
//  already in the module's buffer, we can purge it by sending an EOL to the
//  the module. If not, we'll just get an error.
BLEMate2::opResult BLEMate2::knownStart()
{
    1206:	8f 92       	push	r8
    1208:	9f 92       	push	r9
    120a:	af 92       	push	r10
    120c:	bf 92       	push	r11
    120e:	cf 92       	push	r12
    1210:	df 92       	push	r13
    1212:	ef 92       	push	r14
    1214:	ff 92       	push	r15
    1216:	0f 93       	push	r16
    1218:	1f 93       	push	r17
    121a:	cf 93       	push	r28
    121c:	df 93       	push	r29
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	62 97       	sbiw	r28, 0x12	; 18
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	f8 94       	cli
    1228:	de bf       	out	0x3e, r29	; 62
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	cd bf       	out	0x3d, r28	; 61
    122e:	8c 01       	movw	r16, r24
  String EOL = String("\n\r");
    1230:	6e e1       	ldi	r22, 0x1E	; 30
    1232:	71 e0       	ldi	r23, 0x01	; 1
    1234:	ce 01       	movw	r24, r28
    1236:	0d 96       	adiw	r24, 0x0d	; 13
    1238:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
  String buffer = "";
    123c:	60 e2       	ldi	r22, 0x20	; 32
    123e:	71 e0       	ldi	r23, 0x01	; 1
    1240:	ce 01       	movw	r24, r28
    1242:	07 96       	adiw	r24, 0x07	; 7
    1244:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
  
  _serialPort->print("\r");
    1248:	6f e1       	ldi	r22, 0x1F	; 31
    124a:	71 e0       	ldi	r23, 0x01	; 1
    124c:	d8 01       	movw	r26, r16
    124e:	91 96       	adiw	r26, 0x21	; 33
    1250:	8d 91       	ld	r24, X+
    1252:	9c 91       	ld	r25, X
    1254:	92 97       	sbiw	r26, 0x22	; 34
    1256:	0e 94 09 03 	call	0x612	; 0x612 <_ZN5Print5printEPKc>
  _serialPort->flush();
    125a:	f8 01       	movw	r30, r16
    125c:	81 a1       	ldd	r24, Z+33	; 0x21
    125e:	92 a1       	ldd	r25, Z+34	; 0x22
    1260:	dc 01       	movw	r26, r24
    1262:	ed 91       	ld	r30, X+
    1264:	fc 91       	ld	r31, X
    1266:	02 84       	ldd	r0, Z+10	; 0x0a
    1268:	f3 85       	ldd	r31, Z+11	; 0x0b
    126a:	e0 2d       	mov	r30, r0
    126c:	09 95       	icall
  
  // We're going to use the internal timer to track the elapsed time since we
  //  issued the reset. Bog-standard Arduino stuff.
  unsigned long startTime = millis();
    126e:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <millis>
    1272:	6b 01       	movw	r12, r22
    1274:	7c 01       	movw	r14, r24
  
  // This is our timeout loop. We're going to give our module 1s to come up
  //  with a new character, and return with a timeout failure otherwise.
  while (buffer.endsWith(EOL) != true)
    1276:	be 01       	movw	r22, r28
    1278:	63 5f       	subi	r22, 0xF3	; 243
    127a:	7f 4f       	sbci	r23, 0xFF	; 255
    127c:	ce 01       	movw	r24, r28
    127e:	07 96       	adiw	r24, 0x07	; 7
    1280:	0e 94 07 08 	call	0x100e	; 0x100e <_ZNK6String8endsWithERKS_>
    1284:	81 30       	cpi	r24, 0x01	; 1
    1286:	89 f1       	breq	.+98     	; 0x12ea <_ZN8BLEMate210knownStartEv+0xe4>
  {
    // Purge the serial data received from the module, along with any data in
    //  the buffer at the time this command was sent.
    if (_serialPort->available() > 0) 
    1288:	f8 01       	movw	r30, r16
    128a:	81 a1       	ldd	r24, Z+33	; 0x21
    128c:	92 a1       	ldd	r25, Z+34	; 0x22
    128e:	dc 01       	movw	r26, r24
    1290:	ed 91       	ld	r30, X+
    1292:	fc 91       	ld	r31, X
    1294:	04 80       	ldd	r0, Z+4	; 0x04
    1296:	f5 81       	ldd	r31, Z+5	; 0x05
    1298:	e0 2d       	mov	r30, r0
    129a:	09 95       	icall
    129c:	18 16       	cp	r1, r24
    129e:	19 06       	cpc	r1, r25
    12a0:	9c f4       	brge	.+38     	; 0x12c8 <_ZN8BLEMate210knownStartEv+0xc2>
    {
      buffer.concat(char(_serialPort->read()));
    12a2:	f8 01       	movw	r30, r16
    12a4:	81 a1       	ldd	r24, Z+33	; 0x21
    12a6:	92 a1       	ldd	r25, Z+34	; 0x22
    12a8:	dc 01       	movw	r26, r24
    12aa:	ed 91       	ld	r30, X+
    12ac:	fc 91       	ld	r31, X
    12ae:	06 80       	ldd	r0, Z+6	; 0x06
    12b0:	f7 81       	ldd	r31, Z+7	; 0x07
    12b2:	e0 2d       	mov	r30, r0
    12b4:	09 95       	icall
    12b6:	68 2f       	mov	r22, r24
    12b8:	ce 01       	movw	r24, r28
    12ba:	07 96       	adiw	r24, 0x07	; 7
    12bc:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6String6concatEc>
      startTime = millis();
    12c0:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <millis>
    12c4:	6b 01       	movw	r12, r22
    12c6:	7c 01       	movw	r14, r24
    }
    if ((startTime + 1000) < millis()) return TIMEOUT_ERROR;
    12c8:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <millis>
    12cc:	46 01       	movw	r8, r12
    12ce:	57 01       	movw	r10, r14
    12d0:	b8 ee       	ldi	r27, 0xE8	; 232
    12d2:	8b 0e       	add	r8, r27
    12d4:	b3 e0       	ldi	r27, 0x03	; 3
    12d6:	9b 1e       	adc	r9, r27
    12d8:	a1 1c       	adc	r10, r1
    12da:	b1 1c       	adc	r11, r1
    12dc:	86 16       	cp	r8, r22
    12de:	97 06       	cpc	r9, r23
    12e0:	a8 06       	cpc	r10, r24
    12e2:	b9 06       	cpc	r11, r25
    12e4:	40 f6       	brcc	.-112    	; 0x1276 <_ZN8BLEMate210knownStartEv+0x70>
    12e6:	1e ef       	ldi	r17, 0xFE	; 254
    12e8:	12 c0       	rjmp	.+36     	; 0x130e <_ZN8BLEMate210knownStartEv+0x108>
  }
  if (buffer.startsWith("ERR")) return SUCCESS;
    12ea:	61 e2       	ldi	r22, 0x21	; 33
    12ec:	71 e0       	ldi	r23, 0x01	; 1
    12ee:	ce 01       	movw	r24, r28
    12f0:	01 96       	adiw	r24, 0x01	; 1
    12f2:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
    12f6:	be 01       	movw	r22, r28
    12f8:	6f 5f       	subi	r22, 0xFF	; 255
    12fa:	7f 4f       	sbci	r23, 0xFF	; 255
    12fc:	ce 01       	movw	r24, r28
    12fe:	07 96       	adiw	r24, 0x07	; 7
    1300:	0e 94 f8 07 	call	0xff0	; 0xff0 <_ZNK6String10startsWithERKS_>
    1304:	ce 01       	movw	r24, r28
    1306:	01 96       	adiw	r24, 0x01	; 1
    1308:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
    130c:	11 e0       	ldi	r17, 0x01	; 1
//  already in the module's buffer, we can purge it by sending an EOL to the
//  the module. If not, we'll just get an error.
BLEMate2::opResult BLEMate2::knownStart()
{
  String EOL = String("\n\r");
  String buffer = "";
    130e:	ce 01       	movw	r24, r28
    1310:	07 96       	adiw	r24, 0x07	; 7
    1312:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
      startTime = millis();
    }
    if ((startTime + 1000) < millis()) return TIMEOUT_ERROR;
  }
  if (buffer.startsWith("ERR")) return SUCCESS;
  else return SUCCESS;
    1316:	ce 01       	movw	r24, r28
    1318:	0d 96       	adiw	r24, 0x0d	; 13
    131a:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
}
    131e:	81 2f       	mov	r24, r17
    1320:	62 96       	adiw	r28, 0x12	; 18
    1322:	0f b6       	in	r0, 0x3f	; 63
    1324:	f8 94       	cli
    1326:	de bf       	out	0x3e, r29	; 62
    1328:	0f be       	out	0x3f, r0	; 63
    132a:	cd bf       	out	0x3d, r28	; 61
    132c:	df 91       	pop	r29
    132e:	cf 91       	pop	r28
    1330:	1f 91       	pop	r17
    1332:	0f 91       	pop	r16
    1334:	ff 90       	pop	r15
    1336:	ef 90       	pop	r14
    1338:	df 90       	pop	r13
    133a:	cf 90       	pop	r12
    133c:	bf 90       	pop	r11
    133e:	af 90       	pop	r10
    1340:	9f 90       	pop	r9
    1342:	8f 90       	pop	r8
    1344:	08 95       	ret

00001346 <_ZN8BLEMate26stdCmdE6String>:
}

// There are several commands that look for either OK or ERROR; let's abstract
//  support for those commands to one single private function, to save memory.
BLEMate2::opResult BLEMate2::stdCmd(String command)
{
    1346:	bf 92       	push	r11
    1348:	cf 92       	push	r12
    134a:	df 92       	push	r13
    134c:	ef 92       	push	r14
    134e:	ff 92       	push	r15
    1350:	0f 93       	push	r16
    1352:	1f 93       	push	r17
    1354:	cf 93       	push	r28
    1356:	df 93       	push	r29
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
    135c:	62 97       	sbiw	r28, 0x12	; 18
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	cd bf       	out	0x3d, r28	; 61
    1368:	8c 01       	movw	r16, r24
    136a:	7b 01       	movw	r14, r22
  String buffer;
    136c:	60 e2       	ldi	r22, 0x20	; 32
    136e:	71 e0       	ldi	r23, 0x01	; 1
    1370:	ce 01       	movw	r24, r28
    1372:	0d 96       	adiw	r24, 0x0d	; 13
    1374:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
  String EOL = String("\n\r");
    1378:	6e e1       	ldi	r22, 0x1E	; 30
    137a:	71 e0       	ldi	r23, 0x01	; 1
    137c:	ce 01       	movw	r24, r28
    137e:	07 96       	adiw	r24, 0x07	; 7
    1380:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
  
  knownStart(); // Clear the serial buffer in the module and the Arduino.
    1384:	c8 01       	movw	r24, r16
    1386:	0e 94 03 09 	call	0x1206	; 0x1206 <_ZN8BLEMate210knownStartEv>
  
  _serialPort->print(command);
    138a:	b7 01       	movw	r22, r14
    138c:	d8 01       	movw	r26, r16
    138e:	91 96       	adiw	r26, 0x21	; 33
    1390:	8d 91       	ld	r24, X+
    1392:	9c 91       	ld	r25, X
    1394:	92 97       	sbiw	r26, 0x22	; 34
    1396:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printERK6String>
  _serialPort->print("\r");
    139a:	6f e1       	ldi	r22, 0x1F	; 31
    139c:	71 e0       	ldi	r23, 0x01	; 1
    139e:	f8 01       	movw	r30, r16
    13a0:	81 a1       	ldd	r24, Z+33	; 0x21
    13a2:	92 a1       	ldd	r25, Z+34	; 0x22
    13a4:	0e 94 09 03 	call	0x612	; 0x612 <_ZN5Print5printEPKc>
  _serialPort->flush();
    13a8:	d8 01       	movw	r26, r16
    13aa:	91 96       	adiw	r26, 0x21	; 33
    13ac:	8d 91       	ld	r24, X+
    13ae:	9c 91       	ld	r25, X
    13b0:	92 97       	sbiw	r26, 0x22	; 34
    13b2:	dc 01       	movw	r26, r24
    13b4:	ed 91       	ld	r30, X+
    13b6:	fc 91       	ld	r31, X
    13b8:	02 84       	ldd	r0, Z+10	; 0x0a
    13ba:	f3 85       	ldd	r31, Z+11	; 0x0b
    13bc:	e0 2d       	mov	r30, r0
    13be:	09 95       	icall
  
  // We're going to use the internal timer to track the elapsed time since we
  //  issued the command. Bog-standard Arduino stuff.
  unsigned long startTime = millis();
    13c0:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <millis>
    13c4:	6b 01       	movw	r12, r22
    13c6:	7c 01       	movw	r14, r24
    
  // This is our timeout loop. We'll give the module 3 seconds.
  while ((startTime + 3000) > millis())
    13c8:	b8 eb       	ldi	r27, 0xB8	; 184
    13ca:	cb 0e       	add	r12, r27
    13cc:	bb e0       	ldi	r27, 0x0B	; 11
    13ce:	db 1e       	adc	r13, r27
    13d0:	e1 1c       	adc	r14, r1
    13d2:	f1 1c       	adc	r15, r1
    13d4:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <millis>
    13d8:	6c 15       	cp	r22, r12
    13da:	7d 05       	cpc	r23, r13
    13dc:	8e 05       	cpc	r24, r14
    13de:	9f 05       	cpc	r25, r15
    13e0:	08 f0       	brcs	.+2      	; 0x13e4 <_ZN8BLEMate26stdCmdE6String+0x9e>
    13e2:	54 c0       	rjmp	.+168    	; 0x148c <_ZN8BLEMate26stdCmdE6String+0x146>
  {
    // Grow the current buffered data, until we receive the EOL string.    
    if (_serialPort->available() > 0) buffer.concat(char(_serialPort->read()));
    13e4:	f8 01       	movw	r30, r16
    13e6:	81 a1       	ldd	r24, Z+33	; 0x21
    13e8:	92 a1       	ldd	r25, Z+34	; 0x22
    13ea:	dc 01       	movw	r26, r24
    13ec:	ed 91       	ld	r30, X+
    13ee:	fc 91       	ld	r31, X
    13f0:	04 80       	ldd	r0, Z+4	; 0x04
    13f2:	f5 81       	ldd	r31, Z+5	; 0x05
    13f4:	e0 2d       	mov	r30, r0
    13f6:	09 95       	icall
    13f8:	18 16       	cp	r1, r24
    13fa:	19 06       	cpc	r1, r25
    13fc:	7c f4       	brge	.+30     	; 0x141c <_ZN8BLEMate26stdCmdE6String+0xd6>
    13fe:	f8 01       	movw	r30, r16
    1400:	81 a1       	ldd	r24, Z+33	; 0x21
    1402:	92 a1       	ldd	r25, Z+34	; 0x22
    1404:	dc 01       	movw	r26, r24
    1406:	ed 91       	ld	r30, X+
    1408:	fc 91       	ld	r31, X
    140a:	06 80       	ldd	r0, Z+6	; 0x06
    140c:	f7 81       	ldd	r31, Z+7	; 0x07
    140e:	e0 2d       	mov	r30, r0
    1410:	09 95       	icall
    1412:	68 2f       	mov	r22, r24
    1414:	ce 01       	movw	r24, r28
    1416:	0d 96       	adiw	r24, 0x0d	; 13
    1418:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6String6concatEc>

    if (buffer.endsWith(EOL))
    141c:	be 01       	movw	r22, r28
    141e:	69 5f       	subi	r22, 0xF9	; 249
    1420:	7f 4f       	sbci	r23, 0xFF	; 255
    1422:	ce 01       	movw	r24, r28
    1424:	0d 96       	adiw	r24, 0x0d	; 13
    1426:	0e 94 07 08 	call	0x100e	; 0x100e <_ZNK6String8endsWithERKS_>
    142a:	88 23       	and	r24, r24
    142c:	99 f2       	breq	.-90     	; 0x13d4 <_ZN8BLEMate26stdCmdE6String+0x8e>
    {
      if (buffer.startsWith("ER")) return MODULE_ERROR;
    142e:	6a e2       	ldi	r22, 0x2A	; 42
    1430:	71 e0       	ldi	r23, 0x01	; 1
    1432:	ce 01       	movw	r24, r28
    1434:	01 96       	adiw	r24, 0x01	; 1
    1436:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
    143a:	be 01       	movw	r22, r28
    143c:	6f 5f       	subi	r22, 0xFF	; 255
    143e:	7f 4f       	sbci	r23, 0xFF	; 255
    1440:	ce 01       	movw	r24, r28
    1442:	0d 96       	adiw	r24, 0x0d	; 13
    1444:	0e 94 f8 07 	call	0xff0	; 0xff0 <_ZNK6String10startsWithERKS_>
    1448:	b8 2e       	mov	r11, r24
    144a:	ce 01       	movw	r24, r28
    144c:	01 96       	adiw	r24, 0x01	; 1
    144e:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
    1452:	b1 10       	cpse	r11, r1
    1454:	1d c0       	rjmp	.+58     	; 0x1490 <_ZN8BLEMate26stdCmdE6String+0x14a>
      if (buffer.startsWith("OK")) return SUCCESS;
    1456:	63 e3       	ldi	r22, 0x33	; 51
    1458:	71 e0       	ldi	r23, 0x01	; 1
    145a:	ce 01       	movw	r24, r28
    145c:	01 96       	adiw	r24, 0x01	; 1
    145e:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
    1462:	be 01       	movw	r22, r28
    1464:	6f 5f       	subi	r22, 0xFF	; 255
    1466:	7f 4f       	sbci	r23, 0xFF	; 255
    1468:	ce 01       	movw	r24, r28
    146a:	0d 96       	adiw	r24, 0x0d	; 13
    146c:	0e 94 f8 07 	call	0xff0	; 0xff0 <_ZNK6String10startsWithERKS_>
    1470:	b8 2e       	mov	r11, r24
    1472:	ce 01       	movw	r24, r28
    1474:	01 96       	adiw	r24, 0x01	; 1
    1476:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
    147a:	b1 10       	cpse	r11, r1
    147c:	0b c0       	rjmp	.+22     	; 0x1494 <_ZN8BLEMate26stdCmdE6String+0x14e>
      buffer = "";
    147e:	60 e2       	ldi	r22, 0x20	; 32
    1480:	71 e0       	ldi	r23, 0x01	; 1
    1482:	ce 01       	movw	r24, r28
    1484:	0d 96       	adiw	r24, 0x0d	; 13
    1486:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZN6StringaSEPKc>
    148a:	a4 cf       	rjmp	.-184    	; 0x13d4 <_ZN8BLEMate26stdCmdE6String+0x8e>
    }    
  }
  return TIMEOUT_ERROR;
    148c:	1e ef       	ldi	r17, 0xFE	; 254
    148e:	03 c0       	rjmp	.+6      	; 0x1496 <_ZN8BLEMate26stdCmdE6String+0x150>
    // Grow the current buffered data, until we receive the EOL string.    
    if (_serialPort->available() > 0) buffer.concat(char(_serialPort->read()));

    if (buffer.endsWith(EOL))
    {
      if (buffer.startsWith("ER")) return MODULE_ERROR;
    1490:	1f ef       	ldi	r17, 0xFF	; 255
    1492:	01 c0       	rjmp	.+2      	; 0x1496 <_ZN8BLEMate26stdCmdE6String+0x150>
      if (buffer.startsWith("OK")) return SUCCESS;
    1494:	11 e0       	ldi	r17, 0x01	; 1
// There are several commands that look for either OK or ERROR; let's abstract
//  support for those commands to one single private function, to save memory.
BLEMate2::opResult BLEMate2::stdCmd(String command)
{
  String buffer;
  String EOL = String("\n\r");
    1496:	ce 01       	movw	r24, r28
    1498:	07 96       	adiw	r24, 0x07	; 7
    149a:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
      if (buffer.startsWith("ER")) return MODULE_ERROR;
      if (buffer.startsWith("OK")) return SUCCESS;
      buffer = "";
    }    
  }
  return TIMEOUT_ERROR;
    149e:	ce 01       	movw	r24, r28
    14a0:	0d 96       	adiw	r24, 0x0d	; 13
    14a2:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
}
    14a6:	81 2f       	mov	r24, r17
    14a8:	62 96       	adiw	r28, 0x12	; 18
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	f8 94       	cli
    14ae:	de bf       	out	0x3e, r29	; 62
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	cd bf       	out	0x3d, r28	; 61
    14b4:	df 91       	pop	r29
    14b6:	cf 91       	pop	r28
    14b8:	1f 91       	pop	r17
    14ba:	0f 91       	pop	r16
    14bc:	ff 90       	pop	r15
    14be:	ef 90       	pop	r14
    14c0:	df 90       	pop	r13
    14c2:	cf 90       	pop	r12
    14c4:	bf 90       	pop	r11
    14c6:	08 95       	ret

000014c8 <_ZN8BLEMate27restoreEv>:

// Issue the "RESTORE" command over the serial port to the BC118. This will
//  reset the device to factory default settings, which is a good thing to do
//  once in a while.
BLEMate2::opResult BLEMate2::restore()
{
    14c8:	0f 93       	push	r16
    14ca:	1f 93       	push	r17
    14cc:	cf 93       	push	r28
    14ce:	df 93       	push	r29
    14d0:	00 d0       	rcall	.+0      	; 0x14d2 <_ZN8BLEMate27restoreEv+0xa>
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <_ZN8BLEMate27restoreEv+0xc>
    14d4:	00 d0       	rcall	.+0      	; 0x14d6 <_ZN8BLEMate27restoreEv+0xe>
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
    14da:	8c 01       	movw	r16, r24
  return stdCmd("RTR");
    14dc:	66 e3       	ldi	r22, 0x36	; 54
    14de:	71 e0       	ldi	r23, 0x01	; 1
    14e0:	ce 01       	movw	r24, r28
    14e2:	01 96       	adiw	r24, 0x01	; 1
    14e4:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
    14e8:	be 01       	movw	r22, r28
    14ea:	6f 5f       	subi	r22, 0xFF	; 255
    14ec:	7f 4f       	sbci	r23, 0xFF	; 255
    14ee:	c8 01       	movw	r24, r16
    14f0:	0e 94 a3 09 	call	0x1346	; 0x1346 <_ZN8BLEMate26stdCmdE6String>
    14f4:	18 2f       	mov	r17, r24
    14f6:	ce 01       	movw	r24, r28
    14f8:	01 96       	adiw	r24, 0x01	; 1
    14fa:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
}
    14fe:	81 2f       	mov	r24, r17
    1500:	26 96       	adiw	r28, 0x06	; 6
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	f8 94       	cli
    1506:	de bf       	out	0x3e, r29	; 62
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	cd bf       	out	0x3d, r28	; 61
    150c:	df 91       	pop	r29
    150e:	cf 91       	pop	r28
    1510:	1f 91       	pop	r17
    1512:	0f 91       	pop	r16
    1514:	08 95       	ret

00001516 <_ZN8BLEMate211writeConfigEv>:

// Issue the "WRITE" command over the serial port to the BC118. This will
//  save the current settings to NVM, so they will be applied after a reset
//  or power cycle.
BLEMate2::opResult BLEMate2::writeConfig()
{
    1516:	0f 93       	push	r16
    1518:	1f 93       	push	r17
    151a:	cf 93       	push	r28
    151c:	df 93       	push	r29
    151e:	00 d0       	rcall	.+0      	; 0x1520 <_ZN8BLEMate211writeConfigEv+0xa>
    1520:	00 d0       	rcall	.+0      	; 0x1522 <_ZN8BLEMate211writeConfigEv+0xc>
    1522:	00 d0       	rcall	.+0      	; 0x1524 <_ZN8BLEMate211writeConfigEv+0xe>
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
    1528:	8c 01       	movw	r16, r24
  return stdCmd("WRT");
    152a:	6a e3       	ldi	r22, 0x3A	; 58
    152c:	71 e0       	ldi	r23, 0x01	; 1
    152e:	ce 01       	movw	r24, r28
    1530:	01 96       	adiw	r24, 0x01	; 1
    1532:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
    1536:	be 01       	movw	r22, r28
    1538:	6f 5f       	subi	r22, 0xFF	; 255
    153a:	7f 4f       	sbci	r23, 0xFF	; 255
    153c:	c8 01       	movw	r24, r16
    153e:	0e 94 a3 09 	call	0x1346	; 0x1346 <_ZN8BLEMate26stdCmdE6String>
    1542:	18 2f       	mov	r17, r24
    1544:	ce 01       	movw	r24, r28
    1546:	01 96       	adiw	r24, 0x01	; 1
    1548:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
}
    154c:	81 2f       	mov	r24, r17
    154e:	26 96       	adiw	r28, 0x06	; 6
    1550:	0f b6       	in	r0, 0x3f	; 63
    1552:	f8 94       	cli
    1554:	de bf       	out	0x3e, r29	; 62
    1556:	0f be       	out	0x3f, r0	; 63
    1558:	cd bf       	out	0x3d, r28	; 61
    155a:	df 91       	pop	r29
    155c:	cf 91       	pop	r28
    155e:	1f 91       	pop	r17
    1560:	0f 91       	pop	r16
    1562:	08 95       	ret

00001564 <_ZN8BLEMate25resetEv>:
//    READY
// If there is some sort of error, the module will respond with
//    ERR
// We'll buffer characters until we see an EOL (\n\r), then check the string.
BLEMate2::opResult BLEMate2::reset()
{
    1564:	bf 92       	push	r11
    1566:	cf 92       	push	r12
    1568:	df 92       	push	r13
    156a:	ef 92       	push	r14
    156c:	ff 92       	push	r15
    156e:	0f 93       	push	r16
    1570:	1f 93       	push	r17
    1572:	cf 93       	push	r28
    1574:	df 93       	push	r29
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
    157a:	62 97       	sbiw	r28, 0x12	; 18
    157c:	0f b6       	in	r0, 0x3f	; 63
    157e:	f8 94       	cli
    1580:	de bf       	out	0x3e, r29	; 62
    1582:	0f be       	out	0x3f, r0	; 63
    1584:	cd bf       	out	0x3d, r28	; 61
    1586:	8c 01       	movw	r16, r24
  String buffer;
    1588:	60 e2       	ldi	r22, 0x20	; 32
    158a:	71 e0       	ldi	r23, 0x01	; 1
    158c:	ce 01       	movw	r24, r28
    158e:	0d 96       	adiw	r24, 0x0d	; 13
    1590:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
  String EOL = String("\n\r");
    1594:	6e e1       	ldi	r22, 0x1E	; 30
    1596:	71 e0       	ldi	r23, 0x01	; 1
    1598:	ce 01       	movw	r24, r28
    159a:	07 96       	adiw	r24, 0x07	; 7
    159c:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
  
  knownStart();
    15a0:	c8 01       	movw	r24, r16
    15a2:	0e 94 03 09 	call	0x1206	; 0x1206 <_ZN8BLEMate210knownStartEv>
  
  // Now issue the reset command.
  _serialPort->print("RST");
    15a6:	6b e6       	ldi	r22, 0x6B	; 107
    15a8:	71 e0       	ldi	r23, 0x01	; 1
    15aa:	d8 01       	movw	r26, r16
    15ac:	91 96       	adiw	r26, 0x21	; 33
    15ae:	8d 91       	ld	r24, X+
    15b0:	9c 91       	ld	r25, X
    15b2:	92 97       	sbiw	r26, 0x22	; 34
    15b4:	0e 94 09 03 	call	0x612	; 0x612 <_ZN5Print5printEPKc>
  _serialPort->print("\r");
    15b8:	6f e1       	ldi	r22, 0x1F	; 31
    15ba:	71 e0       	ldi	r23, 0x01	; 1
    15bc:	f8 01       	movw	r30, r16
    15be:	81 a1       	ldd	r24, Z+33	; 0x21
    15c0:	92 a1       	ldd	r25, Z+34	; 0x22
    15c2:	0e 94 09 03 	call	0x612	; 0x612 <_ZN5Print5printEPKc>
  _serialPort->flush();
    15c6:	d8 01       	movw	r26, r16
    15c8:	91 96       	adiw	r26, 0x21	; 33
    15ca:	8d 91       	ld	r24, X+
    15cc:	9c 91       	ld	r25, X
    15ce:	92 97       	sbiw	r26, 0x22	; 34
    15d0:	dc 01       	movw	r26, r24
    15d2:	ed 91       	ld	r30, X+
    15d4:	fc 91       	ld	r31, X
    15d6:	02 84       	ldd	r0, Z+10	; 0x0a
    15d8:	f3 85       	ldd	r31, Z+11	; 0x0b
    15da:	e0 2d       	mov	r30, r0
    15dc:	09 95       	icall
  
  // We're going to use the internal timer to track the elapsed time since we
  //  issued the reset. Bog-standard Arduino stuff.
  unsigned long resetStart = millis();
    15de:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <millis>
    15e2:	6b 01       	movw	r12, r22
    15e4:	7c 01       	movw	r14, r24
  
  // This is our timeout loop. We'll give the module 6 seconds to reset.
  while ((resetStart + 6000) > millis())
    15e6:	b0 e7       	ldi	r27, 0x70	; 112
    15e8:	cb 0e       	add	r12, r27
    15ea:	b7 e1       	ldi	r27, 0x17	; 23
    15ec:	db 1e       	adc	r13, r27
    15ee:	e1 1c       	adc	r14, r1
    15f0:	f1 1c       	adc	r15, r1
    15f2:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <millis>
    15f6:	6c 15       	cp	r22, r12
    15f8:	7d 05       	cpc	r23, r13
    15fa:	8e 05       	cpc	r24, r14
    15fc:	9f 05       	cpc	r25, r15
    15fe:	08 f0       	brcs	.+2      	; 0x1602 <_ZN8BLEMate25resetEv+0x9e>
    1600:	83 c0       	rjmp	.+262    	; 0x1708 <_ZN8BLEMate25resetEv+0x1a4>
  {
    // Grow the current buffered data, until we receive the EOL string.    
    if (_serialPort->available() > 0) 
    1602:	f8 01       	movw	r30, r16
    1604:	81 a1       	ldd	r24, Z+33	; 0x21
    1606:	92 a1       	ldd	r25, Z+34	; 0x22
    1608:	dc 01       	movw	r26, r24
    160a:	ed 91       	ld	r30, X+
    160c:	fc 91       	ld	r31, X
    160e:	04 80       	ldd	r0, Z+4	; 0x04
    1610:	f5 81       	ldd	r31, Z+5	; 0x05
    1612:	e0 2d       	mov	r30, r0
    1614:	09 95       	icall
    1616:	18 16       	cp	r1, r24
    1618:	19 06       	cpc	r1, r25
    161a:	7c f4       	brge	.+30     	; 0x163a <_ZN8BLEMate25resetEv+0xd6>
    {
      char temp = _serialPort->read();
    161c:	f8 01       	movw	r30, r16
    161e:	81 a1       	ldd	r24, Z+33	; 0x21
    1620:	92 a1       	ldd	r25, Z+34	; 0x22
    1622:	dc 01       	movw	r26, r24
    1624:	ed 91       	ld	r30, X+
    1626:	fc 91       	ld	r31, X
    1628:	06 80       	ldd	r0, Z+6	; 0x06
    162a:	f7 81       	ldd	r31, Z+7	; 0x07
    162c:	e0 2d       	mov	r30, r0
    162e:	09 95       	icall
      buffer.concat(temp);
    1630:	68 2f       	mov	r22, r24
    1632:	ce 01       	movw	r24, r28
    1634:	0d 96       	adiw	r24, 0x0d	; 13
    1636:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6String6concatEc>
    }
    
    if (buffer.endsWith(EOL))
    163a:	be 01       	movw	r22, r28
    163c:	69 5f       	subi	r22, 0xF9	; 249
    163e:	7f 4f       	sbci	r23, 0xFF	; 255
    1640:	ce 01       	movw	r24, r28
    1642:	0d 96       	adiw	r24, 0x0d	; 13
    1644:	0e 94 07 08 	call	0x100e	; 0x100e <_ZNK6String8endsWithERKS_>
    1648:	88 23       	and	r24, r24
    164a:	99 f2       	breq	.-90     	; 0x15f2 <_ZN8BLEMate25resetEv+0x8e>
    {
      // If ERR or READY, we've finished the reset. Otherwise, just discard
      //  the data and wait for the next EOL.
      if (buffer.startsWith("ER")) return MODULE_ERROR;
    164c:	6a e2       	ldi	r22, 0x2A	; 42
    164e:	71 e0       	ldi	r23, 0x01	; 1
    1650:	ce 01       	movw	r24, r28
    1652:	01 96       	adiw	r24, 0x01	; 1
    1654:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
    1658:	be 01       	movw	r22, r28
    165a:	6f 5f       	subi	r22, 0xFF	; 255
    165c:	7f 4f       	sbci	r23, 0xFF	; 255
    165e:	ce 01       	movw	r24, r28
    1660:	0d 96       	adiw	r24, 0x0d	; 13
    1662:	0e 94 f8 07 	call	0xff0	; 0xff0 <_ZNK6String10startsWithERKS_>
    1666:	b8 2e       	mov	r11, r24
    1668:	ce 01       	movw	r24, r28
    166a:	01 96       	adiw	r24, 0x01	; 1
    166c:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
    1670:	b1 10       	cpse	r11, r1
    1672:	4c c0       	rjmp	.+152    	; 0x170c <_ZN8BLEMate25resetEv+0x1a8>
      if (buffer.startsWith("RE")) 
    1674:	6f e6       	ldi	r22, 0x6F	; 111
    1676:	71 e0       	ldi	r23, 0x01	; 1
    1678:	ce 01       	movw	r24, r28
    167a:	01 96       	adiw	r24, 0x01	; 1
    167c:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
    1680:	be 01       	movw	r22, r28
    1682:	6f 5f       	subi	r22, 0xFF	; 255
    1684:	7f 4f       	sbci	r23, 0xFF	; 255
    1686:	ce 01       	movw	r24, r28
    1688:	0d 96       	adiw	r24, 0x0d	; 13
    168a:	0e 94 f8 07 	call	0xff0	; 0xff0 <_ZNK6String10startsWithERKS_>
    168e:	b8 2e       	mov	r11, r24
    1690:	ce 01       	movw	r24, r28
    1692:	01 96       	adiw	r24, 0x01	; 1
    1694:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
    1698:	bb 20       	and	r11, r11
    169a:	79 f1       	breq	.+94     	; 0x16fa <_ZN8BLEMate25resetEv+0x196>
      {
        stdCmd("SCN OFF"); // When we come out of reset, we *could* be
    169c:	62 e7       	ldi	r22, 0x72	; 114
    169e:	71 e0       	ldi	r23, 0x01	; 1
    16a0:	ce 01       	movw	r24, r28
    16a2:	01 96       	adiw	r24, 0x01	; 1
    16a4:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
    16a8:	be 01       	movw	r22, r28
    16aa:	6f 5f       	subi	r22, 0xFF	; 255
    16ac:	7f 4f       	sbci	r23, 0xFF	; 255
    16ae:	c8 01       	movw	r24, r16
    16b0:	0e 94 a3 09 	call	0x1346	; 0x1346 <_ZN8BLEMate26stdCmdE6String>
    16b4:	ce 01       	movw	r24, r28
    16b6:	01 96       	adiw	r24, 0x01	; 1
    16b8:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
                           //  in scan mode. We don't want that; it's too
                           //  random and noisy.
        delay(500);        // Let the scanning noise complete.
    16bc:	64 ef       	ldi	r22, 0xF4	; 244
    16be:	71 e0       	ldi	r23, 0x01	; 1
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	0e 94 1b 05 	call	0xa36	; 0xa36 <delay>
        while(_serialPort->available())
    16c8:	f8 01       	movw	r30, r16
    16ca:	81 a1       	ldd	r24, Z+33	; 0x21
    16cc:	92 a1       	ldd	r25, Z+34	; 0x22
    16ce:	dc 01       	movw	r26, r24
    16d0:	ed 91       	ld	r30, X+
    16d2:	fc 91       	ld	r31, X
    16d4:	04 80       	ldd	r0, Z+4	; 0x04
    16d6:	f5 81       	ldd	r31, Z+5	; 0x05
    16d8:	e0 2d       	mov	r30, r0
    16da:	09 95       	icall
    16dc:	89 2b       	or	r24, r25
    16de:	59 f0       	breq	.+22     	; 0x16f6 <_ZN8BLEMate25resetEv+0x192>
        {
          _serialPort->read();
    16e0:	f8 01       	movw	r30, r16
    16e2:	81 a1       	ldd	r24, Z+33	; 0x21
    16e4:	92 a1       	ldd	r25, Z+34	; 0x22
    16e6:	dc 01       	movw	r26, r24
    16e8:	ed 91       	ld	r30, X+
    16ea:	fc 91       	ld	r31, X
    16ec:	06 80       	ldd	r0, Z+6	; 0x06
    16ee:	f7 81       	ldd	r31, Z+7	; 0x07
    16f0:	e0 2d       	mov	r30, r0
    16f2:	09 95       	icall
    16f4:	e9 cf       	rjmp	.-46     	; 0x16c8 <_ZN8BLEMate25resetEv+0x164>
        } 
        return SUCCESS;
    16f6:	11 e0       	ldi	r17, 0x01	; 1
    16f8:	0a c0       	rjmp	.+20     	; 0x170e <_ZN8BLEMate25resetEv+0x1aa>
      }
      buffer = "";
    16fa:	60 e2       	ldi	r22, 0x20	; 32
    16fc:	71 e0       	ldi	r23, 0x01	; 1
    16fe:	ce 01       	movw	r24, r28
    1700:	0d 96       	adiw	r24, 0x0d	; 13
    1702:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZN6StringaSEPKc>
    1706:	75 cf       	rjmp	.-278    	; 0x15f2 <_ZN8BLEMate25resetEv+0x8e>
    }    
  }
  return TIMEOUT_ERROR;
    1708:	1e ef       	ldi	r17, 0xFE	; 254
    170a:	01 c0       	rjmp	.+2      	; 0x170e <_ZN8BLEMate25resetEv+0x1aa>
    
    if (buffer.endsWith(EOL))
    {
      // If ERR or READY, we've finished the reset. Otherwise, just discard
      //  the data and wait for the next EOL.
      if (buffer.startsWith("ER")) return MODULE_ERROR;
    170c:	1f ef       	ldi	r17, 0xFF	; 255
//    ERR
// We'll buffer characters until we see an EOL (\n\r), then check the string.
BLEMate2::opResult BLEMate2::reset()
{
  String buffer;
  String EOL = String("\n\r");
    170e:	ce 01       	movw	r24, r28
    1710:	07 96       	adiw	r24, 0x07	; 7
    1712:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
        return SUCCESS;
      }
      buffer = "";
    }    
  }
  return TIMEOUT_ERROR;
    1716:	ce 01       	movw	r24, r28
    1718:	0d 96       	adiw	r24, 0x0d	; 13
    171a:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
}
    171e:	81 2f       	mov	r24, r17
    1720:	62 96       	adiw	r28, 0x12	; 18
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	f8 94       	cli
    1726:	de bf       	out	0x3e, r29	; 62
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	cd bf       	out	0x3d, r28	; 61
    172c:	df 91       	pop	r29
    172e:	cf 91       	pop	r28
    1730:	1f 91       	pop	r17
    1732:	0f 91       	pop	r16
    1734:	ff 90       	pop	r15
    1736:	ef 90       	pop	r14
    1738:	df 90       	pop	r13
    173a:	cf 90       	pop	r12
    173c:	bf 90       	pop	r11
    173e:	08 95       	ret

00001740 <_ZN8BLEMate29amCentralERb>:
//  device; that's important information, so we should be able to query
//  the module regarding that. We're not going to store that info, however, 
//  since the whole point is to get it "from the horse's mouth" rather than
//  trusting that our software is in sync with the state of the module.
BLEMate2::opResult BLEMate2::amCentral(boolean &inCentralMode)
{
    1740:	8f 92       	push	r8
    1742:	9f 92       	push	r9
    1744:	af 92       	push	r10
    1746:	bf 92       	push	r11
    1748:	cf 92       	push	r12
    174a:	df 92       	push	r13
    174c:	ef 92       	push	r14
    174e:	ff 92       	push	r15
    1750:	0f 93       	push	r16
    1752:	1f 93       	push	r17
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    175c:	62 97       	sbiw	r28, 0x12	; 18
    175e:	0f b6       	in	r0, 0x3f	; 63
    1760:	f8 94       	cli
    1762:	de bf       	out	0x3e, r29	; 62
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	cd bf       	out	0x3d, r28	; 61
    1768:	8c 01       	movw	r16, r24
    176a:	5b 01       	movw	r10, r22
  String buffer;
    176c:	60 e2       	ldi	r22, 0x20	; 32
    176e:	71 e0       	ldi	r23, 0x01	; 1
    1770:	ce 01       	movw	r24, r28
    1772:	0d 96       	adiw	r24, 0x0d	; 13
    1774:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
  String EOL = String("\n\r");
    1778:	6e e1       	ldi	r22, 0x1E	; 30
    177a:	71 e0       	ldi	r23, 0x01	; 1
    177c:	ce 01       	movw	r24, r28
    177e:	07 96       	adiw	r24, 0x07	; 7
    1780:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
  
  knownStart(); // Clear the serial buffer in the module and the Arduino.
    1784:	c8 01       	movw	r24, r16
    1786:	0e 94 03 09 	call	0x1206	; 0x1206 <_ZN8BLEMate210knownStartEv>
  
  _serialPort->print("STS\r");
    178a:	6a e7       	ldi	r22, 0x7A	; 122
    178c:	71 e0       	ldi	r23, 0x01	; 1
    178e:	d8 01       	movw	r26, r16
    1790:	91 96       	adiw	r26, 0x21	; 33
    1792:	8d 91       	ld	r24, X+
    1794:	9c 91       	ld	r25, X
    1796:	92 97       	sbiw	r26, 0x22	; 34
    1798:	0e 94 09 03 	call	0x612	; 0x612 <_ZN5Print5printEPKc>
  _serialPort->flush();
    179c:	f8 01       	movw	r30, r16
    179e:	81 a1       	ldd	r24, Z+33	; 0x21
    17a0:	92 a1       	ldd	r25, Z+34	; 0x22
    17a2:	dc 01       	movw	r26, r24
    17a4:	ed 91       	ld	r30, X+
    17a6:	fc 91       	ld	r31, X
    17a8:	02 84       	ldd	r0, Z+10	; 0x0a
    17aa:	f3 85       	ldd	r31, Z+11	; 0x0b
    17ac:	e0 2d       	mov	r30, r0
    17ae:	09 95       	icall
  
  // We're going to use the internal timer to track the elapsed time since we
  //  issued the command. Bog-standard Arduino stuff.
  unsigned long startTime = millis();
    17b0:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <millis>
    17b4:	6b 01       	movw	r12, r22
    17b6:	7c 01       	movw	r14, r24
    
  // This is our timeout loop. We'll give the module 3 seconds.
  while ((startTime + 3000) > millis())
    17b8:	b8 eb       	ldi	r27, 0xB8	; 184
    17ba:	cb 0e       	add	r12, r27
    17bc:	bb e0       	ldi	r27, 0x0B	; 11
    17be:	db 1e       	adc	r13, r27
    17c0:	e1 1c       	adc	r14, r1
    17c2:	f1 1c       	adc	r15, r1
      }
      else if (buffer.startsWith("STS")) 
      {
        if (buffer.charAt(4) == 'C')
        {
          inCentralMode = true;
    17c4:	99 24       	eor	r9, r9
    17c6:	93 94       	inc	r9
  // We're going to use the internal timer to track the elapsed time since we
  //  issued the command. Bog-standard Arduino stuff.
  unsigned long startTime = millis();
    
  // This is our timeout loop. We'll give the module 3 seconds.
  while ((startTime + 3000) > millis())
    17c8:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <millis>
    17cc:	6c 15       	cp	r22, r12
    17ce:	7d 05       	cpc	r23, r13
    17d0:	8e 05       	cpc	r24, r14
    17d2:	9f 05       	cpc	r25, r15
    17d4:	08 f0       	brcs	.+2      	; 0x17d8 <_ZN8BLEMate29amCentralERb+0x98>
    17d6:	75 c0       	rjmp	.+234    	; 0x18c2 <_ZN8BLEMate29amCentralERb+0x182>
  {
    // Grow the current buffered data, until we receive the EOL string.    
    if (_serialPort->available() > 0) 
    17d8:	f8 01       	movw	r30, r16
    17da:	81 a1       	ldd	r24, Z+33	; 0x21
    17dc:	92 a1       	ldd	r25, Z+34	; 0x22
    17de:	dc 01       	movw	r26, r24
    17e0:	ed 91       	ld	r30, X+
    17e2:	fc 91       	ld	r31, X
    17e4:	04 80       	ldd	r0, Z+4	; 0x04
    17e6:	f5 81       	ldd	r31, Z+5	; 0x05
    17e8:	e0 2d       	mov	r30, r0
    17ea:	09 95       	icall
    17ec:	18 16       	cp	r1, r24
    17ee:	19 06       	cpc	r1, r25
    17f0:	7c f4       	brge	.+30     	; 0x1810 <_ZN8BLEMate29amCentralERb+0xd0>
    {
      buffer.concat(char(_serialPort->read()));
    17f2:	f8 01       	movw	r30, r16
    17f4:	81 a1       	ldd	r24, Z+33	; 0x21
    17f6:	92 a1       	ldd	r25, Z+34	; 0x22
    17f8:	dc 01       	movw	r26, r24
    17fa:	ed 91       	ld	r30, X+
    17fc:	fc 91       	ld	r31, X
    17fe:	06 80       	ldd	r0, Z+6	; 0x06
    1800:	f7 81       	ldd	r31, Z+7	; 0x07
    1802:	e0 2d       	mov	r30, r0
    1804:	09 95       	icall
    1806:	68 2f       	mov	r22, r24
    1808:	ce 01       	movw	r24, r28
    180a:	0d 96       	adiw	r24, 0x0d	; 13
    180c:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6String6concatEc>
    }
    if (buffer.endsWith(EOL))
    1810:	be 01       	movw	r22, r28
    1812:	69 5f       	subi	r22, 0xF9	; 249
    1814:	7f 4f       	sbci	r23, 0xFF	; 255
    1816:	ce 01       	movw	r24, r28
    1818:	0d 96       	adiw	r24, 0x0d	; 13
    181a:	0e 94 07 08 	call	0x100e	; 0x100e <_ZNK6String8endsWithERKS_>
    181e:	88 23       	and	r24, r24
    1820:	99 f2       	breq	.-90     	; 0x17c8 <_ZN8BLEMate29amCentralERb+0x88>
    {
      if (buffer.startsWith("ER")) 
    1822:	6a e2       	ldi	r22, 0x2A	; 42
    1824:	71 e0       	ldi	r23, 0x01	; 1
    1826:	ce 01       	movw	r24, r28
    1828:	01 96       	adiw	r24, 0x01	; 1
    182a:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
    182e:	be 01       	movw	r22, r28
    1830:	6f 5f       	subi	r22, 0xFF	; 255
    1832:	7f 4f       	sbci	r23, 0xFF	; 255
    1834:	ce 01       	movw	r24, r28
    1836:	0d 96       	adiw	r24, 0x0d	; 13
    1838:	0e 94 f8 07 	call	0xff0	; 0xff0 <_ZNK6String10startsWithERKS_>
    183c:	88 2e       	mov	r8, r24
    183e:	ce 01       	movw	r24, r28
    1840:	01 96       	adiw	r24, 0x01	; 1
    1842:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
    1846:	81 10       	cpse	r8, r1
    1848:	3e c0       	rjmp	.+124    	; 0x18c6 <_ZN8BLEMate29amCentralERb+0x186>
      {
        return MODULE_ERROR;
      }
      else if (buffer.startsWith("OK")) 
    184a:	63 e3       	ldi	r22, 0x33	; 51
    184c:	71 e0       	ldi	r23, 0x01	; 1
    184e:	ce 01       	movw	r24, r28
    1850:	01 96       	adiw	r24, 0x01	; 1
    1852:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
    1856:	be 01       	movw	r22, r28
    1858:	6f 5f       	subi	r22, 0xFF	; 255
    185a:	7f 4f       	sbci	r23, 0xFF	; 255
    185c:	ce 01       	movw	r24, r28
    185e:	0d 96       	adiw	r24, 0x0d	; 13
    1860:	0e 94 f8 07 	call	0xff0	; 0xff0 <_ZNK6String10startsWithERKS_>
    1864:	88 2e       	mov	r8, r24
    1866:	ce 01       	movw	r24, r28
    1868:	01 96       	adiw	r24, 0x01	; 1
    186a:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
    186e:	81 10       	cpse	r8, r1
    1870:	2c c0       	rjmp	.+88     	; 0x18ca <_ZN8BLEMate29amCentralERb+0x18a>
      {
        return SUCCESS;
      }
      else if (buffer.startsWith("STS")) 
    1872:	6f e7       	ldi	r22, 0x7F	; 127
    1874:	71 e0       	ldi	r23, 0x01	; 1
    1876:	ce 01       	movw	r24, r28
    1878:	01 96       	adiw	r24, 0x01	; 1
    187a:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
    187e:	be 01       	movw	r22, r28
    1880:	6f 5f       	subi	r22, 0xFF	; 255
    1882:	7f 4f       	sbci	r23, 0xFF	; 255
    1884:	ce 01       	movw	r24, r28
    1886:	0d 96       	adiw	r24, 0x0d	; 13
    1888:	0e 94 f8 07 	call	0xff0	; 0xff0 <_ZNK6String10startsWithERKS_>
    188c:	88 2e       	mov	r8, r24
    188e:	ce 01       	movw	r24, r28
    1890:	01 96       	adiw	r24, 0x01	; 1
    1892:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
    1896:	88 20       	and	r8, r8
    1898:	69 f0       	breq	.+26     	; 0x18b4 <_ZN8BLEMate29amCentralERb+0x174>
      {
        if (buffer.charAt(4) == 'C')
    189a:	64 e0       	ldi	r22, 0x04	; 4
    189c:	70 e0       	ldi	r23, 0x00	; 0
    189e:	ce 01       	movw	r24, r28
    18a0:	0d 96       	adiw	r24, 0x0d	; 13
    18a2:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZNK6String6charAtEj>
    18a6:	83 34       	cpi	r24, 0x43	; 67
    18a8:	19 f4       	brne	.+6      	; 0x18b0 <_ZN8BLEMate29amCentralERb+0x170>
        {
          inCentralMode = true;
    18aa:	f5 01       	movw	r30, r10
    18ac:	90 82       	st	Z, r9
    18ae:	02 c0       	rjmp	.+4      	; 0x18b4 <_ZN8BLEMate29amCentralERb+0x174>
        }
        else
        {
          inCentralMode = false;
    18b0:	d5 01       	movw	r26, r10
    18b2:	1c 92       	st	X, r1
        }
      } 
      buffer = "";
    18b4:	60 e2       	ldi	r22, 0x20	; 32
    18b6:	71 e0       	ldi	r23, 0x01	; 1
    18b8:	ce 01       	movw	r24, r28
    18ba:	0d 96       	adiw	r24, 0x0d	; 13
    18bc:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZN6StringaSEPKc>
    18c0:	83 cf       	rjmp	.-250    	; 0x17c8 <_ZN8BLEMate29amCentralERb+0x88>
    }    
  }
  return TIMEOUT_ERROR;
    18c2:	1e ef       	ldi	r17, 0xFE	; 254
    18c4:	03 c0       	rjmp	.+6      	; 0x18cc <_ZN8BLEMate29amCentralERb+0x18c>
    }
    if (buffer.endsWith(EOL))
    {
      if (buffer.startsWith("ER")) 
      {
        return MODULE_ERROR;
    18c6:	1f ef       	ldi	r17, 0xFF	; 255
    18c8:	01 c0       	rjmp	.+2      	; 0x18cc <_ZN8BLEMate29amCentralERb+0x18c>
      }
      else if (buffer.startsWith("OK")) 
      {
        return SUCCESS;
    18ca:	11 e0       	ldi	r17, 0x01	; 1
//  since the whole point is to get it "from the horse's mouth" rather than
//  trusting that our software is in sync with the state of the module.
BLEMate2::opResult BLEMate2::amCentral(boolean &inCentralMode)
{
  String buffer;
  String EOL = String("\n\r");
    18cc:	ce 01       	movw	r24, r28
    18ce:	07 96       	adiw	r24, 0x07	; 7
    18d0:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
        }
      } 
      buffer = "";
    }    
  }
  return TIMEOUT_ERROR;
    18d4:	ce 01       	movw	r24, r28
    18d6:	0d 96       	adiw	r24, 0x0d	; 13
    18d8:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
}
    18dc:	81 2f       	mov	r24, r17
    18de:	62 96       	adiw	r28, 0x12	; 18
    18e0:	0f b6       	in	r0, 0x3f	; 63
    18e2:	f8 94       	cli
    18e4:	de bf       	out	0x3e, r29	; 62
    18e6:	0f be       	out	0x3f, r0	; 63
    18e8:	cd bf       	out	0x3d, r28	; 61
    18ea:	df 91       	pop	r29
    18ec:	cf 91       	pop	r28
    18ee:	1f 91       	pop	r17
    18f0:	0f 91       	pop	r16
    18f2:	ff 90       	pop	r15
    18f4:	ef 90       	pop	r14
    18f6:	df 90       	pop	r13
    18f8:	cf 90       	pop	r12
    18fa:	bf 90       	pop	r11
    18fc:	af 90       	pop	r10
    18fe:	9f 90       	pop	r9
    1900:	8f 90       	pop	r8
    1902:	08 95       	ret

00001904 <_ZN8BLEMate28sendDataEPch>:
  return result;
}

// Now, byte array.
BLEMate2::opResult BLEMate2::sendData(char *dataBuffer, byte dataLen)
{
    1904:	8f 92       	push	r8
    1906:	9f 92       	push	r9
    1908:	af 92       	push	r10
    190a:	bf 92       	push	r11
    190c:	cf 92       	push	r12
    190e:	df 92       	push	r13
    1910:	ef 92       	push	r14
    1912:	ff 92       	push	r15
    1914:	0f 93       	push	r16
    1916:	1f 93       	push	r17
    1918:	cf 93       	push	r28
    191a:	df 93       	push	r29
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
    1920:	63 97       	sbiw	r28, 0x13	; 19
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	f8 94       	cli
    1926:	de bf       	out	0x3e, r29	; 62
    1928:	0f be       	out	0x3f, r0	; 63
    192a:	cd bf       	out	0x3d, r28	; 61
    192c:	8c 01       	movw	r16, r24
    192e:	7b 01       	movw	r14, r22
    1930:	94 2e       	mov	r9, r20
  String EOL = String("\n\r");
    1932:	6e e1       	ldi	r22, 0x1E	; 30
    1934:	71 e0       	ldi	r23, 0x01	; 1
    1936:	ce 01       	movw	r24, r28
    1938:	0d 96       	adiw	r24, 0x0d	; 13
    193a:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
  //  I don't want to burden the user with that, unduly, so I'm going to chop
  //  up their data and send it out in smaller blocks.
   
  // Thus, the first quetion is: am I in central mode, or not?
  boolean inCentralMode;
  amCentral(inCentralMode);
    193e:	be 01       	movw	r22, r28
    1940:	6d 5e       	subi	r22, 0xED	; 237
    1942:	7f 4f       	sbci	r23, 0xFF	; 255
    1944:	c8 01       	movw	r24, r16
    1946:	0e 94 a0 0b 	call	0x1740	; 0x1740 <_ZN8BLEMate29amCentralERb>
  // What we're now going to do is to build a String object with our buffer
  //  contents and then hit send on that buffer when it reaches a the length
  //  limited by the mode.

  byte outBufLenLimit = 20;
  if (!inCentralMode)
    194a:	8b 89       	ldd	r24, Y+19	; 0x13
    194c:	88 23       	and	r24, r24
    194e:	19 f0       	breq	.+6      	; 0x1956 <_ZN8BLEMate28sendDataEPch+0x52>

  // What we're now going to do is to build a String object with our buffer
  //  contents and then hit send on that buffer when it reaches a the length
  //  limited by the mode.

  byte outBufLenLimit = 20;
    1950:	94 e1       	ldi	r25, 0x14	; 20
    1952:	c9 2e       	mov	r12, r25
    1954:	02 c0       	rjmp	.+4      	; 0x195a <_ZN8BLEMate28sendDataEPch+0x56>
  if (!inCentralMode)
  {
    outBufLenLimit = 125;
    1956:	8d e7       	ldi	r24, 0x7D	; 125
    1958:	c8 2e       	mov	r12, r24
    }
    dataLeft -= outBufLenLimit;
    String outBuf;
    while (outBufLen < outBufLenLimit)
    {
      outBuf.concat(dataBuffer[inBufPtr++]);
    195a:	b9 2c       	mov	r11, r9
    195c:	aa 24       	eor	r10, r10
    195e:	a3 94       	inc	r10
    1960:	d1 2c       	mov	r13, r1
  byte inBufPtr = 0;
  byte outBufLen = 0;
  byte dataLeft = dataLen;

  opResult result = SUCCESS;
  while (inBufPtr < dataLen)
    1962:	d9 14       	cp	r13, r9
    1964:	08 f0       	brcs	.+2      	; 0x1968 <_ZN8BLEMate28sendDataEPch+0x64>
    1966:	4c c0       	rjmp	.+152    	; 0x1a00 <_ZN8BLEMate28sendDataEPch+0xfc>
    1968:	bc 14       	cp	r11, r12
    196a:	08 f4       	brcc	.+2      	; 0x196e <_ZN8BLEMate28sendDataEPch+0x6a>
    196c:	cb 2c       	mov	r12, r11
  {
    if (dataLeft < outBufLenLimit)
    {
      outBufLenLimit = dataLeft;
    }
    dataLeft -= outBufLenLimit;
    196e:	bc 18       	sub	r11, r12
    String outBuf;
    1970:	60 e2       	ldi	r22, 0x20	; 32
    1972:	71 e0       	ldi	r23, 0x01	; 1
    1974:	ce 01       	movw	r24, r28
    1976:	07 96       	adiw	r24, 0x07	; 7
    1978:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
    197c:	ac 2c       	mov	r10, r12
    197e:	ad 0c       	add	r10, r13
    while (outBufLen < outBufLenLimit)
    1980:	da 14       	cp	r13, r10
    1982:	69 f0       	breq	.+26     	; 0x199e <_ZN8BLEMate28sendDataEPch+0x9a>
    {
      outBuf.concat(dataBuffer[inBufPtr++]);
    1984:	88 24       	eor	r8, r8
    1986:	83 94       	inc	r8
    1988:	8d 0c       	add	r8, r13
    198a:	f7 01       	movw	r30, r14
    198c:	ed 0d       	add	r30, r13
    198e:	f1 1d       	adc	r31, r1
    1990:	60 81       	ld	r22, Z
    1992:	ce 01       	movw	r24, r28
    1994:	07 96       	adiw	r24, 0x07	; 7
    1996:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6String6concatEc>
    199a:	d8 2c       	mov	r13, r8
    199c:	f1 cf       	rjmp	.-30     	; 0x1980 <_ZN8BLEMate28sendDataEPch+0x7c>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    199e:	63 e8       	ldi	r22, 0x83	; 131
    19a0:	71 e0       	ldi	r23, 0x01	; 1
    19a2:	ce 01       	movw	r24, r28
    19a4:	01 96       	adiw	r24, 0x01	; 1
    19a6:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
      outBufLen++;
    }
    outBuf = "SND " + outBuf + "\r";
    19aa:	be 01       	movw	r22, r28
    19ac:	69 5f       	subi	r22, 0xF9	; 249
    19ae:	7f 4f       	sbci	r23, 0xFF	; 255
    19b0:	ce 01       	movw	r24, r28
    19b2:	01 96       	adiw	r24, 0x01	; 1
    19b4:	0e 94 45 07 	call	0xe8a	; 0xe8a <_ZplRK15StringSumHelperRK6String>
    19b8:	6f e1       	ldi	r22, 0x1F	; 31
    19ba:	71 e0       	ldi	r23, 0x01	; 1
    19bc:	0e 94 58 07 	call	0xeb0	; 0xeb0 <_ZplRK15StringSumHelperPKc>
    19c0:	bc 01       	movw	r22, r24
    19c2:	ce 01       	movw	r24, r28
    19c4:	07 96       	adiw	r24, 0x07	; 7
    19c6:	0e 94 b7 06 	call	0xd6e	; 0xd6e <_ZN6StringaSERKS_>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    19ca:	ce 01       	movw	r24, r28
    19cc:	01 96       	adiw	r24, 0x01	; 1
    19ce:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
    result = stdCmd(outBuf);
    19d2:	be 01       	movw	r22, r28
    19d4:	69 5f       	subi	r22, 0xF9	; 249
    19d6:	7f 4f       	sbci	r23, 0xFF	; 255
    19d8:	ce 01       	movw	r24, r28
    19da:	01 96       	adiw	r24, 0x01	; 1
    19dc:	0e 94 ce 06 	call	0xd9c	; 0xd9c <_ZN6StringC1ERKS_>
    19e0:	be 01       	movw	r22, r28
    19e2:	6f 5f       	subi	r22, 0xFF	; 255
    19e4:	7f 4f       	sbci	r23, 0xFF	; 255
    19e6:	c8 01       	movw	r24, r16
    19e8:	0e 94 a3 09 	call	0x1346	; 0x1346 <_ZN8BLEMate26stdCmdE6String>
    19ec:	a8 2e       	mov	r10, r24
    19ee:	ce 01       	movw	r24, r28
    19f0:	01 96       	adiw	r24, 0x01	; 1
    19f2:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
    outBufLen = 0;
  }
    19f6:	ce 01       	movw	r24, r28
    19f8:	07 96       	adiw	r24, 0x07	; 7
    19fa:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
    19fe:	b1 cf       	rjmp	.-158    	; 0x1962 <_ZN8BLEMate28sendDataEPch+0x5e>
  return result;
    1a00:	ce 01       	movw	r24, r28
    1a02:	0d 96       	adiw	r24, 0x0d	; 13
    1a04:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
}
    1a08:	8a 2d       	mov	r24, r10
    1a0a:	63 96       	adiw	r28, 0x13	; 19
    1a0c:	0f b6       	in	r0, 0x3f	; 63
    1a0e:	f8 94       	cli
    1a10:	de bf       	out	0x3e, r29	; 62
    1a12:	0f be       	out	0x3f, r0	; 63
    1a14:	cd bf       	out	0x3d, r28	; 61
    1a16:	df 91       	pop	r29
    1a18:	cf 91       	pop	r28
    1a1a:	1f 91       	pop	r17
    1a1c:	0f 91       	pop	r16
    1a1e:	ff 90       	pop	r15
    1a20:	ef 90       	pop	r14
    1a22:	df 90       	pop	r13
    1a24:	cf 90       	pop	r12
    1a26:	bf 90       	pop	r11
    1a28:	af 90       	pop	r10
    1a2a:	9f 90       	pop	r9
    1a2c:	8f 90       	pop	r8
    1a2e:	08 95       	ret

00001a30 <_ZN8BLEMate28sendDataER6String>:
  String newBuffer = dataBuffer;
  return sendData(newBuffer);
}

BLEMate2::opResult BLEMate2::sendData(String &dataBuffer)
{
    1a30:	cf 92       	push	r12
    1a32:	df 92       	push	r13
    1a34:	ef 92       	push	r14
    1a36:	ff 92       	push	r15
    1a38:	0f 93       	push	r16
    1a3a:	1f 93       	push	r17
    1a3c:	cf 93       	push	r28
    1a3e:	df 93       	push	r29
    1a40:	6c 01       	movw	r12, r24
    1a42:	7b 01       	movw	r14, r22
  // First, we'll need to figure out the length of the string.
  int bufLength = dataBuffer.length()+1;
    1a44:	fb 01       	movw	r30, r22
    1a46:	c4 81       	ldd	r28, Z+4	; 0x04
    1a48:	d5 81       	ldd	r29, Z+5	; 0x05
    1a4a:	21 96       	adiw	r28, 0x01	; 1

  // Now dynamically allocate an array of the appropriate size.
  char *charArray = new char [bufLength];
    1a4c:	ce 01       	movw	r24, r28
    1a4e:	0e 94 b9 02 	call	0x572	; 0x572 <_Znaj>
    1a52:	8c 01       	movw	r16, r24
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	ae 01       	movw	r20, r28
    1a5a:	bc 01       	movw	r22, r24
    1a5c:	c7 01       	movw	r24, r14
    1a5e:	0e 94 3b 08 	call	0x1076	; 0x1076 <_ZNK6String8getBytesEPhjj>

  // Copy over the data.
  dataBuffer.toCharArray(charArray, bufLength);

  // Call the byte array function
  opResult result = sendData(charArray, bufLength);
    1a62:	4c 2f       	mov	r20, r28
    1a64:	b8 01       	movw	r22, r16
    1a66:	c6 01       	movw	r24, r12
    1a68:	0e 94 82 0c 	call	0x1904	; 0x1904 <_ZN8BLEMate28sendDataEPch>
    1a6c:	c8 2f       	mov	r28, r24

  // de-allocate the memory.
  delete charArray;
    1a6e:	c8 01       	movw	r24, r16
    1a70:	0e 94 bb 02 	call	0x576	; 0x576 <_ZdlPv>

  return result;
}
    1a74:	8c 2f       	mov	r24, r28
    1a76:	df 91       	pop	r29
    1a78:	cf 91       	pop	r28
    1a7a:	1f 91       	pop	r17
    1a7c:	0f 91       	pop	r16
    1a7e:	ff 90       	pop	r15
    1a80:	ef 90       	pop	r14
    1a82:	df 90       	pop	r13
    1a84:	cf 90       	pop	r12
    1a86:	08 95       	ret

00001a88 <setup_leds>:
#include "../lib/Arduino/Arduino.h"
#include "blink_leds.h"

void setup_leds()
{
    pinMode(7, OUTPUT);
    1a88:	61 e0       	ldi	r22, 0x01	; 1
    1a8a:	87 e0       	ldi	r24, 0x07	; 7
    1a8c:	0e 94 c4 05 	call	0xb88	; 0xb88 <pinMode>
    pinMode(3, OUTPUT);
    1a90:	61 e0       	ldi	r22, 0x01	; 1
    1a92:	83 e0       	ldi	r24, 0x03	; 3
    1a94:	0e 94 c4 05 	call	0xb88	; 0xb88 <pinMode>
    pinMode(2, OUTPUT);
    1a98:	61 e0       	ldi	r22, 0x01	; 1
    1a9a:	82 e0       	ldi	r24, 0x02	; 2
    1a9c:	0e 94 c4 05 	call	0xb88	; 0xb88 <pinMode>
    pinMode(8, OUTPUT);
    1aa0:	61 e0       	ldi	r22, 0x01	; 1
    1aa2:	88 e0       	ldi	r24, 0x08	; 8
    1aa4:	0e 94 c4 05 	call	0xb88	; 0xb88 <pinMode>
    pinMode(10, OUTPUT);
    1aa8:	61 e0       	ldi	r22, 0x01	; 1
    1aaa:	8a e0       	ldi	r24, 0x0A	; 10
    1aac:	0e 94 c4 05 	call	0xb88	; 0xb88 <pinMode>
    pinMode(5, OUTPUT);
    1ab0:	61 e0       	ldi	r22, 0x01	; 1
    1ab2:	85 e0       	ldi	r24, 0x05	; 5
    1ab4:	0e 94 c4 05 	call	0xb88	; 0xb88 <pinMode>
    pinMode(4, OUTPUT);
    1ab8:	61 e0       	ldi	r22, 0x01	; 1
    1aba:	84 e0       	ldi	r24, 0x04	; 4
    1abc:	0e 94 c4 05 	call	0xb88	; 0xb88 <pinMode>
    pinMode(9, OUTPUT);
    1ac0:	61 e0       	ldi	r22, 0x01	; 1
    1ac2:	89 e0       	ldi	r24, 0x09	; 9
    1ac4:	0e 94 c4 05 	call	0xb88	; 0xb88 <pinMode>
    pinMode(6, OUTPUT);
    1ac8:	61 e0       	ldi	r22, 0x01	; 1
    1aca:	86 e0       	ldi	r24, 0x06	; 6
    1acc:	0e 94 c4 05 	call	0xb88	; 0xb88 <pinMode>
    pinMode(11, OUTPUT);
    1ad0:	61 e0       	ldi	r22, 0x01	; 1
    1ad2:	8b e0       	ldi	r24, 0x0B	; 11
    1ad4:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <pinMode>

00001ad8 <blink_left_arrow>:
}

void blink_left_arrow (unsigned int times)
{
    1ad8:	0f 93       	push	r16
    1ada:	1f 93       	push	r17
    1adc:	cf 93       	push	r28
    1ade:	df 93       	push	r29
    1ae0:	8c 01       	movw	r16, r24
    for (unsigned int loop = 0; loop < times; loop++) {
    1ae2:	c0 e0       	ldi	r28, 0x00	; 0
    1ae4:	d0 e0       	ldi	r29, 0x00	; 0
    1ae6:	c0 17       	cp	r28, r16
    1ae8:	d1 07       	cpc	r29, r17
    1aea:	31 f1       	breq	.+76     	; 0x1b38 <blink_left_arrow+0x60>
        digitalWrite(7, HIGH);
    1aec:	61 e0       	ldi	r22, 0x01	; 1
    1aee:	87 e0       	ldi	r24, 0x07	; 7
    1af0:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
        digitalWrite(3, HIGH);
    1af4:	61 e0       	ldi	r22, 0x01	; 1
    1af6:	83 e0       	ldi	r24, 0x03	; 3
    1af8:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
        digitalWrite(2, HIGH);
    1afc:	61 e0       	ldi	r22, 0x01	; 1
    1afe:	82 e0       	ldi	r24, 0x02	; 2
    1b00:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
        delay(500);
    1b04:	64 ef       	ldi	r22, 0xF4	; 244
    1b06:	71 e0       	ldi	r23, 0x01	; 1
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	0e 94 1b 05 	call	0xa36	; 0xa36 <delay>
        digitalWrite(7, LOW);
    1b10:	60 e0       	ldi	r22, 0x00	; 0
    1b12:	87 e0       	ldi	r24, 0x07	; 7
    1b14:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
        digitalWrite(3, LOW);
    1b18:	60 e0       	ldi	r22, 0x00	; 0
    1b1a:	83 e0       	ldi	r24, 0x03	; 3
    1b1c:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
        digitalWrite(2, LOW);
    1b20:	60 e0       	ldi	r22, 0x00	; 0
    1b22:	82 e0       	ldi	r24, 0x02	; 2
    1b24:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
        delay(500);
    1b28:	64 ef       	ldi	r22, 0xF4	; 244
    1b2a:	71 e0       	ldi	r23, 0x01	; 1
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	0e 94 1b 05 	call	0xa36	; 0xa36 <delay>
    pinMode(11, OUTPUT);
}

void blink_left_arrow (unsigned int times)
{
    for (unsigned int loop = 0; loop < times; loop++) {
    1b34:	21 96       	adiw	r28, 0x01	; 1
    1b36:	d7 cf       	rjmp	.-82     	; 0x1ae6 <blink_left_arrow+0xe>
        digitalWrite(7, LOW);
        digitalWrite(3, LOW);
        digitalWrite(2, LOW);
        delay(500);
    }
}
    1b38:	df 91       	pop	r29
    1b3a:	cf 91       	pop	r28
    1b3c:	1f 91       	pop	r17
    1b3e:	0f 91       	pop	r16
    1b40:	08 95       	ret

00001b42 <blink_right_arrow>:

void blink_right_arrow (unsigned int times)
{
    1b42:	0f 93       	push	r16
    1b44:	1f 93       	push	r17
    1b46:	cf 93       	push	r28
    1b48:	df 93       	push	r29
    1b4a:	8c 01       	movw	r16, r24
    for (unsigned int loop = 0; loop < times; loop++) {
    1b4c:	c0 e0       	ldi	r28, 0x00	; 0
    1b4e:	d0 e0       	ldi	r29, 0x00	; 0
    1b50:	c0 17       	cp	r28, r16
    1b52:	d1 07       	cpc	r29, r17
    1b54:	31 f1       	breq	.+76     	; 0x1ba2 <blink_right_arrow+0x60>
        digitalWrite(8, HIGH);
    1b56:	61 e0       	ldi	r22, 0x01	; 1
    1b58:	88 e0       	ldi	r24, 0x08	; 8
    1b5a:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
        digitalWrite(10, HIGH);
    1b5e:	61 e0       	ldi	r22, 0x01	; 1
    1b60:	8a e0       	ldi	r24, 0x0A	; 10
    1b62:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
        digitalWrite(5, HIGH);
    1b66:	61 e0       	ldi	r22, 0x01	; 1
    1b68:	85 e0       	ldi	r24, 0x05	; 5
    1b6a:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
        delay(500);
    1b6e:	64 ef       	ldi	r22, 0xF4	; 244
    1b70:	71 e0       	ldi	r23, 0x01	; 1
    1b72:	80 e0       	ldi	r24, 0x00	; 0
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	0e 94 1b 05 	call	0xa36	; 0xa36 <delay>
        digitalWrite(8, LOW);
    1b7a:	60 e0       	ldi	r22, 0x00	; 0
    1b7c:	88 e0       	ldi	r24, 0x08	; 8
    1b7e:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
        digitalWrite(10, LOW);
    1b82:	60 e0       	ldi	r22, 0x00	; 0
    1b84:	8a e0       	ldi	r24, 0x0A	; 10
    1b86:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
        digitalWrite(5, LOW);
    1b8a:	60 e0       	ldi	r22, 0x00	; 0
    1b8c:	85 e0       	ldi	r24, 0x05	; 5
    1b8e:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
        delay(500);
    1b92:	64 ef       	ldi	r22, 0xF4	; 244
    1b94:	71 e0       	ldi	r23, 0x01	; 1
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	0e 94 1b 05 	call	0xa36	; 0xa36 <delay>
    }
}

void blink_right_arrow (unsigned int times)
{
    for (unsigned int loop = 0; loop < times; loop++) {
    1b9e:	21 96       	adiw	r28, 0x01	; 1
    1ba0:	d7 cf       	rjmp	.-82     	; 0x1b50 <blink_right_arrow+0xe>
        digitalWrite(8, LOW);
        digitalWrite(10, LOW);
        digitalWrite(5, LOW);
        delay(500);
    }
}
    1ba2:	df 91       	pop	r29
    1ba4:	cf 91       	pop	r28
    1ba6:	1f 91       	pop	r17
    1ba8:	0f 91       	pop	r16
    1baa:	08 95       	ret

00001bac <blink_top_arrow>:

void blink_top_arrow (unsigned int times)
{
    1bac:	0f 93       	push	r16
    1bae:	1f 93       	push	r17
    1bb0:	cf 93       	push	r28
    1bb2:	df 93       	push	r29
    1bb4:	8c 01       	movw	r16, r24
    for (unsigned int loop = 0; loop < times; loop++) {
    1bb6:	c0 e0       	ldi	r28, 0x00	; 0
    1bb8:	d0 e0       	ldi	r29, 0x00	; 0
    1bba:	c0 17       	cp	r28, r16
    1bbc:	d1 07       	cpc	r29, r17
    1bbe:	31 f1       	breq	.+76     	; 0x1c0c <blink_top_arrow+0x60>
        digitalWrite(4, HIGH);
    1bc0:	61 e0       	ldi	r22, 0x01	; 1
    1bc2:	84 e0       	ldi	r24, 0x04	; 4
    1bc4:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
        digitalWrite(9, HIGH);
    1bc8:	61 e0       	ldi	r22, 0x01	; 1
    1bca:	89 e0       	ldi	r24, 0x09	; 9
    1bcc:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
        digitalWrite(6, HIGH);
    1bd0:	61 e0       	ldi	r22, 0x01	; 1
    1bd2:	86 e0       	ldi	r24, 0x06	; 6
    1bd4:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
        delay(500);
    1bd8:	64 ef       	ldi	r22, 0xF4	; 244
    1bda:	71 e0       	ldi	r23, 0x01	; 1
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	0e 94 1b 05 	call	0xa36	; 0xa36 <delay>
        digitalWrite(4, LOW);
    1be4:	60 e0       	ldi	r22, 0x00	; 0
    1be6:	84 e0       	ldi	r24, 0x04	; 4
    1be8:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
        digitalWrite(9, LOW);
    1bec:	60 e0       	ldi	r22, 0x00	; 0
    1bee:	89 e0       	ldi	r24, 0x09	; 9
    1bf0:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
        digitalWrite(6, LOW);
    1bf4:	60 e0       	ldi	r22, 0x00	; 0
    1bf6:	86 e0       	ldi	r24, 0x06	; 6
    1bf8:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
        delay(500);
    1bfc:	64 ef       	ldi	r22, 0xF4	; 244
    1bfe:	71 e0       	ldi	r23, 0x01	; 1
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	0e 94 1b 05 	call	0xa36	; 0xa36 <delay>
    }
}

void blink_top_arrow (unsigned int times)
{
    for (unsigned int loop = 0; loop < times; loop++) {
    1c08:	21 96       	adiw	r28, 0x01	; 1
    1c0a:	d7 cf       	rjmp	.-82     	; 0x1bba <blink_top_arrow+0xe>
        digitalWrite(4, LOW);
        digitalWrite(9, LOW);
        digitalWrite(6, LOW);
        delay(500);
    }
}
    1c0c:	df 91       	pop	r29
    1c0e:	cf 91       	pop	r28
    1c10:	1f 91       	pop	r17
    1c12:	0f 91       	pop	r16
    1c14:	08 95       	ret

00001c16 <blink_status_led>:

void blink_status_led(unsigned int times)
{
    1c16:	0f 93       	push	r16
    1c18:	1f 93       	push	r17
    1c1a:	cf 93       	push	r28
    1c1c:	df 93       	push	r29
    1c1e:	8c 01       	movw	r16, r24
    for (unsigned int loop = 0; loop < times; loop++) {
    1c20:	c0 e0       	ldi	r28, 0x00	; 0
    1c22:	d0 e0       	ldi	r29, 0x00	; 0
    1c24:	c0 17       	cp	r28, r16
    1c26:	d1 07       	cpc	r29, r17
    1c28:	b1 f0       	breq	.+44     	; 0x1c56 <blink_status_led+0x40>
        digitalWrite(11, HIGH);
    1c2a:	61 e0       	ldi	r22, 0x01	; 1
    1c2c:	8b e0       	ldi	r24, 0x0B	; 11
    1c2e:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
        delay(500);
    1c32:	64 ef       	ldi	r22, 0xF4	; 244
    1c34:	71 e0       	ldi	r23, 0x01	; 1
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	0e 94 1b 05 	call	0xa36	; 0xa36 <delay>
        digitalWrite(11, LOW);
    1c3e:	60 e0       	ldi	r22, 0x00	; 0
    1c40:	8b e0       	ldi	r24, 0x0B	; 11
    1c42:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
        delay(500);
    1c46:	64 ef       	ldi	r22, 0xF4	; 244
    1c48:	71 e0       	ldi	r23, 0x01	; 1
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	0e 94 1b 05 	call	0xa36	; 0xa36 <delay>
    }
}

void blink_status_led(unsigned int times)
{
    for (unsigned int loop = 0; loop < times; loop++) {
    1c52:	21 96       	adiw	r28, 0x01	; 1
    1c54:	e7 cf       	rjmp	.-50     	; 0x1c24 <blink_status_led+0xe>
        digitalWrite(11, HIGH);
        delay(500);
        digitalWrite(11, LOW);
        delay(500);
    }
    1c56:	df 91       	pop	r29
    1c58:	cf 91       	pop	r28
    1c5a:	1f 91       	pop	r17
    1c5c:	0f 91       	pop	r16
    1c5e:	08 95       	ret

00001c60 <initVariant>:
int atexit(void (*func)()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    1c60:	08 95       	ret

00001c62 <main>:

int main(void)
{
	init();
    1c62:	0e 94 43 05 	call	0xa86	; 0xa86 <init>

	initVariant();
    1c66:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1c6a:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <_Z5setupv>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1c6e:	c8 eb       	ldi	r28, 0xB8	; 184
    1c70:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    1c72:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <_Z4loopv>
		if (serialEventRun) serialEventRun();
    1c76:	20 97       	sbiw	r28, 0x00	; 0
    1c78:	e1 f3       	breq	.-8      	; 0x1c72 <main+0x10>
    1c7a:	0e 94 b8 00 	call	0x170	; 0x170 <_Z14serialEventRunv>
    1c7e:	f9 cf       	rjmp	.-14     	; 0x1c72 <main+0x10>

00001c80 <_Z41__static_initialization_and_destruction_0ii.part.1>:

    BTModu.writeConfig();
    BTModu.reset();

    // We're set up to allow anything to connect to us now.
}
    1c80:	cf 93       	push	r28
    1c82:	df 93       	push	r29
#ifndef BLEMate2_h
#define BLEMate2_h

#include "../Arduino/Arduino.h"

class BLEMate2
    1c84:	89 ea       	ldi	r24, 0xA9	; 169
    1c86:	93 e0       	ldi	r25, 0x03	; 3
    1c88:	89 2b       	or	r24, r25
    1c8a:	71 f4       	brne	.+28     	; 0x1ca8 <_Z41__static_initialization_and_destruction_0ii.part.1+0x28>
#include <avr/io.h>
#include <util/delay.h>

static String fullBuffer;
static String inputBuffer;
static String sendBuffer;
    1c8c:	8a ec       	ldi	r24, 0xCA	; 202
    1c8e:	93 e0       	ldi	r25, 0x03	; 3
    1c90:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
#include "../lib/SparkFun_BLEMate2/SparkFun_BLEMate2.h"
#include <avr/io.h>
#include <util/delay.h>

static String fullBuffer;
static String inputBuffer;
    1c94:	80 ed       	ldi	r24, 0xD0	; 208
    1c96:	93 e0       	ldi	r25, 0x03	; 3
    1c98:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
#include "../lib/Arduino/Arduino.h"
#include "../lib/SparkFun_BLEMate2/SparkFun_BLEMate2.h"
#include <avr/io.h>
#include <util/delay.h>

static String fullBuffer;
    1c9c:	86 ed       	ldi	r24, 0xD6	; 214
    1c9e:	93 e0       	ldi	r25, 0x03	; 3

    BTModu.writeConfig();
    BTModu.reset();

    // We're set up to allow anything to connect to us now.
}
    1ca0:	df 91       	pop	r29
    1ca2:	cf 91       	pop	r28
#include "../lib/Arduino/Arduino.h"
#include "../lib/SparkFun_BLEMate2/SparkFun_BLEMate2.h"
#include <avr/io.h>
#include <util/delay.h>

static String fullBuffer;
    1ca4:	0c 94 33 06 	jmp	0xc66	; 0xc66 <_ZN6StringD1Ev>
    1ca8:	c7 ec       	ldi	r28, 0xC7	; 199
    1caa:	d3 e0       	ldi	r29, 0x03	; 3
    1cac:	26 97       	sbiw	r28, 0x06	; 6
    1cae:	ce 01       	movw	r24, r28
    1cb0:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
    1cb4:	83 e0       	ldi	r24, 0x03	; 3
    1cb6:	c9 3a       	cpi	r28, 0xA9	; 169
    1cb8:	d8 07       	cpc	r29, r24
    1cba:	c1 f7       	brne	.-16     	; 0x1cac <_Z41__static_initialization_and_destruction_0ii.part.1+0x2c>
    1cbc:	e7 cf       	rjmp	.-50     	; 0x1c8c <_Z41__static_initialization_and_destruction_0ii.part.1+0xc>

00001cbe <_Z5setupv>:
int turnSignalSent = 0;

void setupPeripheralExample();

void setup()
{
    1cbe:	ff 92       	push	r15
    1cc0:	0f 93       	push	r16
    1cc2:	1f 93       	push	r17
    1cc4:	cf 93       	push	r28
    1cc6:	df 93       	push	r29
    init();
    1cc8:	0e 94 43 05 	call	0xa86	; 0xa86 <init>
    setup_leds();
    1ccc:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <setup_leds>
    blink_left_arrow(2);
    1cd0:	82 e0       	ldi	r24, 0x02	; 2
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <blink_left_arrow>
    blink_top_arrow(2);
    1cd8:	82 e0       	ldi	r24, 0x02	; 2
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <blink_top_arrow>
    blink_right_arrow(2);
    1ce0:	82 e0       	ldi	r24, 0x02	; 2
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <blink_right_arrow>
    blink_status_led(2);
    1ce8:	82 e0       	ldi	r24, 0x02	; 2
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <blink_status_led>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    1cf0:	26 e0       	ldi	r18, 0x06	; 6
    1cf2:	40 e8       	ldi	r20, 0x80	; 128
    1cf4:	55 e2       	ldi	r21, 0x25	; 37
    1cf6:	60 e0       	ldi	r22, 0x00	; 0
    1cf8:	70 e0       	ldi	r23, 0x00	; 0
    1cfa:	8c ee       	ldi	r24, 0xEC	; 236
    1cfc:	92 e0       	ldi	r25, 0x02	; 2
    1cfe:	0e 94 6e 01 	call	0x2dc	; 0x2dc <_ZN14HardwareSerial5beginEmh>
    Serial.begin(9600);           // This is the BC118 default baud rate.
    #ifdef DEBUG
    Serial.println("Serial has started...");
    1d02:	68 e8       	ldi	r22, 0x88	; 136
    1d04:	71 e0       	ldi	r23, 0x01	; 1
    1d06:	8c ee       	ldi	r24, 0xEC	; 236
    1d08:	92 e0       	ldi	r25, 0x02	; 2
    1d0a:	0e 94 38 03 	call	0x670	; 0x670 <_ZN5Print7printlnEPKc>
    1d0e:	ca e0       	ldi	r28, 0x0A	; 10
    1d10:	d0 e0       	ldi	r29, 0x00	; 0
    //  SUCCESS - What it says.


    boolean firstResetSuccess = false;
    boolean restoreSuccess = false;
    boolean writeConfigSuccess = false;
    1d12:	f1 2c       	mov	r15, r1
    //                  commands and parameters outside the built-ins.
    //  SUCCESS - What it says.


    boolean firstResetSuccess = false;
    boolean restoreSuccess = false;
    1d14:	00 e0       	ldi	r16, 0x00	; 0
    //                  This will probably only occur when you attempt to send
    //                  commands and parameters outside the built-ins.
    //  SUCCESS - What it says.


    boolean firstResetSuccess = false;
    1d16:	10 e0       	ldi	r17, 0x00	; 0
        //  the "SCN OFF" command after the reset is completed. Why is this important?
        //  Because if the device is in central mode, it *will* be scanning on reset.
        //  No way to change that. The text traffic generated by the scanning will
        //  interfere with the firmware on the Arduino properly identifying response
        //  strings from the BC118.
        if (BTModu.reset() == BLEMate2::SUCCESS)
    1d18:	87 ea       	ldi	r24, 0xA7	; 167
    1d1a:	93 e0       	ldi	r25, 0x03	; 3
    1d1c:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_ZN8BLEMate25resetEv>
    1d20:	81 30       	cpi	r24, 0x01	; 1
    1d22:	b1 f4       	brne	.+44     	; 0x1d50 <_Z5setupv+0x92>
        // restore() resets the module to factory defaults; you'll need to perform
        //  a writeConfig() and reset() to make those settings take effect. We don't
        //  do that automatically because there may be things the user wants to
        //  change before committing the settings to non-volatile memory and
        //  resetting.
        if (BTModu.restore() == BLEMate2::SUCCESS)
    1d24:	87 ea       	ldi	r24, 0xA7	; 167
    1d26:	93 e0       	ldi	r25, 0x03	; 3
    1d28:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <_ZN8BLEMate27restoreEv>
    1d2c:	81 30       	cpi	r24, 0x01	; 1
    1d2e:	c9 f4       	brne	.+50     	; 0x1d62 <_Z5setupv+0xa4>
        }
        // writeConfig() stores the current settings in non-volatile memory, so they
        //  will be in place on the next reboot of the module. Note that some, but
        //  not all, settings changes require a reboot. It's probably in general best
        //  to write/reset when changing anything.
        if (BTModu.writeConfig() == BLEMate2::SUCCESS)
    1d30:	87 ea       	ldi	r24, 0xA7	; 167
    1d32:	93 e0       	ldi	r25, 0x03	; 3
    1d34:	0e 94 8b 0a 	call	0x1516	; 0x1516 <_ZN8BLEMate211writeConfigEv>
    1d38:	81 30       	cpi	r24, 0x01	; 1
    1d3a:	c1 f4       	brne	.+48     	; 0x1d6c <_Z5setupv+0xae>
        // One more reset, to make the changes take effect.
        // NB!!!!!!!!!!!!! This write/reset thing is *really* important.
        //  The status command (STS) and the LEDs *will* lie to you and tell you that
        //  you are e.g. advertising or in central mode when in fact that is not the
        //  case and the module still needs to be reset before that is actually true.
        if (BTModu.reset() == BLEMate2::SUCCESS)
    1d3c:	87 ea       	ldi	r24, 0xA7	; 167
    1d3e:	93 e0       	ldi	r25, 0x03	; 3
    1d40:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_ZN8BLEMate25resetEv>
    1d44:	81 30       	cpi	r24, 0x01	; 1
    1d46:	01 f1       	breq	.+64     	; 0x1d88 <_Z5setupv+0xca>
        //  will be in place on the next reboot of the module. Note that some, but
        //  not all, settings changes require a reboot. It's probably in general best
        //  to write/reset when changing anything.
        if (BTModu.writeConfig() == BLEMate2::SUCCESS)
        {
            writeConfigSuccess = true;
    1d48:	ff 24       	eor	r15, r15
    1d4a:	f3 94       	inc	r15
        //  do that automatically because there may be things the user wants to
        //  change before committing the settings to non-volatile memory and
        //  resetting.
        if (BTModu.restore() == BLEMate2::SUCCESS)
        {
            restoreSuccess = true;
    1d4c:	01 e0       	ldi	r16, 0x01	; 1
    1d4e:	14 c0       	rjmp	.+40     	; 0x1d78 <_Z5setupv+0xba>
            goto setup_try_again;
        }

        setup_try_again:
        //#ifdef DEBUG
        if (!firstResetSuccess) {
    1d50:	11 11       	cpse	r17, r1
    1d52:	07 c0       	rjmp	.+14     	; 0x1d62 <_Z5setupv+0xa4>
            Serial.println("Module reset error!");
    1d54:	6e e9       	ldi	r22, 0x9E	; 158
    1d56:	71 e0       	ldi	r23, 0x01	; 1
    1d58:	8c ee       	ldi	r24, 0xEC	; 236
    1d5a:	92 e0       	ldi	r25, 0x02	; 2
    1d5c:	0e 94 38 03 	call	0x670	; 0x670 <_ZN5Print7printlnEPKc>
    1d60:	2a c0       	rjmp	.+84     	; 0x1db6 <_Z5setupv+0xf8>
            } else if (!restoreSuccess) {
    1d62:	01 11       	cpse	r16, r1
    1d64:	04 c0       	rjmp	.+8      	; 0x1d6e <_Z5setupv+0xb0>
            Serial.println("Module restore error!");
    1d66:	62 eb       	ldi	r22, 0xB2	; 178
    1d68:	71 e0       	ldi	r23, 0x01	; 1
    1d6a:	08 c0       	rjmp	.+16     	; 0x1d7c <_Z5setupv+0xbe>
        //  do that automatically because there may be things the user wants to
        //  change before committing the settings to non-volatile memory and
        //  resetting.
        if (BTModu.restore() == BLEMate2::SUCCESS)
        {
            restoreSuccess = true;
    1d6c:	01 e0       	ldi	r16, 0x01	; 1
        //#ifdef DEBUG
        if (!firstResetSuccess) {
            Serial.println("Module reset error!");
            } else if (!restoreSuccess) {
            Serial.println("Module restore error!");
            } else if (!writeConfigSuccess) {
    1d6e:	f1 10       	cpse	r15, r1
    1d70:	03 c0       	rjmp	.+6      	; 0x1d78 <_Z5setupv+0xba>
            Serial.println("Module write config error!");
    1d72:	68 ec       	ldi	r22, 0xC8	; 200
    1d74:	71 e0       	ldi	r23, 0x01	; 1
    1d76:	02 c0       	rjmp	.+4      	; 0x1d7c <_Z5setupv+0xbe>
            } else if (!secondResetSuccess) {
            Serial.println("Second module reset error!");
    1d78:	63 ee       	ldi	r22, 0xE3	; 227
    1d7a:	71 e0       	ldi	r23, 0x01	; 1
    1d7c:	8c ee       	ldi	r24, 0xEC	; 236
    1d7e:	92 e0       	ldi	r25, 0x02	; 2
    1d80:	0e 94 38 03 	call	0x670	; 0x670 <_ZN5Print7printlnEPKc>
    1d84:	11 e0       	ldi	r17, 0x01	; 1
    1d86:	17 c0       	rjmp	.+46     	; 0x1db6 <_Z5setupv+0xf8>
            } else {
            Serial.println("Reset/Restore/Write Config PASSED...");
    1d88:	6e ef       	ldi	r22, 0xFE	; 254
    1d8a:	71 e0       	ldi	r23, 0x01	; 1
    1d8c:	8c ee       	ldi	r24, 0xEC	; 236
    1d8e:	92 e0       	ldi	r25, 0x02	; 2
    1d90:	0e 94 38 03 	call	0x670	; 0x670 <_ZN5Print7printlnEPKc>
        #endif
        while(1) {}
    }
    
    #ifdef DEBUG
    Serial.println("Reset/Restore/Write Config DONE!");
    1d94:	61 e6       	ldi	r22, 0x61	; 97
    1d96:	72 e0       	ldi	r23, 0x02	; 2
    1d98:	8c ee       	ldi	r24, 0xEC	; 236
    1d9a:	92 e0       	ldi	r25, 0x02	; 2
    1d9c:	0e 94 38 03 	call	0x670	; 0x670 <_ZN5Print7printlnEPKc>
    #endif
    delay(1000);
    1da0:	68 ee       	ldi	r22, 0xE8	; 232
    1da2:	73 e0       	ldi	r23, 0x03	; 3
    1da4:	80 e0       	ldi	r24, 0x00	; 0
    1da6:	90 e0       	ldi	r25, 0x00	; 0
}
    1da8:	df 91       	pop	r29
    1daa:	cf 91       	pop	r28
    1dac:	1f 91       	pop	r17
    1dae:	0f 91       	pop	r16
    1db0:	ff 90       	pop	r15
    }
    
    #ifdef DEBUG
    Serial.println("Reset/Restore/Write Config DONE!");
    #endif
    delay(1000);
    1db2:	0c 94 1b 05 	jmp	0xa36	; 0xa36 <delay>
    1db6:	21 97       	sbiw	r28, 0x01	; 1

    boolean firstResetSuccess = false;
    boolean restoreSuccess = false;
    boolean writeConfigSuccess = false;
    boolean secondResetSuccess = false;
    for (int i = 0; i < 10; i++) {
    1db8:	20 97       	sbiw	r28, 0x00	; 0
    1dba:	09 f0       	breq	.+2      	; 0x1dbe <_Z5setupv+0x100>
    1dbc:	ad cf       	rjmp	.-166    	; 0x1d18 <_Z5setupv+0x5a>
        //#endif
    }
    if (!(firstResetSuccess && restoreSuccess && writeConfigSuccess && secondResetSuccess)) {
        // Setup failed after 10 tries
        #ifdef DEBUG
        Serial.println("Reset/Restore/Write Config FAILED 10 TIMES. STOP EXECUTION...");
    1dbe:	63 e2       	ldi	r22, 0x23	; 35
    1dc0:	72 e0       	ldi	r23, 0x02	; 2
    1dc2:	8c ee       	ldi	r24, 0xEC	; 236
    1dc4:	92 e0       	ldi	r25, 0x02	; 2
    1dc6:	0e 94 38 03 	call	0x670	; 0x670 <_ZN5Print7printlnEPKc>
    1dca:	ff cf       	rjmp	.-2      	; 0x1dca <_Z5setupv+0x10c>

00001dcc <_Z9find_text6StringS_>:
    Serial.println("Reset/Restore/Write Config DONE!");
    #endif
    delay(1000);
}

int find_text(String needle, String haystack) {
    1dcc:	9f 92       	push	r9
    1dce:	af 92       	push	r10
    1dd0:	bf 92       	push	r11
    1dd2:	cf 92       	push	r12
    1dd4:	df 92       	push	r13
    1dd6:	ef 92       	push	r14
    1dd8:	ff 92       	push	r15
    1dda:	0f 93       	push	r16
    1ddc:	1f 93       	push	r17
    1dde:	cf 93       	push	r28
    1de0:	df 93       	push	r29
    1de2:	00 d0       	rcall	.+0      	; 0x1de4 <_Z9find_text6StringS_+0x18>
    1de4:	00 d0       	rcall	.+0      	; 0x1de6 <_Z9find_text6StringS_+0x1a>
    1de6:	00 d0       	rcall	.+0      	; 0x1de8 <_Z9find_text6StringS_+0x1c>
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
    1dec:	6c 01       	movw	r12, r24
    1dee:	7b 01       	movw	r14, r22
    int foundpos = -1;
    for (unsigned int i = 0; (i < (haystack.length() - needle.length())); i++) {
    1df0:	00 e0       	ldi	r16, 0x00	; 0
    1df2:	10 e0       	ldi	r17, 0x00	; 0
    #endif
    delay(1000);
}

int find_text(String needle, String haystack) {
    int foundpos = -1;
    1df4:	aa 24       	eor	r10, r10
    1df6:	aa 94       	dec	r10
    1df8:	bb 24       	eor	r11, r11
    1dfa:	ba 94       	dec	r11
    Serial.println("Reset/Restore/Write Config DONE!");
    #endif
    delay(1000);
}

int find_text(String needle, String haystack) {
    1dfc:	f6 01       	movw	r30, r12
    1dfe:	24 81       	ldd	r18, Z+4	; 0x04
    1e00:	35 81       	ldd	r19, Z+5	; 0x05
    int foundpos = -1;
    for (unsigned int i = 0; (i < (haystack.length() - needle.length())); i++) {
    1e02:	f7 01       	movw	r30, r14
    1e04:	44 81       	ldd	r20, Z+4	; 0x04
    1e06:	55 81       	ldd	r21, Z+5	; 0x05
    1e08:	42 1b       	sub	r20, r18
    1e0a:	53 0b       	sbc	r21, r19
    1e0c:	04 17       	cp	r16, r20
    1e0e:	15 07       	cpc	r17, r21
    1e10:	b8 f4       	brcc	.+46     	; 0x1e40 <_Z9find_text6StringS_+0x74>
        if (haystack.substring(i,needle.length()+i) == needle) {
    1e12:	20 0f       	add	r18, r16
    1e14:	31 1f       	adc	r19, r17
    1e16:	a8 01       	movw	r20, r16
    1e18:	b7 01       	movw	r22, r14
    1e1a:	ce 01       	movw	r24, r28
    1e1c:	01 96       	adiw	r24, 0x01	; 1
    1e1e:	0e 94 65 08 	call	0x10ca	; 0x10ca <_ZNK6String9substringEjj>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
    1e22:	b6 01       	movw	r22, r12
    1e24:	ce 01       	movw	r24, r28
    1e26:	01 96       	adiw	r24, 0x01	; 1
    1e28:	0e 94 a2 07 	call	0xf44	; 0xf44 <_ZNK6String6equalsERKS_>
    1e2c:	98 2e       	mov	r9, r24
    1e2e:	ce 01       	movw	r24, r28
    1e30:	01 96       	adiw	r24, 0x01	; 1
    1e32:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
    1e36:	91 10       	cpse	r9, r1
            foundpos = i;
    1e38:	58 01       	movw	r10, r16
    delay(1000);
}

int find_text(String needle, String haystack) {
    int foundpos = -1;
    for (unsigned int i = 0; (i < (haystack.length() - needle.length())); i++) {
    1e3a:	0f 5f       	subi	r16, 0xFF	; 255
    1e3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e3e:	de cf       	rjmp	.-68     	; 0x1dfc <_Z9find_text6StringS_+0x30>
        if (haystack.substring(i,needle.length()+i) == needle) {
            foundpos = i;
        }
    }
    return foundpos;
}
    1e40:	c5 01       	movw	r24, r10
    1e42:	26 96       	adiw	r28, 0x06	; 6
    1e44:	0f b6       	in	r0, 0x3f	; 63
    1e46:	f8 94       	cli
    1e48:	de bf       	out	0x3e, r29	; 62
    1e4a:	0f be       	out	0x3f, r0	; 63
    1e4c:	cd bf       	out	0x3d, r28	; 61
    1e4e:	df 91       	pop	r29
    1e50:	cf 91       	pop	r28
    1e52:	1f 91       	pop	r17
    1e54:	0f 91       	pop	r16
    1e56:	ff 90       	pop	r15
    1e58:	ef 90       	pop	r14
    1e5a:	df 90       	pop	r13
    1e5c:	cf 90       	pop	r12
    1e5e:	bf 90       	pop	r11
    1e60:	af 90       	pop	r10
    1e62:	9f 90       	pop	r9
    1e64:	08 95       	ret

00001e66 <_GLOBAL__sub_I_BTModu>:
#include "../lib/Arduino/Arduino.h"
#include "../lib/SparkFun_BLEMate2/SparkFun_BLEMate2.h"
#include <avr/io.h>
#include <util/delay.h>

static String fullBuffer;
    1e66:	60 e2       	ldi	r22, 0x20	; 32
    1e68:	71 e0       	ldi	r23, 0x01	; 1
    1e6a:	86 ed       	ldi	r24, 0xD6	; 214
    1e6c:	93 e0       	ldi	r25, 0x03	; 3
    1e6e:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
static String inputBuffer;
    1e72:	60 e2       	ldi	r22, 0x20	; 32
    1e74:	71 e0       	ldi	r23, 0x01	; 1
    1e76:	80 ed       	ldi	r24, 0xD0	; 208
    1e78:	93 e0       	ldi	r25, 0x03	; 3
    1e7a:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
static String sendBuffer;
    1e7e:	60 e2       	ldi	r22, 0x20	; 32
    1e80:	71 e0       	ldi	r23, 0x01	; 1
    1e82:	8a ec       	ldi	r24, 0xCA	; 202
    1e84:	93 e0       	ldi	r25, 0x03	; 3
    1e86:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>

BLEMate2 BTModu(&Serial);
    1e8a:	6c ee       	ldi	r22, 0xEC	; 236
    1e8c:	72 e0       	ldi	r23, 0x02	; 2
    1e8e:	87 ea       	ldi	r24, 0xA7	; 167
    1e90:	93 e0       	ldi	r25, 0x03	; 3
    1e92:	0c 94 dc 08 	jmp	0x11b8	; 0x11b8 <_ZN8BLEMate2C1EP6Stream>

00001e96 <_GLOBAL__sub_D_BTModu>:

    BTModu.writeConfig();
    BTModu.reset();

    // We're set up to allow anything to connect to us now.
}
    1e96:	0c 94 40 0e 	jmp	0x1c80	; 0x1c80 <_Z41__static_initialization_and_destruction_0ii.part.1>

00001e9a <_Z4loopv>:
    }
    return foundpos;
}

void loop()
{
    1e9a:	0f 93       	push	r16
    1e9c:	1f 93       	push	r17
    1e9e:	cf 93       	push	r28
    1ea0:	df 93       	push	r29
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
    1ea6:	2c 97       	sbiw	r28, 0x0c	; 12
    1ea8:	0f b6       	in	r0, 0x3f	; 63
    1eaa:	f8 94       	cli
    1eac:	de bf       	out	0x3e, r29	; 62
    1eae:	0f be       	out	0x3f, r0	; 63
    1eb0:	cd bf       	out	0x3d, r28	; 61
    // The state machine for capturing that can be pretty easy: when we've read
    //  in \n\r, check to see if the string began with "RCV=". If yes, do
    //  something. If no, discard it.
        
    boolean done = false;
    while (!done && Serial.available() > 0)
    1eb2:	8c ee       	ldi	r24, 0xEC	; 236
    1eb4:	92 e0       	ldi	r25, 0x02	; 2
    1eb6:	0e 94 8b 00 	call	0x116	; 0x116 <_ZN14HardwareSerial9availableEv>
    1eba:	18 16       	cp	r1, r24
    1ebc:	19 06       	cpc	r1, r25
    1ebe:	0c f4       	brge	.+2      	; 0x1ec2 <_Z4loopv+0x28>
    1ec0:	eb c0       	rjmp	.+470    	; 0x2098 <_Z4loopv+0x1fe>
    // We'll probably see a lot of lines that end with \n\r- that's the default
    //  line ending for all the connect info messages, for instance. We can
    //  ignore all of them that don't start with "RCV=". Remember to clear your
    //  String object after you find \n\r!!!

    int rcv_pos = find_text(String("RCV="), inputBuffer);
    1ec2:	60 ed       	ldi	r22, 0xD0	; 208
    1ec4:	73 e0       	ldi	r23, 0x03	; 3
    1ec6:	ce 01       	movw	r24, r28
    1ec8:	01 96       	adiw	r24, 0x01	; 1
    1eca:	0e 94 ce 06 	call	0xd9c	; 0xd9c <_ZN6StringC1ERKS_>
    1ece:	68 ea       	ldi	r22, 0xA8	; 168
    1ed0:	72 e0       	ldi	r23, 0x02	; 2
    1ed2:	ce 01       	movw	r24, r28
    1ed4:	07 96       	adiw	r24, 0x07	; 7
    1ed6:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
    1eda:	be 01       	movw	r22, r28
    1edc:	6f 5f       	subi	r22, 0xFF	; 255
    1ede:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee0:	ce 01       	movw	r24, r28
    1ee2:	07 96       	adiw	r24, 0x07	; 7
    1ee4:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <_Z9find_text6StringS_>
    1ee8:	8c 01       	movw	r16, r24
    1eea:	ce 01       	movw	r24, r28
    1eec:	07 96       	adiw	r24, 0x07	; 7
    1eee:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
    1ef2:	ce 01       	movw	r24, r28
    1ef4:	01 96       	adiw	r24, 0x01	; 1
    1ef6:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
    if (rcv_pos == -1) {
    1efa:	0f 3f       	cpi	r16, 0xFF	; 255
    1efc:	2f ef       	ldi	r18, 0xFF	; 255
    1efe:	12 07       	cpc	r17, r18
    1f00:	09 f4       	brne	.+2      	; 0x1f04 <_Z4loopv+0x6a>
    1f02:	72 c0       	rjmp	.+228    	; 0x1fe8 <_Z4loopv+0x14e>
        inputBuffer = "";
    } else {
        inputBuffer.remove(rcv_pos,4); // Remove RCV= from front.
    1f04:	44 e0       	ldi	r20, 0x04	; 4
    1f06:	50 e0       	ldi	r21, 0x00	; 0
    1f08:	b8 01       	movw	r22, r16
    1f0a:	80 ed       	ldi	r24, 0xD0	; 208
    1f0c:	93 e0       	ldi	r25, 0x03	; 3
    1f0e:	0e 94 aa 08 	call	0x1154	; 0x1154 <_ZN6String6removeEjj>
        int line_end_pos = find_text(String("\n\r"), inputBuffer);
    1f12:	60 ed       	ldi	r22, 0xD0	; 208
    1f14:	73 e0       	ldi	r23, 0x03	; 3
    1f16:	ce 01       	movw	r24, r28
    1f18:	01 96       	adiw	r24, 0x01	; 1
    1f1a:	0e 94 ce 06 	call	0xd9c	; 0xd9c <_ZN6StringC1ERKS_>
    1f1e:	6e e1       	ldi	r22, 0x1E	; 30
    1f20:	71 e0       	ldi	r23, 0x01	; 1
    1f22:	ce 01       	movw	r24, r28
    1f24:	07 96       	adiw	r24, 0x07	; 7
    1f26:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
    1f2a:	be 01       	movw	r22, r28
    1f2c:	6f 5f       	subi	r22, 0xFF	; 255
    1f2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f30:	ce 01       	movw	r24, r28
    1f32:	07 96       	adiw	r24, 0x07	; 7
    1f34:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <_Z9find_text6StringS_>
    1f38:	8c 01       	movw	r16, r24
    1f3a:	ce 01       	movw	r24, r28
    1f3c:	07 96       	adiw	r24, 0x07	; 7
    1f3e:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
    1f42:	ce 01       	movw	r24, r28
    1f44:	01 96       	adiw	r24, 0x01	; 1
    1f46:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
        inputBuffer.remove((unsigned int)line_end_pos);
    1f4a:	b8 01       	movw	r22, r16
    1f4c:	80 ed       	ldi	r24, 0xD0	; 208
    1f4e:	93 e0       	ldi	r25, 0x03	; 3
    1f50:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN6String6removeEj>
        #ifdef DEBUG
        Serial.println(inputBuffer);
    1f54:	60 ed       	ldi	r22, 0xD0	; 208
    1f56:	73 e0       	ldi	r23, 0x03	; 3
    1f58:	8c ee       	ldi	r24, 0xEC	; 236
    1f5a:	92 e0       	ldi	r25, 0x02	; 2
    1f5c:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN5Print7printlnERK6String>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    1f60:	6d ea       	ldi	r22, 0xAD	; 173
    1f62:	72 e0       	ldi	r23, 0x02	; 2
    1f64:	80 ed       	ldi	r24, 0xD0	; 208
    1f66:	93 e0       	ldi	r25, 0x03	; 3
    1f68:	0e 94 b5 07 	call	0xf6a	; 0xf6a <_ZNK6String6equalsEPKc>
        #endif
            
        if (inputBuffer == "LP1") {
    1f6c:	88 23       	and	r24, r24
    1f6e:	59 f0       	breq	.+22     	; 0x1f86 <_Z4loopv+0xec>
                Serial.println("NAV SAYS LEFT");
    1f70:	61 eb       	ldi	r22, 0xB1	; 177
    1f72:	72 e0       	ldi	r23, 0x02	; 2
    1f74:	8c ee       	ldi	r24, 0xEC	; 236
    1f76:	92 e0       	ldi	r25, 0x02	; 2
    1f78:	0e 94 38 03 	call	0x670	; 0x670 <_ZN5Print7printlnEPKc>
                blink_left_arrow(10);
    1f7c:	8a e0       	ldi	r24, 0x0A	; 10
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <blink_left_arrow>
    1f84:	2b c0       	rjmp	.+86     	; 0x1fdc <_Z4loopv+0x142>
    1f86:	6f eb       	ldi	r22, 0xBF	; 191
    1f88:	72 e0       	ldi	r23, 0x02	; 2
    1f8a:	80 ed       	ldi	r24, 0xD0	; 208
    1f8c:	93 e0       	ldi	r25, 0x03	; 3
    1f8e:	0e 94 b5 07 	call	0xf6a	; 0xf6a <_ZNK6String6equalsEPKc>
        } else if (inputBuffer == "RP2") {
    1f92:	88 23       	and	r24, r24
    1f94:	59 f0       	breq	.+22     	; 0x1fac <_Z4loopv+0x112>
                Serial.println("NAV SAYS RIGHT");
    1f96:	63 ec       	ldi	r22, 0xC3	; 195
    1f98:	72 e0       	ldi	r23, 0x02	; 2
    1f9a:	8c ee       	ldi	r24, 0xEC	; 236
    1f9c:	92 e0       	ldi	r25, 0x02	; 2
    1f9e:	0e 94 38 03 	call	0x670	; 0x670 <_ZN5Print7printlnEPKc>
                blink_right_arrow(10);
    1fa2:	8a e0       	ldi	r24, 0x0A	; 10
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <blink_right_arrow>
    1faa:	18 c0       	rjmp	.+48     	; 0x1fdc <_Z4loopv+0x142>
    1fac:	62 ed       	ldi	r22, 0xD2	; 210
    1fae:	72 e0       	ldi	r23, 0x02	; 2
    1fb0:	80 ed       	ldi	r24, 0xD0	; 208
    1fb2:	93 e0       	ldi	r25, 0x03	; 3
    1fb4:	0e 94 b5 07 	call	0xf6a	; 0xf6a <_ZNK6String6equalsEPKc>
        } else if (inputBuffer == "LP3") {
    1fb8:	88 23       	and	r24, r24
    1fba:	81 f0       	breq	.+32     	; 0x1fdc <_Z4loopv+0x142>
                Serial.println("NAV SAYS STRAIGHT");
    1fbc:	66 ed       	ldi	r22, 0xD6	; 214
    1fbe:	72 e0       	ldi	r23, 0x02	; 2
    1fc0:	8c ee       	ldi	r24, 0xEC	; 236
    1fc2:	92 e0       	ldi	r25, 0x02	; 2
    1fc4:	0e 94 38 03 	call	0x670	; 0x670 <_ZN5Print7printlnEPKc>
                blink_top_arrow(10);
    1fc8:	8a e0       	ldi	r24, 0x0A	; 10
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <blink_top_arrow>
                delay(1000);
    1fd0:	68 ee       	ldi	r22, 0xE8	; 232
    1fd2:	73 e0       	ldi	r23, 0x03	; 3
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	0e 94 1b 05 	call	0xa36	; 0xa36 <delay>
	unsigned char concat(double num);
	unsigned char concat(const __FlashStringHelper * str);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    1fdc:	60 ed       	ldi	r22, 0xD0	; 208
    1fde:	73 e0       	ldi	r23, 0x03	; 3
    1fe0:	86 ed       	ldi	r24, 0xD6	; 214
    1fe2:	93 e0       	ldi	r25, 0x03	; 3
    1fe4:	0e 94 1b 07 	call	0xe36	; 0xe36 <_ZN6String6concatERKS_>
        }
        
        fullBuffer += inputBuffer;
        inputBuffer = "";
    1fe8:	60 e2       	ldi	r22, 0x20	; 32
    1fea:	71 e0       	ldi	r23, 0x01	; 1
    1fec:	80 ed       	ldi	r24, 0xD0	; 208
    1fee:	93 e0       	ldi	r25, 0x03	; 3
    1ff0:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZN6StringaSEPKc>
            
    }
        
    rightFlexReading = analogRead(RIGHTFLEXPIN);
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	0e 94 7e 05 	call	0xafc	; 0xafc <analogRead>
    1ffa:	90 93 a6 03 	sts	0x03A6, r25
    1ffe:	80 93 a5 03 	sts	0x03A5, r24
    //Serial.print("Right Flex Reading: ");
    //Serial.println(rightFlexReading);
    if (rightFlexReading > 530 && !turnSignalSent) {
    2002:	83 31       	cpi	r24, 0x13	; 19
    2004:	22 e0       	ldi	r18, 0x02	; 2
    2006:	92 07       	cpc	r25, r18
    2008:	4c f1       	brlt	.+82     	; 0x205c <_Z4loopv+0x1c2>
    200a:	80 91 a3 03 	lds	r24, 0x03A3
    200e:	90 91 a4 03 	lds	r25, 0x03A4
    2012:	89 2b       	or	r24, r25
    2014:	81 f5       	brne	.+96     	; 0x2076 <_Z4loopv+0x1dc>
        Serial.flush();
    2016:	8c ee       	ldi	r24, 0xEC	; 236
    2018:	92 e0       	ldi	r25, 0x02	; 2
    201a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_ZN14HardwareSerial5flushEv>
        sendBuffer.concat(BPRGHEADER);
    201e:	68 ee       	ldi	r22, 0xE8	; 232
    2020:	72 e0       	ldi	r23, 0x02	; 2
    2022:	8a ec       	ldi	r24, 0xCA	; 202
    2024:	93 e0       	ldi	r25, 0x03	; 3
    2026:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN6String6concatEPKc>
        sendBuffer.concat("2");
    202a:	61 ec       	ldi	r22, 0xC1	; 193
    202c:	72 e0       	ldi	r23, 0x02	; 2
    202e:	8a ec       	ldi	r24, 0xCA	; 202
    2030:	93 e0       	ldi	r25, 0x03	; 3
    2032:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN6String6concatEPKc>
        BTModu.sendData(sendBuffer);
    2036:	6a ec       	ldi	r22, 0xCA	; 202
    2038:	73 e0       	ldi	r23, 0x03	; 3
    203a:	87 ea       	ldi	r24, 0xA7	; 167
    203c:	93 e0       	ldi	r25, 0x03	; 3
    203e:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <_ZN8BLEMate28sendDataER6String>
        sendBuffer = "";
    2042:	60 e2       	ldi	r22, 0x20	; 32
    2044:	71 e0       	ldi	r23, 0x01	; 1
    2046:	8a ec       	ldi	r24, 0xCA	; 202
    2048:	93 e0       	ldi	r25, 0x03	; 3
    204a:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZN6StringaSEPKc>
        turnSignalSent = 1;
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	90 93 a4 03 	sts	0x03A4, r25
    2056:	80 93 a3 03 	sts	0x03A3, r24
    205a:	0d c0       	rjmp	.+26     	; 0x2076 <_Z4loopv+0x1dc>
    } else if (rightFlexReading < 530 && turnSignalSent) {
    205c:	82 31       	cpi	r24, 0x12	; 18
    205e:	92 40       	sbci	r25, 0x02	; 2
    2060:	51 f0       	breq	.+20     	; 0x2076 <_Z4loopv+0x1dc>
    2062:	80 91 a3 03 	lds	r24, 0x03A3
    2066:	90 91 a4 03 	lds	r25, 0x03A4
    206a:	89 2b       	or	r24, r25
    206c:	21 f0       	breq	.+8      	; 0x2076 <_Z4loopv+0x1dc>
        turnSignalSent = 0;
    206e:	10 92 a4 03 	sts	0x03A4, r1
    2072:	10 92 a3 03 	sts	0x03A3, r1
    }
    delay(500);
    2076:	64 ef       	ldi	r22, 0xF4	; 244
    2078:	71 e0       	ldi	r23, 0x01	; 1
    207a:	80 e0       	ldi	r24, 0x00	; 0
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	0e 94 1b 05 	call	0xa36	; 0xa36 <delay>
}
    2082:	2c 96       	adiw	r28, 0x0c	; 12
    2084:	0f b6       	in	r0, 0x3f	; 63
    2086:	f8 94       	cli
    2088:	de bf       	out	0x3e, r29	; 62
    208a:	0f be       	out	0x3f, r0	; 63
    208c:	cd bf       	out	0x3d, r28	; 61
    208e:	df 91       	pop	r29
    2090:	cf 91       	pop	r28
    2092:	1f 91       	pop	r17
    2094:	0f 91       	pop	r16
    2096:	08 95       	ret
    //  something. If no, discard it.
        
    boolean done = false;
    while (!done && Serial.available() > 0)
    {
        digitalWrite(11,HIGH);
    2098:	61 e0       	ldi	r22, 0x01	; 1
    209a:	8b e0       	ldi	r24, 0x0B	; 11
    209c:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
        inputBuffer.concat((char)Serial.read());
    20a0:	8c ee       	ldi	r24, 0xEC	; 236
    20a2:	92 e0       	ldi	r25, 0x02	; 2
    20a4:	0e 94 a4 00 	call	0x148	; 0x148 <_ZN14HardwareSerial4readEv>
    20a8:	68 2f       	mov	r22, r24
    20aa:	80 ed       	ldi	r24, 0xD0	; 208
    20ac:	93 e0       	ldi	r25, 0x03	; 3
    20ae:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN6String6concatEc>
        digitalWrite(11,LOW);
    20b2:	60 e0       	ldi	r22, 0x00	; 0
    20b4:	8b e0       	ldi	r24, 0x0B	; 11
    20b6:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
        if (find_text(String("\n\r"), inputBuffer) != -1) {
    20ba:	60 ed       	ldi	r22, 0xD0	; 208
    20bc:	73 e0       	ldi	r23, 0x03	; 3
    20be:	ce 01       	movw	r24, r28
    20c0:	01 96       	adiw	r24, 0x01	; 1
    20c2:	0e 94 ce 06 	call	0xd9c	; 0xd9c <_ZN6StringC1ERKS_>
    20c6:	6e e1       	ldi	r22, 0x1E	; 30
    20c8:	71 e0       	ldi	r23, 0x01	; 1
    20ca:	ce 01       	movw	r24, r28
    20cc:	07 96       	adiw	r24, 0x07	; 7
    20ce:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN6StringC1EPKc>
    20d2:	be 01       	movw	r22, r28
    20d4:	6f 5f       	subi	r22, 0xFF	; 255
    20d6:	7f 4f       	sbci	r23, 0xFF	; 255
    20d8:	ce 01       	movw	r24, r28
    20da:	07 96       	adiw	r24, 0x07	; 7
    20dc:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <_Z9find_text6StringS_>
    20e0:	8c 01       	movw	r16, r24
    20e2:	ce 01       	movw	r24, r28
    20e4:	07 96       	adiw	r24, 0x07	; 7
    20e6:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
    20ea:	ce 01       	movw	r24, r28
    20ec:	01 96       	adiw	r24, 0x01	; 1
    20ee:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN6StringD1Ev>
    20f2:	0f 3f       	cpi	r16, 0xFF	; 255
    20f4:	1f 4f       	sbci	r17, 0xFF	; 255
    20f6:	09 f0       	breq	.+2      	; 0x20fa <_Z4loopv+0x260>
    20f8:	e4 ce       	rjmp	.-568    	; 0x1ec2 <_Z4loopv+0x28>
    20fa:	db ce       	rjmp	.-586    	; 0x1eb2 <_Z4loopv+0x18>

000020fc <__udivmodsi4>:
    20fc:	a1 e2       	ldi	r26, 0x21	; 33
    20fe:	1a 2e       	mov	r1, r26
    2100:	aa 1b       	sub	r26, r26
    2102:	bb 1b       	sub	r27, r27
    2104:	fd 01       	movw	r30, r26
    2106:	0d c0       	rjmp	.+26     	; 0x2122 <__udivmodsi4_ep>

00002108 <__udivmodsi4_loop>:
    2108:	aa 1f       	adc	r26, r26
    210a:	bb 1f       	adc	r27, r27
    210c:	ee 1f       	adc	r30, r30
    210e:	ff 1f       	adc	r31, r31
    2110:	a2 17       	cp	r26, r18
    2112:	b3 07       	cpc	r27, r19
    2114:	e4 07       	cpc	r30, r20
    2116:	f5 07       	cpc	r31, r21
    2118:	20 f0       	brcs	.+8      	; 0x2122 <__udivmodsi4_ep>
    211a:	a2 1b       	sub	r26, r18
    211c:	b3 0b       	sbc	r27, r19
    211e:	e4 0b       	sbc	r30, r20
    2120:	f5 0b       	sbc	r31, r21

00002122 <__udivmodsi4_ep>:
    2122:	66 1f       	adc	r22, r22
    2124:	77 1f       	adc	r23, r23
    2126:	88 1f       	adc	r24, r24
    2128:	99 1f       	adc	r25, r25
    212a:	1a 94       	dec	r1
    212c:	69 f7       	brne	.-38     	; 0x2108 <__udivmodsi4_loop>
    212e:	60 95       	com	r22
    2130:	70 95       	com	r23
    2132:	80 95       	com	r24
    2134:	90 95       	com	r25
    2136:	9b 01       	movw	r18, r22
    2138:	ac 01       	movw	r20, r24
    213a:	bd 01       	movw	r22, r26
    213c:	cf 01       	movw	r24, r30
    213e:	08 95       	ret

00002140 <__tablejump2__>:
    2140:	ee 0f       	add	r30, r30
    2142:	ff 1f       	adc	r31, r31

00002144 <__tablejump__>:
    2144:	05 90       	lpm	r0, Z+
    2146:	f4 91       	lpm	r31, Z
    2148:	e0 2d       	mov	r30, r0
    214a:	09 94       	ijmp

0000214c <malloc>:
    214c:	cf 93       	push	r28
    214e:	df 93       	push	r29
    2150:	82 30       	cpi	r24, 0x02	; 2
    2152:	91 05       	cpc	r25, r1
    2154:	10 f4       	brcc	.+4      	; 0x215a <malloc+0xe>
    2156:	82 e0       	ldi	r24, 0x02	; 2
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	e0 91 de 03 	lds	r30, 0x03DE
    215e:	f0 91 df 03 	lds	r31, 0x03DF
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	a0 e0       	ldi	r26, 0x00	; 0
    2168:	b0 e0       	ldi	r27, 0x00	; 0
    216a:	30 97       	sbiw	r30, 0x00	; 0
    216c:	39 f1       	breq	.+78     	; 0x21bc <malloc+0x70>
    216e:	40 81       	ld	r20, Z
    2170:	51 81       	ldd	r21, Z+1	; 0x01
    2172:	48 17       	cp	r20, r24
    2174:	59 07       	cpc	r21, r25
    2176:	b8 f0       	brcs	.+46     	; 0x21a6 <malloc+0x5a>
    2178:	48 17       	cp	r20, r24
    217a:	59 07       	cpc	r21, r25
    217c:	71 f4       	brne	.+28     	; 0x219a <malloc+0x4e>
    217e:	82 81       	ldd	r24, Z+2	; 0x02
    2180:	93 81       	ldd	r25, Z+3	; 0x03
    2182:	10 97       	sbiw	r26, 0x00	; 0
    2184:	29 f0       	breq	.+10     	; 0x2190 <malloc+0x44>
    2186:	13 96       	adiw	r26, 0x03	; 3
    2188:	9c 93       	st	X, r25
    218a:	8e 93       	st	-X, r24
    218c:	12 97       	sbiw	r26, 0x02	; 2
    218e:	2c c0       	rjmp	.+88     	; 0x21e8 <malloc+0x9c>
    2190:	90 93 df 03 	sts	0x03DF, r25
    2194:	80 93 de 03 	sts	0x03DE, r24
    2198:	27 c0       	rjmp	.+78     	; 0x21e8 <malloc+0x9c>
    219a:	21 15       	cp	r18, r1
    219c:	31 05       	cpc	r19, r1
    219e:	31 f0       	breq	.+12     	; 0x21ac <malloc+0x60>
    21a0:	42 17       	cp	r20, r18
    21a2:	53 07       	cpc	r21, r19
    21a4:	18 f0       	brcs	.+6      	; 0x21ac <malloc+0x60>
    21a6:	a9 01       	movw	r20, r18
    21a8:	db 01       	movw	r26, r22
    21aa:	01 c0       	rjmp	.+2      	; 0x21ae <malloc+0x62>
    21ac:	ef 01       	movw	r28, r30
    21ae:	9a 01       	movw	r18, r20
    21b0:	bd 01       	movw	r22, r26
    21b2:	df 01       	movw	r26, r30
    21b4:	02 80       	ldd	r0, Z+2	; 0x02
    21b6:	f3 81       	ldd	r31, Z+3	; 0x03
    21b8:	e0 2d       	mov	r30, r0
    21ba:	d7 cf       	rjmp	.-82     	; 0x216a <malloc+0x1e>
    21bc:	21 15       	cp	r18, r1
    21be:	31 05       	cpc	r19, r1
    21c0:	f9 f0       	breq	.+62     	; 0x2200 <malloc+0xb4>
    21c2:	28 1b       	sub	r18, r24
    21c4:	39 0b       	sbc	r19, r25
    21c6:	24 30       	cpi	r18, 0x04	; 4
    21c8:	31 05       	cpc	r19, r1
    21ca:	80 f4       	brcc	.+32     	; 0x21ec <malloc+0xa0>
    21cc:	8a 81       	ldd	r24, Y+2	; 0x02
    21ce:	9b 81       	ldd	r25, Y+3	; 0x03
    21d0:	61 15       	cp	r22, r1
    21d2:	71 05       	cpc	r23, r1
    21d4:	21 f0       	breq	.+8      	; 0x21de <malloc+0x92>
    21d6:	fb 01       	movw	r30, r22
    21d8:	93 83       	std	Z+3, r25	; 0x03
    21da:	82 83       	std	Z+2, r24	; 0x02
    21dc:	04 c0       	rjmp	.+8      	; 0x21e6 <malloc+0x9a>
    21de:	90 93 df 03 	sts	0x03DF, r25
    21e2:	80 93 de 03 	sts	0x03DE, r24
    21e6:	fe 01       	movw	r30, r28
    21e8:	32 96       	adiw	r30, 0x02	; 2
    21ea:	44 c0       	rjmp	.+136    	; 0x2274 <malloc+0x128>
    21ec:	fe 01       	movw	r30, r28
    21ee:	e2 0f       	add	r30, r18
    21f0:	f3 1f       	adc	r31, r19
    21f2:	81 93       	st	Z+, r24
    21f4:	91 93       	st	Z+, r25
    21f6:	22 50       	subi	r18, 0x02	; 2
    21f8:	31 09       	sbc	r19, r1
    21fa:	39 83       	std	Y+1, r19	; 0x01
    21fc:	28 83       	st	Y, r18
    21fe:	3a c0       	rjmp	.+116    	; 0x2274 <malloc+0x128>
    2200:	20 91 dc 03 	lds	r18, 0x03DC
    2204:	30 91 dd 03 	lds	r19, 0x03DD
    2208:	23 2b       	or	r18, r19
    220a:	41 f4       	brne	.+16     	; 0x221c <malloc+0xd0>
    220c:	20 91 02 01 	lds	r18, 0x0102
    2210:	30 91 03 01 	lds	r19, 0x0103
    2214:	30 93 dd 03 	sts	0x03DD, r19
    2218:	20 93 dc 03 	sts	0x03DC, r18
    221c:	20 91 00 01 	lds	r18, 0x0100
    2220:	30 91 01 01 	lds	r19, 0x0101
    2224:	21 15       	cp	r18, r1
    2226:	31 05       	cpc	r19, r1
    2228:	41 f4       	brne	.+16     	; 0x223a <malloc+0xee>
    222a:	2d b7       	in	r18, 0x3d	; 61
    222c:	3e b7       	in	r19, 0x3e	; 62
    222e:	40 91 04 01 	lds	r20, 0x0104
    2232:	50 91 05 01 	lds	r21, 0x0105
    2236:	24 1b       	sub	r18, r20
    2238:	35 0b       	sbc	r19, r21
    223a:	e0 91 dc 03 	lds	r30, 0x03DC
    223e:	f0 91 dd 03 	lds	r31, 0x03DD
    2242:	e2 17       	cp	r30, r18
    2244:	f3 07       	cpc	r31, r19
    2246:	a0 f4       	brcc	.+40     	; 0x2270 <malloc+0x124>
    2248:	2e 1b       	sub	r18, r30
    224a:	3f 0b       	sbc	r19, r31
    224c:	28 17       	cp	r18, r24
    224e:	39 07       	cpc	r19, r25
    2250:	78 f0       	brcs	.+30     	; 0x2270 <malloc+0x124>
    2252:	ac 01       	movw	r20, r24
    2254:	4e 5f       	subi	r20, 0xFE	; 254
    2256:	5f 4f       	sbci	r21, 0xFF	; 255
    2258:	24 17       	cp	r18, r20
    225a:	35 07       	cpc	r19, r21
    225c:	48 f0       	brcs	.+18     	; 0x2270 <malloc+0x124>
    225e:	4e 0f       	add	r20, r30
    2260:	5f 1f       	adc	r21, r31
    2262:	50 93 dd 03 	sts	0x03DD, r21
    2266:	40 93 dc 03 	sts	0x03DC, r20
    226a:	81 93       	st	Z+, r24
    226c:	91 93       	st	Z+, r25
    226e:	02 c0       	rjmp	.+4      	; 0x2274 <malloc+0x128>
    2270:	e0 e0       	ldi	r30, 0x00	; 0
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	cf 01       	movw	r24, r30
    2276:	df 91       	pop	r29
    2278:	cf 91       	pop	r28
    227a:	08 95       	ret

0000227c <free>:
    227c:	cf 93       	push	r28
    227e:	df 93       	push	r29
    2280:	00 97       	sbiw	r24, 0x00	; 0
    2282:	09 f4       	brne	.+2      	; 0x2286 <free+0xa>
    2284:	87 c0       	rjmp	.+270    	; 0x2394 <free+0x118>
    2286:	fc 01       	movw	r30, r24
    2288:	32 97       	sbiw	r30, 0x02	; 2
    228a:	13 82       	std	Z+3, r1	; 0x03
    228c:	12 82       	std	Z+2, r1	; 0x02
    228e:	c0 91 de 03 	lds	r28, 0x03DE
    2292:	d0 91 df 03 	lds	r29, 0x03DF
    2296:	20 97       	sbiw	r28, 0x00	; 0
    2298:	81 f4       	brne	.+32     	; 0x22ba <free+0x3e>
    229a:	20 81       	ld	r18, Z
    229c:	31 81       	ldd	r19, Z+1	; 0x01
    229e:	28 0f       	add	r18, r24
    22a0:	39 1f       	adc	r19, r25
    22a2:	80 91 dc 03 	lds	r24, 0x03DC
    22a6:	90 91 dd 03 	lds	r25, 0x03DD
    22aa:	82 17       	cp	r24, r18
    22ac:	93 07       	cpc	r25, r19
    22ae:	79 f5       	brne	.+94     	; 0x230e <free+0x92>
    22b0:	f0 93 dd 03 	sts	0x03DD, r31
    22b4:	e0 93 dc 03 	sts	0x03DC, r30
    22b8:	6d c0       	rjmp	.+218    	; 0x2394 <free+0x118>
    22ba:	de 01       	movw	r26, r28
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	ae 17       	cp	r26, r30
    22c2:	bf 07       	cpc	r27, r31
    22c4:	50 f4       	brcc	.+20     	; 0x22da <free+0x5e>
    22c6:	12 96       	adiw	r26, 0x02	; 2
    22c8:	4d 91       	ld	r20, X+
    22ca:	5c 91       	ld	r21, X
    22cc:	13 97       	sbiw	r26, 0x03	; 3
    22ce:	9d 01       	movw	r18, r26
    22d0:	41 15       	cp	r20, r1
    22d2:	51 05       	cpc	r21, r1
    22d4:	09 f1       	breq	.+66     	; 0x2318 <free+0x9c>
    22d6:	da 01       	movw	r26, r20
    22d8:	f3 cf       	rjmp	.-26     	; 0x22c0 <free+0x44>
    22da:	b3 83       	std	Z+3, r27	; 0x03
    22dc:	a2 83       	std	Z+2, r26	; 0x02
    22de:	40 81       	ld	r20, Z
    22e0:	51 81       	ldd	r21, Z+1	; 0x01
    22e2:	84 0f       	add	r24, r20
    22e4:	95 1f       	adc	r25, r21
    22e6:	8a 17       	cp	r24, r26
    22e8:	9b 07       	cpc	r25, r27
    22ea:	71 f4       	brne	.+28     	; 0x2308 <free+0x8c>
    22ec:	8d 91       	ld	r24, X+
    22ee:	9c 91       	ld	r25, X
    22f0:	11 97       	sbiw	r26, 0x01	; 1
    22f2:	84 0f       	add	r24, r20
    22f4:	95 1f       	adc	r25, r21
    22f6:	02 96       	adiw	r24, 0x02	; 2
    22f8:	91 83       	std	Z+1, r25	; 0x01
    22fa:	80 83       	st	Z, r24
    22fc:	12 96       	adiw	r26, 0x02	; 2
    22fe:	8d 91       	ld	r24, X+
    2300:	9c 91       	ld	r25, X
    2302:	13 97       	sbiw	r26, 0x03	; 3
    2304:	93 83       	std	Z+3, r25	; 0x03
    2306:	82 83       	std	Z+2, r24	; 0x02
    2308:	21 15       	cp	r18, r1
    230a:	31 05       	cpc	r19, r1
    230c:	29 f4       	brne	.+10     	; 0x2318 <free+0x9c>
    230e:	f0 93 df 03 	sts	0x03DF, r31
    2312:	e0 93 de 03 	sts	0x03DE, r30
    2316:	3e c0       	rjmp	.+124    	; 0x2394 <free+0x118>
    2318:	d9 01       	movw	r26, r18
    231a:	13 96       	adiw	r26, 0x03	; 3
    231c:	fc 93       	st	X, r31
    231e:	ee 93       	st	-X, r30
    2320:	12 97       	sbiw	r26, 0x02	; 2
    2322:	4d 91       	ld	r20, X+
    2324:	5d 91       	ld	r21, X+
    2326:	a4 0f       	add	r26, r20
    2328:	b5 1f       	adc	r27, r21
    232a:	ea 17       	cp	r30, r26
    232c:	fb 07       	cpc	r31, r27
    232e:	79 f4       	brne	.+30     	; 0x234e <free+0xd2>
    2330:	80 81       	ld	r24, Z
    2332:	91 81       	ldd	r25, Z+1	; 0x01
    2334:	84 0f       	add	r24, r20
    2336:	95 1f       	adc	r25, r21
    2338:	02 96       	adiw	r24, 0x02	; 2
    233a:	d9 01       	movw	r26, r18
    233c:	11 96       	adiw	r26, 0x01	; 1
    233e:	9c 93       	st	X, r25
    2340:	8e 93       	st	-X, r24
    2342:	82 81       	ldd	r24, Z+2	; 0x02
    2344:	93 81       	ldd	r25, Z+3	; 0x03
    2346:	13 96       	adiw	r26, 0x03	; 3
    2348:	9c 93       	st	X, r25
    234a:	8e 93       	st	-X, r24
    234c:	12 97       	sbiw	r26, 0x02	; 2
    234e:	e0 e0       	ldi	r30, 0x00	; 0
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	8a 81       	ldd	r24, Y+2	; 0x02
    2354:	9b 81       	ldd	r25, Y+3	; 0x03
    2356:	00 97       	sbiw	r24, 0x00	; 0
    2358:	19 f0       	breq	.+6      	; 0x2360 <free+0xe4>
    235a:	fe 01       	movw	r30, r28
    235c:	ec 01       	movw	r28, r24
    235e:	f9 cf       	rjmp	.-14     	; 0x2352 <free+0xd6>
    2360:	ce 01       	movw	r24, r28
    2362:	02 96       	adiw	r24, 0x02	; 2
    2364:	28 81       	ld	r18, Y
    2366:	39 81       	ldd	r19, Y+1	; 0x01
    2368:	82 0f       	add	r24, r18
    236a:	93 1f       	adc	r25, r19
    236c:	20 91 dc 03 	lds	r18, 0x03DC
    2370:	30 91 dd 03 	lds	r19, 0x03DD
    2374:	28 17       	cp	r18, r24
    2376:	39 07       	cpc	r19, r25
    2378:	69 f4       	brne	.+26     	; 0x2394 <free+0x118>
    237a:	30 97       	sbiw	r30, 0x00	; 0
    237c:	29 f4       	brne	.+10     	; 0x2388 <free+0x10c>
    237e:	10 92 df 03 	sts	0x03DF, r1
    2382:	10 92 de 03 	sts	0x03DE, r1
    2386:	02 c0       	rjmp	.+4      	; 0x238c <free+0x110>
    2388:	13 82       	std	Z+3, r1	; 0x03
    238a:	12 82       	std	Z+2, r1	; 0x02
    238c:	d0 93 dd 03 	sts	0x03DD, r29
    2390:	c0 93 dc 03 	sts	0x03DC, r28
    2394:	df 91       	pop	r29
    2396:	cf 91       	pop	r28
    2398:	08 95       	ret

0000239a <realloc>:
    239a:	a0 e0       	ldi	r26, 0x00	; 0
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	e3 ed       	ldi	r30, 0xD3	; 211
    23a0:	f1 e1       	ldi	r31, 0x11	; 17
    23a2:	0c 94 d1 12 	jmp	0x25a2	; 0x25a2 <__prologue_saves__+0x8>
    23a6:	ec 01       	movw	r28, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	20 97       	sbiw	r28, 0x00	; 0
    23ac:	19 f4       	brne	.+6      	; 0x23b4 <realloc+0x1a>
    23ae:	0e 94 a6 10 	call	0x214c	; 0x214c <malloc>
    23b2:	b8 c0       	rjmp	.+368    	; 0x2524 <realloc+0x18a>
    23b4:	fe 01       	movw	r30, r28
    23b6:	e6 0f       	add	r30, r22
    23b8:	f7 1f       	adc	r31, r23
    23ba:	9e 01       	movw	r18, r28
    23bc:	22 50       	subi	r18, 0x02	; 2
    23be:	31 09       	sbc	r19, r1
    23c0:	e2 17       	cp	r30, r18
    23c2:	f3 07       	cpc	r31, r19
    23c4:	08 f4       	brcc	.+2      	; 0x23c8 <realloc+0x2e>
    23c6:	ac c0       	rjmp	.+344    	; 0x2520 <realloc+0x186>
    23c8:	d9 01       	movw	r26, r18
    23ca:	0d 91       	ld	r16, X+
    23cc:	1c 91       	ld	r17, X
    23ce:	11 97       	sbiw	r26, 0x01	; 1
    23d0:	06 17       	cp	r16, r22
    23d2:	17 07       	cpc	r17, r23
    23d4:	b8 f0       	brcs	.+46     	; 0x2404 <realloc+0x6a>
    23d6:	05 30       	cpi	r16, 0x05	; 5
    23d8:	11 05       	cpc	r17, r1
    23da:	08 f4       	brcc	.+2      	; 0x23de <realloc+0x44>
    23dc:	9f c0       	rjmp	.+318    	; 0x251c <realloc+0x182>
    23de:	a8 01       	movw	r20, r16
    23e0:	44 50       	subi	r20, 0x04	; 4
    23e2:	51 09       	sbc	r21, r1
    23e4:	46 17       	cp	r20, r22
    23e6:	57 07       	cpc	r21, r23
    23e8:	08 f4       	brcc	.+2      	; 0x23ec <realloc+0x52>
    23ea:	98 c0       	rjmp	.+304    	; 0x251c <realloc+0x182>
    23ec:	02 50       	subi	r16, 0x02	; 2
    23ee:	11 09       	sbc	r17, r1
    23f0:	06 1b       	sub	r16, r22
    23f2:	17 0b       	sbc	r17, r23
    23f4:	01 93       	st	Z+, r16
    23f6:	11 93       	st	Z+, r17
    23f8:	6d 93       	st	X+, r22
    23fa:	7c 93       	st	X, r23
    23fc:	cf 01       	movw	r24, r30
    23fe:	0e 94 3e 11 	call	0x227c	; 0x227c <free>
    2402:	8c c0       	rjmp	.+280    	; 0x251c <realloc+0x182>
    2404:	5b 01       	movw	r10, r22
    2406:	a0 1a       	sub	r10, r16
    2408:	b1 0a       	sbc	r11, r17
    240a:	4e 01       	movw	r8, r28
    240c:	80 0e       	add	r8, r16
    240e:	91 1e       	adc	r9, r17
    2410:	a0 91 de 03 	lds	r26, 0x03DE
    2414:	b0 91 df 03 	lds	r27, 0x03DF
    2418:	61 2c       	mov	r6, r1
    241a:	71 2c       	mov	r7, r1
    241c:	60 e0       	ldi	r22, 0x00	; 0
    241e:	70 e0       	ldi	r23, 0x00	; 0
    2420:	10 97       	sbiw	r26, 0x00	; 0
    2422:	09 f4       	brne	.+2      	; 0x2426 <realloc+0x8c>
    2424:	49 c0       	rjmp	.+146    	; 0x24b8 <realloc+0x11e>
    2426:	a8 15       	cp	r26, r8
    2428:	b9 05       	cpc	r27, r9
    242a:	c9 f5       	brne	.+114    	; 0x249e <realloc+0x104>
    242c:	ed 90       	ld	r14, X+
    242e:	fc 90       	ld	r15, X
    2430:	11 97       	sbiw	r26, 0x01	; 1
    2432:	67 01       	movw	r12, r14
    2434:	42 e0       	ldi	r20, 0x02	; 2
    2436:	c4 0e       	add	r12, r20
    2438:	d1 1c       	adc	r13, r1
    243a:	ca 14       	cp	r12, r10
    243c:	db 04       	cpc	r13, r11
    243e:	78 f1       	brcs	.+94     	; 0x249e <realloc+0x104>
    2440:	47 01       	movw	r8, r14
    2442:	8a 18       	sub	r8, r10
    2444:	9b 08       	sbc	r9, r11
    2446:	64 01       	movw	r12, r8
    2448:	42 e0       	ldi	r20, 0x02	; 2
    244a:	c4 0e       	add	r12, r20
    244c:	d1 1c       	adc	r13, r1
    244e:	12 96       	adiw	r26, 0x02	; 2
    2450:	bc 90       	ld	r11, X
    2452:	12 97       	sbiw	r26, 0x02	; 2
    2454:	13 96       	adiw	r26, 0x03	; 3
    2456:	ac 91       	ld	r26, X
    2458:	b5 e0       	ldi	r27, 0x05	; 5
    245a:	cb 16       	cp	r12, r27
    245c:	d1 04       	cpc	r13, r1
    245e:	40 f0       	brcs	.+16     	; 0x2470 <realloc+0xd6>
    2460:	b2 82       	std	Z+2, r11	; 0x02
    2462:	a3 83       	std	Z+3, r26	; 0x03
    2464:	91 82       	std	Z+1, r9	; 0x01
    2466:	80 82       	st	Z, r8
    2468:	d9 01       	movw	r26, r18
    246a:	8d 93       	st	X+, r24
    246c:	9c 93       	st	X, r25
    246e:	09 c0       	rjmp	.+18     	; 0x2482 <realloc+0xe8>
    2470:	0e 5f       	subi	r16, 0xFE	; 254
    2472:	1f 4f       	sbci	r17, 0xFF	; 255
    2474:	0e 0d       	add	r16, r14
    2476:	1f 1d       	adc	r17, r15
    2478:	f9 01       	movw	r30, r18
    247a:	11 83       	std	Z+1, r17	; 0x01
    247c:	00 83       	st	Z, r16
    247e:	eb 2d       	mov	r30, r11
    2480:	fa 2f       	mov	r31, r26
    2482:	61 15       	cp	r22, r1
    2484:	71 05       	cpc	r23, r1
    2486:	31 f0       	breq	.+12     	; 0x2494 <realloc+0xfa>
    2488:	db 01       	movw	r26, r22
    248a:	13 96       	adiw	r26, 0x03	; 3
    248c:	fc 93       	st	X, r31
    248e:	ee 93       	st	-X, r30
    2490:	12 97       	sbiw	r26, 0x02	; 2
    2492:	44 c0       	rjmp	.+136    	; 0x251c <realloc+0x182>
    2494:	f0 93 df 03 	sts	0x03DF, r31
    2498:	e0 93 de 03 	sts	0x03DE, r30
    249c:	3f c0       	rjmp	.+126    	; 0x251c <realloc+0x182>
    249e:	6d 91       	ld	r22, X+
    24a0:	7c 91       	ld	r23, X
    24a2:	11 97       	sbiw	r26, 0x01	; 1
    24a4:	66 16       	cp	r6, r22
    24a6:	77 06       	cpc	r7, r23
    24a8:	08 f4       	brcc	.+2      	; 0x24ac <realloc+0x112>
    24aa:	3b 01       	movw	r6, r22
    24ac:	bd 01       	movw	r22, r26
    24ae:	12 96       	adiw	r26, 0x02	; 2
    24b0:	0d 90       	ld	r0, X+
    24b2:	bc 91       	ld	r27, X
    24b4:	a0 2d       	mov	r26, r0
    24b6:	b4 cf       	rjmp	.-152    	; 0x2420 <realloc+0x86>
    24b8:	60 91 dc 03 	lds	r22, 0x03DC
    24bc:	70 91 dd 03 	lds	r23, 0x03DD
    24c0:	68 15       	cp	r22, r8
    24c2:	79 05       	cpc	r23, r9
    24c4:	e9 f4       	brne	.+58     	; 0x2500 <realloc+0x166>
    24c6:	68 16       	cp	r6, r24
    24c8:	79 06       	cpc	r7, r25
    24ca:	d0 f4       	brcc	.+52     	; 0x2500 <realloc+0x166>
    24cc:	40 91 00 01 	lds	r20, 0x0100
    24d0:	50 91 01 01 	lds	r21, 0x0101
    24d4:	41 15       	cp	r20, r1
    24d6:	51 05       	cpc	r21, r1
    24d8:	41 f4       	brne	.+16     	; 0x24ea <realloc+0x150>
    24da:	4d b7       	in	r20, 0x3d	; 61
    24dc:	5e b7       	in	r21, 0x3e	; 62
    24de:	60 91 04 01 	lds	r22, 0x0104
    24e2:	70 91 05 01 	lds	r23, 0x0105
    24e6:	46 1b       	sub	r20, r22
    24e8:	57 0b       	sbc	r21, r23
    24ea:	e4 17       	cp	r30, r20
    24ec:	f5 07       	cpc	r31, r21
    24ee:	c0 f4       	brcc	.+48     	; 0x2520 <realloc+0x186>
    24f0:	f0 93 dd 03 	sts	0x03DD, r31
    24f4:	e0 93 dc 03 	sts	0x03DC, r30
    24f8:	f9 01       	movw	r30, r18
    24fa:	91 83       	std	Z+1, r25	; 0x01
    24fc:	80 83       	st	Z, r24
    24fe:	0e c0       	rjmp	.+28     	; 0x251c <realloc+0x182>
    2500:	0e 94 a6 10 	call	0x214c	; 0x214c <malloc>
    2504:	7c 01       	movw	r14, r24
    2506:	00 97       	sbiw	r24, 0x00	; 0
    2508:	59 f0       	breq	.+22     	; 0x2520 <realloc+0x186>
    250a:	a8 01       	movw	r20, r16
    250c:	be 01       	movw	r22, r28
    250e:	0e 94 97 12 	call	0x252e	; 0x252e <memcpy>
    2512:	ce 01       	movw	r24, r28
    2514:	0e 94 3e 11 	call	0x227c	; 0x227c <free>
    2518:	c7 01       	movw	r24, r14
    251a:	04 c0       	rjmp	.+8      	; 0x2524 <realloc+0x18a>
    251c:	ce 01       	movw	r24, r28
    251e:	02 c0       	rjmp	.+4      	; 0x2524 <realloc+0x18a>
    2520:	80 e0       	ldi	r24, 0x00	; 0
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	cd b7       	in	r28, 0x3d	; 61
    2526:	de b7       	in	r29, 0x3e	; 62
    2528:	ee e0       	ldi	r30, 0x0E	; 14
    252a:	0c 94 ed 12 	jmp	0x25da	; 0x25da <__epilogue_restores__+0x8>

0000252e <memcpy>:
    252e:	fb 01       	movw	r30, r22
    2530:	dc 01       	movw	r26, r24
    2532:	02 c0       	rjmp	.+4      	; 0x2538 <memcpy+0xa>
    2534:	01 90       	ld	r0, Z+
    2536:	0d 92       	st	X+, r0
    2538:	41 50       	subi	r20, 0x01	; 1
    253a:	50 40       	sbci	r21, 0x00	; 0
    253c:	d8 f7       	brcc	.-10     	; 0x2534 <memcpy+0x6>
    253e:	08 95       	ret

00002540 <strcmp>:
    2540:	fb 01       	movw	r30, r22
    2542:	dc 01       	movw	r26, r24
    2544:	8d 91       	ld	r24, X+
    2546:	01 90       	ld	r0, Z+
    2548:	80 19       	sub	r24, r0
    254a:	01 10       	cpse	r0, r1
    254c:	d9 f3       	breq	.-10     	; 0x2544 <strcmp+0x4>
    254e:	99 0b       	sbc	r25, r25
    2550:	08 95       	ret

00002552 <strcpy>:
    2552:	fb 01       	movw	r30, r22
    2554:	dc 01       	movw	r26, r24
    2556:	01 90       	ld	r0, Z+
    2558:	0d 92       	st	X+, r0
    255a:	00 20       	and	r0, r0
    255c:	e1 f7       	brne	.-8      	; 0x2556 <strcpy+0x4>
    255e:	08 95       	ret

00002560 <strncmp>:
    2560:	fb 01       	movw	r30, r22
    2562:	dc 01       	movw	r26, r24
    2564:	41 50       	subi	r20, 0x01	; 1
    2566:	50 40       	sbci	r21, 0x00	; 0
    2568:	30 f0       	brcs	.+12     	; 0x2576 <strncmp+0x16>
    256a:	8d 91       	ld	r24, X+
    256c:	01 90       	ld	r0, Z+
    256e:	80 19       	sub	r24, r0
    2570:	19 f4       	brne	.+6      	; 0x2578 <strncmp+0x18>
    2572:	00 20       	and	r0, r0
    2574:	b9 f7       	brne	.-18     	; 0x2564 <strncmp+0x4>
    2576:	88 1b       	sub	r24, r24
    2578:	99 0b       	sbc	r25, r25
    257a:	08 95       	ret

0000257c <strncpy>:
    257c:	fb 01       	movw	r30, r22
    257e:	dc 01       	movw	r26, r24
    2580:	41 50       	subi	r20, 0x01	; 1
    2582:	50 40       	sbci	r21, 0x00	; 0
    2584:	48 f0       	brcs	.+18     	; 0x2598 <strncpy+0x1c>
    2586:	01 90       	ld	r0, Z+
    2588:	0d 92       	st	X+, r0
    258a:	00 20       	and	r0, r0
    258c:	c9 f7       	brne	.-14     	; 0x2580 <strncpy+0x4>
    258e:	01 c0       	rjmp	.+2      	; 0x2592 <strncpy+0x16>
    2590:	1d 92       	st	X+, r1
    2592:	41 50       	subi	r20, 0x01	; 1
    2594:	50 40       	sbci	r21, 0x00	; 0
    2596:	e0 f7       	brcc	.-8      	; 0x2590 <strncpy+0x14>
    2598:	08 95       	ret

0000259a <__prologue_saves__>:
    259a:	2f 92       	push	r2
    259c:	3f 92       	push	r3
    259e:	4f 92       	push	r4
    25a0:	5f 92       	push	r5
    25a2:	6f 92       	push	r6
    25a4:	7f 92       	push	r7
    25a6:	8f 92       	push	r8
    25a8:	9f 92       	push	r9
    25aa:	af 92       	push	r10
    25ac:	bf 92       	push	r11
    25ae:	cf 92       	push	r12
    25b0:	df 92       	push	r13
    25b2:	ef 92       	push	r14
    25b4:	ff 92       	push	r15
    25b6:	0f 93       	push	r16
    25b8:	1f 93       	push	r17
    25ba:	cf 93       	push	r28
    25bc:	df 93       	push	r29
    25be:	cd b7       	in	r28, 0x3d	; 61
    25c0:	de b7       	in	r29, 0x3e	; 62
    25c2:	ca 1b       	sub	r28, r26
    25c4:	db 0b       	sbc	r29, r27
    25c6:	0f b6       	in	r0, 0x3f	; 63
    25c8:	f8 94       	cli
    25ca:	de bf       	out	0x3e, r29	; 62
    25cc:	0f be       	out	0x3f, r0	; 63
    25ce:	cd bf       	out	0x3d, r28	; 61
    25d0:	09 94       	ijmp

000025d2 <__epilogue_restores__>:
    25d2:	2a 88       	ldd	r2, Y+18	; 0x12
    25d4:	39 88       	ldd	r3, Y+17	; 0x11
    25d6:	48 88       	ldd	r4, Y+16	; 0x10
    25d8:	5f 84       	ldd	r5, Y+15	; 0x0f
    25da:	6e 84       	ldd	r6, Y+14	; 0x0e
    25dc:	7d 84       	ldd	r7, Y+13	; 0x0d
    25de:	8c 84       	ldd	r8, Y+12	; 0x0c
    25e0:	9b 84       	ldd	r9, Y+11	; 0x0b
    25e2:	aa 84       	ldd	r10, Y+10	; 0x0a
    25e4:	b9 84       	ldd	r11, Y+9	; 0x09
    25e6:	c8 84       	ldd	r12, Y+8	; 0x08
    25e8:	df 80       	ldd	r13, Y+7	; 0x07
    25ea:	ee 80       	ldd	r14, Y+6	; 0x06
    25ec:	fd 80       	ldd	r15, Y+5	; 0x05
    25ee:	0c 81       	ldd	r16, Y+4	; 0x04
    25f0:	1b 81       	ldd	r17, Y+3	; 0x03
    25f2:	aa 81       	ldd	r26, Y+2	; 0x02
    25f4:	b9 81       	ldd	r27, Y+1	; 0x01
    25f6:	ce 0f       	add	r28, r30
    25f8:	d1 1d       	adc	r29, r1
    25fa:	0f b6       	in	r0, 0x3f	; 63
    25fc:	f8 94       	cli
    25fe:	de bf       	out	0x3e, r29	; 62
    2600:	0f be       	out	0x3f, r0	; 63
    2602:	cd bf       	out	0x3d, r28	; 61
    2604:	ed 01       	movw	r28, r26
    2606:	08 95       	ret

00002608 <__do_global_dtors>:
    2608:	10 e0       	ldi	r17, 0x00	; 0
    260a:	c0 ec       	ldi	r28, 0xC0	; 192
    260c:	d0 e0       	ldi	r29, 0x00	; 0
    260e:	04 c0       	rjmp	.+8      	; 0x2618 <__do_global_dtors+0x10>
    2610:	fe 01       	movw	r30, r28
    2612:	0e 94 a2 10 	call	0x2144	; 0x2144 <__tablejump__>
    2616:	22 96       	adiw	r28, 0x02	; 2
    2618:	c2 3c       	cpi	r28, 0xC2	; 194
    261a:	d1 07       	cpc	r29, r17
    261c:	c9 f7       	brne	.-14     	; 0x2610 <__do_global_dtors+0x8>
    261e:	f8 94       	cli

00002620 <__stop_program>:
    2620:	ff cf       	rjmp	.-2      	; 0x2620 <__stop_program>
