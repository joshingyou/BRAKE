
SensorGloves.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ec  00800100  00002574  00002608  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002574  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f6  008002ec  008002ec  000027f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000027f4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000006f0  00000000  00000000  00002824  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00011efa  00000000  00000000  00002f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002536  00000000  00000000  00014e0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000027a0  00000000  00000000  00017344  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000198c  00000000  00000000  00019ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002710  00000000  00000000  0001b470  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000096ad  00000000  00000000  0001db80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000740  00000000  00000000  0002722d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__dtors_end>
       4:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__vector_1>
       8:	0c 94 83 04 	jmp	0x906	; 0x906 <__vector_2>
       c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      10:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      14:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      18:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      1c:	0c 94 fa 03 	jmp	0x7f4	; 0x7f4 <__vector_7>
      20:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      24:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      28:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      2c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      30:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      34:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      38:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      3c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      40:	0c 94 b0 04 	jmp	0x960	; 0x960 <__vector_16>
      44:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      48:	0c 94 a3 01 	jmp	0x346	; 0x346 <__vector_18>
      4c:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__vector_19>
      50:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      54:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      58:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      5c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      60:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
      64:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	02 00       	.word	0x0002	; ????

00000069 <digital_pin_to_timer_PGM>:
      69:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      79:	00 00 00 00                                         ....

0000007d <digital_pin_to_bit_mask_PGM>:
      7d:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8d:	04 08 10 20                                         ... 

00000091 <digital_pin_to_port_PGM>:
      91:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a1:	03 03 03 03                                         ....

000000a5 <port_to_output_PGM>:
      a5:	00 00 00 00 25 00 28 00 2b 00 00                    ....%.(.+..

000000b0 <__ctors_start>:
      b0:	04 02       	muls	r16, r20
      b2:	8e 02       	muls	r24, r30
      b4:	b5 0e       	add	r11, r21

000000b6 <__ctors_end>:
      b6:	ce 0e       	add	r12, r30

000000b8 <__dtors_end>:
      b8:	11 24       	eor	r1, r1
      ba:	1f be       	out	0x3f, r1	; 63
      bc:	cf ef       	ldi	r28, 0xFF	; 255
      be:	d8 e0       	ldi	r29, 0x08	; 8
      c0:	de bf       	out	0x3e, r29	; 62
      c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_copy_data>:
      c4:	12 e0       	ldi	r17, 0x02	; 2
      c6:	a0 e0       	ldi	r26, 0x00	; 0
      c8:	b1 e0       	ldi	r27, 0x01	; 1
      ca:	e4 e7       	ldi	r30, 0x74	; 116
      cc:	f5 e2       	ldi	r31, 0x25	; 37
      ce:	02 c0       	rjmp	.+4      	; 0xd4 <__do_copy_data+0x10>
      d0:	05 90       	lpm	r0, Z+
      d2:	0d 92       	st	X+, r0
      d4:	ac 3e       	cpi	r26, 0xEC	; 236
      d6:	b1 07       	cpc	r27, r17
      d8:	d9 f7       	brne	.-10     	; 0xd0 <__do_copy_data+0xc>

000000da <__do_clear_bss>:
      da:	23 e0       	ldi	r18, 0x03	; 3
      dc:	ac ee       	ldi	r26, 0xEC	; 236
      de:	b2 e0       	ldi	r27, 0x02	; 2
      e0:	01 c0       	rjmp	.+2      	; 0xe4 <.do_clear_bss_start>

000000e2 <.do_clear_bss_loop>:
      e2:	1d 92       	st	X+, r1

000000e4 <.do_clear_bss_start>:
      e4:	a2 3e       	cpi	r26, 0xE2	; 226
      e6:	b2 07       	cpc	r27, r18
      e8:	e1 f7       	brne	.-8      	; 0xe2 <.do_clear_bss_loop>

000000ea <__do_global_ctors>:
      ea:	10 e0       	ldi	r17, 0x00	; 0
      ec:	c6 eb       	ldi	r28, 0xB6	; 182
      ee:	d0 e0       	ldi	r29, 0x00	; 0
      f0:	04 c0       	rjmp	.+8      	; 0xfa <__do_global_ctors+0x10>
      f2:	22 97       	sbiw	r28, 0x02	; 2
      f4:	fe 01       	movw	r30, r28
      f6:	0e 94 4b 10 	call	0x2096	; 0x2096 <__tablejump__>
      fa:	c0 3b       	cpi	r28, 0xB0	; 176
      fc:	d1 07       	cpc	r29, r17
      fe:	c9 f7       	brne	.-14     	; 0xf2 <__do_global_ctors+0x8>
     100:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <main>
     104:	0c 94 ad 12 	jmp	0x255a	; 0x255a <__do_global_dtors>

00000108 <__bad_interrupt>:
     108:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     10c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     10e:	81 8d       	ldd	r24, Z+25	; 0x19
     110:	22 8d       	ldd	r18, Z+26	; 0x1a
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	80 5c       	subi	r24, 0xC0	; 192
     116:	9f 4f       	sbci	r25, 0xFF	; 255
     118:	82 1b       	sub	r24, r18
     11a:	91 09       	sbc	r25, r1
}
     11c:	8f 73       	andi	r24, 0x3F	; 63
     11e:	99 27       	eor	r25, r25
     120:	08 95       	ret

00000122 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     122:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     124:	91 8d       	ldd	r25, Z+25	; 0x19
     126:	82 8d       	ldd	r24, Z+26	; 0x1a
     128:	98 17       	cp	r25, r24
     12a:	31 f0       	breq	.+12     	; 0x138 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     12c:	82 8d       	ldd	r24, Z+26	; 0x1a
     12e:	e8 0f       	add	r30, r24
     130:	f1 1d       	adc	r31, r1
     132:	85 8d       	ldd	r24, Z+29	; 0x1d
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     138:	8f ef       	ldi	r24, 0xFF	; 255
     13a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     13c:	08 95       	ret

0000013e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     13e:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     140:	91 8d       	ldd	r25, Z+25	; 0x19
     142:	82 8d       	ldd	r24, Z+26	; 0x1a
     144:	98 17       	cp	r25, r24
     146:	61 f0       	breq	.+24     	; 0x160 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     148:	82 8d       	ldd	r24, Z+26	; 0x1a
     14a:	df 01       	movw	r26, r30
     14c:	a8 0f       	add	r26, r24
     14e:	b1 1d       	adc	r27, r1
     150:	5d 96       	adiw	r26, 0x1d	; 29
     152:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     154:	92 8d       	ldd	r25, Z+26	; 0x1a
     156:	9f 5f       	subi	r25, 0xFF	; 255
     158:	9f 73       	andi	r25, 0x3F	; 63
     15a:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     160:	8f ef       	ldi	r24, 0xFF	; 255
     162:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     164:	08 95       	ret

00000166 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     166:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     168:	84 8d       	ldd	r24, Z+28	; 0x1c
     16a:	df 01       	movw	r26, r30
     16c:	a8 0f       	add	r26, r24
     16e:	b1 1d       	adc	r27, r1
     170:	a3 5a       	subi	r26, 0xA3	; 163
     172:	bf 4f       	sbci	r27, 0xFF	; 255
     174:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     176:	84 8d       	ldd	r24, Z+28	; 0x1c
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	01 96       	adiw	r24, 0x01	; 1
     17c:	8f 73       	andi	r24, 0x3F	; 63
     17e:	90 78       	andi	r25, 0x80	; 128
     180:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     182:	a6 89       	ldd	r26, Z+22	; 0x16
     184:	b7 89       	ldd	r27, Z+23	; 0x17
     186:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     188:	a0 89       	ldd	r26, Z+16	; 0x10
     18a:	b1 89       	ldd	r27, Z+17	; 0x11
     18c:	8c 91       	ld	r24, X
     18e:	80 64       	ori	r24, 0x40	; 64
     190:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     192:	93 8d       	ldd	r25, Z+27	; 0x1b
     194:	84 8d       	ldd	r24, Z+28	; 0x1c
     196:	98 13       	cpse	r25, r24
     198:	06 c0       	rjmp	.+12     	; 0x1a6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     19a:	02 88       	ldd	r0, Z+18	; 0x12
     19c:	f3 89       	ldd	r31, Z+19	; 0x13
     19e:	e0 2d       	mov	r30, r0
     1a0:	80 81       	ld	r24, Z
     1a2:	8f 7d       	andi	r24, 0xDF	; 223
     1a4:	80 83       	st	Z, r24
     1a6:	08 95       	ret

000001a8 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     1a8:	cf 93       	push	r28
     1aa:	df 93       	push	r29
     1ac:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     1ae:	88 8d       	ldd	r24, Y+24	; 0x18
     1b0:	81 11       	cpse	r24, r1
     1b2:	0b c0       	rjmp	.+22     	; 0x1ca <_ZN14HardwareSerial5flushEv+0x22>
     1b4:	1b c0       	rjmp	.+54     	; 0x1ec <_ZN14HardwareSerial5flushEv+0x44>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     1b6:	0f b6       	in	r0, 0x3f	; 63
     1b8:	07 fc       	sbrc	r0, 7
     1ba:	09 c0       	rjmp	.+18     	; 0x1ce <_ZN14HardwareSerial5flushEv+0x26>
     1bc:	80 81       	ld	r24, Z
     1be:	85 ff       	sbrs	r24, 5
     1c0:	06 c0       	rjmp	.+12     	; 0x1ce <_ZN14HardwareSerial5flushEv+0x26>
     1c2:	0e c0       	rjmp	.+28     	; 0x1e0 <_ZN14HardwareSerial5flushEv+0x38>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
     1c4:	ce 01       	movw	r24, r28
     1c6:	0e 94 b3 00 	call	0x166	; 0x166 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     1ca:	ea 89       	ldd	r30, Y+18	; 0x12
     1cc:	fb 89       	ldd	r31, Y+19	; 0x13
     1ce:	80 81       	ld	r24, Z
     1d0:	85 fd       	sbrc	r24, 5
     1d2:	f1 cf       	rjmp	.-30     	; 0x1b6 <_ZN14HardwareSerial5flushEv+0xe>
     1d4:	a8 89       	ldd	r26, Y+16	; 0x10
     1d6:	b9 89       	ldd	r27, Y+17	; 0x11
     1d8:	8c 91       	ld	r24, X
     1da:	86 ff       	sbrs	r24, 6
     1dc:	ec cf       	rjmp	.-40     	; 0x1b6 <_ZN14HardwareSerial5flushEv+0xe>
     1de:	06 c0       	rjmp	.+12     	; 0x1ec <_ZN14HardwareSerial5flushEv+0x44>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     1e0:	a8 89       	ldd	r26, Y+16	; 0x10
     1e2:	b9 89       	ldd	r27, Y+17	; 0x11
     1e4:	8c 91       	ld	r24, X
     1e6:	85 ff       	sbrs	r24, 5
     1e8:	f2 cf       	rjmp	.-28     	; 0x1ce <_ZN14HardwareSerial5flushEv+0x26>
     1ea:	ec cf       	rjmp	.-40     	; 0x1c4 <_ZN14HardwareSerial5flushEv+0x1c>
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     1ec:	df 91       	pop	r29
     1ee:	cf 91       	pop	r28
     1f0:	08 95       	ret

000001f2 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     1f2:	0f 93       	push	r16
     1f4:	1f 93       	push	r17
     1f6:	cf 93       	push	r28
     1f8:	df 93       	push	r29
     1fa:	ec 01       	movw	r28, r24
     1fc:	16 2f       	mov	r17, r22
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     1fe:	9b 8d       	ldd	r25, Y+27	; 0x1b
     200:	8c 8d       	ldd	r24, Y+28	; 0x1c
     202:	98 13       	cpse	r25, r24
     204:	24 c0       	rjmp	.+72     	; 0x24e <_ZN14HardwareSerial5writeEh+0x5c>
     206:	e8 89       	ldd	r30, Y+16	; 0x10
     208:	f9 89       	ldd	r31, Y+17	; 0x11
     20a:	80 81       	ld	r24, Z
     20c:	85 fd       	sbrc	r24, 5
     20e:	26 c0       	rjmp	.+76     	; 0x25c <_ZN14HardwareSerial5writeEh+0x6a>
     210:	1e c0       	rjmp	.+60     	; 0x24e <_ZN14HardwareSerial5writeEh+0x5c>
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    if (bit_is_clear(SREG, SREG_I)) {
     212:	0f b6       	in	r0, 0x3f	; 63
     214:	07 fc       	sbrc	r0, 7
     216:	08 c0       	rjmp	.+16     	; 0x228 <_ZN14HardwareSerial5writeEh+0x36>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     218:	e8 89       	ldd	r30, Y+16	; 0x10
     21a:	f9 89       	ldd	r31, Y+17	; 0x11
     21c:	80 81       	ld	r24, Z
     21e:	85 ff       	sbrs	r24, 5
     220:	03 c0       	rjmp	.+6      	; 0x228 <_ZN14HardwareSerial5writeEh+0x36>
	_tx_udr_empty_irq();
     222:	ce 01       	movw	r24, r28
     224:	0e 94 b3 00 	call	0x166	; 0x166 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     228:	9c 8d       	ldd	r25, Y+28	; 0x1c
     22a:	09 17       	cp	r16, r25
     22c:	91 f3       	breq	.-28     	; 0x212 <_ZN14HardwareSerial5writeEh+0x20>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     22e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     230:	fe 01       	movw	r30, r28
     232:	e8 0f       	add	r30, r24
     234:	f1 1d       	adc	r31, r1
     236:	e3 5a       	subi	r30, 0xA3	; 163
     238:	ff 4f       	sbci	r31, 0xFF	; 255
     23a:	10 83       	st	Z, r17
  _tx_buffer_head = i;
     23c:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     23e:	ea 89       	ldd	r30, Y+18	; 0x12
     240:	fb 89       	ldd	r31, Y+19	; 0x13
     242:	80 81       	ld	r24, Z
     244:	80 62       	ori	r24, 0x20	; 32
     246:	80 83       	st	Z, r24
  _written = true;
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	88 8f       	std	Y+24, r24	; 0x18
  
  return 1;
     24c:	0f c0       	rjmp	.+30     	; 0x26c <_ZN14HardwareSerial5writeEh+0x7a>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     24e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	01 96       	adiw	r24, 0x01	; 1
     254:	8f 73       	andi	r24, 0x3F	; 63
     256:	90 78       	andi	r25, 0x80	; 128
     258:	08 2f       	mov	r16, r24
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     25a:	e6 cf       	rjmp	.-52     	; 0x228 <_ZN14HardwareSerial5writeEh+0x36>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     25c:	ee 89       	ldd	r30, Y+22	; 0x16
     25e:	ff 89       	ldd	r31, Y+23	; 0x17
     260:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     262:	e8 89       	ldd	r30, Y+16	; 0x10
     264:	f9 89       	ldd	r31, Y+17	; 0x11
     266:	80 81       	ld	r24, Z
     268:	80 64       	ori	r24, 0x40	; 64
     26a:	80 83       	st	Z, r24
	
  sbi(*_ucsrb, UDRIE0);
  _written = true;
  
  return 1;
}
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	df 91       	pop	r29
     272:	cf 91       	pop	r28
     274:	1f 91       	pop	r17
     276:	0f 91       	pop	r16
     278:	08 95       	ret

0000027a <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     27a:	cf 92       	push	r12
     27c:	df 92       	push	r13
     27e:	ef 92       	push	r14
     280:	ff 92       	push	r15
     282:	1f 93       	push	r17
     284:	cf 93       	push	r28
     286:	df 93       	push	r29
     288:	ec 01       	movw	r28, r24
     28a:	6a 01       	movw	r12, r20
     28c:	7b 01       	movw	r14, r22
     28e:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     290:	e8 89       	ldd	r30, Y+16	; 0x10
     292:	f9 89       	ldd	r31, Y+17	; 0x11
     294:	82 e0       	ldi	r24, 0x02	; 2
     296:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     298:	41 15       	cp	r20, r1
     29a:	81 ee       	ldi	r24, 0xE1	; 225
     29c:	58 07       	cpc	r21, r24
     29e:	61 05       	cpc	r22, r1
     2a0:	71 05       	cpc	r23, r1
     2a2:	b1 f0       	breq	.+44     	; 0x2d0 <_ZN14HardwareSerial5beginEmh+0x56>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     2a4:	60 e0       	ldi	r22, 0x00	; 0
     2a6:	79 e0       	ldi	r23, 0x09	; 9
     2a8:	8d e3       	ldi	r24, 0x3D	; 61
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	a7 01       	movw	r20, r14
     2ae:	96 01       	movw	r18, r12
     2b0:	0e 94 27 10 	call	0x204e	; 0x204e <__udivmodsi4>
     2b4:	ba 01       	movw	r22, r20
     2b6:	a9 01       	movw	r20, r18
     2b8:	41 50       	subi	r20, 0x01	; 1
     2ba:	51 09       	sbc	r21, r1
     2bc:	61 09       	sbc	r22, r1
     2be:	71 09       	sbc	r23, r1
     2c0:	76 95       	lsr	r23
     2c2:	67 95       	ror	r22
     2c4:	57 95       	ror	r21
     2c6:	47 95       	ror	r20
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     2c8:	41 15       	cp	r20, r1
     2ca:	80 e1       	ldi	r24, 0x10	; 16
     2cc:	58 07       	cpc	r21, r24
     2ce:	a8 f0       	brcs	.+42     	; 0x2fa <_ZN14HardwareSerial5beginEmh+0x80>
  {
    *_ucsra = 0;
     2d0:	e8 89       	ldd	r30, Y+16	; 0x10
     2d2:	f9 89       	ldd	r31, Y+17	; 0x11
     2d4:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     2d6:	60 e8       	ldi	r22, 0x80	; 128
     2d8:	74 e8       	ldi	r23, 0x84	; 132
     2da:	8e e1       	ldi	r24, 0x1E	; 30
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	a7 01       	movw	r20, r14
     2e0:	96 01       	movw	r18, r12
     2e2:	0e 94 27 10 	call	0x204e	; 0x204e <__udivmodsi4>
     2e6:	ba 01       	movw	r22, r20
     2e8:	a9 01       	movw	r20, r18
     2ea:	41 50       	subi	r20, 0x01	; 1
     2ec:	51 09       	sbc	r21, r1
     2ee:	61 09       	sbc	r22, r1
     2f0:	71 09       	sbc	r23, r1
     2f2:	76 95       	lsr	r23
     2f4:	67 95       	ror	r22
     2f6:	57 95       	ror	r21
     2f8:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     2fa:	ec 85       	ldd	r30, Y+12	; 0x0c
     2fc:	fd 85       	ldd	r31, Y+13	; 0x0d
     2fe:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
     300:	ee 85       	ldd	r30, Y+14	; 0x0e
     302:	ff 85       	ldd	r31, Y+15	; 0x0f
     304:	40 83       	st	Z, r20

  _written = false;
     306:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     308:	ec 89       	ldd	r30, Y+20	; 0x14
     30a:	fd 89       	ldd	r31, Y+21	; 0x15
     30c:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     30e:	ea 89       	ldd	r30, Y+18	; 0x12
     310:	fb 89       	ldd	r31, Y+19	; 0x13
     312:	80 81       	ld	r24, Z
     314:	80 61       	ori	r24, 0x10	; 16
     316:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     318:	ea 89       	ldd	r30, Y+18	; 0x12
     31a:	fb 89       	ldd	r31, Y+19	; 0x13
     31c:	80 81       	ld	r24, Z
     31e:	88 60       	ori	r24, 0x08	; 8
     320:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     322:	ea 89       	ldd	r30, Y+18	; 0x12
     324:	fb 89       	ldd	r31, Y+19	; 0x13
     326:	80 81       	ld	r24, Z
     328:	80 68       	ori	r24, 0x80	; 128
     32a:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     32c:	ea 89       	ldd	r30, Y+18	; 0x12
     32e:	fb 89       	ldd	r31, Y+19	; 0x13
     330:	80 81       	ld	r24, Z
     332:	8f 7d       	andi	r24, 0xDF	; 223
     334:	80 83       	st	Z, r24
}
     336:	df 91       	pop	r29
     338:	cf 91       	pop	r28
     33a:	1f 91       	pop	r17
     33c:	ff 90       	pop	r15
     33e:	ef 90       	pop	r14
     340:	df 90       	pop	r13
     342:	cf 90       	pop	r12
     344:	08 95       	ret

00000346 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     346:	1f 92       	push	r1
     348:	0f 92       	push	r0
     34a:	0f b6       	in	r0, 0x3f	; 63
     34c:	0f 92       	push	r0
     34e:	11 24       	eor	r1, r1
     350:	2f 93       	push	r18
     352:	8f 93       	push	r24
     354:	9f 93       	push	r25
     356:	af 93       	push	r26
     358:	bf 93       	push	r27
     35a:	ef 93       	push	r30
     35c:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     35e:	e0 91 fc 02 	lds	r30, 0x02FC
     362:	f0 91 fd 02 	lds	r31, 0x02FD
     366:	80 81       	ld	r24, Z
     368:	82 fd       	sbrc	r24, 2
     36a:	17 c0       	rjmp	.+46     	; 0x39a <__vector_18+0x54>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     36c:	e0 91 02 03 	lds	r30, 0x0302
     370:	f0 91 03 03 	lds	r31, 0x0303
     374:	20 81       	ld	r18, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     376:	80 91 05 03 	lds	r24, 0x0305
     37a:	8f 5f       	subi	r24, 0xFF	; 255
     37c:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     37e:	90 91 06 03 	lds	r25, 0x0306
     382:	89 17       	cp	r24, r25
     384:	79 f0       	breq	.+30     	; 0x3a4 <__vector_18+0x5e>
      _rx_buffer[_rx_buffer_head] = c;
     386:	e5 e0       	ldi	r30, 0x05	; 5
     388:	f3 e0       	ldi	r31, 0x03	; 3
     38a:	a0 81       	ld	r26, Z
     38c:	b0 e0       	ldi	r27, 0x00	; 0
     38e:	a4 51       	subi	r26, 0x14	; 20
     390:	bd 4f       	sbci	r27, 0xFD	; 253
     392:	5d 96       	adiw	r26, 0x1d	; 29
     394:	2c 93       	st	X, r18
      _rx_buffer_head = i;
     396:	80 83       	st	Z, r24
     398:	05 c0       	rjmp	.+10     	; 0x3a4 <__vector_18+0x5e>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     39a:	e0 91 02 03 	lds	r30, 0x0302
     39e:	f0 91 03 03 	lds	r31, 0x0303
     3a2:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     3a4:	ff 91       	pop	r31
     3a6:	ef 91       	pop	r30
     3a8:	bf 91       	pop	r27
     3aa:	af 91       	pop	r26
     3ac:	9f 91       	pop	r25
     3ae:	8f 91       	pop	r24
     3b0:	2f 91       	pop	r18
     3b2:	0f 90       	pop	r0
     3b4:	0f be       	out	0x3f, r0	; 63
     3b6:	0f 90       	pop	r0
     3b8:	1f 90       	pop	r1
     3ba:	18 95       	reti

000003bc <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     3bc:	1f 92       	push	r1
     3be:	0f 92       	push	r0
     3c0:	0f b6       	in	r0, 0x3f	; 63
     3c2:	0f 92       	push	r0
     3c4:	11 24       	eor	r1, r1
     3c6:	2f 93       	push	r18
     3c8:	3f 93       	push	r19
     3ca:	4f 93       	push	r20
     3cc:	5f 93       	push	r21
     3ce:	6f 93       	push	r22
     3d0:	7f 93       	push	r23
     3d2:	8f 93       	push	r24
     3d4:	9f 93       	push	r25
     3d6:	af 93       	push	r26
     3d8:	bf 93       	push	r27
     3da:	ef 93       	push	r30
     3dc:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     3de:	8c ee       	ldi	r24, 0xEC	; 236
     3e0:	92 e0       	ldi	r25, 0x02	; 2
     3e2:	0e 94 b3 00 	call	0x166	; 0x166 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     3e6:	ff 91       	pop	r31
     3e8:	ef 91       	pop	r30
     3ea:	bf 91       	pop	r27
     3ec:	af 91       	pop	r26
     3ee:	9f 91       	pop	r25
     3f0:	8f 91       	pop	r24
     3f2:	7f 91       	pop	r23
     3f4:	6f 91       	pop	r22
     3f6:	5f 91       	pop	r21
     3f8:	4f 91       	pop	r20
     3fa:	3f 91       	pop	r19
     3fc:	2f 91       	pop	r18
     3fe:	0f 90       	pop	r0
     400:	0f be       	out	0x3f, r0	; 63
     402:	0f 90       	pop	r0
     404:	1f 90       	pop	r1
     406:	18 95       	reti

00000408 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     408:	10 92 ef 02 	sts	0x02EF, r1
     40c:	10 92 ee 02 	sts	0x02EE, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     410:	88 ee       	ldi	r24, 0xE8	; 232
     412:	93 e0       	ldi	r25, 0x03	; 3
     414:	a0 e0       	ldi	r26, 0x00	; 0
     416:	b0 e0       	ldi	r27, 0x00	; 0
     418:	80 93 f0 02 	sts	0x02F0, r24
     41c:	90 93 f1 02 	sts	0x02F1, r25
     420:	a0 93 f2 02 	sts	0x02F2, r26
     424:	b0 93 f3 02 	sts	0x02F3, r27
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     428:	8c e0       	ldi	r24, 0x0C	; 12
     42a:	91 e0       	ldi	r25, 0x01	; 1
     42c:	90 93 ed 02 	sts	0x02ED, r25
     430:	80 93 ec 02 	sts	0x02EC, r24
     434:	85 ec       	ldi	r24, 0xC5	; 197
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	90 93 f9 02 	sts	0x02F9, r25
     43c:	80 93 f8 02 	sts	0x02F8, r24
     440:	84 ec       	ldi	r24, 0xC4	; 196
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	90 93 fb 02 	sts	0x02FB, r25
     448:	80 93 fa 02 	sts	0x02FA, r24
     44c:	80 ec       	ldi	r24, 0xC0	; 192
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	90 93 fd 02 	sts	0x02FD, r25
     454:	80 93 fc 02 	sts	0x02FC, r24
     458:	81 ec       	ldi	r24, 0xC1	; 193
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	90 93 ff 02 	sts	0x02FF, r25
     460:	80 93 fe 02 	sts	0x02FE, r24
     464:	82 ec       	ldi	r24, 0xC2	; 194
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	90 93 01 03 	sts	0x0301, r25
     46c:	80 93 00 03 	sts	0x0300, r24
     470:	86 ec       	ldi	r24, 0xC6	; 198
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	90 93 03 03 	sts	0x0303, r25
     478:	80 93 02 03 	sts	0x0302, r24
     47c:	10 92 05 03 	sts	0x0305, r1
     480:	10 92 06 03 	sts	0x0306, r1
     484:	10 92 07 03 	sts	0x0307, r1
     488:	10 92 08 03 	sts	0x0308, r1
     48c:	08 95       	ret

0000048e <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
     48e:	08 95       	ret

00000490 <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
     490:	af 92       	push	r10
     492:	bf 92       	push	r11
     494:	cf 92       	push	r12
     496:	df 92       	push	r13
     498:	ef 92       	push	r14
     49a:	ff 92       	push	r15
     49c:	0f 93       	push	r16
     49e:	1f 93       	push	r17
     4a0:	cf 93       	push	r28
     4a2:	df 93       	push	r29
     4a4:	5c 01       	movw	r10, r24
     4a6:	7b 01       	movw	r14, r22
    size_t n = 0;
    for (int i =0; i < 3; i++)
     4a8:	c0 e0       	ldi	r28, 0x00	; 0
     4aa:	d0 e0       	ldi	r29, 0x00	; 0
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
     4ac:	00 e0       	ldi	r16, 0x00	; 0
     4ae:	10 e0       	ldi	r17, 0x00	; 0
     4b0:	f5 01       	movw	r30, r10
     4b2:	ec 0f       	add	r30, r28
     4b4:	fd 1f       	adc	r31, r29
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
     4b6:	4a e0       	ldi	r20, 0x0A	; 10
     4b8:	50 e0       	ldi	r21, 0x00	; 0
     4ba:	62 81       	ldd	r22, Z+2	; 0x02
     4bc:	c7 01       	movw	r24, r14
     4be:	0e 94 bc 03 	call	0x778	; 0x778 <_ZN5Print5printEhi>
     4c2:	6c 01       	movw	r12, r24
        n += p.print('.');
     4c4:	6e e2       	ldi	r22, 0x2E	; 46
     4c6:	c7 01       	movw	r24, r14
     4c8:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <_ZN5Print5printEc>
size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
     4cc:	8c 0d       	add	r24, r12
     4ce:	9d 1d       	adc	r25, r13
        n += p.print('.');
     4d0:	08 0f       	add	r16, r24
     4d2:	19 1f       	adc	r17, r25
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
     4d4:	21 96       	adiw	r28, 0x01	; 1
     4d6:	c3 30       	cpi	r28, 0x03	; 3
     4d8:	d1 05       	cpc	r29, r1
     4da:	51 f7       	brne	.-44     	; 0x4b0 <_ZNK9IPAddress7printToER5Print+0x20>
    {
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
     4dc:	4a e0       	ldi	r20, 0x0A	; 10
     4de:	50 e0       	ldi	r21, 0x00	; 0
     4e0:	f5 01       	movw	r30, r10
     4e2:	65 81       	ldd	r22, Z+5	; 0x05
     4e4:	c7 01       	movw	r24, r14
     4e6:	0e 94 bc 03 	call	0x778	; 0x778 <_ZN5Print5printEhi>
    return n;
}
     4ea:	80 0f       	add	r24, r16
     4ec:	91 1f       	adc	r25, r17
     4ee:	df 91       	pop	r29
     4f0:	cf 91       	pop	r28
     4f2:	1f 91       	pop	r17
     4f4:	0f 91       	pop	r16
     4f6:	ff 90       	pop	r15
     4f8:	ef 90       	pop	r14
     4fa:	df 90       	pop	r13
     4fc:	cf 90       	pop	r12
     4fe:	bf 90       	pop	r11
     500:	af 90       	pop	r10
     502:	08 95       	ret

00000504 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
     504:	0f 93       	push	r16
     506:	fc 01       	movw	r30, r24
     508:	8c e1       	ldi	r24, 0x1C	; 28
     50a:	91 e0       	ldi	r25, 0x01	; 1
     50c:	91 83       	std	Z+1, r25	; 0x01
     50e:	80 83       	st	Z, r24
{
    _address.bytes[0] = first_octet;
     510:	62 83       	std	Z+2, r22	; 0x02
    _address.bytes[1] = second_octet;
     512:	43 83       	std	Z+3, r20	; 0x03
    _address.bytes[2] = third_octet;
     514:	24 83       	std	Z+4, r18	; 0x04
    _address.bytes[3] = fourth_octet;
     516:	05 83       	std	Z+5, r16	; 0x05
}
     518:	0f 91       	pop	r16
     51a:	08 95       	ret

0000051c <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
    return n;
}
     51c:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
     51e:	00 e0       	ldi	r16, 0x00	; 0
     520:	20 e0       	ldi	r18, 0x00	; 0
     522:	40 e0       	ldi	r20, 0x00	; 0
     524:	60 e0       	ldi	r22, 0x00	; 0
     526:	89 e8       	ldi	r24, 0x89	; 137
     528:	93 e0       	ldi	r25, 0x03	; 3
     52a:	0e 94 82 02 	call	0x504	; 0x504 <_ZN9IPAddressC1Ehhhh>
     52e:	0f 91       	pop	r16
     530:	08 95       	ret

00000532 <_Znaj>:
void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
  return malloc(size);
     532:	0e 94 4f 10 	call	0x209e	; 0x209e <malloc>
}
     536:	08 95       	ret

00000538 <_ZdlPv>:

void operator delete(void * ptr) {
  free(ptr);
     538:	0e 94 e7 10 	call	0x21ce	; 0x21ce <free>
     53c:	08 95       	ret

0000053e <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     53e:	cf 92       	push	r12
     540:	df 92       	push	r13
     542:	ef 92       	push	r14
     544:	ff 92       	push	r15
     546:	0f 93       	push	r16
     548:	1f 93       	push	r17
     54a:	cf 93       	push	r28
     54c:	df 93       	push	r29
     54e:	6c 01       	movw	r12, r24
  size_t n = 0;
  while (size--) {
     550:	41 15       	cp	r20, r1
     552:	51 05       	cpc	r21, r1
     554:	b1 f0       	breq	.+44     	; 0x582 <_ZN5Print5writeEPKhj+0x44>
     556:	06 2f       	mov	r16, r22
     558:	17 2f       	mov	r17, r23
     55a:	ea 01       	movw	r28, r20
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
     55c:	e1 2c       	mov	r14, r1
     55e:	f1 2c       	mov	r15, r1
  while (size--) {
    n += write(*buffer++);
     560:	d8 01       	movw	r26, r16
     562:	6d 91       	ld	r22, X+
     564:	8d 01       	movw	r16, r26
     566:	d6 01       	movw	r26, r12
     568:	ed 91       	ld	r30, X+
     56a:	fc 91       	ld	r31, X
     56c:	01 90       	ld	r0, Z+
     56e:	f0 81       	ld	r31, Z
     570:	e0 2d       	mov	r30, r0
     572:	c6 01       	movw	r24, r12
     574:	09 95       	icall
     576:	e8 0e       	add	r14, r24
     578:	f9 1e       	adc	r15, r25
     57a:	21 97       	sbiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
     57c:	20 97       	sbiw	r28, 0x00	; 0
     57e:	81 f7       	brne	.-32     	; 0x560 <_ZN5Print5writeEPKhj+0x22>
     580:	02 c0       	rjmp	.+4      	; 0x586 <_ZN5Print5writeEPKhj+0x48>
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
     582:	e1 2c       	mov	r14, r1
     584:	f1 2c       	mov	r15, r1
  while (size--) {
    n += write(*buffer++);
  }
  return n;
}
     586:	c7 01       	movw	r24, r14
     588:	df 91       	pop	r29
     58a:	cf 91       	pop	r28
     58c:	1f 91       	pop	r17
     58e:	0f 91       	pop	r16
     590:	ff 90       	pop	r15
     592:	ef 90       	pop	r14
     594:	df 90       	pop	r13
     596:	cf 90       	pop	r12
     598:	08 95       	ret

0000059a <_ZN5Print5printERK6String>:
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
     59a:	dc 01       	movw	r26, r24
     59c:	ed 91       	ld	r30, X+
     59e:	fc 91       	ld	r31, X
     5a0:	db 01       	movw	r26, r22
     5a2:	14 96       	adiw	r26, 0x04	; 4
     5a4:	4d 91       	ld	r20, X+
     5a6:	5c 91       	ld	r21, X
     5a8:	15 97       	sbiw	r26, 0x05	; 5
     5aa:	6d 91       	ld	r22, X+
     5ac:	7c 91       	ld	r23, X
     5ae:	02 80       	ldd	r0, Z+2	; 0x02
     5b0:	f3 81       	ldd	r31, Z+3	; 0x03
     5b2:	e0 2d       	mov	r30, r0
     5b4:	09 95       	icall
}

size_t Print::print(const String &s)
{
  return write(s.c_str(), s.length());
}
     5b6:	08 95       	ret

000005b8 <_ZN5Print5printEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     5b8:	61 15       	cp	r22, r1
     5ba:	71 05       	cpc	r23, r1
     5bc:	81 f0       	breq	.+32     	; 0x5de <_ZN5Print5printEPKc+0x26>
      return write((const uint8_t *)str, strlen(str));
     5be:	fb 01       	movw	r30, r22
     5c0:	01 90       	ld	r0, Z+
     5c2:	00 20       	and	r0, r0
     5c4:	e9 f7       	brne	.-6      	; 0x5c0 <_ZN5Print5printEPKc+0x8>
     5c6:	31 97       	sbiw	r30, 0x01	; 1
     5c8:	af 01       	movw	r20, r30
     5ca:	46 1b       	sub	r20, r22
     5cc:	57 0b       	sbc	r21, r23
     5ce:	dc 01       	movw	r26, r24
     5d0:	ed 91       	ld	r30, X+
     5d2:	fc 91       	ld	r31, X
     5d4:	02 80       	ldd	r0, Z+2	; 0x02
     5d6:	f3 81       	ldd	r31, Z+3	; 0x03
     5d8:	e0 2d       	mov	r30, r0
     5da:	09 95       	icall
     5dc:	08 95       	ret
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	90 e0       	ldi	r25, 0x00	; 0

size_t Print::print(const char str[])
{
  return write(str);
}
     5e2:	08 95       	ret

000005e4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
     5e4:	dc 01       	movw	r26, r24
     5e6:	ed 91       	ld	r30, X+
     5e8:	fc 91       	ld	r31, X
     5ea:	01 90       	ld	r0, Z+
     5ec:	f0 81       	ld	r31, Z
     5ee:	e0 2d       	mov	r30, r0
     5f0:	09 95       	icall
}
     5f2:	08 95       	ret

000005f4 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
     5f4:	0f 93       	push	r16
     5f6:	1f 93       	push	r17
     5f8:	cf 93       	push	r28
     5fa:	df 93       	push	r29
     5fc:	ec 01       	movw	r28, r24
  size_t n = print('\r');
     5fe:	6d e0       	ldi	r22, 0x0D	; 13
     600:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <_ZN5Print5printEc>
     604:	8c 01       	movw	r16, r24
  n += print('\n');
     606:	6a e0       	ldi	r22, 0x0A	; 10
     608:	ce 01       	movw	r24, r28
     60a:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <_ZN5Print5printEc>
  return n;
}
     60e:	80 0f       	add	r24, r16
     610:	91 1f       	adc	r25, r17
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	1f 91       	pop	r17
     618:	0f 91       	pop	r16
     61a:	08 95       	ret

0000061c <_ZN5Print7printlnERK6String>:

size_t Print::println(const String &s)
{
     61c:	0f 93       	push	r16
     61e:	1f 93       	push	r17
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
     624:	ec 01       	movw	r28, r24
  size_t n = print(s);
     626:	0e 94 cd 02 	call	0x59a	; 0x59a <_ZN5Print5printERK6String>
     62a:	8c 01       	movw	r16, r24
  n += println();
     62c:	ce 01       	movw	r24, r28
     62e:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_ZN5Print7printlnEv>
  return n;
}
     632:	80 0f       	add	r24, r16
     634:	91 1f       	adc	r25, r17
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	1f 91       	pop	r17
     63c:	0f 91       	pop	r16
     63e:	08 95       	ret

00000640 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
     640:	0f 93       	push	r16
     642:	1f 93       	push	r17
     644:	cf 93       	push	r28
     646:	df 93       	push	r29
     648:	ec 01       	movw	r28, r24
  size_t n = print(c);
     64a:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <_ZN5Print5printEPKc>
     64e:	8c 01       	movw	r16, r24
  n += println();
     650:	ce 01       	movw	r24, r28
     652:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_ZN5Print7printlnEv>
  return n;
}
     656:	80 0f       	add	r24, r16
     658:	91 1f       	adc	r25, r17
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	1f 91       	pop	r17
     660:	0f 91       	pop	r16
     662:	08 95       	ret

00000664 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
     664:	6f 92       	push	r6
     666:	7f 92       	push	r7
     668:	8f 92       	push	r8
     66a:	9f 92       	push	r9
     66c:	af 92       	push	r10
     66e:	bf 92       	push	r11
     670:	cf 92       	push	r12
     672:	df 92       	push	r13
     674:	ef 92       	push	r14
     676:	ff 92       	push	r15
     678:	0f 93       	push	r16
     67a:	1f 93       	push	r17
     67c:	cf 93       	push	r28
     67e:	df 93       	push	r29
     680:	cd b7       	in	r28, 0x3d	; 61
     682:	de b7       	in	r29, 0x3e	; 62
     684:	a1 97       	sbiw	r28, 0x21	; 33
     686:	0f b6       	in	r0, 0x3f	; 63
     688:	f8 94       	cli
     68a:	de bf       	out	0x3e, r29	; 62
     68c:	0f be       	out	0x3f, r0	; 63
     68e:	cd bf       	out	0x3d, r28	; 61
     690:	6c 01       	movw	r12, r24
     692:	74 2e       	mov	r7, r20
     694:	35 2f       	mov	r19, r21
     696:	86 2f       	mov	r24, r22
     698:	97 2f       	mov	r25, r23
     69a:	62 2e       	mov	r6, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     69c:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     69e:	21 e0       	ldi	r18, 0x01	; 1
     6a0:	26 15       	cp	r18, r6
     6a2:	20 f0       	brcs	.+8      	; 0x6ac <_ZN5Print11printNumberEmh+0x48>
     6a4:	0f 2e       	mov	r0, r31
     6a6:	fa e0       	ldi	r31, 0x0A	; 10
     6a8:	6f 2e       	mov	r6, r31
     6aa:	f0 2d       	mov	r31, r0
     6ac:	7e 01       	movw	r14, r28
     6ae:	a1 e2       	ldi	r26, 0x21	; 33
     6b0:	ea 0e       	add	r14, r26
     6b2:	f1 1c       	adc	r15, r1

  do {
    unsigned long m = n;
    n /= base;
     6b4:	86 2c       	mov	r8, r6
     6b6:	91 2c       	mov	r9, r1
     6b8:	a1 2c       	mov	r10, r1
     6ba:	b1 2c       	mov	r11, r1
     6bc:	67 2d       	mov	r22, r7
     6be:	73 2f       	mov	r23, r19
     6c0:	a5 01       	movw	r20, r10
     6c2:	94 01       	movw	r18, r8
     6c4:	0e 94 27 10 	call	0x204e	; 0x204e <__udivmodsi4>
     6c8:	e2 2f       	mov	r30, r18
     6ca:	73 2f       	mov	r23, r19
     6cc:	02 2f       	mov	r16, r18
     6ce:	13 2f       	mov	r17, r19
     6d0:	24 2f       	mov	r18, r20
     6d2:	35 2f       	mov	r19, r21
    char c = m - base * n;
     6d4:	f7 2d       	mov	r31, r7
     6d6:	6e 9e       	mul	r6, r30
     6d8:	f0 19       	sub	r31, r0
     6da:	11 24       	eor	r1, r1
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     6dc:	b1 e0       	ldi	r27, 0x01	; 1
     6de:	eb 1a       	sub	r14, r27
     6e0:	f1 08       	sbc	r15, r1
     6e2:	fa 30       	cpi	r31, 0x0A	; 10
     6e4:	10 f4       	brcc	.+4      	; 0x6ea <_ZN5Print11printNumberEmh+0x86>
     6e6:	f0 5d       	subi	r31, 0xD0	; 208
     6e8:	01 c0       	rjmp	.+2      	; 0x6ec <_ZN5Print11printNumberEmh+0x88>
     6ea:	f9 5c       	subi	r31, 0xC9	; 201
     6ec:	d7 01       	movw	r26, r14
     6ee:	fc 93       	st	X, r31
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
     6f0:	01 2b       	or	r16, r17
     6f2:	02 2b       	or	r16, r18
     6f4:	03 2b       	or	r16, r19
     6f6:	29 f0       	breq	.+10     	; 0x702 <_ZN5Print11printNumberEmh+0x9e>
    unsigned long m = n;
    n /= base;
     6f8:	7e 2e       	mov	r7, r30
     6fa:	37 2f       	mov	r19, r23
     6fc:	84 2f       	mov	r24, r20
     6fe:	95 2f       	mov	r25, r21
     700:	dd cf       	rjmp	.-70     	; 0x6bc <_ZN5Print11printNumberEmh+0x58>
     702:	e1 14       	cp	r14, r1
     704:	f1 04       	cpc	r15, r1
     706:	91 f0       	breq	.+36     	; 0x72c <_ZN5Print11printNumberEmh+0xc8>
      return write((const uint8_t *)str, strlen(str));
     708:	f7 01       	movw	r30, r14
     70a:	01 90       	ld	r0, Z+
     70c:	00 20       	and	r0, r0
     70e:	e9 f7       	brne	.-6      	; 0x70a <_ZN5Print11printNumberEmh+0xa6>
     710:	31 97       	sbiw	r30, 0x01	; 1
     712:	af 01       	movw	r20, r30
     714:	4e 19       	sub	r20, r14
     716:	5f 09       	sbc	r21, r15
     718:	d6 01       	movw	r26, r12
     71a:	ed 91       	ld	r30, X+
     71c:	fc 91       	ld	r31, X
     71e:	02 80       	ldd	r0, Z+2	; 0x02
     720:	f3 81       	ldd	r31, Z+3	; 0x03
     722:	e0 2d       	mov	r30, r0
     724:	b7 01       	movw	r22, r14
     726:	c6 01       	movw	r24, r12
     728:	09 95       	icall
     72a:	02 c0       	rjmp	.+4      	; 0x730 <_ZN5Print11printNumberEmh+0xcc>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	90 e0       	ldi	r25, 0x00	; 0
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
}
     730:	a1 96       	adiw	r28, 0x21	; 33
     732:	0f b6       	in	r0, 0x3f	; 63
     734:	f8 94       	cli
     736:	de bf       	out	0x3e, r29	; 62
     738:	0f be       	out	0x3f, r0	; 63
     73a:	cd bf       	out	0x3d, r28	; 61
     73c:	df 91       	pop	r29
     73e:	cf 91       	pop	r28
     740:	1f 91       	pop	r17
     742:	0f 91       	pop	r16
     744:	ff 90       	pop	r15
     746:	ef 90       	pop	r14
     748:	df 90       	pop	r13
     74a:	cf 90       	pop	r12
     74c:	bf 90       	pop	r11
     74e:	af 90       	pop	r10
     750:	9f 90       	pop	r9
     752:	8f 90       	pop	r8
     754:	7f 90       	pop	r7
     756:	6f 90       	pop	r6
     758:	08 95       	ret

0000075a <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
     75a:	21 15       	cp	r18, r1
     75c:	31 05       	cpc	r19, r1
     75e:	49 f4       	brne	.+18     	; 0x772 <_ZN5Print5printEmi+0x18>
     760:	dc 01       	movw	r26, r24
     762:	ed 91       	ld	r30, X+
     764:	fc 91       	ld	r31, X
     766:	01 90       	ld	r0, Z+
     768:	f0 81       	ld	r31, Z
     76a:	e0 2d       	mov	r30, r0
     76c:	64 2f       	mov	r22, r20
     76e:	09 95       	icall
     770:	08 95       	ret
  else return printNumber(n, base);
     772:	0e 94 32 03 	call	0x664	; 0x664 <_ZN5Print11printNumberEmh>
}
     776:	08 95       	ret

00000778 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
     778:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
     77a:	46 2f       	mov	r20, r22
     77c:	50 e0       	ldi	r21, 0x00	; 0
     77e:	60 e0       	ldi	r22, 0x00	; 0
     780:	70 e0       	ldi	r23, 0x00	; 0
     782:	0e 94 ad 03 	call	0x75a	; 0x75a <_ZN5Print5printEmi>
}
     786:	08 95       	ret

00000788 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
     788:	81 30       	cpi	r24, 0x01	; 1
     78a:	39 f0       	breq	.+14     	; 0x79a <_Z12disableTimerh+0x12>
     78c:	18 f0       	brcs	.+6      	; 0x794 <_Z12disableTimerh+0xc>
     78e:	82 30       	cpi	r24, 0x02	; 2
     790:	51 f0       	breq	.+20     	; 0x7a6 <_Z12disableTimerh+0x1e>
     792:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
     794:	10 92 6e 00 	sts	0x006E, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
     798:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
     79a:	ef e6       	ldi	r30, 0x6F	; 111
     79c:	f0 e0       	ldi	r31, 0x00	; 0
     79e:	80 81       	ld	r24, Z
     7a0:	8d 7f       	andi	r24, 0xFD	; 253
     7a2:	80 83       	st	Z, r24
      break;
     7a4:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
     7a6:	e0 e7       	ldi	r30, 0x70	; 112
     7a8:	f0 e0       	ldi	r31, 0x00	; 0
     7aa:	80 81       	ld	r24, Z
     7ac:	8d 7f       	andi	r24, 0xFD	; 253
     7ae:	80 83       	st	Z, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
     7b6:	e1 eb       	ldi	r30, 0xB1	; 177
     7b8:	f0 e0       	ldi	r31, 0x00	; 0
     7ba:	80 81       	ld	r24, Z
     7bc:	88 7f       	andi	r24, 0xF8	; 248
     7be:	84 60       	ori	r24, 0x04	; 4
     7c0:	80 83       	st	Z, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
     7c2:	10 92 b3 00 	sts	0x00B3, r1
     7c6:	08 95       	ret

000007c8 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
     7c8:	cf 93       	push	r28
     7ca:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
     7cc:	80 91 06 01 	lds	r24, 0x0106
     7d0:	8c 13       	cpse	r24, r28
     7d2:	07 c0       	rjmp	.+14     	; 0x7e2 <_Z6noToneh+0x1a>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
     7d4:	e8 e6       	ldi	r30, 0x68	; 104
     7d6:	f0 e0       	ldi	r31, 0x00	; 0
     7d8:	84 91       	lpm	r24, Z
      tone_pins[i] = 255;
     7da:	9f ef       	ldi	r25, 0xFF	; 255
     7dc:	90 93 06 01 	sts	0x0106, r25
     7e0:	01 c0       	rjmp	.+2      	; 0x7e4 <_Z6noToneh+0x1c>
     7e2:	8f ef       	ldi	r24, 0xFF	; 255
    }
  }
  
  disableTimer(_timer);
     7e4:	0e 94 c4 03 	call	0x788	; 0x788 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
     7e8:	60 e0       	ldi	r22, 0x00	; 0
     7ea:	8c 2f       	mov	r24, r28
     7ec:	0e 94 a3 05 	call	0xb46	; 0xb46 <digitalWrite>
}
     7f0:	cf 91       	pop	r28
     7f2:	08 95       	ret

000007f4 <__vector_7>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
     7f4:	1f 92       	push	r1
     7f6:	0f 92       	push	r0
     7f8:	0f b6       	in	r0, 0x3f	; 63
     7fa:	0f 92       	push	r0
     7fc:	11 24       	eor	r1, r1
     7fe:	2f 93       	push	r18
     800:	3f 93       	push	r19
     802:	4f 93       	push	r20
     804:	5f 93       	push	r21
     806:	6f 93       	push	r22
     808:	7f 93       	push	r23
     80a:	8f 93       	push	r24
     80c:	9f 93       	push	r25
     80e:	af 93       	push	r26
     810:	bf 93       	push	r27
     812:	ef 93       	push	r30
     814:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
     816:	80 91 92 03 	lds	r24, 0x0392
     81a:	90 91 93 03 	lds	r25, 0x0393
     81e:	a0 91 94 03 	lds	r26, 0x0394
     822:	b0 91 95 03 	lds	r27, 0x0395
     826:	89 2b       	or	r24, r25
     828:	8a 2b       	or	r24, r26
     82a:	8b 2b       	or	r24, r27
     82c:	51 f1       	breq	.+84     	; 0x882 <__vector_7+0x8e>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
     82e:	80 91 8f 03 	lds	r24, 0x038F
     832:	e0 91 90 03 	lds	r30, 0x0390
     836:	f0 91 91 03 	lds	r31, 0x0391
     83a:	90 81       	ld	r25, Z
     83c:	89 27       	eor	r24, r25
     83e:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
     840:	80 91 92 03 	lds	r24, 0x0392
     844:	90 91 93 03 	lds	r25, 0x0393
     848:	a0 91 94 03 	lds	r26, 0x0394
     84c:	b0 91 95 03 	lds	r27, 0x0395
     850:	18 16       	cp	r1, r24
     852:	19 06       	cpc	r1, r25
     854:	1a 06       	cpc	r1, r26
     856:	1b 06       	cpc	r1, r27
     858:	c4 f4       	brge	.+48     	; 0x88a <__vector_7+0x96>
      timer2_toggle_count--;
     85a:	80 91 92 03 	lds	r24, 0x0392
     85e:	90 91 93 03 	lds	r25, 0x0393
     862:	a0 91 94 03 	lds	r26, 0x0394
     866:	b0 91 95 03 	lds	r27, 0x0395
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	a1 09       	sbc	r26, r1
     86e:	b1 09       	sbc	r27, r1
     870:	80 93 92 03 	sts	0x0392, r24
     874:	90 93 93 03 	sts	0x0393, r25
     878:	a0 93 94 03 	sts	0x0394, r26
     87c:	b0 93 95 03 	sts	0x0395, r27
     880:	04 c0       	rjmp	.+8      	; 0x88a <__vector_7+0x96>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
     882:	80 91 06 01 	lds	r24, 0x0106
     886:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
     88a:	ff 91       	pop	r31
     88c:	ef 91       	pop	r30
     88e:	bf 91       	pop	r27
     890:	af 91       	pop	r26
     892:	9f 91       	pop	r25
     894:	8f 91       	pop	r24
     896:	7f 91       	pop	r23
     898:	6f 91       	pop	r22
     89a:	5f 91       	pop	r21
     89c:	4f 91       	pop	r20
     89e:	3f 91       	pop	r19
     8a0:	2f 91       	pop	r18
     8a2:	0f 90       	pop	r0
     8a4:	0f be       	out	0x3f, r0	; 63
     8a6:	0f 90       	pop	r0
     8a8:	1f 90       	pop	r1
     8aa:	18 95       	reti

000008ac <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

ISR(INT0_vect) {
     8ac:	1f 92       	push	r1
     8ae:	0f 92       	push	r0
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	0f 92       	push	r0
     8b4:	11 24       	eor	r1, r1
     8b6:	2f 93       	push	r18
     8b8:	3f 93       	push	r19
     8ba:	4f 93       	push	r20
     8bc:	5f 93       	push	r21
     8be:	6f 93       	push	r22
     8c0:	7f 93       	push	r23
     8c2:	8f 93       	push	r24
     8c4:	9f 93       	push	r25
     8c6:	af 93       	push	r26
     8c8:	bf 93       	push	r27
     8ca:	ef 93       	push	r30
     8cc:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
     8ce:	80 91 96 03 	lds	r24, 0x0396
     8d2:	90 91 97 03 	lds	r25, 0x0397
     8d6:	89 2b       	or	r24, r25
     8d8:	29 f0       	breq	.+10     	; 0x8e4 <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
     8da:	e0 91 96 03 	lds	r30, 0x0396
     8de:	f0 91 97 03 	lds	r31, 0x0397
     8e2:	09 95       	icall
}
     8e4:	ff 91       	pop	r31
     8e6:	ef 91       	pop	r30
     8e8:	bf 91       	pop	r27
     8ea:	af 91       	pop	r26
     8ec:	9f 91       	pop	r25
     8ee:	8f 91       	pop	r24
     8f0:	7f 91       	pop	r23
     8f2:	6f 91       	pop	r22
     8f4:	5f 91       	pop	r21
     8f6:	4f 91       	pop	r20
     8f8:	3f 91       	pop	r19
     8fa:	2f 91       	pop	r18
     8fc:	0f 90       	pop	r0
     8fe:	0f be       	out	0x3f, r0	; 63
     900:	0f 90       	pop	r0
     902:	1f 90       	pop	r1
     904:	18 95       	reti

00000906 <__vector_2>:

ISR(INT1_vect) {
     906:	1f 92       	push	r1
     908:	0f 92       	push	r0
     90a:	0f b6       	in	r0, 0x3f	; 63
     90c:	0f 92       	push	r0
     90e:	11 24       	eor	r1, r1
     910:	2f 93       	push	r18
     912:	3f 93       	push	r19
     914:	4f 93       	push	r20
     916:	5f 93       	push	r21
     918:	6f 93       	push	r22
     91a:	7f 93       	push	r23
     91c:	8f 93       	push	r24
     91e:	9f 93       	push	r25
     920:	af 93       	push	r26
     922:	bf 93       	push	r27
     924:	ef 93       	push	r30
     926:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
     928:	80 91 98 03 	lds	r24, 0x0398
     92c:	90 91 99 03 	lds	r25, 0x0399
     930:	89 2b       	or	r24, r25
     932:	29 f0       	breq	.+10     	; 0x93e <__vector_2+0x38>
    intFunc[EXTERNAL_INT_1]();
     934:	e0 91 98 03 	lds	r30, 0x0398
     938:	f0 91 99 03 	lds	r31, 0x0399
     93c:	09 95       	icall
}
     93e:	ff 91       	pop	r31
     940:	ef 91       	pop	r30
     942:	bf 91       	pop	r27
     944:	af 91       	pop	r26
     946:	9f 91       	pop	r25
     948:	8f 91       	pop	r24
     94a:	7f 91       	pop	r23
     94c:	6f 91       	pop	r22
     94e:	5f 91       	pop	r21
     950:	4f 91       	pop	r20
     952:	3f 91       	pop	r19
     954:	2f 91       	pop	r18
     956:	0f 90       	pop	r0
     958:	0f be       	out	0x3f, r0	; 63
     95a:	0f 90       	pop	r0
     95c:	1f 90       	pop	r1
     95e:	18 95       	reti

00000960 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     960:	1f 92       	push	r1
     962:	0f 92       	push	r0
     964:	0f b6       	in	r0, 0x3f	; 63
     966:	0f 92       	push	r0
     968:	11 24       	eor	r1, r1
     96a:	2f 93       	push	r18
     96c:	3f 93       	push	r19
     96e:	8f 93       	push	r24
     970:	9f 93       	push	r25
     972:	af 93       	push	r26
     974:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     976:	80 91 9b 03 	lds	r24, 0x039B
     97a:	90 91 9c 03 	lds	r25, 0x039C
     97e:	a0 91 9d 03 	lds	r26, 0x039D
     982:	b0 91 9e 03 	lds	r27, 0x039E
	unsigned char f = timer0_fract;
     986:	30 91 9a 03 	lds	r19, 0x039A

	m += MILLIS_INC;
	f += FRACT_INC;
     98a:	23 e0       	ldi	r18, 0x03	; 3
     98c:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     98e:	2d 37       	cpi	r18, 0x7D	; 125
     990:	20 f4       	brcc	.+8      	; 0x99a <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     992:	01 96       	adiw	r24, 0x01	; 1
     994:	a1 1d       	adc	r26, r1
     996:	b1 1d       	adc	r27, r1
     998:	05 c0       	rjmp	.+10     	; 0x9a4 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     99a:	26 e8       	ldi	r18, 0x86	; 134
     99c:	23 0f       	add	r18, r19
		m += 1;
     99e:	02 96       	adiw	r24, 0x02	; 2
     9a0:	a1 1d       	adc	r26, r1
     9a2:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     9a4:	20 93 9a 03 	sts	0x039A, r18
	timer0_millis = m;
     9a8:	80 93 9b 03 	sts	0x039B, r24
     9ac:	90 93 9c 03 	sts	0x039C, r25
     9b0:	a0 93 9d 03 	sts	0x039D, r26
     9b4:	b0 93 9e 03 	sts	0x039E, r27
	timer0_overflow_count++;
     9b8:	80 91 9f 03 	lds	r24, 0x039F
     9bc:	90 91 a0 03 	lds	r25, 0x03A0
     9c0:	a0 91 a1 03 	lds	r26, 0x03A1
     9c4:	b0 91 a2 03 	lds	r27, 0x03A2
     9c8:	01 96       	adiw	r24, 0x01	; 1
     9ca:	a1 1d       	adc	r26, r1
     9cc:	b1 1d       	adc	r27, r1
     9ce:	80 93 9f 03 	sts	0x039F, r24
     9d2:	90 93 a0 03 	sts	0x03A0, r25
     9d6:	a0 93 a1 03 	sts	0x03A1, r26
     9da:	b0 93 a2 03 	sts	0x03A2, r27
}
     9de:	bf 91       	pop	r27
     9e0:	af 91       	pop	r26
     9e2:	9f 91       	pop	r25
     9e4:	8f 91       	pop	r24
     9e6:	3f 91       	pop	r19
     9e8:	2f 91       	pop	r18
     9ea:	0f 90       	pop	r0
     9ec:	0f be       	out	0x3f, r0	; 63
     9ee:	0f 90       	pop	r0
     9f0:	1f 90       	pop	r1
     9f2:	18 95       	reti

000009f4 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     9f4:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     9f6:	f8 94       	cli
	m = timer0_millis;
     9f8:	60 91 9b 03 	lds	r22, 0x039B
     9fc:	70 91 9c 03 	lds	r23, 0x039C
     a00:	80 91 9d 03 	lds	r24, 0x039D
     a04:	90 91 9e 03 	lds	r25, 0x039E
	SREG = oldSREG;
     a08:	2f bf       	out	0x3f, r18	; 63

	return m;
}
     a0a:	08 95       	ret

00000a0c <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     a0c:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     a0e:	f8 94       	cli
	m = timer0_overflow_count;
     a10:	80 91 9f 03 	lds	r24, 0x039F
     a14:	90 91 a0 03 	lds	r25, 0x03A0
     a18:	a0 91 a1 03 	lds	r26, 0x03A1
     a1c:	b0 91 a2 03 	lds	r27, 0x03A2
#if defined(TCNT0)
	t = TCNT0;
     a20:	26 b5       	in	r18, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     a22:	a8 9b       	sbis	0x15, 0	; 21
     a24:	05 c0       	rjmp	.+10     	; 0xa30 <micros+0x24>
     a26:	2f 3f       	cpi	r18, 0xFF	; 255
     a28:	19 f0       	breq	.+6      	; 0xa30 <micros+0x24>
		m++;
     a2a:	01 96       	adiw	r24, 0x01	; 1
     a2c:	a1 1d       	adc	r26, r1
     a2e:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     a30:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     a32:	ba 2f       	mov	r27, r26
     a34:	a9 2f       	mov	r26, r25
     a36:	98 2f       	mov	r25, r24
     a38:	88 27       	eor	r24, r24
     a3a:	82 0f       	add	r24, r18
     a3c:	91 1d       	adc	r25, r1
     a3e:	a1 1d       	adc	r26, r1
     a40:	b1 1d       	adc	r27, r1
     a42:	bc 01       	movw	r22, r24
     a44:	cd 01       	movw	r24, r26
     a46:	66 0f       	add	r22, r22
     a48:	77 1f       	adc	r23, r23
     a4a:	88 1f       	adc	r24, r24
     a4c:	99 1f       	adc	r25, r25
     a4e:	66 0f       	add	r22, r22
     a50:	77 1f       	adc	r23, r23
     a52:	88 1f       	adc	r24, r24
     a54:	99 1f       	adc	r25, r25
}
     a56:	08 95       	ret

00000a58 <delay>:

void delay(unsigned long ms)
{
     a58:	cf 92       	push	r12
     a5a:	df 92       	push	r13
     a5c:	ef 92       	push	r14
     a5e:	ff 92       	push	r15
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	6b 01       	movw	r12, r22
     a66:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
     a68:	0e 94 06 05 	call	0xa0c	; 0xa0c <micros>
     a6c:	eb 01       	movw	r28, r22

	while (ms > 0) {
     a6e:	c1 14       	cp	r12, r1
     a70:	d1 04       	cpc	r13, r1
     a72:	e1 04       	cpc	r14, r1
     a74:	f1 04       	cpc	r15, r1
     a76:	a9 f0       	breq	.+42     	; 0xaa2 <delay+0x4a>
		yield();
     a78:	0e 94 47 02 	call	0x48e	; 0x48e <yield>
		if (((uint16_t)micros() - start) >= 1000) {
     a7c:	0e 94 06 05 	call	0xa0c	; 0xa0c <micros>
     a80:	6c 1b       	sub	r22, r28
     a82:	7d 0b       	sbc	r23, r29
     a84:	68 3e       	cpi	r22, 0xE8	; 232
     a86:	73 40       	sbci	r23, 0x03	; 3
     a88:	38 f0       	brcs	.+14     	; 0xa98 <delay+0x40>
			ms--;
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	c8 1a       	sub	r12, r24
     a8e:	d1 08       	sbc	r13, r1
     a90:	e1 08       	sbc	r14, r1
     a92:	f1 08       	sbc	r15, r1
			start += 1000;
     a94:	c8 51       	subi	r28, 0x18	; 24
     a96:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
     a98:	c1 14       	cp	r12, r1
     a9a:	d1 04       	cpc	r13, r1
     a9c:	e1 04       	cpc	r14, r1
     a9e:	f1 04       	cpc	r15, r1
     aa0:	59 f7       	brne	.-42     	; 0xa78 <delay+0x20>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	df 90       	pop	r13
     aac:	cf 90       	pop	r12
     aae:	08 95       	ret

00000ab0 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
     ab0:	8e 30       	cpi	r24, 0x0E	; 14
     ab2:	08 f0       	brcs	.+2      	; 0xab6 <analogRead+0x6>
     ab4:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
     ab6:	87 70       	andi	r24, 0x07	; 7
     ab8:	20 91 07 01 	lds	r18, 0x0107
     abc:	90 e4       	ldi	r25, 0x40	; 64
     abe:	29 9f       	mul	r18, r25
     ac0:	90 01       	movw	r18, r0
     ac2:	11 24       	eor	r1, r1
     ac4:	28 2b       	or	r18, r24
     ac6:	20 93 7c 00 	sts	0x007C, r18
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
     aca:	ea e7       	ldi	r30, 0x7A	; 122
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	80 81       	ld	r24, Z
     ad0:	80 64       	ori	r24, 0x40	; 64
     ad2:	80 83       	st	Z, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
     ad4:	80 81       	ld	r24, Z
     ad6:	86 fd       	sbrc	r24, 6
     ad8:	fd cf       	rjmp	.-6      	; 0xad4 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
     ada:	80 91 78 00 	lds	r24, 0x0078
	high = ADCH;
     ade:	20 91 79 00 	lds	r18, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
     ae2:	90 e0       	ldi	r25, 0x00	; 0
}
     ae4:	92 2b       	or	r25, r18
     ae6:	08 95       	ret

00000ae8 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     ae8:	83 30       	cpi	r24, 0x03	; 3
     aea:	69 f0       	breq	.+26     	; 0xb06 <turnOffPWM+0x1e>
     aec:	28 f4       	brcc	.+10     	; 0xaf8 <turnOffPWM+0x10>
     aee:	81 30       	cpi	r24, 0x01	; 1
     af0:	b1 f0       	breq	.+44     	; 0xb1e <turnOffPWM+0x36>
     af2:	82 30       	cpi	r24, 0x02	; 2
     af4:	c1 f0       	breq	.+48     	; 0xb26 <turnOffPWM+0x3e>
     af6:	08 95       	ret
     af8:	87 30       	cpi	r24, 0x07	; 7
     afa:	c9 f0       	breq	.+50     	; 0xb2e <turnOffPWM+0x46>
     afc:	88 30       	cpi	r24, 0x08	; 8
     afe:	e9 f0       	breq	.+58     	; 0xb3a <turnOffPWM+0x52>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	01 f5       	brne	.+64     	; 0xb44 <turnOffPWM+0x5c>
     b04:	06 c0       	rjmp	.+12     	; 0xb12 <turnOffPWM+0x2a>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     b06:	e0 e8       	ldi	r30, 0x80	; 128
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	80 81       	ld	r24, Z
     b0c:	8f 77       	andi	r24, 0x7F	; 127
     b0e:	80 83       	st	Z, r24
     b10:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     b12:	e0 e8       	ldi	r30, 0x80	; 128
     b14:	f0 e0       	ldi	r31, 0x00	; 0
     b16:	80 81       	ld	r24, Z
     b18:	8f 7d       	andi	r24, 0xDF	; 223
     b1a:	80 83       	st	Z, r24
     b1c:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     b1e:	84 b5       	in	r24, 0x24	; 36
     b20:	8f 77       	andi	r24, 0x7F	; 127
     b22:	84 bd       	out	0x24, r24	; 36
     b24:	08 95       	ret
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     b26:	84 b5       	in	r24, 0x24	; 36
     b28:	8f 7d       	andi	r24, 0xDF	; 223
     b2a:	84 bd       	out	0x24, r24	; 36
     b2c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     b2e:	e0 eb       	ldi	r30, 0xB0	; 176
     b30:	f0 e0       	ldi	r31, 0x00	; 0
     b32:	80 81       	ld	r24, Z
     b34:	8f 77       	andi	r24, 0x7F	; 127
     b36:	80 83       	st	Z, r24
     b38:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     b3a:	e0 eb       	ldi	r30, 0xB0	; 176
     b3c:	f0 e0       	ldi	r31, 0x00	; 0
     b3e:	80 81       	ld	r24, Z
     b40:	8f 7d       	andi	r24, 0xDF	; 223
     b42:	80 83       	st	Z, r24
     b44:	08 95       	ret

00000b46 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     b46:	1f 93       	push	r17
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	c6 2f       	mov	r28, r22
	uint8_t timer = digitalPinToTimer(pin);
     b4e:	28 2f       	mov	r18, r24
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	f9 01       	movw	r30, r18
     b54:	e7 59       	subi	r30, 0x97	; 151
     b56:	ff 4f       	sbci	r31, 0xFF	; 255
     b58:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     b5a:	f9 01       	movw	r30, r18
     b5c:	e3 58       	subi	r30, 0x83	; 131
     b5e:	ff 4f       	sbci	r31, 0xFF	; 255
     b60:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
     b62:	f9 01       	movw	r30, r18
     b64:	ef 56       	subi	r30, 0x6F	; 111
     b66:	ff 4f       	sbci	r31, 0xFF	; 255
     b68:	d4 91       	lpm	r29, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     b6a:	dd 23       	and	r29, r29
     b6c:	c9 f0       	breq	.+50     	; 0xba0 <digitalWrite+0x5a>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     b6e:	81 11       	cpse	r24, r1
     b70:	0e 94 74 05 	call	0xae8	; 0xae8 <turnOffPWM>

	out = portOutputRegister(port);
     b74:	2d 2f       	mov	r18, r29
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	f9 01       	movw	r30, r18
     b7a:	ee 0f       	add	r30, r30
     b7c:	ff 1f       	adc	r31, r31
     b7e:	eb 55       	subi	r30, 0x5B	; 91
     b80:	ff 4f       	sbci	r31, 0xFF	; 255
     b82:	a5 91       	lpm	r26, Z+
     b84:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     b86:	8f b7       	in	r24, 0x3f	; 63
	cli();
     b88:	f8 94       	cli

	if (val == LOW) {
     b8a:	c1 11       	cpse	r28, r1
     b8c:	05 c0       	rjmp	.+10     	; 0xb98 <digitalWrite+0x52>
		*out &= ~bit;
     b8e:	ec 91       	ld	r30, X
     b90:	10 95       	com	r17
     b92:	1e 23       	and	r17, r30
     b94:	1c 93       	st	X, r17
     b96:	03 c0       	rjmp	.+6      	; 0xb9e <digitalWrite+0x58>
	} else {
		*out |= bit;
     b98:	ec 91       	ld	r30, X
     b9a:	1e 2b       	or	r17, r30
     b9c:	1c 93       	st	X, r17
	}

	SREG = oldSREG;
     b9e:	8f bf       	out	0x3f, r24	; 63
}
     ba0:	df 91       	pop	r29
     ba2:	cf 91       	pop	r28
     ba4:	1f 91       	pop	r17
     ba6:	08 95       	ret

00000ba8 <_ZN6StringD1Ev>:
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	free(buffer);
     ba8:	fc 01       	movw	r30, r24
     baa:	80 81       	ld	r24, Z
     bac:	91 81       	ldd	r25, Z+1	; 0x01
     bae:	0e 94 e7 10 	call	0x21ce	; 0x21ce <free>
     bb2:	08 95       	ret

00000bb4 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
     bb8:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
     bba:	88 81       	ld	r24, Y
     bbc:	99 81       	ldd	r25, Y+1	; 0x01
     bbe:	00 97       	sbiw	r24, 0x00	; 0
     bc0:	11 f0       	breq	.+4      	; 0xbc6 <_ZN6String10invalidateEv+0x12>
     bc2:	0e 94 e7 10 	call	0x21ce	; 0x21ce <free>
	buffer = NULL;
     bc6:	19 82       	std	Y+1, r1	; 0x01
     bc8:	18 82       	st	Y, r1
	capacity = len = 0;
     bca:	1d 82       	std	Y+5, r1	; 0x05
     bcc:	1c 82       	std	Y+4, r1	; 0x04
     bce:	1b 82       	std	Y+3, r1	; 0x03
     bd0:	1a 82       	std	Y+2, r1	; 0x02
}
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	08 95       	ret

00000bd8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
     bd8:	0f 93       	push	r16
     bda:	1f 93       	push	r17
     bdc:	cf 93       	push	r28
     bde:	df 93       	push	r29
     be0:	ec 01       	movw	r28, r24
     be2:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     be4:	6f 5f       	subi	r22, 0xFF	; 255
     be6:	7f 4f       	sbci	r23, 0xFF	; 255
     be8:	88 81       	ld	r24, Y
     bea:	99 81       	ldd	r25, Y+1	; 0x01
     bec:	0e 94 76 11 	call	0x22ec	; 0x22ec <realloc>
	if (newbuffer) {
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	31 f0       	breq	.+12     	; 0xc00 <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
     bf4:	99 83       	std	Y+1, r25	; 0x01
     bf6:	88 83       	st	Y, r24
		capacity = maxStrLen;
     bf8:	1b 83       	std	Y+3, r17	; 0x03
     bfa:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	01 c0       	rjmp	.+2      	; 0xc02 <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
     c00:	80 e0       	ldi	r24, 0x00	; 0
}
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	1f 91       	pop	r17
     c08:	0f 91       	pop	r16
     c0a:	08 95       	ret

00000c0c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
     c0c:	cf 93       	push	r28
     c0e:	df 93       	push	r29
     c10:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
     c12:	88 81       	ld	r24, Y
     c14:	99 81       	ldd	r25, Y+1	; 0x01
     c16:	89 2b       	or	r24, r25
     c18:	29 f0       	breq	.+10     	; 0xc24 <_ZN6String7reserveEj+0x18>
     c1a:	8a 81       	ldd	r24, Y+2	; 0x02
     c1c:	9b 81       	ldd	r25, Y+3	; 0x03
     c1e:	86 17       	cp	r24, r22
     c20:	97 07       	cpc	r25, r23
     c22:	70 f4       	brcc	.+28     	; 0xc40 <_ZN6String7reserveEj+0x34>
	if (changeBuffer(size)) {
     c24:	ce 01       	movw	r24, r28
     c26:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN6String12changeBufferEj>
     c2a:	88 23       	and	r24, r24
     c2c:	61 f0       	breq	.+24     	; 0xc46 <_ZN6String7reserveEj+0x3a>
		if (len == 0) buffer[0] = 0;
     c2e:	8c 81       	ldd	r24, Y+4	; 0x04
     c30:	9d 81       	ldd	r25, Y+5	; 0x05
     c32:	89 2b       	or	r24, r25
     c34:	39 f4       	brne	.+14     	; 0xc44 <_ZN6String7reserveEj+0x38>
     c36:	e8 81       	ld	r30, Y
     c38:	f9 81       	ldd	r31, Y+1	; 0x01
     c3a:	10 82       	st	Z, r1
		return 1;
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	03 c0       	rjmp	.+6      	; 0xc46 <_ZN6String7reserveEj+0x3a>
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
	if (buffer && capacity >= size) return 1;
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	01 c0       	rjmp	.+2      	; 0xc46 <_ZN6String7reserveEj+0x3a>
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
		return 1;
     c44:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
     c46:	df 91       	pop	r29
     c48:	cf 91       	pop	r28
     c4a:	08 95       	ret

00000c4c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
     c4c:	ef 92       	push	r14
     c4e:	ff 92       	push	r15
     c50:	0f 93       	push	r16
     c52:	1f 93       	push	r17
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	ec 01       	movw	r28, r24
     c5a:	7b 01       	movw	r14, r22
     c5c:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
     c5e:	ba 01       	movw	r22, r20
     c60:	0e 94 06 06 	call	0xc0c	; 0xc0c <_ZN6String7reserveEj>
     c64:	81 11       	cpse	r24, r1
     c66:	04 c0       	rjmp	.+8      	; 0xc70 <_ZN6String4copyEPKcj+0x24>
		invalidate();
     c68:	ce 01       	movw	r24, r28
     c6a:	0e 94 da 05 	call	0xbb4	; 0xbb4 <_ZN6String10invalidateEv>
		return *this;
     c6e:	07 c0       	rjmp	.+14     	; 0xc7e <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
     c70:	1d 83       	std	Y+5, r17	; 0x05
     c72:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
     c74:	b7 01       	movw	r22, r14
     c76:	88 81       	ld	r24, Y
     c78:	99 81       	ldd	r25, Y+1	; 0x01
     c7a:	0e 94 52 12 	call	0x24a4	; 0x24a4 <strcpy>
	return *this;
}
     c7e:	ce 01       	movw	r24, r28
     c80:	df 91       	pop	r29
     c82:	cf 91       	pop	r28
     c84:	1f 91       	pop	r17
     c86:	0f 91       	pop	r16
     c88:	ff 90       	pop	r15
     c8a:	ef 90       	pop	r14
     c8c:	08 95       	ret

00000c8e <_ZN6StringC1EPKc>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
     c8e:	fc 01       	movw	r30, r24
     c90:	11 82       	std	Z+1, r1	; 0x01
     c92:	10 82       	st	Z, r1
	capacity = 0;
     c94:	13 82       	std	Z+3, r1	; 0x03
     c96:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
     c98:	15 82       	std	Z+5, r1	; 0x05
     c9a:	14 82       	std	Z+4, r1	; 0x04
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
     c9c:	61 15       	cp	r22, r1
     c9e:	71 05       	cpc	r23, r1
     ca0:	51 f0       	breq	.+20     	; 0xcb6 <_ZN6StringC1EPKc+0x28>
     ca2:	fb 01       	movw	r30, r22
     ca4:	01 90       	ld	r0, Z+
     ca6:	00 20       	and	r0, r0
     ca8:	e9 f7       	brne	.-6      	; 0xca4 <_ZN6StringC1EPKc+0x16>
     caa:	31 97       	sbiw	r30, 0x01	; 1
     cac:	af 01       	movw	r20, r30
     cae:	46 1b       	sub	r20, r22
     cb0:	57 0b       	sbc	r21, r23
     cb2:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN6String4copyEPKcj>
     cb6:	08 95       	ret

00000cb8 <_ZN6StringaSERKS_>:
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
     cb8:	cf 93       	push	r28
     cba:	df 93       	push	r29
     cbc:	ec 01       	movw	r28, r24
     cbe:	fb 01       	movw	r30, r22
	if (this == &rhs) return *this;
     cc0:	86 17       	cp	r24, r22
     cc2:	97 07       	cpc	r25, r23
     cc4:	61 f0       	breq	.+24     	; 0xcde <_ZN6StringaSERKS_+0x26>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
     cc6:	60 81       	ld	r22, Z
     cc8:	71 81       	ldd	r23, Z+1	; 0x01
     cca:	61 15       	cp	r22, r1
     ccc:	71 05       	cpc	r23, r1
     cce:	29 f0       	breq	.+10     	; 0xcda <_ZN6StringaSERKS_+0x22>
     cd0:	44 81       	ldd	r20, Z+4	; 0x04
     cd2:	55 81       	ldd	r21, Z+5	; 0x05
     cd4:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN6String4copyEPKcj>
     cd8:	02 c0       	rjmp	.+4      	; 0xcde <_ZN6StringaSERKS_+0x26>
	else invalidate();
     cda:	0e 94 da 05 	call	0xbb4	; 0xbb4 <_ZN6String10invalidateEv>
	
	return *this;
}
     cde:	ce 01       	movw	r24, r28
     ce0:	df 91       	pop	r29
     ce2:	cf 91       	pop	r28
     ce4:	08 95       	ret

00000ce6 <_ZN6StringC1ERKS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
     ce6:	fc 01       	movw	r30, r24
     ce8:	11 82       	std	Z+1, r1	; 0x01
     cea:	10 82       	st	Z, r1
	capacity = 0;
     cec:	13 82       	std	Z+3, r1	; 0x03
     cee:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
     cf0:	15 82       	std	Z+5, r1	; 0x05
     cf2:	14 82       	std	Z+4, r1	; 0x04
}

String::String(const String &value)
{
	init();
	*this = value;
     cf4:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <_ZN6StringaSERKS_>
     cf8:	08 95       	ret

00000cfa <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	ec 01       	movw	r28, r24
	if (cstr) copy(cstr, strlen(cstr));
     d00:	61 15       	cp	r22, r1
     d02:	71 05       	cpc	r23, r1
     d04:	59 f0       	breq	.+22     	; 0xd1c <_ZN6StringaSEPKc+0x22>
     d06:	fb 01       	movw	r30, r22
     d08:	01 90       	ld	r0, Z+
     d0a:	00 20       	and	r0, r0
     d0c:	e9 f7       	brne	.-6      	; 0xd08 <_ZN6StringaSEPKc+0xe>
     d0e:	31 97       	sbiw	r30, 0x01	; 1
     d10:	af 01       	movw	r20, r30
     d12:	46 1b       	sub	r20, r22
     d14:	57 0b       	sbc	r21, r23
     d16:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN6String4copyEPKcj>
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <_ZN6StringaSEPKc+0x26>
	else invalidate();
     d1c:	0e 94 da 05 	call	0xbb4	; 0xbb4 <_ZN6String10invalidateEv>
	
	return *this;
}
     d20:	ce 01       	movw	r24, r28
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
     d26:	08 95       	ret

00000d28 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
     d28:	ef 92       	push	r14
     d2a:	ff 92       	push	r15
     d2c:	0f 93       	push	r16
     d2e:	1f 93       	push	r17
     d30:	cf 93       	push	r28
     d32:	df 93       	push	r29
     d34:	ec 01       	movw	r28, r24
     d36:	8b 01       	movw	r16, r22
	unsigned int newlen = len + length;
     d38:	6c 81       	ldd	r22, Y+4	; 0x04
     d3a:	7d 81       	ldd	r23, Y+5	; 0x05
	if (!cstr) return 0;
     d3c:	01 15       	cp	r16, r1
     d3e:	11 05       	cpc	r17, r1
     d40:	c1 f0       	breq	.+48     	; 0xd72 <_ZN6String6concatEPKcj+0x4a>
	if (length == 0) return 1;
     d42:	41 15       	cp	r20, r1
     d44:	51 05       	cpc	r21, r1
     d46:	b9 f0       	breq	.+46     	; 0xd76 <_ZN6String6concatEPKcj+0x4e>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
     d48:	7a 01       	movw	r14, r20
     d4a:	e6 0e       	add	r14, r22
     d4c:	f7 1e       	adc	r15, r23
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
     d4e:	b7 01       	movw	r22, r14
     d50:	0e 94 06 06 	call	0xc0c	; 0xc0c <_ZN6String7reserveEj>
     d54:	88 23       	and	r24, r24
     d56:	81 f0       	breq	.+32     	; 0xd78 <_ZN6String6concatEPKcj+0x50>
	strcpy(buffer + len, cstr);
     d58:	28 81       	ld	r18, Y
     d5a:	39 81       	ldd	r19, Y+1	; 0x01
     d5c:	8c 81       	ldd	r24, Y+4	; 0x04
     d5e:	9d 81       	ldd	r25, Y+5	; 0x05
     d60:	b8 01       	movw	r22, r16
     d62:	82 0f       	add	r24, r18
     d64:	93 1f       	adc	r25, r19
     d66:	0e 94 52 12 	call	0x24a4	; 0x24a4 <strcpy>
	len = newlen;
     d6a:	fd 82       	std	Y+5, r15	; 0x05
     d6c:	ec 82       	std	Y+4, r14	; 0x04
	return 1;
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	03 c0       	rjmp	.+6      	; 0xd78 <_ZN6String6concatEPKcj+0x50>
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	01 c0       	rjmp	.+2      	; 0xd78 <_ZN6String6concatEPKcj+0x50>
	if (length == 0) return 1;
     d76:	81 e0       	ldi	r24, 0x01	; 1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
     d78:	df 91       	pop	r29
     d7a:	cf 91       	pop	r28
     d7c:	1f 91       	pop	r17
     d7e:	0f 91       	pop	r16
     d80:	ff 90       	pop	r15
     d82:	ef 90       	pop	r14
     d84:	08 95       	ret

00000d86 <_ZN6String6concatERKS_>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
     d86:	fb 01       	movw	r30, r22
     d88:	44 81       	ldd	r20, Z+4	; 0x04
     d8a:	55 81       	ldd	r21, Z+5	; 0x05
     d8c:	60 81       	ld	r22, Z
     d8e:	71 81       	ldd	r23, Z+1	; 0x01
     d90:	0e 94 94 06 	call	0xd28	; 0xd28 <_ZN6String6concatEPKcj>
}
     d94:	08 95       	ret

00000d96 <_ZN6String6concatEPKc>:
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
     d96:	61 15       	cp	r22, r1
     d98:	71 05       	cpc	r23, r1
     d9a:	59 f0       	breq	.+22     	; 0xdb2 <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
     d9c:	fb 01       	movw	r30, r22
     d9e:	01 90       	ld	r0, Z+
     da0:	00 20       	and	r0, r0
     da2:	e9 f7       	brne	.-6      	; 0xd9e <_ZN6String6concatEPKc+0x8>
     da4:	31 97       	sbiw	r30, 0x01	; 1
     da6:	af 01       	movw	r20, r30
     da8:	46 1b       	sub	r20, r22
     daa:	57 0b       	sbc	r21, r23
     dac:	0e 94 94 06 	call	0xd28	; 0xd28 <_ZN6String6concatEPKcj>
     db0:	08 95       	ret
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
     db2:	80 e0       	ldi	r24, 0x00	; 0
	return concat(cstr, strlen(cstr));
}
     db4:	08 95       	ret

00000db6 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
     db6:	cf 93       	push	r28
     db8:	df 93       	push	r29
     dba:	00 d0       	rcall	.+0      	; 0xdbc <_ZN6String6concatEc+0x6>
     dbc:	cd b7       	in	r28, 0x3d	; 61
     dbe:	de b7       	in	r29, 0x3e	; 62
	char buf[2];
	buf[0] = c;
     dc0:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
     dc2:	1a 82       	std	Y+2, r1	; 0x02
	return concat(buf, 1);
     dc4:	41 e0       	ldi	r20, 0x01	; 1
     dc6:	50 e0       	ldi	r21, 0x00	; 0
     dc8:	be 01       	movw	r22, r28
     dca:	6f 5f       	subi	r22, 0xFF	; 255
     dcc:	7f 4f       	sbci	r23, 0xFF	; 255
     dce:	0e 94 94 06 	call	0xd28	; 0xd28 <_ZN6String6concatEPKcj>
}
     dd2:	0f 90       	pop	r0
     dd4:	0f 90       	pop	r0
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	08 95       	ret

00000ddc <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
     ddc:	cf 93       	push	r28
     dde:	df 93       	push	r29
     de0:	ec 01       	movw	r28, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
     de2:	fb 01       	movw	r30, r22
     de4:	44 81       	ldd	r20, Z+4	; 0x04
     de6:	55 81       	ldd	r21, Z+5	; 0x05
     de8:	60 81       	ld	r22, Z
     dea:	71 81       	ldd	r23, Z+1	; 0x01
     dec:	0e 94 94 06 	call	0xd28	; 0xd28 <_ZN6String6concatEPKcj>
     df0:	81 11       	cpse	r24, r1
     df2:	03 c0       	rjmp	.+6      	; 0xdfa <_ZplRK15StringSumHelperRK6String+0x1e>
     df4:	ce 01       	movw	r24, r28
     df6:	0e 94 da 05 	call	0xbb4	; 0xbb4 <_ZN6String10invalidateEv>
	return a;
}
     dfa:	ce 01       	movw	r24, r28
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28
     e00:	08 95       	ret

00000e02 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
     e06:	ec 01       	movw	r28, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
     e08:	61 15       	cp	r22, r1
     e0a:	71 05       	cpc	r23, r1
     e0c:	61 f0       	breq	.+24     	; 0xe26 <_ZplRK15StringSumHelperPKc+0x24>
     e0e:	fb 01       	movw	r30, r22
     e10:	01 90       	ld	r0, Z+
     e12:	00 20       	and	r0, r0
     e14:	e9 f7       	brne	.-6      	; 0xe10 <_ZplRK15StringSumHelperPKc+0xe>
     e16:	31 97       	sbiw	r30, 0x01	; 1
     e18:	af 01       	movw	r20, r30
     e1a:	46 1b       	sub	r20, r22
     e1c:	57 0b       	sbc	r21, r23
     e1e:	0e 94 94 06 	call	0xd28	; 0xd28 <_ZN6String6concatEPKcj>
     e22:	81 11       	cpse	r24, r1
     e24:	03 c0       	rjmp	.+6      	; 0xe2c <_ZplRK15StringSumHelperPKc+0x2a>
     e26:	ce 01       	movw	r24, r28
     e28:	0e 94 da 05 	call	0xbb4	; 0xbb4 <_ZN6String10invalidateEv>
	return a;
}
     e2c:	ce 01       	movw	r24, r28
     e2e:	df 91       	pop	r29
     e30:	cf 91       	pop	r28
     e32:	08 95       	ret

00000e34 <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
     e34:	dc 01       	movw	r26, r24
     e36:	ed 91       	ld	r30, X+
     e38:	fc 91       	ld	r31, X
     e3a:	30 97       	sbiw	r30, 0x00	; 0
     e3c:	39 f0       	breq	.+14     	; 0xe4c <_ZNK6String9compareToERKS_+0x18>
     e3e:	db 01       	movw	r26, r22
     e40:	6d 91       	ld	r22, X+
     e42:	7c 91       	ld	r23, X
     e44:	61 15       	cp	r22, r1
     e46:	71 05       	cpc	r23, r1
     e48:	e9 f4       	brne	.+58     	; 0xe84 <_ZNK6String9compareToERKS_+0x50>
     e4a:	12 c0       	rjmp	.+36     	; 0xe70 <_ZNK6String9compareToERKS_+0x3c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
     e4c:	db 01       	movw	r26, r22
     e4e:	ed 91       	ld	r30, X+
     e50:	fc 91       	ld	r31, X
     e52:	11 97       	sbiw	r26, 0x01	; 1
     e54:	30 97       	sbiw	r30, 0x00	; 0
     e56:	d1 f0       	breq	.+52     	; 0xe8c <_ZNK6String9compareToERKS_+0x58>
     e58:	14 96       	adiw	r26, 0x04	; 4
     e5a:	8d 91       	ld	r24, X+
     e5c:	9c 91       	ld	r25, X
     e5e:	15 97       	sbiw	r26, 0x05	; 5
     e60:	89 2b       	or	r24, r25
     e62:	b9 f0       	breq	.+46     	; 0xe92 <_ZNK6String9compareToERKS_+0x5e>
     e64:	80 81       	ld	r24, Z
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	91 95       	neg	r25
     e6a:	81 95       	neg	r24
     e6c:	91 09       	sbc	r25, r1
     e6e:	08 95       	ret
		if (buffer && len > 0) return *(unsigned char *)buffer;
     e70:	dc 01       	movw	r26, r24
     e72:	14 96       	adiw	r26, 0x04	; 4
     e74:	8d 91       	ld	r24, X+
     e76:	9c 91       	ld	r25, X
     e78:	15 97       	sbiw	r26, 0x05	; 5
     e7a:	89 2b       	or	r24, r25
     e7c:	69 f0       	breq	.+26     	; 0xe98 <_ZNK6String9compareToERKS_+0x64>
     e7e:	80 81       	ld	r24, Z
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	08 95       	ret
		return 0;
	}
	return strcmp(buffer, s.buffer);
     e84:	cf 01       	movw	r24, r30
     e86:	0e 94 49 12 	call	0x2492	; 0x2492 <strcmp>
     e8a:	08 95       	ret
int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
		return 0;
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	08 95       	ret
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	08 95       	ret
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	90 e0       	ldi	r25, 0x00	; 0
	}
	return strcmp(buffer, s.buffer);
}
     e9c:	08 95       	ret

00000e9e <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
     e9e:	fc 01       	movw	r30, r24
     ea0:	44 81       	ldd	r20, Z+4	; 0x04
     ea2:	55 81       	ldd	r21, Z+5	; 0x05
     ea4:	fb 01       	movw	r30, r22
     ea6:	24 81       	ldd	r18, Z+4	; 0x04
     ea8:	35 81       	ldd	r19, Z+5	; 0x05
     eaa:	42 17       	cp	r20, r18
     eac:	53 07       	cpc	r21, r19
     eae:	41 f4       	brne	.+16     	; 0xec0 <_ZNK6String6equalsERKS_+0x22>
     eb0:	0e 94 1a 07 	call	0xe34	; 0xe34 <_ZNK6String9compareToERKS_>
     eb4:	21 e0       	ldi	r18, 0x01	; 1
     eb6:	89 2b       	or	r24, r25
     eb8:	09 f0       	breq	.+2      	; 0xebc <_ZNK6String6equalsERKS_+0x1e>
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	82 2f       	mov	r24, r18
     ebe:	08 95       	ret
     ec0:	80 e0       	ldi	r24, 0x00	; 0
}
     ec2:	08 95       	ret

00000ec4 <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
     ec4:	dc 01       	movw	r26, r24
     ec6:	14 96       	adiw	r26, 0x04	; 4
     ec8:	2d 91       	ld	r18, X+
     eca:	3c 91       	ld	r19, X
     ecc:	15 97       	sbiw	r26, 0x05	; 5
     ece:	23 2b       	or	r18, r19
     ed0:	61 f4       	brne	.+24     	; 0xeea <_ZNK6String6equalsEPKc+0x26>
     ed2:	61 15       	cp	r22, r1
     ed4:	71 05       	cpc	r23, r1
     ed6:	39 f0       	breq	.+14     	; 0xee6 <_ZNK6String6equalsEPKc+0x22>
     ed8:	21 e0       	ldi	r18, 0x01	; 1
     eda:	fb 01       	movw	r30, r22
     edc:	80 81       	ld	r24, Z
     ede:	88 23       	and	r24, r24
     ee0:	c9 f0       	breq	.+50     	; 0xf14 <_ZNK6String6equalsEPKc+0x50>
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	17 c0       	rjmp	.+46     	; 0xf14 <_ZNK6String6equalsEPKc+0x50>
     ee6:	21 e0       	ldi	r18, 0x01	; 1
     ee8:	15 c0       	rjmp	.+42     	; 0xf14 <_ZNK6String6equalsEPKc+0x50>
	if (cstr == NULL) return buffer[0] == 0;
     eea:	61 15       	cp	r22, r1
     eec:	71 05       	cpc	r23, r1
     eee:	49 f4       	brne	.+18     	; 0xf02 <_ZNK6String6equalsEPKc+0x3e>
     ef0:	dc 01       	movw	r26, r24
     ef2:	ed 91       	ld	r30, X+
     ef4:	fc 91       	ld	r31, X
     ef6:	21 e0       	ldi	r18, 0x01	; 1
     ef8:	80 81       	ld	r24, Z
     efa:	88 23       	and	r24, r24
     efc:	59 f0       	breq	.+22     	; 0xf14 <_ZNK6String6equalsEPKc+0x50>
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	09 c0       	rjmp	.+18     	; 0xf14 <_ZNK6String6equalsEPKc+0x50>
	return strcmp(buffer, cstr) == 0;
     f02:	fc 01       	movw	r30, r24
     f04:	80 81       	ld	r24, Z
     f06:	91 81       	ldd	r25, Z+1	; 0x01
     f08:	0e 94 49 12 	call	0x2492	; 0x2492 <strcmp>
     f0c:	21 e0       	ldi	r18, 0x01	; 1
     f0e:	89 2b       	or	r24, r25
     f10:	09 f0       	breq	.+2      	; 0xf14 <_ZNK6String6equalsEPKc+0x50>
     f12:	20 e0       	ldi	r18, 0x00	; 0
}
     f14:	82 2f       	mov	r24, r18
     f16:	08 95       	ret

00000f18 <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
     f18:	fc 01       	movw	r30, r24
     f1a:	ca 01       	movw	r24, r20
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
     f1c:	db 01       	movw	r26, r22
     f1e:	14 96       	adiw	r26, 0x04	; 4
     f20:	4d 91       	ld	r20, X+
     f22:	5c 91       	ld	r21, X
     f24:	15 97       	sbiw	r26, 0x05	; 5
     f26:	24 81       	ldd	r18, Z+4	; 0x04
     f28:	35 81       	ldd	r19, Z+5	; 0x05
     f2a:	24 1b       	sub	r18, r20
     f2c:	35 0b       	sbc	r19, r21
     f2e:	28 17       	cp	r18, r24
     f30:	39 07       	cpc	r19, r25
     f32:	98 f0       	brcs	.+38     	; 0xf5a <_ZNK6String10startsWithERKS_j+0x42>
     f34:	20 81       	ld	r18, Z
     f36:	31 81       	ldd	r19, Z+1	; 0x01
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	81 f0       	breq	.+32     	; 0xf5e <_ZNK6String10startsWithERKS_j+0x46>
     f3e:	6d 91       	ld	r22, X+
     f40:	7c 91       	ld	r23, X
     f42:	61 15       	cp	r22, r1
     f44:	71 05       	cpc	r23, r1
     f46:	69 f0       	breq	.+26     	; 0xf62 <_ZNK6String10startsWithERKS_j+0x4a>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
     f48:	82 0f       	add	r24, r18
     f4a:	93 1f       	adc	r25, r19
     f4c:	0e 94 59 12 	call	0x24b2	; 0x24b2 <strncmp>
     f50:	21 e0       	ldi	r18, 0x01	; 1
     f52:	89 2b       	or	r24, r25
     f54:	39 f0       	breq	.+14     	; 0xf64 <_ZNK6String10startsWithERKS_j+0x4c>
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	05 c0       	rjmp	.+10     	; 0xf64 <_ZNK6String10startsWithERKS_j+0x4c>
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
     f5a:	20 e0       	ldi	r18, 0x00	; 0
     f5c:	03 c0       	rjmp	.+6      	; 0xf64 <_ZNK6String10startsWithERKS_j+0x4c>
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	01 c0       	rjmp	.+2      	; 0xf64 <_ZNK6String10startsWithERKS_j+0x4c>
     f62:	20 e0       	ldi	r18, 0x00	; 0
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}
     f64:	82 2f       	mov	r24, r18
     f66:	08 95       	ret

00000f68 <_ZNK6String10startsWithERKS_>:
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
     f68:	fc 01       	movw	r30, r24
     f6a:	44 81       	ldd	r20, Z+4	; 0x04
     f6c:	55 81       	ldd	r21, Z+5	; 0x05
     f6e:	fb 01       	movw	r30, r22
     f70:	24 81       	ldd	r18, Z+4	; 0x04
     f72:	35 81       	ldd	r19, Z+5	; 0x05
     f74:	42 17       	cp	r20, r18
     f76:	53 07       	cpc	r21, r19
     f78:	28 f0       	brcs	.+10     	; 0xf84 <_ZNK6String10startsWithERKS_+0x1c>
	return startsWith(s2, 0);
     f7a:	40 e0       	ldi	r20, 0x00	; 0
     f7c:	50 e0       	ldi	r21, 0x00	; 0
     f7e:	0e 94 8c 07 	call	0xf18	; 0xf18 <_ZNK6String10startsWithERKS_j>
     f82:	08 95       	ret
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
     f84:	80 e0       	ldi	r24, 0x00	; 0
	return startsWith(s2, 0);
}
     f86:	08 95       	ret

00000f88 <_ZNK6String8endsWithERKS_>:
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
     f88:	fc 01       	movw	r30, r24
     f8a:	44 81       	ldd	r20, Z+4	; 0x04
     f8c:	55 81       	ldd	r21, Z+5	; 0x05
     f8e:	fb 01       	movw	r30, r22
     f90:	24 81       	ldd	r18, Z+4	; 0x04
     f92:	35 81       	ldd	r19, Z+5	; 0x05
     f94:	42 17       	cp	r20, r18
     f96:	53 07       	cpc	r21, r19
     f98:	b0 f0       	brcs	.+44     	; 0xfc6 <_ZNK6String8endsWithERKS_+0x3e>
     f9a:	fc 01       	movw	r30, r24
     f9c:	80 81       	ld	r24, Z
     f9e:	91 81       	ldd	r25, Z+1	; 0x01
     fa0:	00 97       	sbiw	r24, 0x00	; 0
     fa2:	99 f0       	breq	.+38     	; 0xfca <_ZNK6String8endsWithERKS_+0x42>
     fa4:	fb 01       	movw	r30, r22
     fa6:	60 81       	ld	r22, Z
     fa8:	71 81       	ldd	r23, Z+1	; 0x01
     faa:	61 15       	cp	r22, r1
     fac:	71 05       	cpc	r23, r1
     fae:	79 f0       	breq	.+30     	; 0xfce <_ZNK6String8endsWithERKS_+0x46>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
     fb0:	42 1b       	sub	r20, r18
     fb2:	53 0b       	sbc	r21, r19
     fb4:	84 0f       	add	r24, r20
     fb6:	95 1f       	adc	r25, r21
     fb8:	0e 94 49 12 	call	0x2492	; 0x2492 <strcmp>
     fbc:	21 e0       	ldi	r18, 0x01	; 1
     fbe:	89 2b       	or	r24, r25
     fc0:	39 f0       	breq	.+14     	; 0xfd0 <_ZNK6String8endsWithERKS_+0x48>
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	05 c0       	rjmp	.+10     	; 0xfd0 <_ZNK6String8endsWithERKS_+0x48>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	03 c0       	rjmp	.+6      	; 0xfd0 <_ZNK6String8endsWithERKS_+0x48>
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	01 c0       	rjmp	.+2      	; 0xfd0 <_ZNK6String8endsWithERKS_+0x48>
     fce:	20 e0       	ldi	r18, 0x00	; 0
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
}
     fd0:	82 2f       	mov	r24, r18
     fd2:	08 95       	ret

00000fd4 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
     fd4:	fc 01       	movw	r30, r24
     fd6:	24 81       	ldd	r18, Z+4	; 0x04
     fd8:	35 81       	ldd	r19, Z+5	; 0x05
     fda:	62 17       	cp	r22, r18
     fdc:	73 07       	cpc	r23, r19
     fde:	48 f4       	brcc	.+18     	; 0xff2 <_ZNK6StringixEj+0x1e>
     fe0:	80 81       	ld	r24, Z
     fe2:	91 81       	ldd	r25, Z+1	; 0x01
     fe4:	00 97       	sbiw	r24, 0x00	; 0
     fe6:	39 f0       	breq	.+14     	; 0xff6 <_ZNK6StringixEj+0x22>
	return buffer[index];
     fe8:	fc 01       	movw	r30, r24
     fea:	e6 0f       	add	r30, r22
     fec:	f7 1f       	adc	r31, r23
     fee:	80 81       	ld	r24, Z
     ff0:	08 95       	ret
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	08 95       	ret
     ff6:	80 e0       	ldi	r24, 0x00	; 0
	return buffer[index];
}
     ff8:	08 95       	ret

00000ffa <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
     ffa:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <_ZNK6StringixEj>
}
     ffe:	08 95       	ret

00001000 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    1000:	0f 93       	push	r16
    1002:	1f 93       	push	r17
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	eb 01       	movw	r28, r22
	if (!bufsize || !buf) return;
    100a:	41 15       	cp	r20, r1
    100c:	51 05       	cpc	r21, r1
    100e:	f9 f0       	breq	.+62     	; 0x104e <_ZNK6String8getBytesEPhjj+0x4e>
    1010:	20 97       	sbiw	r28, 0x00	; 0
    1012:	e9 f0       	breq	.+58     	; 0x104e <_ZNK6String8getBytesEPhjj+0x4e>
	if (index >= len) {
    1014:	fc 01       	movw	r30, r24
    1016:	64 81       	ldd	r22, Z+4	; 0x04
    1018:	75 81       	ldd	r23, Z+5	; 0x05
    101a:	26 17       	cp	r18, r22
    101c:	37 07       	cpc	r19, r23
    101e:	10 f0       	brcs	.+4      	; 0x1024 <_ZNK6String8getBytesEPhjj+0x24>
		buf[0] = 0;
    1020:	18 82       	st	Y, r1
		return;
    1022:	15 c0       	rjmp	.+42     	; 0x104e <_ZNK6String8getBytesEPhjj+0x4e>
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
    1024:	62 1b       	sub	r22, r18
    1026:	73 0b       	sbc	r23, r19
    1028:	8a 01       	movw	r16, r20
    102a:	01 50       	subi	r16, 0x01	; 1
    102c:	11 09       	sbc	r17, r1
    102e:	60 17       	cp	r22, r16
    1030:	71 07       	cpc	r23, r17
    1032:	08 f4       	brcc	.+2      	; 0x1036 <_ZNK6String8getBytesEPhjj+0x36>
    1034:	8b 01       	movw	r16, r22
	strncpy((char *)buf, buffer + index, n);
    1036:	fc 01       	movw	r30, r24
    1038:	60 81       	ld	r22, Z
    103a:	71 81       	ldd	r23, Z+1	; 0x01
    103c:	62 0f       	add	r22, r18
    103e:	73 1f       	adc	r23, r19
    1040:	a8 01       	movw	r20, r16
    1042:	ce 01       	movw	r24, r28
    1044:	0e 94 67 12 	call	0x24ce	; 0x24ce <strncpy>
	buf[n] = 0;
    1048:	c0 0f       	add	r28, r16
    104a:	d1 1f       	adc	r29, r17
    104c:	18 82       	st	Y, r1
}
    104e:	df 91       	pop	r29
    1050:	cf 91       	pop	r28
    1052:	1f 91       	pop	r17
    1054:	0f 91       	pop	r16
    1056:	08 95       	ret

00001058 <_ZNK6String9substringEjj>:
	}
	return found;
}

String String::substring(unsigned int left, unsigned int right) const
{
    1058:	bf 92       	push	r11
    105a:	cf 92       	push	r12
    105c:	df 92       	push	r13
    105e:	ef 92       	push	r14
    1060:	ff 92       	push	r15
    1062:	0f 93       	push	r16
    1064:	1f 93       	push	r17
    1066:	cf 93       	push	r28
    1068:	df 93       	push	r29
    106a:	8c 01       	movw	r16, r24
    106c:	6b 01       	movw	r12, r22
    106e:	ea 01       	movw	r28, r20
    1070:	79 01       	movw	r14, r18
	if (left > right) {
    1072:	24 17       	cp	r18, r20
    1074:	35 07       	cpc	r19, r21
    1076:	20 f4       	brcc	.+8      	; 0x1080 <_ZNK6String9substringEjj+0x28>
    1078:	8d 2f       	mov	r24, r29
		unsigned int temp = right;
		right = left;
		left = temp;
    107a:	e9 01       	movw	r28, r18

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
		unsigned int temp = right;
		right = left;
    107c:	e4 2e       	mov	r14, r20
    107e:	f8 2e       	mov	r15, r24
		left = temp;
	}
	String out;
    1080:	60 e2       	ldi	r22, 0x20	; 32
    1082:	71 e0       	ldi	r23, 0x01	; 1
    1084:	c8 01       	movw	r24, r16
    1086:	0e 94 47 06 	call	0xc8e	; 0xc8e <_ZN6StringC1EPKc>
	if (left >= len) return out;
    108a:	d6 01       	movw	r26, r12
    108c:	14 96       	adiw	r26, 0x04	; 4
    108e:	8d 91       	ld	r24, X+
    1090:	9c 91       	ld	r25, X
    1092:	15 97       	sbiw	r26, 0x05	; 5
    1094:	c8 17       	cp	r28, r24
    1096:	d9 07       	cpc	r29, r25
    1098:	d0 f4       	brcc	.+52     	; 0x10ce <_ZNK6String9substringEjj+0x76>
    109a:	8e 15       	cp	r24, r14
    109c:	9f 05       	cpc	r25, r15
    109e:	08 f4       	brcc	.+2      	; 0x10a2 <_ZNK6String9substringEjj+0x4a>
    10a0:	7c 01       	movw	r14, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    10a2:	d6 01       	movw	r26, r12
    10a4:	ed 91       	ld	r30, X+
    10a6:	fc 91       	ld	r31, X
    10a8:	11 97       	sbiw	r26, 0x01	; 1
    10aa:	ee 0d       	add	r30, r14
    10ac:	ff 1d       	adc	r31, r15
    10ae:	b0 80       	ld	r11, Z
	buffer[right] = '\0';	
    10b0:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    10b2:	6d 91       	ld	r22, X+
    10b4:	7c 91       	ld	r23, X
    10b6:	6c 0f       	add	r22, r28
    10b8:	7d 1f       	adc	r23, r29
    10ba:	c8 01       	movw	r24, r16
    10bc:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    10c0:	f6 01       	movw	r30, r12
    10c2:	80 81       	ld	r24, Z
    10c4:	91 81       	ldd	r25, Z+1	; 0x01
    10c6:	fc 01       	movw	r30, r24
    10c8:	ee 0d       	add	r30, r14
    10ca:	ff 1d       	adc	r31, r15
    10cc:	b0 82       	st	Z, r11
	return out;
}
    10ce:	c8 01       	movw	r24, r16
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	1f 91       	pop	r17
    10d6:	0f 91       	pop	r16
    10d8:	ff 90       	pop	r15
    10da:	ef 90       	pop	r14
    10dc:	df 90       	pop	r13
    10de:	cf 90       	pop	r12
    10e0:	bf 90       	pop	r11
    10e2:	08 95       	ret

000010e4 <_ZN6String6removeEjj>:
	// below will take care of truncating it at the end of the
	// string.
	remove(index, (unsigned int)-1);
}

void String::remove(unsigned int index, unsigned int count){
    10e4:	cf 93       	push	r28
    10e6:	df 93       	push	r29
    10e8:	ec 01       	movw	r28, r24
    10ea:	cb 01       	movw	r24, r22
	if (index >= len) { return; }
    10ec:	2c 81       	ldd	r18, Y+4	; 0x04
    10ee:	3d 81       	ldd	r19, Y+5	; 0x05
    10f0:	62 17       	cp	r22, r18
    10f2:	73 07       	cpc	r23, r19
    10f4:	10 f5       	brcc	.+68     	; 0x113a <_ZN6String6removeEjj+0x56>
	if (count <= 0) { return; }
    10f6:	41 15       	cp	r20, r1
    10f8:	51 05       	cpc	r21, r1
    10fa:	f9 f0       	breq	.+62     	; 0x113a <_ZN6String6removeEjj+0x56>
    10fc:	b9 01       	movw	r22, r18
    10fe:	68 1b       	sub	r22, r24
    1100:	79 0b       	sbc	r23, r25
    1102:	46 17       	cp	r20, r22
    1104:	57 07       	cpc	r21, r23
    1106:	08 f4       	brcc	.+2      	; 0x110a <_ZN6String6removeEjj+0x26>
    1108:	ba 01       	movw	r22, r20
	if (count > len - index) { count = len - index; }
	char *writeTo = buffer + index;
    110a:	e8 81       	ld	r30, Y
    110c:	f9 81       	ldd	r31, Y+1	; 0x01
	len = len - count;
    110e:	26 1b       	sub	r18, r22
    1110:	37 0b       	sbc	r19, r23
    1112:	3d 83       	std	Y+5, r19	; 0x05
    1114:	2c 83       	std	Y+4, r18	; 0x04
	strncpy(writeTo, buffer + index + count,len - index);
    1116:	a9 01       	movw	r20, r18
    1118:	48 1b       	sub	r20, r24
    111a:	59 0b       	sbc	r21, r25
    111c:	68 0f       	add	r22, r24
    111e:	79 1f       	adc	r23, r25
    1120:	6e 0f       	add	r22, r30
    1122:	7f 1f       	adc	r23, r31
    1124:	8e 0f       	add	r24, r30
    1126:	9f 1f       	adc	r25, r31
    1128:	0e 94 67 12 	call	0x24ce	; 0x24ce <strncpy>
	buffer[len] = 0;
    112c:	e8 81       	ld	r30, Y
    112e:	f9 81       	ldd	r31, Y+1	; 0x01
    1130:	8c 81       	ldd	r24, Y+4	; 0x04
    1132:	9d 81       	ldd	r25, Y+5	; 0x05
    1134:	e8 0f       	add	r30, r24
    1136:	f9 1f       	adc	r31, r25
    1138:	10 82       	st	Z, r1
}
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	08 95       	ret

00001140 <_ZN6String6removeEj>:

void String::remove(unsigned int index){
	// Pass the biggest integer as the count. The remove method
	// below will take care of truncating it at the end of the
	// string.
	remove(index, (unsigned int)-1);
    1140:	4f ef       	ldi	r20, 0xFF	; 255
    1142:	5f ef       	ldi	r21, 0xFF	; 255
    1144:	0e 94 72 08 	call	0x10e4	; 0x10e4 <_ZN6String6removeEjj>
    1148:	08 95       	ret

0000114a <_ZN8BLEMate2C1EP6Stream>:
#include "SparkFun_BLEMate2.h"
#include "../Arduino/Arduino.h"

// Constructor. All we really need to do is link the user's Stream instance to
//  our local reference.
BLEMate2::BLEMate2(Stream *sp)
    114a:	cf 92       	push	r12
    114c:	df 92       	push	r13
    114e:	ef 92       	push	r14
    1150:	ff 92       	push	r15
    1152:	0f 93       	push	r16
    1154:	1f 93       	push	r17
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	7c 01       	movw	r14, r24
    115c:	6b 01       	movw	r12, r22
    115e:	ec 01       	movw	r28, r24
    1160:	22 96       	adiw	r28, 0x02	; 2
    1162:	8c 01       	movw	r16, r24
    1164:	00 5e       	subi	r16, 0xE0	; 224
    1166:	1f 4f       	sbci	r17, 0xFF	; 255
    1168:	60 e2       	ldi	r22, 0x20	; 32
    116a:	71 e0       	ldi	r23, 0x01	; 1
    116c:	ce 01       	movw	r24, r28
    116e:	0e 94 47 06 	call	0xc8e	; 0xc8e <_ZN6StringC1EPKc>
    1172:	26 96       	adiw	r28, 0x06	; 6
    1174:	c0 17       	cp	r28, r16
    1176:	d1 07       	cpc	r29, r17
    1178:	b9 f7       	brne	.-18     	; 0x1168 <_ZN8BLEMate2C1EP6Stream+0x1e>
{
  _serialPort = sp;
    117a:	f7 01       	movw	r30, r14
    117c:	d2 a2       	std	Z+34, r13	; 0x22
    117e:	c1 a2       	std	Z+33, r12	; 0x21
  _numAddresses = 0;
    1180:	10 a2       	std	Z+32, r1	; 0x20
}
    1182:	df 91       	pop	r29
    1184:	cf 91       	pop	r28
    1186:	1f 91       	pop	r17
    1188:	0f 91       	pop	r16
    118a:	ff 90       	pop	r15
    118c:	ef 90       	pop	r14
    118e:	df 90       	pop	r13
    1190:	cf 90       	pop	r12
    1192:	08 95       	ret

00001194 <_ZN8BLEMate210knownStartEv>:

// Create a known state for the module to start from. If a partial command is
//  already in the module's buffer, we can purge it by sending an EOL to the
//  the module. If not, we'll just get an error.
BLEMate2::opResult BLEMate2::knownStart()
{
    1194:	8f 92       	push	r8
    1196:	9f 92       	push	r9
    1198:	af 92       	push	r10
    119a:	bf 92       	push	r11
    119c:	cf 92       	push	r12
    119e:	df 92       	push	r13
    11a0:	ef 92       	push	r14
    11a2:	ff 92       	push	r15
    11a4:	0f 93       	push	r16
    11a6:	1f 93       	push	r17
    11a8:	cf 93       	push	r28
    11aa:	df 93       	push	r29
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    11b0:	62 97       	sbiw	r28, 0x12	; 18
    11b2:	0f b6       	in	r0, 0x3f	; 63
    11b4:	f8 94       	cli
    11b6:	de bf       	out	0x3e, r29	; 62
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	cd bf       	out	0x3d, r28	; 61
    11bc:	8c 01       	movw	r16, r24
  String EOL = String("\n\r");
    11be:	6e e1       	ldi	r22, 0x1E	; 30
    11c0:	71 e0       	ldi	r23, 0x01	; 1
    11c2:	ce 01       	movw	r24, r28
    11c4:	0d 96       	adiw	r24, 0x0d	; 13
    11c6:	0e 94 47 06 	call	0xc8e	; 0xc8e <_ZN6StringC1EPKc>
  String buffer = "";
    11ca:	60 e2       	ldi	r22, 0x20	; 32
    11cc:	71 e0       	ldi	r23, 0x01	; 1
    11ce:	ce 01       	movw	r24, r28
    11d0:	07 96       	adiw	r24, 0x07	; 7
    11d2:	0e 94 47 06 	call	0xc8e	; 0xc8e <_ZN6StringC1EPKc>
  
  _serialPort->print("\r");
    11d6:	6f e1       	ldi	r22, 0x1F	; 31
    11d8:	71 e0       	ldi	r23, 0x01	; 1
    11da:	d8 01       	movw	r26, r16
    11dc:	91 96       	adiw	r26, 0x21	; 33
    11de:	8d 91       	ld	r24, X+
    11e0:	9c 91       	ld	r25, X
    11e2:	92 97       	sbiw	r26, 0x22	; 34
    11e4:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <_ZN5Print5printEPKc>
  _serialPort->flush();
    11e8:	f8 01       	movw	r30, r16
    11ea:	81 a1       	ldd	r24, Z+33	; 0x21
    11ec:	92 a1       	ldd	r25, Z+34	; 0x22
    11ee:	dc 01       	movw	r26, r24
    11f0:	ed 91       	ld	r30, X+
    11f2:	fc 91       	ld	r31, X
    11f4:	02 84       	ldd	r0, Z+10	; 0x0a
    11f6:	f3 85       	ldd	r31, Z+11	; 0x0b
    11f8:	e0 2d       	mov	r30, r0
    11fa:	09 95       	icall
  
  // We're going to use the internal timer to track the elapsed time since we
  //  issued the reset. Bog-standard Arduino stuff.
  unsigned long startTime = millis();
    11fc:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <millis>
    1200:	6b 01       	movw	r12, r22
    1202:	7c 01       	movw	r14, r24
  
  // This is our timeout loop. We're going to give our module 1s to come up
  //  with a new character, and return with a timeout failure otherwise.
  while (buffer.endsWith(EOL) != true)
    1204:	2f c0       	rjmp	.+94     	; 0x1264 <_ZN8BLEMate210knownStartEv+0xd0>
  {
    // Purge the serial data received from the module, along with any data in
    //  the buffer at the time this command was sent.
    if (_serialPort->available() > 0) 
    1206:	f8 01       	movw	r30, r16
    1208:	81 a1       	ldd	r24, Z+33	; 0x21
    120a:	92 a1       	ldd	r25, Z+34	; 0x22
    120c:	dc 01       	movw	r26, r24
    120e:	ed 91       	ld	r30, X+
    1210:	fc 91       	ld	r31, X
    1212:	04 80       	ldd	r0, Z+4	; 0x04
    1214:	f5 81       	ldd	r31, Z+5	; 0x05
    1216:	e0 2d       	mov	r30, r0
    1218:	09 95       	icall
    121a:	18 16       	cp	r1, r24
    121c:	19 06       	cpc	r1, r25
    121e:	9c f4       	brge	.+38     	; 0x1246 <_ZN8BLEMate210knownStartEv+0xb2>
    {
      buffer.concat(char(_serialPort->read()));
    1220:	f8 01       	movw	r30, r16
    1222:	81 a1       	ldd	r24, Z+33	; 0x21
    1224:	92 a1       	ldd	r25, Z+34	; 0x22
    1226:	dc 01       	movw	r26, r24
    1228:	ed 91       	ld	r30, X+
    122a:	fc 91       	ld	r31, X
    122c:	06 80       	ldd	r0, Z+6	; 0x06
    122e:	f7 81       	ldd	r31, Z+7	; 0x07
    1230:	e0 2d       	mov	r30, r0
    1232:	09 95       	icall
    1234:	68 2f       	mov	r22, r24
    1236:	ce 01       	movw	r24, r28
    1238:	07 96       	adiw	r24, 0x07	; 7
    123a:	0e 94 db 06 	call	0xdb6	; 0xdb6 <_ZN6String6concatEc>
      startTime = millis();
    123e:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <millis>
    1242:	6b 01       	movw	r12, r22
    1244:	7c 01       	movw	r14, r24
    }
    if ((startTime + 1000) < millis()) return TIMEOUT_ERROR;
    1246:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <millis>
    124a:	46 01       	movw	r8, r12
    124c:	57 01       	movw	r10, r14
    124e:	b8 ee       	ldi	r27, 0xE8	; 232
    1250:	8b 0e       	add	r8, r27
    1252:	b3 e0       	ldi	r27, 0x03	; 3
    1254:	9b 1e       	adc	r9, r27
    1256:	a1 1c       	adc	r10, r1
    1258:	b1 1c       	adc	r11, r1
    125a:	86 16       	cp	r8, r22
    125c:	97 06       	cpc	r9, r23
    125e:	a8 06       	cpc	r10, r24
    1260:	b9 06       	cpc	r11, r25
    1262:	e0 f0       	brcs	.+56     	; 0x129c <_ZN8BLEMate210knownStartEv+0x108>
  //  issued the reset. Bog-standard Arduino stuff.
  unsigned long startTime = millis();
  
  // This is our timeout loop. We're going to give our module 1s to come up
  //  with a new character, and return with a timeout failure otherwise.
  while (buffer.endsWith(EOL) != true)
    1264:	be 01       	movw	r22, r28
    1266:	63 5f       	subi	r22, 0xF3	; 243
    1268:	7f 4f       	sbci	r23, 0xFF	; 255
    126a:	ce 01       	movw	r24, r28
    126c:	07 96       	adiw	r24, 0x07	; 7
    126e:	0e 94 c4 07 	call	0xf88	; 0xf88 <_ZNK6String8endsWithERKS_>
    1272:	81 30       	cpi	r24, 0x01	; 1
    1274:	41 f6       	brne	.-112    	; 0x1206 <_ZN8BLEMate210knownStartEv+0x72>
      buffer.concat(char(_serialPort->read()));
      startTime = millis();
    }
    if ((startTime + 1000) < millis()) return TIMEOUT_ERROR;
  }
  if (buffer.startsWith("ERR")) return SUCCESS;
    1276:	61 e2       	ldi	r22, 0x21	; 33
    1278:	71 e0       	ldi	r23, 0x01	; 1
    127a:	ce 01       	movw	r24, r28
    127c:	01 96       	adiw	r24, 0x01	; 1
    127e:	0e 94 47 06 	call	0xc8e	; 0xc8e <_ZN6StringC1EPKc>
    1282:	be 01       	movw	r22, r28
    1284:	6f 5f       	subi	r22, 0xFF	; 255
    1286:	7f 4f       	sbci	r23, 0xFF	; 255
    1288:	ce 01       	movw	r24, r28
    128a:	07 96       	adiw	r24, 0x07	; 7
    128c:	0e 94 b4 07 	call	0xf68	; 0xf68 <_ZNK6String10startsWithERKS_>
    1290:	ce 01       	movw	r24, r28
    1292:	01 96       	adiw	r24, 0x01	; 1
    1294:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN6StringD1Ev>
    1298:	11 e0       	ldi	r17, 0x01	; 1
    129a:	01 c0       	rjmp	.+2      	; 0x129e <_ZN8BLEMate210knownStartEv+0x10a>
    if (_serialPort->available() > 0) 
    {
      buffer.concat(char(_serialPort->read()));
      startTime = millis();
    }
    if ((startTime + 1000) < millis()) return TIMEOUT_ERROR;
    129c:	1e ef       	ldi	r17, 0xFE	; 254
//  already in the module's buffer, we can purge it by sending an EOL to the
//  the module. If not, we'll just get an error.
BLEMate2::opResult BLEMate2::knownStart()
{
  String EOL = String("\n\r");
  String buffer = "";
    129e:	ce 01       	movw	r24, r28
    12a0:	07 96       	adiw	r24, 0x07	; 7
    12a2:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN6StringD1Ev>
      startTime = millis();
    }
    if ((startTime + 1000) < millis()) return TIMEOUT_ERROR;
  }
  if (buffer.startsWith("ERR")) return SUCCESS;
  else return SUCCESS;
    12a6:	ce 01       	movw	r24, r28
    12a8:	0d 96       	adiw	r24, 0x0d	; 13
    12aa:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN6StringD1Ev>
}
    12ae:	81 2f       	mov	r24, r17
    12b0:	62 96       	adiw	r28, 0x12	; 18
    12b2:	0f b6       	in	r0, 0x3f	; 63
    12b4:	f8 94       	cli
    12b6:	de bf       	out	0x3e, r29	; 62
    12b8:	0f be       	out	0x3f, r0	; 63
    12ba:	cd bf       	out	0x3d, r28	; 61
    12bc:	df 91       	pop	r29
    12be:	cf 91       	pop	r28
    12c0:	1f 91       	pop	r17
    12c2:	0f 91       	pop	r16
    12c4:	ff 90       	pop	r15
    12c6:	ef 90       	pop	r14
    12c8:	df 90       	pop	r13
    12ca:	cf 90       	pop	r12
    12cc:	bf 90       	pop	r11
    12ce:	af 90       	pop	r10
    12d0:	9f 90       	pop	r9
    12d2:	8f 90       	pop	r8
    12d4:	08 95       	ret

000012d6 <_ZN8BLEMate26stdCmdE6String>:
}

// There are several commands that look for either OK or ERROR; let's abstract
//  support for those commands to one single private function, to save memory.
BLEMate2::opResult BLEMate2::stdCmd(String command)
{
    12d6:	bf 92       	push	r11
    12d8:	cf 92       	push	r12
    12da:	df 92       	push	r13
    12dc:	ef 92       	push	r14
    12de:	ff 92       	push	r15
    12e0:	0f 93       	push	r16
    12e2:	1f 93       	push	r17
    12e4:	cf 93       	push	r28
    12e6:	df 93       	push	r29
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
    12ec:	68 97       	sbiw	r28, 0x18	; 24
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	f8 94       	cli
    12f2:	de bf       	out	0x3e, r29	; 62
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	cd bf       	out	0x3d, r28	; 61
    12f8:	8c 01       	movw	r16, r24
    12fa:	7b 01       	movw	r14, r22
  String buffer;
    12fc:	60 e2       	ldi	r22, 0x20	; 32
    12fe:	71 e0       	ldi	r23, 0x01	; 1
    1300:	ce 01       	movw	r24, r28
    1302:	43 96       	adiw	r24, 0x13	; 19
    1304:	0e 94 47 06 	call	0xc8e	; 0xc8e <_ZN6StringC1EPKc>
  String EOL = String("\n\r");
    1308:	6e e1       	ldi	r22, 0x1E	; 30
    130a:	71 e0       	ldi	r23, 0x01	; 1
    130c:	ce 01       	movw	r24, r28
    130e:	0d 96       	adiw	r24, 0x0d	; 13
    1310:	0e 94 47 06 	call	0xc8e	; 0xc8e <_ZN6StringC1EPKc>
  
  knownStart(); // Clear the serial buffer in the module and the Arduino.
    1314:	c8 01       	movw	r24, r16
    1316:	0e 94 ca 08 	call	0x1194	; 0x1194 <_ZN8BLEMate210knownStartEv>
  
  _serialPort->print(command);
    131a:	b7 01       	movw	r22, r14
    131c:	d8 01       	movw	r26, r16
    131e:	91 96       	adiw	r26, 0x21	; 33
    1320:	8d 91       	ld	r24, X+
    1322:	9c 91       	ld	r25, X
    1324:	92 97       	sbiw	r26, 0x22	; 34
    1326:	0e 94 cd 02 	call	0x59a	; 0x59a <_ZN5Print5printERK6String>
  _serialPort->print("\r");
    132a:	6f e1       	ldi	r22, 0x1F	; 31
    132c:	71 e0       	ldi	r23, 0x01	; 1
    132e:	f8 01       	movw	r30, r16
    1330:	81 a1       	ldd	r24, Z+33	; 0x21
    1332:	92 a1       	ldd	r25, Z+34	; 0x22
    1334:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <_ZN5Print5printEPKc>
  _serialPort->flush();
    1338:	d8 01       	movw	r26, r16
    133a:	91 96       	adiw	r26, 0x21	; 33
    133c:	8d 91       	ld	r24, X+
    133e:	9c 91       	ld	r25, X
    1340:	92 97       	sbiw	r26, 0x22	; 34
    1342:	dc 01       	movw	r26, r24
    1344:	ed 91       	ld	r30, X+
    1346:	fc 91       	ld	r31, X
    1348:	02 84       	ldd	r0, Z+10	; 0x0a
    134a:	f3 85       	ldd	r31, Z+11	; 0x0b
    134c:	e0 2d       	mov	r30, r0
    134e:	09 95       	icall
  
  // We're going to use the internal timer to track the elapsed time since we
  //  issued the command. Bog-standard Arduino stuff.
  unsigned long startTime = millis();
    1350:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <millis>
    
  // This is our timeout loop. We'll give the module 3 seconds.
  while ((startTime + 3000) > millis())
    1354:	6b 01       	movw	r12, r22
    1356:	7c 01       	movw	r14, r24
    1358:	b8 eb       	ldi	r27, 0xB8	; 184
    135a:	cb 0e       	add	r12, r27
    135c:	bb e0       	ldi	r27, 0x0B	; 11
    135e:	db 1e       	adc	r13, r27
    1360:	e1 1c       	adc	r14, r1
    1362:	f1 1c       	adc	r15, r1
    1364:	53 c0       	rjmp	.+166    	; 0x140c <_ZN8BLEMate26stdCmdE6String+0x136>
  {
    // Grow the current buffered data, until we receive the EOL string.    
    if (_serialPort->available() > 0) buffer.concat(char(_serialPort->read()));
    1366:	f8 01       	movw	r30, r16
    1368:	81 a1       	ldd	r24, Z+33	; 0x21
    136a:	92 a1       	ldd	r25, Z+34	; 0x22
    136c:	dc 01       	movw	r26, r24
    136e:	ed 91       	ld	r30, X+
    1370:	fc 91       	ld	r31, X
    1372:	04 80       	ldd	r0, Z+4	; 0x04
    1374:	f5 81       	ldd	r31, Z+5	; 0x05
    1376:	e0 2d       	mov	r30, r0
    1378:	09 95       	icall
    137a:	18 16       	cp	r1, r24
    137c:	19 06       	cpc	r1, r25
    137e:	7c f4       	brge	.+30     	; 0x139e <_ZN8BLEMate26stdCmdE6String+0xc8>
    1380:	f8 01       	movw	r30, r16
    1382:	81 a1       	ldd	r24, Z+33	; 0x21
    1384:	92 a1       	ldd	r25, Z+34	; 0x22
    1386:	dc 01       	movw	r26, r24
    1388:	ed 91       	ld	r30, X+
    138a:	fc 91       	ld	r31, X
    138c:	06 80       	ldd	r0, Z+6	; 0x06
    138e:	f7 81       	ldd	r31, Z+7	; 0x07
    1390:	e0 2d       	mov	r30, r0
    1392:	09 95       	icall
    1394:	68 2f       	mov	r22, r24
    1396:	ce 01       	movw	r24, r28
    1398:	43 96       	adiw	r24, 0x13	; 19
    139a:	0e 94 db 06 	call	0xdb6	; 0xdb6 <_ZN6String6concatEc>

    if (buffer.endsWith(EOL))
    139e:	be 01       	movw	r22, r28
    13a0:	63 5f       	subi	r22, 0xF3	; 243
    13a2:	7f 4f       	sbci	r23, 0xFF	; 255
    13a4:	ce 01       	movw	r24, r28
    13a6:	43 96       	adiw	r24, 0x13	; 19
    13a8:	0e 94 c4 07 	call	0xf88	; 0xf88 <_ZNK6String8endsWithERKS_>
    13ac:	88 23       	and	r24, r24
    13ae:	71 f1       	breq	.+92     	; 0x140c <_ZN8BLEMate26stdCmdE6String+0x136>
    {
      if (buffer.startsWith("ER")) return MODULE_ERROR;
    13b0:	6a e2       	ldi	r22, 0x2A	; 42
    13b2:	71 e0       	ldi	r23, 0x01	; 1
    13b4:	ce 01       	movw	r24, r28
    13b6:	07 96       	adiw	r24, 0x07	; 7
    13b8:	0e 94 47 06 	call	0xc8e	; 0xc8e <_ZN6StringC1EPKc>
    13bc:	be 01       	movw	r22, r28
    13be:	69 5f       	subi	r22, 0xF9	; 249
    13c0:	7f 4f       	sbci	r23, 0xFF	; 255
    13c2:	ce 01       	movw	r24, r28
    13c4:	43 96       	adiw	r24, 0x13	; 19
    13c6:	0e 94 b4 07 	call	0xf68	; 0xf68 <_ZNK6String10startsWithERKS_>
    13ca:	b8 2e       	mov	r11, r24
    13cc:	ce 01       	movw	r24, r28
    13ce:	07 96       	adiw	r24, 0x07	; 7
    13d0:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN6StringD1Ev>
    13d4:	b1 10       	cpse	r11, r1
    13d6:	24 c0       	rjmp	.+72     	; 0x1420 <_ZN8BLEMate26stdCmdE6String+0x14a>
      if (buffer.startsWith("OK")) return SUCCESS;
    13d8:	63 e3       	ldi	r22, 0x33	; 51
    13da:	71 e0       	ldi	r23, 0x01	; 1
    13dc:	ce 01       	movw	r24, r28
    13de:	01 96       	adiw	r24, 0x01	; 1
    13e0:	0e 94 47 06 	call	0xc8e	; 0xc8e <_ZN6StringC1EPKc>
    13e4:	be 01       	movw	r22, r28
    13e6:	6f 5f       	subi	r22, 0xFF	; 255
    13e8:	7f 4f       	sbci	r23, 0xFF	; 255
    13ea:	ce 01       	movw	r24, r28
    13ec:	43 96       	adiw	r24, 0x13	; 19
    13ee:	0e 94 b4 07 	call	0xf68	; 0xf68 <_ZNK6String10startsWithERKS_>
    13f2:	b8 2e       	mov	r11, r24
    13f4:	ce 01       	movw	r24, r28
    13f6:	01 96       	adiw	r24, 0x01	; 1
    13f8:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN6StringD1Ev>
    13fc:	b1 10       	cpse	r11, r1
    13fe:	12 c0       	rjmp	.+36     	; 0x1424 <_ZN8BLEMate26stdCmdE6String+0x14e>
      buffer = "";
    1400:	60 e2       	ldi	r22, 0x20	; 32
    1402:	71 e0       	ldi	r23, 0x01	; 1
    1404:	ce 01       	movw	r24, r28
    1406:	43 96       	adiw	r24, 0x13	; 19
    1408:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_ZN6StringaSEPKc>
  // We're going to use the internal timer to track the elapsed time since we
  //  issued the command. Bog-standard Arduino stuff.
  unsigned long startTime = millis();
    
  // This is our timeout loop. We'll give the module 3 seconds.
  while ((startTime + 3000) > millis())
    140c:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <millis>
    1410:	6c 15       	cp	r22, r12
    1412:	7d 05       	cpc	r23, r13
    1414:	8e 05       	cpc	r24, r14
    1416:	9f 05       	cpc	r25, r15
    1418:	08 f4       	brcc	.+2      	; 0x141c <_ZN8BLEMate26stdCmdE6String+0x146>
    141a:	a5 cf       	rjmp	.-182    	; 0x1366 <_ZN8BLEMate26stdCmdE6String+0x90>
      if (buffer.startsWith("ER")) return MODULE_ERROR;
      if (buffer.startsWith("OK")) return SUCCESS;
      buffer = "";
    }    
  }
  return TIMEOUT_ERROR;
    141c:	1e ef       	ldi	r17, 0xFE	; 254
    141e:	03 c0       	rjmp	.+6      	; 0x1426 <_ZN8BLEMate26stdCmdE6String+0x150>
    // Grow the current buffered data, until we receive the EOL string.    
    if (_serialPort->available() > 0) buffer.concat(char(_serialPort->read()));

    if (buffer.endsWith(EOL))
    {
      if (buffer.startsWith("ER")) return MODULE_ERROR;
    1420:	1f ef       	ldi	r17, 0xFF	; 255
    1422:	01 c0       	rjmp	.+2      	; 0x1426 <_ZN8BLEMate26stdCmdE6String+0x150>
      if (buffer.startsWith("OK")) return SUCCESS;
    1424:	11 e0       	ldi	r17, 0x01	; 1
// There are several commands that look for either OK or ERROR; let's abstract
//  support for those commands to one single private function, to save memory.
BLEMate2::opResult BLEMate2::stdCmd(String command)
{
  String buffer;
  String EOL = String("\n\r");
    1426:	ce 01       	movw	r24, r28
    1428:	0d 96       	adiw	r24, 0x0d	; 13
    142a:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN6StringD1Ev>
      if (buffer.startsWith("ER")) return MODULE_ERROR;
      if (buffer.startsWith("OK")) return SUCCESS;
      buffer = "";
    }    
  }
  return TIMEOUT_ERROR;
    142e:	ce 01       	movw	r24, r28
    1430:	43 96       	adiw	r24, 0x13	; 19
    1432:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN6StringD1Ev>
}
    1436:	81 2f       	mov	r24, r17
    1438:	68 96       	adiw	r28, 0x18	; 24
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	de bf       	out	0x3e, r29	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	cd bf       	out	0x3d, r28	; 61
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	1f 91       	pop	r17
    144a:	0f 91       	pop	r16
    144c:	ff 90       	pop	r15
    144e:	ef 90       	pop	r14
    1450:	df 90       	pop	r13
    1452:	cf 90       	pop	r12
    1454:	bf 90       	pop	r11
    1456:	08 95       	ret

00001458 <_ZN8BLEMate27restoreEv>:

// Issue the "RESTORE" command over the serial port to the BC118. This will
//  reset the device to factory default settings, which is a good thing to do
//  once in a while.
BLEMate2::opResult BLEMate2::restore()
{
    1458:	0f 93       	push	r16
    145a:	1f 93       	push	r17
    145c:	cf 93       	push	r28
    145e:	df 93       	push	r29
    1460:	00 d0       	rcall	.+0      	; 0x1462 <_ZN8BLEMate27restoreEv+0xa>
    1462:	00 d0       	rcall	.+0      	; 0x1464 <_ZN8BLEMate27restoreEv+0xc>
    1464:	00 d0       	rcall	.+0      	; 0x1466 <_ZN8BLEMate27restoreEv+0xe>
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
    146a:	8c 01       	movw	r16, r24
  return stdCmd("RTR");
    146c:	66 e3       	ldi	r22, 0x36	; 54
    146e:	71 e0       	ldi	r23, 0x01	; 1
    1470:	ce 01       	movw	r24, r28
    1472:	01 96       	adiw	r24, 0x01	; 1
    1474:	0e 94 47 06 	call	0xc8e	; 0xc8e <_ZN6StringC1EPKc>
    1478:	be 01       	movw	r22, r28
    147a:	6f 5f       	subi	r22, 0xFF	; 255
    147c:	7f 4f       	sbci	r23, 0xFF	; 255
    147e:	c8 01       	movw	r24, r16
    1480:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <_ZN8BLEMate26stdCmdE6String>
    1484:	18 2f       	mov	r17, r24
    1486:	ce 01       	movw	r24, r28
    1488:	01 96       	adiw	r24, 0x01	; 1
    148a:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN6StringD1Ev>
}
    148e:	81 2f       	mov	r24, r17
    1490:	26 96       	adiw	r28, 0x06	; 6
    1492:	0f b6       	in	r0, 0x3f	; 63
    1494:	f8 94       	cli
    1496:	de bf       	out	0x3e, r29	; 62
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	cd bf       	out	0x3d, r28	; 61
    149c:	df 91       	pop	r29
    149e:	cf 91       	pop	r28
    14a0:	1f 91       	pop	r17
    14a2:	0f 91       	pop	r16
    14a4:	08 95       	ret

000014a6 <_ZN8BLEMate211writeConfigEv>:

// Issue the "WRITE" command over the serial port to the BC118. This will
//  save the current settings to NVM, so they will be applied after a reset
//  or power cycle.
BLEMate2::opResult BLEMate2::writeConfig()
{
    14a6:	0f 93       	push	r16
    14a8:	1f 93       	push	r17
    14aa:	cf 93       	push	r28
    14ac:	df 93       	push	r29
    14ae:	00 d0       	rcall	.+0      	; 0x14b0 <_ZN8BLEMate211writeConfigEv+0xa>
    14b0:	00 d0       	rcall	.+0      	; 0x14b2 <_ZN8BLEMate211writeConfigEv+0xc>
    14b2:	00 d0       	rcall	.+0      	; 0x14b4 <_ZN8BLEMate211writeConfigEv+0xe>
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
    14b8:	8c 01       	movw	r16, r24
  return stdCmd("WRT");
    14ba:	6a e3       	ldi	r22, 0x3A	; 58
    14bc:	71 e0       	ldi	r23, 0x01	; 1
    14be:	ce 01       	movw	r24, r28
    14c0:	01 96       	adiw	r24, 0x01	; 1
    14c2:	0e 94 47 06 	call	0xc8e	; 0xc8e <_ZN6StringC1EPKc>
    14c6:	be 01       	movw	r22, r28
    14c8:	6f 5f       	subi	r22, 0xFF	; 255
    14ca:	7f 4f       	sbci	r23, 0xFF	; 255
    14cc:	c8 01       	movw	r24, r16
    14ce:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <_ZN8BLEMate26stdCmdE6String>
    14d2:	18 2f       	mov	r17, r24
    14d4:	ce 01       	movw	r24, r28
    14d6:	01 96       	adiw	r24, 0x01	; 1
    14d8:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN6StringD1Ev>
}
    14dc:	81 2f       	mov	r24, r17
    14de:	26 96       	adiw	r28, 0x06	; 6
    14e0:	0f b6       	in	r0, 0x3f	; 63
    14e2:	f8 94       	cli
    14e4:	de bf       	out	0x3e, r29	; 62
    14e6:	0f be       	out	0x3f, r0	; 63
    14e8:	cd bf       	out	0x3d, r28	; 61
    14ea:	df 91       	pop	r29
    14ec:	cf 91       	pop	r28
    14ee:	1f 91       	pop	r17
    14f0:	0f 91       	pop	r16
    14f2:	08 95       	ret

000014f4 <_ZN8BLEMate25resetEv>:
//    READY
// If there is some sort of error, the module will respond with
//    ERR
// We'll buffer characters until we see an EOL (\n\r), then check the string.
BLEMate2::opResult BLEMate2::reset()
{
    14f4:	bf 92       	push	r11
    14f6:	cf 92       	push	r12
    14f8:	df 92       	push	r13
    14fa:	ef 92       	push	r14
    14fc:	ff 92       	push	r15
    14fe:	0f 93       	push	r16
    1500:	1f 93       	push	r17
    1502:	cf 93       	push	r28
    1504:	df 93       	push	r29
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
    150a:	6e 97       	sbiw	r28, 0x1e	; 30
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	f8 94       	cli
    1510:	de bf       	out	0x3e, r29	; 62
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	cd bf       	out	0x3d, r28	; 61
    1516:	8c 01       	movw	r16, r24
  String buffer;
    1518:	60 e2       	ldi	r22, 0x20	; 32
    151a:	71 e0       	ldi	r23, 0x01	; 1
    151c:	ce 01       	movw	r24, r28
    151e:	49 96       	adiw	r24, 0x19	; 25
    1520:	0e 94 47 06 	call	0xc8e	; 0xc8e <_ZN6StringC1EPKc>
  String EOL = String("\n\r");
    1524:	6e e1       	ldi	r22, 0x1E	; 30
    1526:	71 e0       	ldi	r23, 0x01	; 1
    1528:	ce 01       	movw	r24, r28
    152a:	43 96       	adiw	r24, 0x13	; 19
    152c:	0e 94 47 06 	call	0xc8e	; 0xc8e <_ZN6StringC1EPKc>
  
  knownStart();
    1530:	c8 01       	movw	r24, r16
    1532:	0e 94 ca 08 	call	0x1194	; 0x1194 <_ZN8BLEMate210knownStartEv>
  
  // Now issue the reset command.
  _serialPort->print("RST");
    1536:	6b e6       	ldi	r22, 0x6B	; 107
    1538:	71 e0       	ldi	r23, 0x01	; 1
    153a:	d8 01       	movw	r26, r16
    153c:	91 96       	adiw	r26, 0x21	; 33
    153e:	8d 91       	ld	r24, X+
    1540:	9c 91       	ld	r25, X
    1542:	92 97       	sbiw	r26, 0x22	; 34
    1544:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <_ZN5Print5printEPKc>
  _serialPort->print("\r");
    1548:	6f e1       	ldi	r22, 0x1F	; 31
    154a:	71 e0       	ldi	r23, 0x01	; 1
    154c:	f8 01       	movw	r30, r16
    154e:	81 a1       	ldd	r24, Z+33	; 0x21
    1550:	92 a1       	ldd	r25, Z+34	; 0x22
    1552:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <_ZN5Print5printEPKc>
  _serialPort->flush();
    1556:	d8 01       	movw	r26, r16
    1558:	91 96       	adiw	r26, 0x21	; 33
    155a:	8d 91       	ld	r24, X+
    155c:	9c 91       	ld	r25, X
    155e:	92 97       	sbiw	r26, 0x22	; 34
    1560:	dc 01       	movw	r26, r24
    1562:	ed 91       	ld	r30, X+
    1564:	fc 91       	ld	r31, X
    1566:	02 84       	ldd	r0, Z+10	; 0x0a
    1568:	f3 85       	ldd	r31, Z+11	; 0x0b
    156a:	e0 2d       	mov	r30, r0
    156c:	09 95       	icall
  
  // We're going to use the internal timer to track the elapsed time since we
  //  issued the reset. Bog-standard Arduino stuff.
  unsigned long resetStart = millis();
    156e:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <millis>
  
  // This is our timeout loop. We'll give the module 6 seconds to reset.
  while ((resetStart + 6000) > millis())
    1572:	6b 01       	movw	r12, r22
    1574:	7c 01       	movw	r14, r24
    1576:	b0 e7       	ldi	r27, 0x70	; 112
    1578:	cb 0e       	add	r12, r27
    157a:	b7 e1       	ldi	r27, 0x17	; 23
    157c:	db 1e       	adc	r13, r27
    157e:	e1 1c       	adc	r14, r1
    1580:	f1 1c       	adc	r15, r1
    1582:	83 c0       	rjmp	.+262    	; 0x168a <_ZN8BLEMate25resetEv+0x196>
  {
    // Grow the current buffered data, until we receive the EOL string.    
    if (_serialPort->available() > 0) 
    1584:	f8 01       	movw	r30, r16
    1586:	81 a1       	ldd	r24, Z+33	; 0x21
    1588:	92 a1       	ldd	r25, Z+34	; 0x22
    158a:	dc 01       	movw	r26, r24
    158c:	ed 91       	ld	r30, X+
    158e:	fc 91       	ld	r31, X
    1590:	04 80       	ldd	r0, Z+4	; 0x04
    1592:	f5 81       	ldd	r31, Z+5	; 0x05
    1594:	e0 2d       	mov	r30, r0
    1596:	09 95       	icall
    1598:	18 16       	cp	r1, r24
    159a:	19 06       	cpc	r1, r25
    159c:	7c f4       	brge	.+30     	; 0x15bc <_ZN8BLEMate25resetEv+0xc8>
    {
      char temp = _serialPort->read();
    159e:	f8 01       	movw	r30, r16
    15a0:	81 a1       	ldd	r24, Z+33	; 0x21
    15a2:	92 a1       	ldd	r25, Z+34	; 0x22
    15a4:	dc 01       	movw	r26, r24
    15a6:	ed 91       	ld	r30, X+
    15a8:	fc 91       	ld	r31, X
    15aa:	06 80       	ldd	r0, Z+6	; 0x06
    15ac:	f7 81       	ldd	r31, Z+7	; 0x07
    15ae:	e0 2d       	mov	r30, r0
    15b0:	09 95       	icall
      buffer.concat(temp);
    15b2:	68 2f       	mov	r22, r24
    15b4:	ce 01       	movw	r24, r28
    15b6:	49 96       	adiw	r24, 0x19	; 25
    15b8:	0e 94 db 06 	call	0xdb6	; 0xdb6 <_ZN6String6concatEc>
    }
    
    if (buffer.endsWith(EOL))
    15bc:	be 01       	movw	r22, r28
    15be:	6d 5e       	subi	r22, 0xED	; 237
    15c0:	7f 4f       	sbci	r23, 0xFF	; 255
    15c2:	ce 01       	movw	r24, r28
    15c4:	49 96       	adiw	r24, 0x19	; 25
    15c6:	0e 94 c4 07 	call	0xf88	; 0xf88 <_ZNK6String8endsWithERKS_>
    15ca:	88 23       	and	r24, r24
    15cc:	09 f4       	brne	.+2      	; 0x15d0 <_ZN8BLEMate25resetEv+0xdc>
    15ce:	5d c0       	rjmp	.+186    	; 0x168a <_ZN8BLEMate25resetEv+0x196>
    {
      // If ERR or READY, we've finished the reset. Otherwise, just discard
      //  the data and wait for the next EOL.
      if (buffer.startsWith("ER")) return MODULE_ERROR;
    15d0:	6a e2       	ldi	r22, 0x2A	; 42
    15d2:	71 e0       	ldi	r23, 0x01	; 1
    15d4:	ce 01       	movw	r24, r28
    15d6:	0d 96       	adiw	r24, 0x0d	; 13
    15d8:	0e 94 47 06 	call	0xc8e	; 0xc8e <_ZN6StringC1EPKc>
    15dc:	be 01       	movw	r22, r28
    15de:	63 5f       	subi	r22, 0xF3	; 243
    15e0:	7f 4f       	sbci	r23, 0xFF	; 255
    15e2:	ce 01       	movw	r24, r28
    15e4:	49 96       	adiw	r24, 0x19	; 25
    15e6:	0e 94 b4 07 	call	0xf68	; 0xf68 <_ZNK6String10startsWithERKS_>
    15ea:	b8 2e       	mov	r11, r24
    15ec:	ce 01       	movw	r24, r28
    15ee:	0d 96       	adiw	r24, 0x0d	; 13
    15f0:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN6StringD1Ev>
    15f4:	b1 10       	cpse	r11, r1
    15f6:	53 c0       	rjmp	.+166    	; 0x169e <_ZN8BLEMate25resetEv+0x1aa>
      if (buffer.startsWith("RE")) 
    15f8:	6f e6       	ldi	r22, 0x6F	; 111
    15fa:	71 e0       	ldi	r23, 0x01	; 1
    15fc:	ce 01       	movw	r24, r28
    15fe:	07 96       	adiw	r24, 0x07	; 7
    1600:	0e 94 47 06 	call	0xc8e	; 0xc8e <_ZN6StringC1EPKc>
    1604:	be 01       	movw	r22, r28
    1606:	69 5f       	subi	r22, 0xF9	; 249
    1608:	7f 4f       	sbci	r23, 0xFF	; 255
    160a:	ce 01       	movw	r24, r28
    160c:	49 96       	adiw	r24, 0x19	; 25
    160e:	0e 94 b4 07 	call	0xf68	; 0xf68 <_ZNK6String10startsWithERKS_>
    1612:	b8 2e       	mov	r11, r24
    1614:	ce 01       	movw	r24, r28
    1616:	07 96       	adiw	r24, 0x07	; 7
    1618:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN6StringD1Ev>
    161c:	bb 20       	and	r11, r11
    161e:	79 f1       	breq	.+94     	; 0x167e <_ZN8BLEMate25resetEv+0x18a>
      {
        stdCmd("SCN OFF"); // When we come out of reset, we *could* be
    1620:	62 e7       	ldi	r22, 0x72	; 114
    1622:	71 e0       	ldi	r23, 0x01	; 1
    1624:	ce 01       	movw	r24, r28
    1626:	01 96       	adiw	r24, 0x01	; 1
    1628:	0e 94 47 06 	call	0xc8e	; 0xc8e <_ZN6StringC1EPKc>
    162c:	be 01       	movw	r22, r28
    162e:	6f 5f       	subi	r22, 0xFF	; 255
    1630:	7f 4f       	sbci	r23, 0xFF	; 255
    1632:	c8 01       	movw	r24, r16
    1634:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <_ZN8BLEMate26stdCmdE6String>
    1638:	ce 01       	movw	r24, r28
    163a:	01 96       	adiw	r24, 0x01	; 1
    163c:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN6StringD1Ev>
                           //  in scan mode. We don't want that; it's too
                           //  random and noisy.
        delay(500);        // Let the scanning noise complete.
    1640:	64 ef       	ldi	r22, 0xF4	; 244
    1642:	71 e0       	ldi	r23, 0x01	; 1
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	0e 94 2c 05 	call	0xa58	; 0xa58 <delay>
        while(_serialPort->available())
    164c:	0a c0       	rjmp	.+20     	; 0x1662 <_ZN8BLEMate25resetEv+0x16e>
        {
          _serialPort->read();
    164e:	f8 01       	movw	r30, r16
    1650:	81 a1       	ldd	r24, Z+33	; 0x21
    1652:	92 a1       	ldd	r25, Z+34	; 0x22
    1654:	dc 01       	movw	r26, r24
    1656:	ed 91       	ld	r30, X+
    1658:	fc 91       	ld	r31, X
    165a:	06 80       	ldd	r0, Z+6	; 0x06
    165c:	f7 81       	ldd	r31, Z+7	; 0x07
    165e:	e0 2d       	mov	r30, r0
    1660:	09 95       	icall
      {
        stdCmd("SCN OFF"); // When we come out of reset, we *could* be
                           //  in scan mode. We don't want that; it's too
                           //  random and noisy.
        delay(500);        // Let the scanning noise complete.
        while(_serialPort->available())
    1662:	f8 01       	movw	r30, r16
    1664:	81 a1       	ldd	r24, Z+33	; 0x21
    1666:	92 a1       	ldd	r25, Z+34	; 0x22
    1668:	dc 01       	movw	r26, r24
    166a:	ed 91       	ld	r30, X+
    166c:	fc 91       	ld	r31, X
    166e:	04 80       	ldd	r0, Z+4	; 0x04
    1670:	f5 81       	ldd	r31, Z+5	; 0x05
    1672:	e0 2d       	mov	r30, r0
    1674:	09 95       	icall
    1676:	89 2b       	or	r24, r25
    1678:	51 f7       	brne	.-44     	; 0x164e <_ZN8BLEMate25resetEv+0x15a>
        {
          _serialPort->read();
        } 
        return SUCCESS;
    167a:	11 e0       	ldi	r17, 0x01	; 1
    167c:	11 c0       	rjmp	.+34     	; 0x16a0 <_ZN8BLEMate25resetEv+0x1ac>
      }
      buffer = "";
    167e:	60 e2       	ldi	r22, 0x20	; 32
    1680:	71 e0       	ldi	r23, 0x01	; 1
    1682:	ce 01       	movw	r24, r28
    1684:	49 96       	adiw	r24, 0x19	; 25
    1686:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_ZN6StringaSEPKc>
  // We're going to use the internal timer to track the elapsed time since we
  //  issued the reset. Bog-standard Arduino stuff.
  unsigned long resetStart = millis();
  
  // This is our timeout loop. We'll give the module 6 seconds to reset.
  while ((resetStart + 6000) > millis())
    168a:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <millis>
    168e:	6c 15       	cp	r22, r12
    1690:	7d 05       	cpc	r23, r13
    1692:	8e 05       	cpc	r24, r14
    1694:	9f 05       	cpc	r25, r15
    1696:	08 f4       	brcc	.+2      	; 0x169a <_ZN8BLEMate25resetEv+0x1a6>
    1698:	75 cf       	rjmp	.-278    	; 0x1584 <_ZN8BLEMate25resetEv+0x90>
        return SUCCESS;
      }
      buffer = "";
    }    
  }
  return TIMEOUT_ERROR;
    169a:	1e ef       	ldi	r17, 0xFE	; 254
    169c:	01 c0       	rjmp	.+2      	; 0x16a0 <_ZN8BLEMate25resetEv+0x1ac>
    
    if (buffer.endsWith(EOL))
    {
      // If ERR or READY, we've finished the reset. Otherwise, just discard
      //  the data and wait for the next EOL.
      if (buffer.startsWith("ER")) return MODULE_ERROR;
    169e:	1f ef       	ldi	r17, 0xFF	; 255
//    ERR
// We'll buffer characters until we see an EOL (\n\r), then check the string.
BLEMate2::opResult BLEMate2::reset()
{
  String buffer;
  String EOL = String("\n\r");
    16a0:	ce 01       	movw	r24, r28
    16a2:	43 96       	adiw	r24, 0x13	; 19
    16a4:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN6StringD1Ev>
        return SUCCESS;
      }
      buffer = "";
    }    
  }
  return TIMEOUT_ERROR;
    16a8:	ce 01       	movw	r24, r28
    16aa:	49 96       	adiw	r24, 0x19	; 25
    16ac:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN6StringD1Ev>
}
    16b0:	81 2f       	mov	r24, r17
    16b2:	6e 96       	adiw	r28, 0x1e	; 30
    16b4:	0f b6       	in	r0, 0x3f	; 63
    16b6:	f8 94       	cli
    16b8:	de bf       	out	0x3e, r29	; 62
    16ba:	0f be       	out	0x3f, r0	; 63
    16bc:	cd bf       	out	0x3d, r28	; 61
    16be:	df 91       	pop	r29
    16c0:	cf 91       	pop	r28
    16c2:	1f 91       	pop	r17
    16c4:	0f 91       	pop	r16
    16c6:	ff 90       	pop	r15
    16c8:	ef 90       	pop	r14
    16ca:	df 90       	pop	r13
    16cc:	cf 90       	pop	r12
    16ce:	bf 90       	pop	r11
    16d0:	08 95       	ret

000016d2 <_ZN8BLEMate29amCentralERb>:
//  device; that's important information, so we should be able to query
//  the module regarding that. We're not going to store that info, however, 
//  since the whole point is to get it "from the horse's mouth" rather than
//  trusting that our software is in sync with the state of the module.
BLEMate2::opResult BLEMate2::amCentral(boolean &inCentralMode)
{
    16d2:	8f 92       	push	r8
    16d4:	9f 92       	push	r9
    16d6:	af 92       	push	r10
    16d8:	bf 92       	push	r11
    16da:	cf 92       	push	r12
    16dc:	df 92       	push	r13
    16de:	ef 92       	push	r14
    16e0:	ff 92       	push	r15
    16e2:	0f 93       	push	r16
    16e4:	1f 93       	push	r17
    16e6:	cf 93       	push	r28
    16e8:	df 93       	push	r29
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
    16ee:	6e 97       	sbiw	r28, 0x1e	; 30
    16f0:	0f b6       	in	r0, 0x3f	; 63
    16f2:	f8 94       	cli
    16f4:	de bf       	out	0x3e, r29	; 62
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	cd bf       	out	0x3d, r28	; 61
    16fa:	8c 01       	movw	r16, r24
    16fc:	7b 01       	movw	r14, r22
  String buffer;
    16fe:	60 e2       	ldi	r22, 0x20	; 32
    1700:	71 e0       	ldi	r23, 0x01	; 1
    1702:	ce 01       	movw	r24, r28
    1704:	49 96       	adiw	r24, 0x19	; 25
    1706:	0e 94 47 06 	call	0xc8e	; 0xc8e <_ZN6StringC1EPKc>
  String EOL = String("\n\r");
    170a:	6e e1       	ldi	r22, 0x1E	; 30
    170c:	71 e0       	ldi	r23, 0x01	; 1
    170e:	ce 01       	movw	r24, r28
    1710:	43 96       	adiw	r24, 0x13	; 19
    1712:	0e 94 47 06 	call	0xc8e	; 0xc8e <_ZN6StringC1EPKc>
  
  knownStart(); // Clear the serial buffer in the module and the Arduino.
    1716:	c8 01       	movw	r24, r16
    1718:	0e 94 ca 08 	call	0x1194	; 0x1194 <_ZN8BLEMate210knownStartEv>
  
  _serialPort->print("STS\r");
    171c:	6a e7       	ldi	r22, 0x7A	; 122
    171e:	71 e0       	ldi	r23, 0x01	; 1
    1720:	d8 01       	movw	r26, r16
    1722:	91 96       	adiw	r26, 0x21	; 33
    1724:	8d 91       	ld	r24, X+
    1726:	9c 91       	ld	r25, X
    1728:	92 97       	sbiw	r26, 0x22	; 34
    172a:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <_ZN5Print5printEPKc>
  _serialPort->flush();
    172e:	f8 01       	movw	r30, r16
    1730:	81 a1       	ldd	r24, Z+33	; 0x21
    1732:	92 a1       	ldd	r25, Z+34	; 0x22
    1734:	dc 01       	movw	r26, r24
    1736:	ed 91       	ld	r30, X+
    1738:	fc 91       	ld	r31, X
    173a:	02 84       	ldd	r0, Z+10	; 0x0a
    173c:	f3 85       	ldd	r31, Z+11	; 0x0b
    173e:	e0 2d       	mov	r30, r0
    1740:	09 95       	icall
  
  // We're going to use the internal timer to track the elapsed time since we
  //  issued the command. Bog-standard Arduino stuff.
  unsigned long startTime = millis();
    1742:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <millis>
    
  // This is our timeout loop. We'll give the module 3 seconds.
  while ((startTime + 3000) > millis())
    1746:	4b 01       	movw	r8, r22
    1748:	5c 01       	movw	r10, r24
    174a:	b8 eb       	ldi	r27, 0xB8	; 184
    174c:	8b 0e       	add	r8, r27
    174e:	bb e0       	ldi	r27, 0x0B	; 11
    1750:	9b 1e       	adc	r9, r27
    1752:	a1 1c       	adc	r10, r1
    1754:	b1 1c       	adc	r11, r1
      }
      else if (buffer.startsWith("STS")) 
      {
        if (buffer.charAt(4) == 'C')
        {
          inCentralMode = true;
    1756:	dd 24       	eor	r13, r13
    1758:	d3 94       	inc	r13
  // We're going to use the internal timer to track the elapsed time since we
  //  issued the command. Bog-standard Arduino stuff.
  unsigned long startTime = millis();
    
  // This is our timeout loop. We'll give the module 3 seconds.
  while ((startTime + 3000) > millis())
    175a:	75 c0       	rjmp	.+234    	; 0x1846 <_ZN8BLEMate29amCentralERb+0x174>
  {
    // Grow the current buffered data, until we receive the EOL string.    
    if (_serialPort->available() > 0) 
    175c:	f8 01       	movw	r30, r16
    175e:	81 a1       	ldd	r24, Z+33	; 0x21
    1760:	92 a1       	ldd	r25, Z+34	; 0x22
    1762:	dc 01       	movw	r26, r24
    1764:	ed 91       	ld	r30, X+
    1766:	fc 91       	ld	r31, X
    1768:	04 80       	ldd	r0, Z+4	; 0x04
    176a:	f5 81       	ldd	r31, Z+5	; 0x05
    176c:	e0 2d       	mov	r30, r0
    176e:	09 95       	icall
    1770:	18 16       	cp	r1, r24
    1772:	19 06       	cpc	r1, r25
    1774:	7c f4       	brge	.+30     	; 0x1794 <_ZN8BLEMate29amCentralERb+0xc2>
    {
      buffer.concat(char(_serialPort->read()));
    1776:	f8 01       	movw	r30, r16
    1778:	81 a1       	ldd	r24, Z+33	; 0x21
    177a:	92 a1       	ldd	r25, Z+34	; 0x22
    177c:	dc 01       	movw	r26, r24
    177e:	ed 91       	ld	r30, X+
    1780:	fc 91       	ld	r31, X
    1782:	06 80       	ldd	r0, Z+6	; 0x06
    1784:	f7 81       	ldd	r31, Z+7	; 0x07
    1786:	e0 2d       	mov	r30, r0
    1788:	09 95       	icall
    178a:	68 2f       	mov	r22, r24
    178c:	ce 01       	movw	r24, r28
    178e:	49 96       	adiw	r24, 0x19	; 25
    1790:	0e 94 db 06 	call	0xdb6	; 0xdb6 <_ZN6String6concatEc>
    }
    if (buffer.endsWith(EOL))
    1794:	be 01       	movw	r22, r28
    1796:	6d 5e       	subi	r22, 0xED	; 237
    1798:	7f 4f       	sbci	r23, 0xFF	; 255
    179a:	ce 01       	movw	r24, r28
    179c:	49 96       	adiw	r24, 0x19	; 25
    179e:	0e 94 c4 07 	call	0xf88	; 0xf88 <_ZNK6String8endsWithERKS_>
    17a2:	88 23       	and	r24, r24
    17a4:	09 f4       	brne	.+2      	; 0x17a8 <_ZN8BLEMate29amCentralERb+0xd6>
    17a6:	4f c0       	rjmp	.+158    	; 0x1846 <_ZN8BLEMate29amCentralERb+0x174>
    {
      if (buffer.startsWith("ER")) 
    17a8:	6a e2       	ldi	r22, 0x2A	; 42
    17aa:	71 e0       	ldi	r23, 0x01	; 1
    17ac:	ce 01       	movw	r24, r28
    17ae:	0d 96       	adiw	r24, 0x0d	; 13
    17b0:	0e 94 47 06 	call	0xc8e	; 0xc8e <_ZN6StringC1EPKc>
    17b4:	be 01       	movw	r22, r28
    17b6:	63 5f       	subi	r22, 0xF3	; 243
    17b8:	7f 4f       	sbci	r23, 0xFF	; 255
    17ba:	ce 01       	movw	r24, r28
    17bc:	49 96       	adiw	r24, 0x19	; 25
    17be:	0e 94 b4 07 	call	0xf68	; 0xf68 <_ZNK6String10startsWithERKS_>
    17c2:	c8 2e       	mov	r12, r24
    17c4:	ce 01       	movw	r24, r28
    17c6:	0d 96       	adiw	r24, 0x0d	; 13
    17c8:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN6StringD1Ev>
    17cc:	c1 10       	cpse	r12, r1
    17ce:	45 c0       	rjmp	.+138    	; 0x185a <_ZN8BLEMate29amCentralERb+0x188>
      {
        return MODULE_ERROR;
      }
      else if (buffer.startsWith("OK")) 
    17d0:	63 e3       	ldi	r22, 0x33	; 51
    17d2:	71 e0       	ldi	r23, 0x01	; 1
    17d4:	ce 01       	movw	r24, r28
    17d6:	07 96       	adiw	r24, 0x07	; 7
    17d8:	0e 94 47 06 	call	0xc8e	; 0xc8e <_ZN6StringC1EPKc>
    17dc:	be 01       	movw	r22, r28
    17de:	69 5f       	subi	r22, 0xF9	; 249
    17e0:	7f 4f       	sbci	r23, 0xFF	; 255
    17e2:	ce 01       	movw	r24, r28
    17e4:	49 96       	adiw	r24, 0x19	; 25
    17e6:	0e 94 b4 07 	call	0xf68	; 0xf68 <_ZNK6String10startsWithERKS_>
    17ea:	c8 2e       	mov	r12, r24
    17ec:	ce 01       	movw	r24, r28
    17ee:	07 96       	adiw	r24, 0x07	; 7
    17f0:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN6StringD1Ev>
    17f4:	c1 10       	cpse	r12, r1
    17f6:	33 c0       	rjmp	.+102    	; 0x185e <_ZN8BLEMate29amCentralERb+0x18c>
      {
        return SUCCESS;
      }
      else if (buffer.startsWith("STS")) 
    17f8:	6f e7       	ldi	r22, 0x7F	; 127
    17fa:	71 e0       	ldi	r23, 0x01	; 1
    17fc:	ce 01       	movw	r24, r28
    17fe:	01 96       	adiw	r24, 0x01	; 1
    1800:	0e 94 47 06 	call	0xc8e	; 0xc8e <_ZN6StringC1EPKc>
    1804:	be 01       	movw	r22, r28
    1806:	6f 5f       	subi	r22, 0xFF	; 255
    1808:	7f 4f       	sbci	r23, 0xFF	; 255
    180a:	ce 01       	movw	r24, r28
    180c:	49 96       	adiw	r24, 0x19	; 25
    180e:	0e 94 b4 07 	call	0xf68	; 0xf68 <_ZNK6String10startsWithERKS_>
    1812:	c8 2e       	mov	r12, r24
    1814:	ce 01       	movw	r24, r28
    1816:	01 96       	adiw	r24, 0x01	; 1
    1818:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN6StringD1Ev>
    181c:	cc 20       	and	r12, r12
    181e:	69 f0       	breq	.+26     	; 0x183a <_ZN8BLEMate29amCentralERb+0x168>
      {
        if (buffer.charAt(4) == 'C')
    1820:	64 e0       	ldi	r22, 0x04	; 4
    1822:	70 e0       	ldi	r23, 0x00	; 0
    1824:	ce 01       	movw	r24, r28
    1826:	49 96       	adiw	r24, 0x19	; 25
    1828:	0e 94 fd 07 	call	0xffa	; 0xffa <_ZNK6String6charAtEj>
    182c:	83 34       	cpi	r24, 0x43	; 67
    182e:	19 f4       	brne	.+6      	; 0x1836 <_ZN8BLEMate29amCentralERb+0x164>
        {
          inCentralMode = true;
    1830:	f7 01       	movw	r30, r14
    1832:	d0 82       	st	Z, r13
    1834:	02 c0       	rjmp	.+4      	; 0x183a <_ZN8BLEMate29amCentralERb+0x168>
        }
        else
        {
          inCentralMode = false;
    1836:	d7 01       	movw	r26, r14
    1838:	1c 92       	st	X, r1
        }
      } 
      buffer = "";
    183a:	60 e2       	ldi	r22, 0x20	; 32
    183c:	71 e0       	ldi	r23, 0x01	; 1
    183e:	ce 01       	movw	r24, r28
    1840:	49 96       	adiw	r24, 0x19	; 25
    1842:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_ZN6StringaSEPKc>
  // We're going to use the internal timer to track the elapsed time since we
  //  issued the command. Bog-standard Arduino stuff.
  unsigned long startTime = millis();
    
  // This is our timeout loop. We'll give the module 3 seconds.
  while ((startTime + 3000) > millis())
    1846:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <millis>
    184a:	68 15       	cp	r22, r8
    184c:	79 05       	cpc	r23, r9
    184e:	8a 05       	cpc	r24, r10
    1850:	9b 05       	cpc	r25, r11
    1852:	08 f4       	brcc	.+2      	; 0x1856 <_ZN8BLEMate29amCentralERb+0x184>
    1854:	83 cf       	rjmp	.-250    	; 0x175c <_ZN8BLEMate29amCentralERb+0x8a>
        }
      } 
      buffer = "";
    }    
  }
  return TIMEOUT_ERROR;
    1856:	1e ef       	ldi	r17, 0xFE	; 254
    1858:	03 c0       	rjmp	.+6      	; 0x1860 <_ZN8BLEMate29amCentralERb+0x18e>
    }
    if (buffer.endsWith(EOL))
    {
      if (buffer.startsWith("ER")) 
      {
        return MODULE_ERROR;
    185a:	1f ef       	ldi	r17, 0xFF	; 255
    185c:	01 c0       	rjmp	.+2      	; 0x1860 <_ZN8BLEMate29amCentralERb+0x18e>
      }
      else if (buffer.startsWith("OK")) 
      {
        return SUCCESS;
    185e:	11 e0       	ldi	r17, 0x01	; 1
//  since the whole point is to get it "from the horse's mouth" rather than
//  trusting that our software is in sync with the state of the module.
BLEMate2::opResult BLEMate2::amCentral(boolean &inCentralMode)
{
  String buffer;
  String EOL = String("\n\r");
    1860:	ce 01       	movw	r24, r28
    1862:	43 96       	adiw	r24, 0x13	; 19
    1864:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN6StringD1Ev>
        }
      } 
      buffer = "";
    }    
  }
  return TIMEOUT_ERROR;
    1868:	ce 01       	movw	r24, r28
    186a:	49 96       	adiw	r24, 0x19	; 25
    186c:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN6StringD1Ev>
}
    1870:	81 2f       	mov	r24, r17
    1872:	6e 96       	adiw	r28, 0x1e	; 30
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	f8 94       	cli
    1878:	de bf       	out	0x3e, r29	; 62
    187a:	0f be       	out	0x3f, r0	; 63
    187c:	cd bf       	out	0x3d, r28	; 61
    187e:	df 91       	pop	r29
    1880:	cf 91       	pop	r28
    1882:	1f 91       	pop	r17
    1884:	0f 91       	pop	r16
    1886:	ff 90       	pop	r15
    1888:	ef 90       	pop	r14
    188a:	df 90       	pop	r13
    188c:	cf 90       	pop	r12
    188e:	bf 90       	pop	r11
    1890:	af 90       	pop	r10
    1892:	9f 90       	pop	r9
    1894:	8f 90       	pop	r8
    1896:	08 95       	ret

00001898 <_ZN8BLEMate28sendDataEPch>:
  return result;
}

// Now, byte array.
BLEMate2::opResult BLEMate2::sendData(char *dataBuffer, byte dataLen)
{
    1898:	8f 92       	push	r8
    189a:	9f 92       	push	r9
    189c:	af 92       	push	r10
    189e:	bf 92       	push	r11
    18a0:	cf 92       	push	r12
    18a2:	df 92       	push	r13
    18a4:	ef 92       	push	r14
    18a6:	ff 92       	push	r15
    18a8:	0f 93       	push	r16
    18aa:	1f 93       	push	r17
    18ac:	cf 93       	push	r28
    18ae:	df 93       	push	r29
    18b0:	cd b7       	in	r28, 0x3d	; 61
    18b2:	de b7       	in	r29, 0x3e	; 62
    18b4:	69 97       	sbiw	r28, 0x19	; 25
    18b6:	0f b6       	in	r0, 0x3f	; 63
    18b8:	f8 94       	cli
    18ba:	de bf       	out	0x3e, r29	; 62
    18bc:	0f be       	out	0x3f, r0	; 63
    18be:	cd bf       	out	0x3d, r28	; 61
    18c0:	7c 01       	movw	r14, r24
    18c2:	8b 01       	movw	r16, r22
    18c4:	84 2e       	mov	r8, r20
  String EOL = String("\n\r");
    18c6:	6e e1       	ldi	r22, 0x1E	; 30
    18c8:	71 e0       	ldi	r23, 0x01	; 1
    18ca:	ce 01       	movw	r24, r28
    18cc:	43 96       	adiw	r24, 0x13	; 19
    18ce:	0e 94 47 06 	call	0xc8e	; 0xc8e <_ZN6StringC1EPKc>
  //  I don't want to burden the user with that, unduly, so I'm going to chop
  //  up their data and send it out in smaller blocks.
   
  // Thus, the first quetion is: am I in central mode, or not?
  boolean inCentralMode;
  amCentral(inCentralMode);
    18d2:	be 01       	movw	r22, r28
    18d4:	67 5e       	subi	r22, 0xE7	; 231
    18d6:	7f 4f       	sbci	r23, 0xFF	; 255
    18d8:	c7 01       	movw	r24, r14
    18da:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <_ZN8BLEMate29amCentralERb>
  // What we're now going to do is to build a String object with our buffer
  //  contents and then hit send on that buffer when it reaches a the length
  //  limited by the mode.

  byte outBufLenLimit = 20;
  if (!inCentralMode)
    18de:	89 8d       	ldd	r24, Y+25	; 0x19
    18e0:	88 23       	and	r24, r24
    18e2:	29 f0       	breq	.+10     	; 0x18ee <_ZN8BLEMate28sendDataEPch+0x56>

  // What we're now going to do is to build a String object with our buffer
  //  contents and then hit send on that buffer when it reaches a the length
  //  limited by the mode.

  byte outBufLenLimit = 20;
    18e4:	0f 2e       	mov	r0, r31
    18e6:	f4 e1       	ldi	r31, 0x14	; 20
    18e8:	af 2e       	mov	r10, r31
    18ea:	f0 2d       	mov	r31, r0
    18ec:	04 c0       	rjmp	.+8      	; 0x18f6 <_ZN8BLEMate28sendDataEPch+0x5e>
  if (!inCentralMode)
  {
    outBufLenLimit = 125;
    18ee:	0f 2e       	mov	r0, r31
    18f0:	fd e7       	ldi	r31, 0x7D	; 125
    18f2:	af 2e       	mov	r10, r31
    18f4:	f0 2d       	mov	r31, r0
  byte inBufPtr = 0;
  byte outBufLen = 0;
  byte dataLeft = dataLen;

  opResult result = SUCCESS;
  while (inBufPtr < dataLen)
    18f6:	88 20       	and	r8, r8
    18f8:	09 f4       	brne	.+2      	; 0x18fc <_ZN8BLEMate28sendDataEPch+0x64>
    18fa:	54 c0       	rjmp	.+168    	; 0x19a4 <_ZN8BLEMate28sendDataEPch+0x10c>
    18fc:	98 2c       	mov	r9, r8
    18fe:	d1 2c       	mov	r13, r1
    1900:	9a 14       	cp	r9, r10
    1902:	08 f4       	brcc	.+2      	; 0x1906 <_ZN8BLEMate28sendDataEPch+0x6e>
    1904:	a9 2c       	mov	r10, r9
  {
    if (dataLeft < outBufLenLimit)
    {
      outBufLenLimit = dataLeft;
    }
    dataLeft -= outBufLenLimit;
    1906:	9a 18       	sub	r9, r10
    String outBuf;
    1908:	60 e2       	ldi	r22, 0x20	; 32
    190a:	71 e0       	ldi	r23, 0x01	; 1
    190c:	ce 01       	movw	r24, r28
    190e:	0d 96       	adiw	r24, 0x0d	; 13
    1910:	0e 94 47 06 	call	0xc8e	; 0xc8e <_ZN6StringC1EPKc>
    while (outBufLen < outBufLenLimit)
    1914:	aa 20       	and	r10, r10
    1916:	89 f0       	breq	.+34     	; 0x193a <_ZN8BLEMate28sendDataEPch+0xa2>
    1918:	ba 2c       	mov	r11, r10
    191a:	bd 0c       	add	r11, r13
    {
      outBuf.concat(dataBuffer[inBufPtr++]);
    191c:	cc 24       	eor	r12, r12
    191e:	c3 94       	inc	r12
    1920:	cd 0c       	add	r12, r13
    1922:	f8 01       	movw	r30, r16
    1924:	ed 0d       	add	r30, r13
    1926:	f1 1d       	adc	r31, r1
    1928:	60 81       	ld	r22, Z
    192a:	ce 01       	movw	r24, r28
    192c:	0d 96       	adiw	r24, 0x0d	; 13
    192e:	0e 94 db 06 	call	0xdb6	; 0xdb6 <_ZN6String6concatEc>
    {
      outBufLenLimit = dataLeft;
    }
    dataLeft -= outBufLenLimit;
    String outBuf;
    while (outBufLen < outBufLenLimit)
    1932:	cb 14       	cp	r12, r11
    1934:	19 f0       	breq	.+6      	; 0x193c <_ZN8BLEMate28sendDataEPch+0xa4>
    {
      outBuf.concat(dataBuffer[inBufPtr++]);
    1936:	dc 2c       	mov	r13, r12
    1938:	f1 cf       	rjmp	.-30     	; 0x191c <_ZN8BLEMate28sendDataEPch+0x84>
    {
      outBufLenLimit = dataLeft;
    }
    dataLeft -= outBufLenLimit;
    String outBuf;
    while (outBufLen < outBufLenLimit)
    193a:	bd 2c       	mov	r11, r13

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    193c:	63 e8       	ldi	r22, 0x83	; 131
    193e:	71 e0       	ldi	r23, 0x01	; 1
    1940:	ce 01       	movw	r24, r28
    1942:	07 96       	adiw	r24, 0x07	; 7
    1944:	0e 94 47 06 	call	0xc8e	; 0xc8e <_ZN6StringC1EPKc>
    {
      outBuf.concat(dataBuffer[inBufPtr++]);
      outBufLen++;
    }
    outBuf = "SND " + outBuf + "\r";
    1948:	be 01       	movw	r22, r28
    194a:	63 5f       	subi	r22, 0xF3	; 243
    194c:	7f 4f       	sbci	r23, 0xFF	; 255
    194e:	ce 01       	movw	r24, r28
    1950:	07 96       	adiw	r24, 0x07	; 7
    1952:	0e 94 ee 06 	call	0xddc	; 0xddc <_ZplRK15StringSumHelperRK6String>
    1956:	6f e1       	ldi	r22, 0x1F	; 31
    1958:	71 e0       	ldi	r23, 0x01	; 1
    195a:	0e 94 01 07 	call	0xe02	; 0xe02 <_ZplRK15StringSumHelperPKc>
    195e:	bc 01       	movw	r22, r24
    1960:	ce 01       	movw	r24, r28
    1962:	0d 96       	adiw	r24, 0x0d	; 13
    1964:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <_ZN6StringaSERKS_>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1968:	ce 01       	movw	r24, r28
    196a:	07 96       	adiw	r24, 0x07	; 7
    196c:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN6StringD1Ev>
    result = stdCmd(outBuf);
    1970:	be 01       	movw	r22, r28
    1972:	63 5f       	subi	r22, 0xF3	; 243
    1974:	7f 4f       	sbci	r23, 0xFF	; 255
    1976:	ce 01       	movw	r24, r28
    1978:	01 96       	adiw	r24, 0x01	; 1
    197a:	0e 94 73 06 	call	0xce6	; 0xce6 <_ZN6StringC1ERKS_>
    197e:	be 01       	movw	r22, r28
    1980:	6f 5f       	subi	r22, 0xFF	; 255
    1982:	7f 4f       	sbci	r23, 0xFF	; 255
    1984:	c7 01       	movw	r24, r14
    1986:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <_ZN8BLEMate26stdCmdE6String>
    198a:	d8 2e       	mov	r13, r24
    198c:	ce 01       	movw	r24, r28
    198e:	01 96       	adiw	r24, 0x01	; 1
    1990:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN6StringD1Ev>
    outBufLen = 0;
  }
    1994:	ce 01       	movw	r24, r28
    1996:	0d 96       	adiw	r24, 0x0d	; 13
    1998:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN6StringD1Ev>
  byte inBufPtr = 0;
  byte outBufLen = 0;
  byte dataLeft = dataLen;

  opResult result = SUCCESS;
  while (inBufPtr < dataLen)
    199c:	b8 14       	cp	r11, r8
    199e:	20 f4       	brcc	.+8      	; 0x19a8 <_ZN8BLEMate28sendDataEPch+0x110>
    19a0:	db 2c       	mov	r13, r11
    19a2:	ae cf       	rjmp	.-164    	; 0x1900 <_ZN8BLEMate28sendDataEPch+0x68>
    19a4:	dd 24       	eor	r13, r13
    19a6:	d3 94       	inc	r13
    }
    outBuf = "SND " + outBuf + "\r";
    result = stdCmd(outBuf);
    outBufLen = 0;
  }
  return result;
    19a8:	ce 01       	movw	r24, r28
    19aa:	43 96       	adiw	r24, 0x13	; 19
    19ac:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN6StringD1Ev>
}
    19b0:	8d 2d       	mov	r24, r13
    19b2:	69 96       	adiw	r28, 0x19	; 25
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	f8 94       	cli
    19b8:	de bf       	out	0x3e, r29	; 62
    19ba:	0f be       	out	0x3f, r0	; 63
    19bc:	cd bf       	out	0x3d, r28	; 61
    19be:	df 91       	pop	r29
    19c0:	cf 91       	pop	r28
    19c2:	1f 91       	pop	r17
    19c4:	0f 91       	pop	r16
    19c6:	ff 90       	pop	r15
    19c8:	ef 90       	pop	r14
    19ca:	df 90       	pop	r13
    19cc:	cf 90       	pop	r12
    19ce:	bf 90       	pop	r11
    19d0:	af 90       	pop	r10
    19d2:	9f 90       	pop	r9
    19d4:	8f 90       	pop	r8
    19d6:	08 95       	ret

000019d8 <_ZN8BLEMate28sendDataER6String>:
  String newBuffer = dataBuffer;
  return sendData(newBuffer);
}

BLEMate2::opResult BLEMate2::sendData(String &dataBuffer)
{
    19d8:	cf 92       	push	r12
    19da:	df 92       	push	r13
    19dc:	ef 92       	push	r14
    19de:	ff 92       	push	r15
    19e0:	0f 93       	push	r16
    19e2:	1f 93       	push	r17
    19e4:	cf 93       	push	r28
    19e6:	df 93       	push	r29
    19e8:	6c 01       	movw	r12, r24
    19ea:	7b 01       	movw	r14, r22
  // First, we'll need to figure out the length of the string.
  int bufLength = dataBuffer.length()+1;
    19ec:	fb 01       	movw	r30, r22
    19ee:	04 81       	ldd	r16, Z+4	; 0x04
    19f0:	15 81       	ldd	r17, Z+5	; 0x05
    19f2:	0f 5f       	subi	r16, 0xFF	; 255
    19f4:	1f 4f       	sbci	r17, 0xFF	; 255

  // Now dynamically allocate an array of the appropriate size.
  char *charArray = new char [bufLength];
    19f6:	c8 01       	movw	r24, r16
    19f8:	0e 94 99 02 	call	0x532	; 0x532 <_Znaj>
    19fc:	ec 01       	movw	r28, r24
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	a8 01       	movw	r20, r16
    1a04:	bc 01       	movw	r22, r24
    1a06:	c7 01       	movw	r24, r14
    1a08:	0e 94 00 08 	call	0x1000	; 0x1000 <_ZNK6String8getBytesEPhjj>

  // Copy over the data.
  dataBuffer.toCharArray(charArray, bufLength);

  // Call the byte array function
  opResult result = sendData(charArray, bufLength);
    1a0c:	40 2f       	mov	r20, r16
    1a0e:	be 01       	movw	r22, r28
    1a10:	c6 01       	movw	r24, r12
    1a12:	0e 94 4c 0c 	call	0x1898	; 0x1898 <_ZN8BLEMate28sendDataEPch>
    1a16:	18 2f       	mov	r17, r24

  // de-allocate the memory.
  delete charArray;
    1a18:	ce 01       	movw	r24, r28
    1a1a:	0e 94 9c 02 	call	0x538	; 0x538 <_ZdlPv>

  return result;
}
    1a1e:	81 2f       	mov	r24, r17
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	1f 91       	pop	r17
    1a26:	0f 91       	pop	r16
    1a28:	ff 90       	pop	r15
    1a2a:	ef 90       	pop	r14
    1a2c:	df 90       	pop	r13
    1a2e:	cf 90       	pop	r12
    1a30:	08 95       	ret

00001a32 <blink_left_arrow>:

#include "../lib/Arduino/Arduino.h"
#include "blink_leds.h"

void blink_left_arrow (unsigned int times)
{
    1a32:	0f 93       	push	r16
    1a34:	1f 93       	push	r17
    1a36:	cf 93       	push	r28
    1a38:	df 93       	push	r29
    1a3a:	8c 01       	movw	r16, r24
    for (unsigned int loop = 0; loop < times; loop++) {
    1a3c:	00 97       	sbiw	r24, 0x00	; 0
    1a3e:	51 f1       	breq	.+84     	; 0x1a94 <blink_left_arrow+0x62>
    1a40:	c0 e0       	ldi	r28, 0x00	; 0
    1a42:	d0 e0       	ldi	r29, 0x00	; 0
        digitalWrite(7, HIGH);
    1a44:	61 e0       	ldi	r22, 0x01	; 1
    1a46:	87 e0       	ldi	r24, 0x07	; 7
    1a48:	0e 94 a3 05 	call	0xb46	; 0xb46 <digitalWrite>
        digitalWrite(3, HIGH);
    1a4c:	61 e0       	ldi	r22, 0x01	; 1
    1a4e:	83 e0       	ldi	r24, 0x03	; 3
    1a50:	0e 94 a3 05 	call	0xb46	; 0xb46 <digitalWrite>
        digitalWrite(2, HIGH);
    1a54:	61 e0       	ldi	r22, 0x01	; 1
    1a56:	82 e0       	ldi	r24, 0x02	; 2
    1a58:	0e 94 a3 05 	call	0xb46	; 0xb46 <digitalWrite>
        delay(500);
    1a5c:	64 ef       	ldi	r22, 0xF4	; 244
    1a5e:	71 e0       	ldi	r23, 0x01	; 1
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	0e 94 2c 05 	call	0xa58	; 0xa58 <delay>
        digitalWrite(7, LOW);
    1a68:	60 e0       	ldi	r22, 0x00	; 0
    1a6a:	87 e0       	ldi	r24, 0x07	; 7
    1a6c:	0e 94 a3 05 	call	0xb46	; 0xb46 <digitalWrite>
        digitalWrite(3, LOW);
    1a70:	60 e0       	ldi	r22, 0x00	; 0
    1a72:	83 e0       	ldi	r24, 0x03	; 3
    1a74:	0e 94 a3 05 	call	0xb46	; 0xb46 <digitalWrite>
        digitalWrite(2, LOW);
    1a78:	60 e0       	ldi	r22, 0x00	; 0
    1a7a:	82 e0       	ldi	r24, 0x02	; 2
    1a7c:	0e 94 a3 05 	call	0xb46	; 0xb46 <digitalWrite>
        delay(500);
    1a80:	64 ef       	ldi	r22, 0xF4	; 244
    1a82:	71 e0       	ldi	r23, 0x01	; 1
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	0e 94 2c 05 	call	0xa58	; 0xa58 <delay>
#include "../lib/Arduino/Arduino.h"
#include "blink_leds.h"

void blink_left_arrow (unsigned int times)
{
    for (unsigned int loop = 0; loop < times; loop++) {
    1a8c:	21 96       	adiw	r28, 0x01	; 1
    1a8e:	c0 17       	cp	r28, r16
    1a90:	d1 07       	cpc	r29, r17
    1a92:	c1 f6       	brne	.-80     	; 0x1a44 <blink_left_arrow+0x12>
        digitalWrite(7, LOW);
        digitalWrite(3, LOW);
        digitalWrite(2, LOW);
        delay(500);
    }
}
    1a94:	df 91       	pop	r29
    1a96:	cf 91       	pop	r28
    1a98:	1f 91       	pop	r17
    1a9a:	0f 91       	pop	r16
    1a9c:	08 95       	ret

00001a9e <blink_right_arrow>:

void blink_right_arrow (unsigned int times)
{
    1a9e:	0f 93       	push	r16
    1aa0:	1f 93       	push	r17
    1aa2:	cf 93       	push	r28
    1aa4:	df 93       	push	r29
    1aa6:	8c 01       	movw	r16, r24
    for (unsigned int loop = 0; loop < times; loop++) {
    1aa8:	00 97       	sbiw	r24, 0x00	; 0
    1aaa:	51 f1       	breq	.+84     	; 0x1b00 <blink_right_arrow+0x62>
    1aac:	c0 e0       	ldi	r28, 0x00	; 0
    1aae:	d0 e0       	ldi	r29, 0x00	; 0
        digitalWrite(8, HIGH);
    1ab0:	61 e0       	ldi	r22, 0x01	; 1
    1ab2:	88 e0       	ldi	r24, 0x08	; 8
    1ab4:	0e 94 a3 05 	call	0xb46	; 0xb46 <digitalWrite>
        digitalWrite(10, HIGH);
    1ab8:	61 e0       	ldi	r22, 0x01	; 1
    1aba:	8a e0       	ldi	r24, 0x0A	; 10
    1abc:	0e 94 a3 05 	call	0xb46	; 0xb46 <digitalWrite>
        digitalWrite(5, HIGH);
    1ac0:	61 e0       	ldi	r22, 0x01	; 1
    1ac2:	85 e0       	ldi	r24, 0x05	; 5
    1ac4:	0e 94 a3 05 	call	0xb46	; 0xb46 <digitalWrite>
        delay(500);
    1ac8:	64 ef       	ldi	r22, 0xF4	; 244
    1aca:	71 e0       	ldi	r23, 0x01	; 1
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	0e 94 2c 05 	call	0xa58	; 0xa58 <delay>
        digitalWrite(8, LOW);
    1ad4:	60 e0       	ldi	r22, 0x00	; 0
    1ad6:	88 e0       	ldi	r24, 0x08	; 8
    1ad8:	0e 94 a3 05 	call	0xb46	; 0xb46 <digitalWrite>
        digitalWrite(10, LOW);
    1adc:	60 e0       	ldi	r22, 0x00	; 0
    1ade:	8a e0       	ldi	r24, 0x0A	; 10
    1ae0:	0e 94 a3 05 	call	0xb46	; 0xb46 <digitalWrite>
        digitalWrite(5, LOW);
    1ae4:	60 e0       	ldi	r22, 0x00	; 0
    1ae6:	85 e0       	ldi	r24, 0x05	; 5
    1ae8:	0e 94 a3 05 	call	0xb46	; 0xb46 <digitalWrite>
        delay(500);
    1aec:	64 ef       	ldi	r22, 0xF4	; 244
    1aee:	71 e0       	ldi	r23, 0x01	; 1
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	0e 94 2c 05 	call	0xa58	; 0xa58 <delay>
    }
}

void blink_right_arrow (unsigned int times)
{
    for (unsigned int loop = 0; loop < times; loop++) {
    1af8:	21 96       	adiw	r28, 0x01	; 1
    1afa:	c0 17       	cp	r28, r16
    1afc:	d1 07       	cpc	r29, r17
    1afe:	c1 f6       	brne	.-80     	; 0x1ab0 <blink_right_arrow+0x12>
        digitalWrite(8, LOW);
        digitalWrite(10, LOW);
        digitalWrite(5, LOW);
        delay(500);
    }
}
    1b00:	df 91       	pop	r29
    1b02:	cf 91       	pop	r28
    1b04:	1f 91       	pop	r17
    1b06:	0f 91       	pop	r16
    1b08:	08 95       	ret

00001b0a <blink_top_arrow>:

void blink_top_arrow (unsigned int times)
{
    1b0a:	0f 93       	push	r16
    1b0c:	1f 93       	push	r17
    1b0e:	cf 93       	push	r28
    1b10:	df 93       	push	r29
    1b12:	8c 01       	movw	r16, r24
    for (unsigned int loop = 0; loop < times; loop++) {
    1b14:	00 97       	sbiw	r24, 0x00	; 0
    1b16:	51 f1       	breq	.+84     	; 0x1b6c <blink_top_arrow+0x62>
    1b18:	c0 e0       	ldi	r28, 0x00	; 0
    1b1a:	d0 e0       	ldi	r29, 0x00	; 0
        digitalWrite(4, HIGH);
    1b1c:	61 e0       	ldi	r22, 0x01	; 1
    1b1e:	84 e0       	ldi	r24, 0x04	; 4
    1b20:	0e 94 a3 05 	call	0xb46	; 0xb46 <digitalWrite>
        digitalWrite(9, HIGH);
    1b24:	61 e0       	ldi	r22, 0x01	; 1
    1b26:	89 e0       	ldi	r24, 0x09	; 9
    1b28:	0e 94 a3 05 	call	0xb46	; 0xb46 <digitalWrite>
        digitalWrite(6, HIGH);
    1b2c:	61 e0       	ldi	r22, 0x01	; 1
    1b2e:	86 e0       	ldi	r24, 0x06	; 6
    1b30:	0e 94 a3 05 	call	0xb46	; 0xb46 <digitalWrite>
        delay(500);
    1b34:	64 ef       	ldi	r22, 0xF4	; 244
    1b36:	71 e0       	ldi	r23, 0x01	; 1
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	0e 94 2c 05 	call	0xa58	; 0xa58 <delay>
        digitalWrite(4, LOW);
    1b40:	60 e0       	ldi	r22, 0x00	; 0
    1b42:	84 e0       	ldi	r24, 0x04	; 4
    1b44:	0e 94 a3 05 	call	0xb46	; 0xb46 <digitalWrite>
        digitalWrite(9, LOW);
    1b48:	60 e0       	ldi	r22, 0x00	; 0
    1b4a:	89 e0       	ldi	r24, 0x09	; 9
    1b4c:	0e 94 a3 05 	call	0xb46	; 0xb46 <digitalWrite>
        digitalWrite(6, LOW);
    1b50:	60 e0       	ldi	r22, 0x00	; 0
    1b52:	86 e0       	ldi	r24, 0x06	; 6
    1b54:	0e 94 a3 05 	call	0xb46	; 0xb46 <digitalWrite>
        delay(500);
    1b58:	64 ef       	ldi	r22, 0xF4	; 244
    1b5a:	71 e0       	ldi	r23, 0x01	; 1
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	0e 94 2c 05 	call	0xa58	; 0xa58 <delay>
    }
}

void blink_top_arrow (unsigned int times)
{
    for (unsigned int loop = 0; loop < times; loop++) {
    1b64:	21 96       	adiw	r28, 0x01	; 1
    1b66:	c0 17       	cp	r28, r16
    1b68:	d1 07       	cpc	r29, r17
    1b6a:	c1 f6       	brne	.-80     	; 0x1b1c <blink_top_arrow+0x12>
        digitalWrite(4, LOW);
        digitalWrite(9, LOW);
        digitalWrite(6, LOW);
        delay(500);
    }
    1b6c:	df 91       	pop	r29
    1b6e:	cf 91       	pop	r28
    1b70:	1f 91       	pop	r17
    1b72:	0f 91       	pop	r16
    1b74:	08 95       	ret

00001b76 <_Z5setupv>:
int turnSignalSent = 0;

void setupPeripheralExample();

void setup()
{
    1b76:	ff 92       	push	r15
    1b78:	0f 93       	push	r16
    1b7a:	1f 93       	push	r17
    1b7c:	cf 93       	push	r28
    1b7e:	df 93       	push	r29
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    1b80:	26 e0       	ldi	r18, 0x06	; 6
    1b82:	40 e8       	ldi	r20, 0x80	; 128
    1b84:	55 e2       	ldi	r21, 0x25	; 37
    1b86:	60 e0       	ldi	r22, 0x00	; 0
    1b88:	70 e0       	ldi	r23, 0x00	; 0
    1b8a:	8c ee       	ldi	r24, 0xEC	; 236
    1b8c:	92 e0       	ldi	r25, 0x02	; 2
    1b8e:	0e 94 3d 01 	call	0x27a	; 0x27a <_ZN14HardwareSerial5beginEmh>
    Serial.begin(9600);           // This is the BC118 default baud rate.
    #ifdef DEBUG
    Serial.println("Serial has started...");
    1b92:	68 e8       	ldi	r22, 0x88	; 136
    1b94:	71 e0       	ldi	r23, 0x01	; 1
    1b96:	8c ee       	ldi	r24, 0xEC	; 236
    1b98:	92 e0       	ldi	r25, 0x02	; 2
    1b9a:	0e 94 20 03 	call	0x640	; 0x640 <_ZN5Print7printlnEPKc>
    #endif
    delay(1000);
    1b9e:	68 ee       	ldi	r22, 0xE8	; 232
    1ba0:	73 e0       	ldi	r23, 0x03	; 3
    1ba2:	80 e0       	ldi	r24, 0x00	; 0
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	0e 94 2c 05 	call	0xa58	; 0xa58 <delay>

    boolean firstResetSuccess = false;
    boolean restoreSuccess = false;
    boolean writeConfigSuccess = false;
    boolean secondResetSuccess = false;
    for (i = 0; i < 10; i++) {
    1baa:	10 92 a8 03 	sts	0x03A8, r1
    1bae:	10 92 a7 03 	sts	0x03A7, r1


    boolean firstResetSuccess = false;
    boolean restoreSuccess = false;
    boolean writeConfigSuccess = false;
    boolean secondResetSuccess = false;
    1bb2:	f1 2c       	mov	r15, r1
    //  SUCCESS - What it says.


    boolean firstResetSuccess = false;
    boolean restoreSuccess = false;
    boolean writeConfigSuccess = false;
    1bb4:	00 e0       	ldi	r16, 0x00	; 0
    //                  commands and parameters outside the built-ins.
    //  SUCCESS - What it says.


    boolean firstResetSuccess = false;
    boolean restoreSuccess = false;
    1bb6:	10 e0       	ldi	r17, 0x00	; 0
    //                  This will probably only occur when you attempt to send
    //                  commands and parameters outside the built-ins.
    //  SUCCESS - What it says.


    boolean firstResetSuccess = false;
    1bb8:	d0 e0       	ldi	r29, 0x00	; 0
        //  No way to change that. The text traffic generated by the scanning will
        //  interfere with the firmware on the Arduino properly identifying response
        //  strings from the BC118.
        if (BTModu.reset() == BLEMate2::SUCCESS)
        {
            firstResetSuccess = true;
    1bba:	c1 e0       	ldi	r28, 0x01	; 1
        //  the "SCN OFF" command after the reset is completed. Why is this important?
        //  Because if the device is in central mode, it *will* be scanning on reset.
        //  No way to change that. The text traffic generated by the scanning will
        //  interfere with the firmware on the Arduino properly identifying response
        //  strings from the BC118.
        if (BTModu.reset() == BLEMate2::SUCCESS)
    1bbc:	89 ea       	ldi	r24, 0xA9	; 169
    1bbe:	93 e0       	ldi	r25, 0x03	; 3
    1bc0:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <_ZN8BLEMate25resetEv>
    1bc4:	81 30       	cpi	r24, 0x01	; 1
    1bc6:	b1 f4       	brne	.+44     	; 0x1bf4 <_Z5setupv+0x7e>
        // restore() resets the module to factory defaults; you'll need to perform
        //  a writeConfig() and reset() to make those settings take effect. We don't
        //  do that automatically because there may be things the user wants to
        //  change before committing the settings to non-volatile memory and
        //  resetting.
        if (BTModu.restore() == BLEMate2::SUCCESS)
    1bc8:	89 ea       	ldi	r24, 0xA9	; 169
    1bca:	93 e0       	ldi	r25, 0x03	; 3
    1bcc:	0e 94 2c 0a 	call	0x1458	; 0x1458 <_ZN8BLEMate27restoreEv>
    1bd0:	81 30       	cpi	r24, 0x01	; 1
    1bd2:	c9 f4       	brne	.+50     	; 0x1c06 <_Z5setupv+0x90>
        }
        // writeConfig() stores the current settings in non-volatile memory, so they
        //  will be in place on the next reboot of the module. Note that some, but
        //  not all, settings changes require a reboot. It's probably in general best
        //  to write/reset when changing anything.
        if (BTModu.writeConfig() == BLEMate2::SUCCESS)
    1bd4:	89 ea       	ldi	r24, 0xA9	; 169
    1bd6:	93 e0       	ldi	r25, 0x03	; 3
    1bd8:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <_ZN8BLEMate211writeConfigEv>
    1bdc:	81 30       	cpi	r24, 0x01	; 1
    1bde:	e9 f4       	brne	.+58     	; 0x1c1a <_Z5setupv+0xa4>
        // One more reset, to make the changes take effect.
        // NB!!!!!!!!!!!!! This write/reset thing is *really* important.
        //  The status command (STS) and the LEDs *will* lie to you and tell you that
        //  you are e.g. advertising or in central mode when in fact that is not the
        //  case and the module still needs to be reset before that is actually true.
        if (BTModu.reset() == BLEMate2::SUCCESS)
    1be0:	89 ea       	ldi	r24, 0xA9	; 169
    1be2:	93 e0       	ldi	r25, 0x03	; 3
    1be4:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <_ZN8BLEMate25resetEv>
    1be8:	81 30       	cpi	r24, 0x01	; 1
    1bea:	59 f1       	breq	.+86     	; 0x1c42 <_Z5setupv+0xcc>
        //  will be in place on the next reboot of the module. Note that some, but
        //  not all, settings changes require a reboot. It's probably in general best
        //  to write/reset when changing anything.
        if (BTModu.writeConfig() == BLEMate2::SUCCESS)
        {
            writeConfigSuccess = true;
    1bec:	0c 2f       	mov	r16, r28
        //  do that automatically because there may be things the user wants to
        //  change before committing the settings to non-volatile memory and
        //  resetting.
        if (BTModu.restore() == BLEMate2::SUCCESS)
        {
            restoreSuccess = true;
    1bee:	1c 2f       	mov	r17, r28
        //  No way to change that. The text traffic generated by the scanning will
        //  interfere with the firmware on the Arduino properly identifying response
        //  strings from the BC118.
        if (BTModu.reset() == BLEMate2::SUCCESS)
        {
            firstResetSuccess = true;
    1bf0:	dc 2f       	mov	r29, r28
    1bf2:	1e c0       	rjmp	.+60     	; 0x1c30 <_Z5setupv+0xba>
            goto setup_try_again;
        }

        setup_try_again:
        #ifdef DEBUG
        if (!firstResetSuccess) {
    1bf4:	d1 11       	cpse	r29, r1
    1bf6:	08 c0       	rjmp	.+16     	; 0x1c08 <_Z5setupv+0x92>
            Serial.println("Module reset error!");
    1bf8:	6e e9       	ldi	r22, 0x9E	; 158
    1bfa:	71 e0       	ldi	r23, 0x01	; 1
    1bfc:	8c ee       	ldi	r24, 0xEC	; 236
    1bfe:	92 e0       	ldi	r25, 0x02	; 2
    1c00:	0e 94 20 03 	call	0x640	; 0x640 <_ZN5Print7printlnEPKc>
    1c04:	28 c0       	rjmp	.+80     	; 0x1c56 <_Z5setupv+0xe0>
        //  No way to change that. The text traffic generated by the scanning will
        //  interfere with the firmware on the Arduino properly identifying response
        //  strings from the BC118.
        if (BTModu.reset() == BLEMate2::SUCCESS)
        {
            firstResetSuccess = true;
    1c06:	dc 2f       	mov	r29, r28

        setup_try_again:
        #ifdef DEBUG
        if (!firstResetSuccess) {
            Serial.println("Module reset error!");
            } else if (!restoreSuccess) {
    1c08:	11 11       	cpse	r17, r1
    1c0a:	09 c0       	rjmp	.+18     	; 0x1c1e <_Z5setupv+0xa8>
            Serial.println("Module restore error!");
    1c0c:	62 eb       	ldi	r22, 0xB2	; 178
    1c0e:	71 e0       	ldi	r23, 0x01	; 1
    1c10:	8c ee       	ldi	r24, 0xEC	; 236
    1c12:	92 e0       	ldi	r25, 0x02	; 2
    1c14:	0e 94 20 03 	call	0x640	; 0x640 <_ZN5Print7printlnEPKc>
    1c18:	1e c0       	rjmp	.+60     	; 0x1c56 <_Z5setupv+0xe0>
        //  do that automatically because there may be things the user wants to
        //  change before committing the settings to non-volatile memory and
        //  resetting.
        if (BTModu.restore() == BLEMate2::SUCCESS)
        {
            restoreSuccess = true;
    1c1a:	1c 2f       	mov	r17, r28
        //  No way to change that. The text traffic generated by the scanning will
        //  interfere with the firmware on the Arduino properly identifying response
        //  strings from the BC118.
        if (BTModu.reset() == BLEMate2::SUCCESS)
        {
            firstResetSuccess = true;
    1c1c:	dc 2f       	mov	r29, r28
        #ifdef DEBUG
        if (!firstResetSuccess) {
            Serial.println("Module reset error!");
            } else if (!restoreSuccess) {
            Serial.println("Module restore error!");
            } else if (!writeConfigSuccess) {
    1c1e:	01 11       	cpse	r16, r1
    1c20:	07 c0       	rjmp	.+14     	; 0x1c30 <_Z5setupv+0xba>
            Serial.println("Module write config error!");
    1c22:	68 ec       	ldi	r22, 0xC8	; 200
    1c24:	71 e0       	ldi	r23, 0x01	; 1
    1c26:	8c ee       	ldi	r24, 0xEC	; 236
    1c28:	92 e0       	ldi	r25, 0x02	; 2
    1c2a:	0e 94 20 03 	call	0x640	; 0x640 <_ZN5Print7printlnEPKc>
    1c2e:	13 c0       	rjmp	.+38     	; 0x1c56 <_Z5setupv+0xe0>
            } else if (!secondResetSuccess) {
    1c30:	f1 10       	cpse	r15, r1
    1c32:	0b c0       	rjmp	.+22     	; 0x1c4a <_Z5setupv+0xd4>
            Serial.println("Second module reset error!");
    1c34:	63 ee       	ldi	r22, 0xE3	; 227
    1c36:	71 e0       	ldi	r23, 0x01	; 1
    1c38:	8c ee       	ldi	r24, 0xEC	; 236
    1c3a:	92 e0       	ldi	r25, 0x02	; 2
    1c3c:	0e 94 20 03 	call	0x640	; 0x640 <_ZN5Print7printlnEPKc>
    1c40:	0a c0       	rjmp	.+20     	; 0x1c56 <_Z5setupv+0xe0>
        //  The status command (STS) and the LEDs *will* lie to you and tell you that
        //  you are e.g. advertising or in central mode when in fact that is not the
        //  case and the module still needs to be reset before that is actually true.
        if (BTModu.reset() == BLEMate2::SUCCESS)
        {
            secondResetSuccess = true;
    1c42:	fc 2e       	mov	r15, r28
        //  will be in place on the next reboot of the module. Note that some, but
        //  not all, settings changes require a reboot. It's probably in general best
        //  to write/reset when changing anything.
        if (BTModu.writeConfig() == BLEMate2::SUCCESS)
        {
            writeConfigSuccess = true;
    1c44:	0c 2f       	mov	r16, r28
        //  do that automatically because there may be things the user wants to
        //  change before committing the settings to non-volatile memory and
        //  resetting.
        if (BTModu.restore() == BLEMate2::SUCCESS)
        {
            restoreSuccess = true;
    1c46:	1c 2f       	mov	r17, r28
        //  No way to change that. The text traffic generated by the scanning will
        //  interfere with the firmware on the Arduino properly identifying response
        //  strings from the BC118.
        if (BTModu.reset() == BLEMate2::SUCCESS)
        {
            firstResetSuccess = true;
    1c48:	dc 2f       	mov	r29, r28
            } else if (!writeConfigSuccess) {
            Serial.println("Module write config error!");
            } else if (!secondResetSuccess) {
            Serial.println("Second module reset error!");
            } else {
            Serial.println("Reset/Restore/Write Config PASSED...");
    1c4a:	6e ef       	ldi	r22, 0xFE	; 254
    1c4c:	71 e0       	ldi	r23, 0x01	; 1
    1c4e:	8c ee       	ldi	r24, 0xEC	; 236
    1c50:	92 e0       	ldi	r25, 0x02	; 2
    1c52:	0e 94 20 03 	call	0x640	; 0x640 <_ZN5Print7printlnEPKc>

    boolean firstResetSuccess = false;
    boolean restoreSuccess = false;
    boolean writeConfigSuccess = false;
    boolean secondResetSuccess = false;
    for (i = 0; i < 10; i++) {
    1c56:	80 91 a7 03 	lds	r24, 0x03A7
    1c5a:	90 91 a8 03 	lds	r25, 0x03A8
    1c5e:	01 96       	adiw	r24, 0x01	; 1
    1c60:	90 93 a8 03 	sts	0x03A8, r25
    1c64:	80 93 a7 03 	sts	0x03A7, r24
    1c68:	0a 97       	sbiw	r24, 0x0a	; 10
    1c6a:	0c f4       	brge	.+2      	; 0x1c6e <_Z5setupv+0xf8>
    1c6c:	a7 cf       	rjmp	.-178    	; 0x1bbc <_Z5setupv+0x46>
            } else {
            Serial.println("Reset/Restore/Write Config PASSED...");
        }
        #endif
    }
    if (!(firstResetSuccess && restoreSuccess && writeConfigSuccess && secondResetSuccess)) {
    1c6e:	dd 23       	and	r29, r29
    1c70:	31 f0       	breq	.+12     	; 0x1c7e <_Z5setupv+0x108>
    1c72:	11 23       	and	r17, r17
    1c74:	21 f0       	breq	.+8      	; 0x1c7e <_Z5setupv+0x108>
    1c76:	00 23       	and	r16, r16
    1c78:	11 f0       	breq	.+4      	; 0x1c7e <_Z5setupv+0x108>
    1c7a:	f1 10       	cpse	r15, r1
    1c7c:	07 c0       	rjmp	.+14     	; 0x1c8c <_Z5setupv+0x116>
        // Setup failed after 10 tries
        #ifdef DEBUG
        Serial.println("Reset/Restore/Write Config FAILED 10 TIMES. STOP EXECUTION...");
    1c7e:	63 e2       	ldi	r22, 0x23	; 35
    1c80:	72 e0       	ldi	r23, 0x02	; 2
    1c82:	8c ee       	ldi	r24, 0xEC	; 236
    1c84:	92 e0       	ldi	r25, 0x02	; 2
    1c86:	0e 94 20 03 	call	0x640	; 0x640 <_ZN5Print7printlnEPKc>
    1c8a:	ff cf       	rjmp	.-2      	; 0x1c8a <_Z5setupv+0x114>
        #endif
        while(1) {}
    }
    
    #ifdef DEBUG
    Serial.println("Reset/Restore/Write Config DONE!");
    1c8c:	61 e6       	ldi	r22, 0x61	; 97
    1c8e:	72 e0       	ldi	r23, 0x02	; 2
    1c90:	8c ee       	ldi	r24, 0xEC	; 236
    1c92:	92 e0       	ldi	r25, 0x02	; 2
    1c94:	0e 94 20 03 	call	0x640	; 0x640 <_ZN5Print7printlnEPKc>
    #endif
    delay(1000);
    1c98:	68 ee       	ldi	r22, 0xE8	; 232
    1c9a:	73 e0       	ldi	r23, 0x03	; 3
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	0e 94 2c 05 	call	0xa58	; 0xa58 <delay>
}
    1ca4:	df 91       	pop	r29
    1ca6:	cf 91       	pop	r28
    1ca8:	1f 91       	pop	r17
    1caa:	0f 91       	pop	r16
    1cac:	ff 90       	pop	r15
    1cae:	08 95       	ret

00001cb0 <_Z9find_text6StringS_>:

int find_text(String needle, String haystack) {
    1cb0:	9f 92       	push	r9
    1cb2:	af 92       	push	r10
    1cb4:	bf 92       	push	r11
    1cb6:	cf 92       	push	r12
    1cb8:	df 92       	push	r13
    1cba:	ef 92       	push	r14
    1cbc:	ff 92       	push	r15
    1cbe:	0f 93       	push	r16
    1cc0:	1f 93       	push	r17
    1cc2:	cf 93       	push	r28
    1cc4:	df 93       	push	r29
    1cc6:	00 d0       	rcall	.+0      	; 0x1cc8 <_Z9find_text6StringS_+0x18>
    1cc8:	00 d0       	rcall	.+0      	; 0x1cca <_Z9find_text6StringS_+0x1a>
    1cca:	00 d0       	rcall	.+0      	; 0x1ccc <_Z9find_text6StringS_+0x1c>
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
    1cd0:	7c 01       	movw	r14, r24
    1cd2:	6b 01       	movw	r12, r22
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
    1cd4:	fc 01       	movw	r30, r24
    1cd6:	24 81       	ldd	r18, Z+4	; 0x04
    1cd8:	35 81       	ldd	r19, Z+5	; 0x05
    int foundpos = -1;
    for (unsigned int i = 0; (i < (haystack.length() - needle.length())); i++) {
    1cda:	fb 01       	movw	r30, r22
    1cdc:	84 81       	ldd	r24, Z+4	; 0x04
    1cde:	95 81       	ldd	r25, Z+5	; 0x05
    1ce0:	82 17       	cp	r24, r18
    1ce2:	93 07       	cpc	r25, r19
    1ce4:	51 f1       	breq	.+84     	; 0x1d3a <_Z9find_text6StringS_+0x8a>
    1ce6:	00 e0       	ldi	r16, 0x00	; 0
    1ce8:	10 e0       	ldi	r17, 0x00	; 0
    #endif
    delay(1000);
}

int find_text(String needle, String haystack) {
    int foundpos = -1;
    1cea:	aa 24       	eor	r10, r10
    1cec:	aa 94       	dec	r10
    1cee:	bb 24       	eor	r11, r11
    1cf0:	ba 94       	dec	r11
    for (unsigned int i = 0; (i < (haystack.length() - needle.length())); i++) {
        if (haystack.substring(i,needle.length()+i) == needle) {
    1cf2:	20 0f       	add	r18, r16
    1cf4:	31 1f       	adc	r19, r17
    1cf6:	a8 01       	movw	r20, r16
    1cf8:	b6 01       	movw	r22, r12
    1cfa:	ce 01       	movw	r24, r28
    1cfc:	01 96       	adiw	r24, 0x01	; 1
    1cfe:	0e 94 2c 08 	call	0x1058	; 0x1058 <_ZNK6String9substringEjj>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
    1d02:	b7 01       	movw	r22, r14
    1d04:	ce 01       	movw	r24, r28
    1d06:	01 96       	adiw	r24, 0x01	; 1
    1d08:	0e 94 4f 07 	call	0xe9e	; 0xe9e <_ZNK6String6equalsERKS_>
    1d0c:	98 2e       	mov	r9, r24
    1d0e:	ce 01       	movw	r24, r28
    1d10:	01 96       	adiw	r24, 0x01	; 1
    1d12:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN6StringD1Ev>
    1d16:	99 20       	and	r9, r9
    1d18:	11 f0       	breq	.+4      	; 0x1d1e <_Z9find_text6StringS_+0x6e>
            foundpos = i;
    1d1a:	a0 2e       	mov	r10, r16
    1d1c:	b1 2e       	mov	r11, r17
    delay(1000);
}

int find_text(String needle, String haystack) {
    int foundpos = -1;
    for (unsigned int i = 0; (i < (haystack.length() - needle.length())); i++) {
    1d1e:	0f 5f       	subi	r16, 0xFF	; 255
    1d20:	1f 4f       	sbci	r17, 0xFF	; 255
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
    1d22:	f7 01       	movw	r30, r14
    1d24:	24 81       	ldd	r18, Z+4	; 0x04
    1d26:	35 81       	ldd	r19, Z+5	; 0x05
    1d28:	f6 01       	movw	r30, r12
    1d2a:	44 81       	ldd	r20, Z+4	; 0x04
    1d2c:	55 81       	ldd	r21, Z+5	; 0x05
    1d2e:	42 1b       	sub	r20, r18
    1d30:	53 0b       	sbc	r21, r19
    1d32:	04 17       	cp	r16, r20
    1d34:	15 07       	cpc	r17, r21
    1d36:	e8 f2       	brcs	.-70     	; 0x1cf2 <_Z9find_text6StringS_+0x42>
    1d38:	04 c0       	rjmp	.+8      	; 0x1d42 <_Z9find_text6StringS_+0x92>
    #endif
    delay(1000);
}

int find_text(String needle, String haystack) {
    int foundpos = -1;
    1d3a:	aa 24       	eor	r10, r10
    1d3c:	aa 94       	dec	r10
    1d3e:	bb 24       	eor	r11, r11
    1d40:	ba 94       	dec	r11
        if (haystack.substring(i,needle.length()+i) == needle) {
            foundpos = i;
        }
    }
    return foundpos;
}
    1d42:	8a 2d       	mov	r24, r10
    1d44:	9b 2d       	mov	r25, r11
    1d46:	26 96       	adiw	r28, 0x06	; 6
    1d48:	0f b6       	in	r0, 0x3f	; 63
    1d4a:	f8 94       	cli
    1d4c:	de bf       	out	0x3e, r29	; 62
    1d4e:	0f be       	out	0x3f, r0	; 63
    1d50:	cd bf       	out	0x3d, r28	; 61
    1d52:	df 91       	pop	r29
    1d54:	cf 91       	pop	r28
    1d56:	1f 91       	pop	r17
    1d58:	0f 91       	pop	r16
    1d5a:	ff 90       	pop	r15
    1d5c:	ef 90       	pop	r14
    1d5e:	df 90       	pop	r13
    1d60:	cf 90       	pop	r12
    1d62:	bf 90       	pop	r11
    1d64:	af 90       	pop	r10
    1d66:	9f 90       	pop	r9
    1d68:	08 95       	ret

00001d6a <_GLOBAL__sub_I_BTModu>:
    #include "blink_leds.h"
}
#include "../lib/Arduino/Arduino.h"
#include "../lib/SparkFun_BLEMate2/SparkFun_BLEMate2.h"

static String fullBuffer;
    1d6a:	60 e2       	ldi	r22, 0x20	; 32
    1d6c:	71 e0       	ldi	r23, 0x01	; 1
    1d6e:	88 ed       	ldi	r24, 0xD8	; 216
    1d70:	93 e0       	ldi	r25, 0x03	; 3
    1d72:	0e 94 47 06 	call	0xc8e	; 0xc8e <_ZN6StringC1EPKc>
static String inputBuffer;
    1d76:	60 e2       	ldi	r22, 0x20	; 32
    1d78:	71 e0       	ldi	r23, 0x01	; 1
    1d7a:	82 ed       	ldi	r24, 0xD2	; 210
    1d7c:	93 e0       	ldi	r25, 0x03	; 3
    1d7e:	0e 94 47 06 	call	0xc8e	; 0xc8e <_ZN6StringC1EPKc>
static String sendBuffer;
    1d82:	60 e2       	ldi	r22, 0x20	; 32
    1d84:	71 e0       	ldi	r23, 0x01	; 1
    1d86:	8c ec       	ldi	r24, 0xCC	; 204
    1d88:	93 e0       	ldi	r25, 0x03	; 3
    1d8a:	0e 94 47 06 	call	0xc8e	; 0xc8e <_ZN6StringC1EPKc>

BLEMate2 BTModu(&Serial);
    1d8e:	6c ee       	ldi	r22, 0xEC	; 236
    1d90:	72 e0       	ldi	r23, 0x02	; 2
    1d92:	89 ea       	ldi	r24, 0xA9	; 169
    1d94:	93 e0       	ldi	r25, 0x03	; 3
    1d96:	0e 94 a5 08 	call	0x114a	; 0x114a <_ZN8BLEMate2C1EP6Stream>
    1d9a:	08 95       	ret

00001d9c <_GLOBAL__sub_D_BTModu>:

    BTModu.writeConfig();
    BTModu.reset();

    // We're set up to allow anything to connect to us now.
}
    1d9c:	cf 93       	push	r28
    1d9e:	df 93       	push	r29
#ifndef BLEMate2_h
#define BLEMate2_h

#include "../Arduino/Arduino.h"

class BLEMate2
    1da0:	8b ea       	ldi	r24, 0xAB	; 171
    1da2:	93 e0       	ldi	r25, 0x03	; 3
    1da4:	89 2b       	or	r24, r25
    1da6:	51 f0       	breq	.+20     	; 0x1dbc <_GLOBAL__sub_D_BTModu+0x20>
    1da8:	c9 ec       	ldi	r28, 0xC9	; 201
    1daa:	d3 e0       	ldi	r29, 0x03	; 3
    1dac:	26 97       	sbiw	r28, 0x06	; 6
    1dae:	ce 01       	movw	r24, r28
    1db0:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN6StringD1Ev>
    1db4:	83 e0       	ldi	r24, 0x03	; 3
    1db6:	cb 3a       	cpi	r28, 0xAB	; 171
    1db8:	d8 07       	cpc	r29, r24
    1dba:	c1 f7       	brne	.-16     	; 0x1dac <_GLOBAL__sub_D_BTModu+0x10>
#include "../lib/Arduino/Arduino.h"
#include "../lib/SparkFun_BLEMate2/SparkFun_BLEMate2.h"

static String fullBuffer;
static String inputBuffer;
static String sendBuffer;
    1dbc:	8c ec       	ldi	r24, 0xCC	; 204
    1dbe:	93 e0       	ldi	r25, 0x03	; 3
    1dc0:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN6StringD1Ev>
}
#include "../lib/Arduino/Arduino.h"
#include "../lib/SparkFun_BLEMate2/SparkFun_BLEMate2.h"

static String fullBuffer;
static String inputBuffer;
    1dc4:	82 ed       	ldi	r24, 0xD2	; 210
    1dc6:	93 e0       	ldi	r25, 0x03	; 3
    1dc8:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN6StringD1Ev>
    #include "blink_leds.h"
}
#include "../lib/Arduino/Arduino.h"
#include "../lib/SparkFun_BLEMate2/SparkFun_BLEMate2.h"

static String fullBuffer;
    1dcc:	88 ed       	ldi	r24, 0xD8	; 216
    1dce:	93 e0       	ldi	r25, 0x03	; 3
    1dd0:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN6StringD1Ev>

    BTModu.writeConfig();
    BTModu.reset();

    // We're set up to allow anything to connect to us now.
}
    1dd4:	df 91       	pop	r29
    1dd6:	cf 91       	pop	r28
    1dd8:	08 95       	ret

00001dda <main>:
    }
    return foundpos;
}

int main()
{
    1dda:	cf 93       	push	r28
    1ddc:	df 93       	push	r29
    1dde:	cd b7       	in	r28, 0x3d	; 61
    1de0:	de b7       	in	r29, 0x3e	; 62
    1de2:	a4 97       	sbiw	r28, 0x24	; 36
    1de4:	0f b6       	in	r0, 0x3f	; 63
    1de6:	f8 94       	cli
    1de8:	de bf       	out	0x3e, r29	; 62
    1dea:	0f be       	out	0x3f, r0	; 63
    1dec:	cd bf       	out	0x3d, r28	; 61
    // Since I'm going to be reporting strings back over serial to the PC, I want
    //  to make sure that I'm (probably) not going to be looking away from the BLE
    //  device during a data receive period. I'll *guess* that, if more than 1000
    //  milliseconds has elapsed since my last receive, that I'm in a quiet zone
    //  and I can switch over to the PC to report what I've heard.
    setup();
    1dee:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <_Z5setupv>

        // The state machine for capturing that can be pretty easy: when we've read
        //  in \n\r, check to see if the string began with "RCV=". If yes, do
        //  something. If no, discard it.
        
        boolean done = false;
    1df2:	80 e0       	ldi	r24, 0x00	; 0
    1df4:	d1 2c       	mov	r13, r1
            Serial.flush();
            sendBuffer.concat(BPRGHEADER);
            sendBuffer.concat("2");
            BTModu.sendData(sendBuffer);
            sendBuffer = "";
            turnSignalSent = 1;
    1df6:	ee 24       	eor	r14, r14
    1df8:	e3 94       	inc	r14
    1dfa:	f1 2c       	mov	r15, r1
    1dfc:	38 c0       	rjmp	.+112    	; 0x1e6e <main+0x94>
        //  something. If no, discard it.
        
        boolean done = false;
        while (!done && Serial.available() > 0)
        {
            digitalWrite(11,HIGH);
    1dfe:	61 e0       	ldi	r22, 0x01	; 1
    1e00:	8b e0       	ldi	r24, 0x0B	; 11
    1e02:	0e 94 a3 05 	call	0xb46	; 0xb46 <digitalWrite>
            inputBuffer.concat((char)Serial.read());
    1e06:	8c ee       	ldi	r24, 0xEC	; 236
    1e08:	92 e0       	ldi	r25, 0x02	; 2
    1e0a:	0e 94 9f 00 	call	0x13e	; 0x13e <_ZN14HardwareSerial4readEv>
    1e0e:	68 2f       	mov	r22, r24
    1e10:	82 ed       	ldi	r24, 0xD2	; 210
    1e12:	93 e0       	ldi	r25, 0x03	; 3
    1e14:	0e 94 db 06 	call	0xdb6	; 0xdb6 <_ZN6String6concatEc>
            delay(200);
    1e18:	68 ec       	ldi	r22, 0xC8	; 200
    1e1a:	70 e0       	ldi	r23, 0x00	; 0
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	0e 94 2c 05 	call	0xa58	; 0xa58 <delay>
            digitalWrite(11,LOW);
    1e24:	6d 2d       	mov	r22, r13
    1e26:	8b e0       	ldi	r24, 0x0B	; 11
    1e28:	0e 94 a3 05 	call	0xb46	; 0xb46 <digitalWrite>
            if (find_text(String("\n\r"), inputBuffer) != -1) {
    1e2c:	62 ed       	ldi	r22, 0xD2	; 210
    1e2e:	73 e0       	ldi	r23, 0x03	; 3
    1e30:	ce 01       	movw	r24, r28
    1e32:	4f 96       	adiw	r24, 0x1f	; 31
    1e34:	0e 94 73 06 	call	0xce6	; 0xce6 <_ZN6StringC1ERKS_>
    1e38:	6e e1       	ldi	r22, 0x1E	; 30
    1e3a:	71 e0       	ldi	r23, 0x01	; 1
    1e3c:	ce 01       	movw	r24, r28
    1e3e:	49 96       	adiw	r24, 0x19	; 25
    1e40:	0e 94 47 06 	call	0xc8e	; 0xc8e <_ZN6StringC1EPKc>
    1e44:	be 01       	movw	r22, r28
    1e46:	61 5e       	subi	r22, 0xE1	; 225
    1e48:	7f 4f       	sbci	r23, 0xFF	; 255
    1e4a:	ce 01       	movw	r24, r28
    1e4c:	49 96       	adiw	r24, 0x19	; 25
    1e4e:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <_Z9find_text6StringS_>
    1e52:	8c 01       	movw	r16, r24
    1e54:	ce 01       	movw	r24, r28
    1e56:	49 96       	adiw	r24, 0x19	; 25
    1e58:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN6StringD1Ev>
    1e5c:	ce 01       	movw	r24, r28
    1e5e:	4f 96       	adiw	r24, 0x1f	; 31
    1e60:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN6StringD1Ev>
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	0f 3f       	cpi	r16, 0xFF	; 255
    1e68:	1f 4f       	sbci	r17, 0xFF	; 255
    1e6a:	09 f4       	brne	.+2      	; 0x1e6e <main+0x94>
    1e6c:	8d 2d       	mov	r24, r13
        // The state machine for capturing that can be pretty easy: when we've read
        //  in \n\r, check to see if the string began with "RCV=". If yes, do
        //  something. If no, discard it.
        
        boolean done = false;
        while (!done && Serial.available() > 0)
    1e6e:	81 11       	cpse	r24, r1
    1e70:	08 c0       	rjmp	.+16     	; 0x1e82 <main+0xa8>
    1e72:	8c ee       	ldi	r24, 0xEC	; 236
    1e74:	92 e0       	ldi	r25, 0x02	; 2
    1e76:	0e 94 86 00 	call	0x10c	; 0x10c <_ZN14HardwareSerial9availableEv>
    1e7a:	18 16       	cp	r1, r24
    1e7c:	19 06       	cpc	r1, r25
    1e7e:	0c f4       	brge	.+2      	; 0x1e82 <main+0xa8>
    1e80:	be cf       	rjmp	.-132    	; 0x1dfe <main+0x24>

        // We'll probably see a lot of lines that end with \n\r- that's the default
        //  line ending for all the connect info messages, for instance. We can
        //  ignore all of them that don't start with "RCV=". Remember to clear your
        //  String object after you find \n\r!!!
        int line_end_pos = find_text(String("\n\r"), inputBuffer);
    1e82:	62 ed       	ldi	r22, 0xD2	; 210
    1e84:	73 e0       	ldi	r23, 0x03	; 3
    1e86:	ce 01       	movw	r24, r28
    1e88:	43 96       	adiw	r24, 0x13	; 19
    1e8a:	0e 94 73 06 	call	0xce6	; 0xce6 <_ZN6StringC1ERKS_>
    1e8e:	6e e1       	ldi	r22, 0x1E	; 30
    1e90:	71 e0       	ldi	r23, 0x01	; 1
    1e92:	ce 01       	movw	r24, r28
    1e94:	0d 96       	adiw	r24, 0x0d	; 13
    1e96:	0e 94 47 06 	call	0xc8e	; 0xc8e <_ZN6StringC1EPKc>
    1e9a:	be 01       	movw	r22, r28
    1e9c:	6d 5e       	subi	r22, 0xED	; 237
    1e9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1ea0:	ce 01       	movw	r24, r28
    1ea2:	0d 96       	adiw	r24, 0x0d	; 13
    1ea4:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <_Z9find_text6StringS_>
    1ea8:	8c 01       	movw	r16, r24
    1eaa:	ce 01       	movw	r24, r28
    1eac:	0d 96       	adiw	r24, 0x0d	; 13
    1eae:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN6StringD1Ev>
    1eb2:	ce 01       	movw	r24, r28
    1eb4:	43 96       	adiw	r24, 0x13	; 19
    1eb6:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN6StringD1Ev>
        inputBuffer.remove((unsigned int)line_end_pos);
    1eba:	b8 01       	movw	r22, r16
    1ebc:	82 ed       	ldi	r24, 0xD2	; 210
    1ebe:	93 e0       	ldi	r25, 0x03	; 3
    1ec0:	0e 94 a0 08 	call	0x1140	; 0x1140 <_ZN6String6removeEj>
        int rcv_pos = find_text(String("RCV="), inputBuffer);
    1ec4:	62 ed       	ldi	r22, 0xD2	; 210
    1ec6:	73 e0       	ldi	r23, 0x03	; 3
    1ec8:	ce 01       	movw	r24, r28
    1eca:	07 96       	adiw	r24, 0x07	; 7
    1ecc:	0e 94 73 06 	call	0xce6	; 0xce6 <_ZN6StringC1ERKS_>
    1ed0:	68 ea       	ldi	r22, 0xA8	; 168
    1ed2:	72 e0       	ldi	r23, 0x02	; 2
    1ed4:	ce 01       	movw	r24, r28
    1ed6:	01 96       	adiw	r24, 0x01	; 1
    1ed8:	0e 94 47 06 	call	0xc8e	; 0xc8e <_ZN6StringC1EPKc>
    1edc:	be 01       	movw	r22, r28
    1ede:	69 5f       	subi	r22, 0xF9	; 249
    1ee0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee2:	ce 01       	movw	r24, r28
    1ee4:	01 96       	adiw	r24, 0x01	; 1
    1ee6:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <_Z9find_text6StringS_>
    1eea:	8c 01       	movw	r16, r24
    1eec:	ce 01       	movw	r24, r28
    1eee:	01 96       	adiw	r24, 0x01	; 1
    1ef0:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN6StringD1Ev>
    1ef4:	ce 01       	movw	r24, r28
    1ef6:	07 96       	adiw	r24, 0x07	; 7
    1ef8:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN6StringD1Ev>
        if (rcv_pos == -1) {
    1efc:	0f 3f       	cpi	r16, 0xFF	; 255
    1efe:	8f ef       	ldi	r24, 0xFF	; 255
    1f00:	18 07       	cpc	r17, r24
    1f02:	39 f4       	brne	.+14     	; 0x1f12 <main+0x138>
            inputBuffer = "";
    1f04:	60 e2       	ldi	r22, 0x20	; 32
    1f06:	71 e0       	ldi	r23, 0x01	; 1
    1f08:	82 ed       	ldi	r24, 0xD2	; 210
    1f0a:	93 e0       	ldi	r25, 0x03	; 3
    1f0c:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_ZN6StringaSEPKc>
    1f10:	57 c0       	rjmp	.+174    	; 0x1fc0 <main+0x1e6>
        } else {
            inputBuffer.remove(rcv_pos,4); // Remove RCV= from front.
    1f12:	44 e0       	ldi	r20, 0x04	; 4
    1f14:	50 e0       	ldi	r21, 0x00	; 0
    1f16:	b8 01       	movw	r22, r16
    1f18:	82 ed       	ldi	r24, 0xD2	; 210
    1f1a:	93 e0       	ldi	r25, 0x03	; 3
    1f1c:	0e 94 72 08 	call	0x10e4	; 0x10e4 <_ZN6String6removeEjj>
            #ifdef DEBUG
            Serial.println(inputBuffer);
    1f20:	62 ed       	ldi	r22, 0xD2	; 210
    1f22:	73 e0       	ldi	r23, 0x03	; 3
    1f24:	8c ee       	ldi	r24, 0xEC	; 236
    1f26:	92 e0       	ldi	r25, 0x02	; 2
    1f28:	0e 94 0e 03 	call	0x61c	; 0x61c <_ZN5Print7printlnERK6String>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    1f2c:	6d ea       	ldi	r22, 0xAD	; 173
    1f2e:	72 e0       	ldi	r23, 0x02	; 2
    1f30:	82 ed       	ldi	r24, 0xD2	; 210
    1f32:	93 e0       	ldi	r25, 0x03	; 3
    1f34:	0e 94 62 07 	call	0xec4	; 0xec4 <_ZNK6String6equalsEPKc>
            #endif
            
            if (inputBuffer == "LP1") {
    1f38:	88 23       	and	r24, r24
    1f3a:	59 f0       	breq	.+22     	; 0x1f52 <main+0x178>
                    Serial.println("NAV SAYS LEFT");
    1f3c:	61 eb       	ldi	r22, 0xB1	; 177
    1f3e:	72 e0       	ldi	r23, 0x02	; 2
    1f40:	8c ee       	ldi	r24, 0xEC	; 236
    1f42:	92 e0       	ldi	r25, 0x02	; 2
    1f44:	0e 94 20 03 	call	0x640	; 0x640 <_ZN5Print7printlnEPKc>
                    blink_left_arrow(10);
    1f48:	8a e0       	ldi	r24, 0x0A	; 10
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <blink_left_arrow>
    1f50:	2b c0       	rjmp	.+86     	; 0x1fa8 <main+0x1ce>
    1f52:	6f eb       	ldi	r22, 0xBF	; 191
    1f54:	72 e0       	ldi	r23, 0x02	; 2
    1f56:	82 ed       	ldi	r24, 0xD2	; 210
    1f58:	93 e0       	ldi	r25, 0x03	; 3
    1f5a:	0e 94 62 07 	call	0xec4	; 0xec4 <_ZNK6String6equalsEPKc>
            } else if (inputBuffer == "RP2") {
    1f5e:	88 23       	and	r24, r24
    1f60:	59 f0       	breq	.+22     	; 0x1f78 <main+0x19e>
                    Serial.println("NAV SAYS RIGHT");
    1f62:	63 ec       	ldi	r22, 0xC3	; 195
    1f64:	72 e0       	ldi	r23, 0x02	; 2
    1f66:	8c ee       	ldi	r24, 0xEC	; 236
    1f68:	92 e0       	ldi	r25, 0x02	; 2
    1f6a:	0e 94 20 03 	call	0x640	; 0x640 <_ZN5Print7printlnEPKc>
                    blink_right_arrow(10);
    1f6e:	8a e0       	ldi	r24, 0x0A	; 10
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <blink_right_arrow>
    1f76:	18 c0       	rjmp	.+48     	; 0x1fa8 <main+0x1ce>
    1f78:	62 ed       	ldi	r22, 0xD2	; 210
    1f7a:	72 e0       	ldi	r23, 0x02	; 2
    1f7c:	82 ed       	ldi	r24, 0xD2	; 210
    1f7e:	93 e0       	ldi	r25, 0x03	; 3
    1f80:	0e 94 62 07 	call	0xec4	; 0xec4 <_ZNK6String6equalsEPKc>
            } else if (inputBuffer == "LP3") {
    1f84:	88 23       	and	r24, r24
    1f86:	81 f0       	breq	.+32     	; 0x1fa8 <main+0x1ce>
                    Serial.println("NAV SAYS STRAIGHT");
    1f88:	66 ed       	ldi	r22, 0xD6	; 214
    1f8a:	72 e0       	ldi	r23, 0x02	; 2
    1f8c:	8c ee       	ldi	r24, 0xEC	; 236
    1f8e:	92 e0       	ldi	r25, 0x02	; 2
    1f90:	0e 94 20 03 	call	0x640	; 0x640 <_ZN5Print7printlnEPKc>
                    blink_top_arrow(10);
    1f94:	8a e0       	ldi	r24, 0x0A	; 10
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <blink_top_arrow>
                    delay(1000);
    1f9c:	68 ee       	ldi	r22, 0xE8	; 232
    1f9e:	73 e0       	ldi	r23, 0x03	; 3
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	0e 94 2c 05 	call	0xa58	; 0xa58 <delay>
	unsigned char concat(double num);
	unsigned char concat(const __FlashStringHelper * str);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    1fa8:	62 ed       	ldi	r22, 0xD2	; 210
    1faa:	73 e0       	ldi	r23, 0x03	; 3
    1fac:	88 ed       	ldi	r24, 0xD8	; 216
    1fae:	93 e0       	ldi	r25, 0x03	; 3
    1fb0:	0e 94 c3 06 	call	0xd86	; 0xd86 <_ZN6String6concatERKS_>
            }
        
            fullBuffer += inputBuffer;
            inputBuffer = "";
    1fb4:	60 e2       	ldi	r22, 0x20	; 32
    1fb6:	71 e0       	ldi	r23, 0x01	; 1
    1fb8:	82 ed       	ldi	r24, 0xD2	; 210
    1fba:	93 e0       	ldi	r25, 0x03	; 3
    1fbc:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_ZN6StringaSEPKc>
            
        }
        
        rightFlexReading = analogRead(RIGHTFLEXPIN);
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	0e 94 58 05 	call	0xab0	; 0xab0 <analogRead>
    1fc6:	90 93 a6 03 	sts	0x03A6, r25
    1fca:	80 93 a5 03 	sts	0x03A5, r24
        //Serial.print("Right Flex Reading: ");
        //Serial.println(rightFlexReading);
        if (rightFlexReading > 530 && !turnSignalSent) {
    1fce:	83 31       	cpi	r24, 0x13	; 19
    1fd0:	22 e0       	ldi	r18, 0x02	; 2
    1fd2:	92 07       	cpc	r25, r18
    1fd4:	3c f1       	brlt	.+78     	; 0x2024 <main+0x24a>
    1fd6:	20 91 a3 03 	lds	r18, 0x03A3
    1fda:	30 91 a4 03 	lds	r19, 0x03A4
    1fde:	23 2b       	or	r18, r19
    1fe0:	09 f5       	brne	.+66     	; 0x2024 <main+0x24a>
            Serial.flush();
    1fe2:	8c ee       	ldi	r24, 0xEC	; 236
    1fe4:	92 e0       	ldi	r25, 0x02	; 2
    1fe6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_ZN14HardwareSerial5flushEv>
            sendBuffer.concat(BPRGHEADER);
    1fea:	68 ee       	ldi	r22, 0xE8	; 232
    1fec:	72 e0       	ldi	r23, 0x02	; 2
    1fee:	8c ec       	ldi	r24, 0xCC	; 204
    1ff0:	93 e0       	ldi	r25, 0x03	; 3
    1ff2:	0e 94 cb 06 	call	0xd96	; 0xd96 <_ZN6String6concatEPKc>
            sendBuffer.concat("2");
    1ff6:	61 ec       	ldi	r22, 0xC1	; 193
    1ff8:	72 e0       	ldi	r23, 0x02	; 2
    1ffa:	8c ec       	ldi	r24, 0xCC	; 204
    1ffc:	93 e0       	ldi	r25, 0x03	; 3
    1ffe:	0e 94 cb 06 	call	0xd96	; 0xd96 <_ZN6String6concatEPKc>
            BTModu.sendData(sendBuffer);
    2002:	6c ec       	ldi	r22, 0xCC	; 204
    2004:	73 e0       	ldi	r23, 0x03	; 3
    2006:	89 ea       	ldi	r24, 0xA9	; 169
    2008:	93 e0       	ldi	r25, 0x03	; 3
    200a:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <_ZN8BLEMate28sendDataER6String>
            sendBuffer = "";
    200e:	60 e2       	ldi	r22, 0x20	; 32
    2010:	71 e0       	ldi	r23, 0x01	; 1
    2012:	8c ec       	ldi	r24, 0xCC	; 204
    2014:	93 e0       	ldi	r25, 0x03	; 3
    2016:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_ZN6StringaSEPKc>
            turnSignalSent = 1;
    201a:	f0 92 a4 03 	sts	0x03A4, r15
    201e:	e0 92 a3 03 	sts	0x03A3, r14
    2022:	0d c0       	rjmp	.+26     	; 0x203e <main+0x264>
        } else if (rightFlexReading < 530 && turnSignalSent) {
    2024:	82 31       	cpi	r24, 0x12	; 18
    2026:	92 40       	sbci	r25, 0x02	; 2
    2028:	54 f4       	brge	.+20     	; 0x203e <main+0x264>
    202a:	80 91 a3 03 	lds	r24, 0x03A3
    202e:	90 91 a4 03 	lds	r25, 0x03A4
    2032:	89 2b       	or	r24, r25
    2034:	21 f0       	breq	.+8      	; 0x203e <main+0x264>
            turnSignalSent = 0;
    2036:	10 92 a4 03 	sts	0x03A4, r1
    203a:	10 92 a3 03 	sts	0x03A3, r1
        }
        delay(500);
    203e:	64 ef       	ldi	r22, 0xF4	; 244
    2040:	71 e0       	ldi	r23, 0x01	; 1
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	0e 94 2c 05 	call	0xa58	; 0xa58 <delay>

        // The state machine for capturing that can be pretty easy: when we've read
        //  in \n\r, check to see if the string began with "RCV=". If yes, do
        //  something. If no, discard it.
        
        boolean done = false;
    204a:	8d 2d       	mov	r24, r13
        } else if (rightFlexReading < 530 && turnSignalSent) {
            turnSignalSent = 0;
        }
        delay(500);
    }
    return 0;
    204c:	10 cf       	rjmp	.-480    	; 0x1e6e <main+0x94>

0000204e <__udivmodsi4>:
    204e:	a1 e2       	ldi	r26, 0x21	; 33
    2050:	1a 2e       	mov	r1, r26
    2052:	aa 1b       	sub	r26, r26
    2054:	bb 1b       	sub	r27, r27
    2056:	fd 01       	movw	r30, r26
    2058:	0d c0       	rjmp	.+26     	; 0x2074 <__udivmodsi4_ep>

0000205a <__udivmodsi4_loop>:
    205a:	aa 1f       	adc	r26, r26
    205c:	bb 1f       	adc	r27, r27
    205e:	ee 1f       	adc	r30, r30
    2060:	ff 1f       	adc	r31, r31
    2062:	a2 17       	cp	r26, r18
    2064:	b3 07       	cpc	r27, r19
    2066:	e4 07       	cpc	r30, r20
    2068:	f5 07       	cpc	r31, r21
    206a:	20 f0       	brcs	.+8      	; 0x2074 <__udivmodsi4_ep>
    206c:	a2 1b       	sub	r26, r18
    206e:	b3 0b       	sbc	r27, r19
    2070:	e4 0b       	sbc	r30, r20
    2072:	f5 0b       	sbc	r31, r21

00002074 <__udivmodsi4_ep>:
    2074:	66 1f       	adc	r22, r22
    2076:	77 1f       	adc	r23, r23
    2078:	88 1f       	adc	r24, r24
    207a:	99 1f       	adc	r25, r25
    207c:	1a 94       	dec	r1
    207e:	69 f7       	brne	.-38     	; 0x205a <__udivmodsi4_loop>
    2080:	60 95       	com	r22
    2082:	70 95       	com	r23
    2084:	80 95       	com	r24
    2086:	90 95       	com	r25
    2088:	9b 01       	movw	r18, r22
    208a:	ac 01       	movw	r20, r24
    208c:	bd 01       	movw	r22, r26
    208e:	cf 01       	movw	r24, r30
    2090:	08 95       	ret

00002092 <__tablejump2__>:
    2092:	ee 0f       	add	r30, r30
    2094:	ff 1f       	adc	r31, r31

00002096 <__tablejump__>:
    2096:	05 90       	lpm	r0, Z+
    2098:	f4 91       	lpm	r31, Z
    209a:	e0 2d       	mov	r30, r0
    209c:	09 94       	ijmp

0000209e <malloc>:
    209e:	cf 93       	push	r28
    20a0:	df 93       	push	r29
    20a2:	82 30       	cpi	r24, 0x02	; 2
    20a4:	91 05       	cpc	r25, r1
    20a6:	10 f4       	brcc	.+4      	; 0x20ac <malloc+0xe>
    20a8:	82 e0       	ldi	r24, 0x02	; 2
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	e0 91 e0 03 	lds	r30, 0x03E0
    20b0:	f0 91 e1 03 	lds	r31, 0x03E1
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	a0 e0       	ldi	r26, 0x00	; 0
    20ba:	b0 e0       	ldi	r27, 0x00	; 0
    20bc:	30 97       	sbiw	r30, 0x00	; 0
    20be:	39 f1       	breq	.+78     	; 0x210e <malloc+0x70>
    20c0:	40 81       	ld	r20, Z
    20c2:	51 81       	ldd	r21, Z+1	; 0x01
    20c4:	48 17       	cp	r20, r24
    20c6:	59 07       	cpc	r21, r25
    20c8:	b8 f0       	brcs	.+46     	; 0x20f8 <malloc+0x5a>
    20ca:	48 17       	cp	r20, r24
    20cc:	59 07       	cpc	r21, r25
    20ce:	71 f4       	brne	.+28     	; 0x20ec <malloc+0x4e>
    20d0:	82 81       	ldd	r24, Z+2	; 0x02
    20d2:	93 81       	ldd	r25, Z+3	; 0x03
    20d4:	10 97       	sbiw	r26, 0x00	; 0
    20d6:	29 f0       	breq	.+10     	; 0x20e2 <malloc+0x44>
    20d8:	13 96       	adiw	r26, 0x03	; 3
    20da:	9c 93       	st	X, r25
    20dc:	8e 93       	st	-X, r24
    20de:	12 97       	sbiw	r26, 0x02	; 2
    20e0:	2c c0       	rjmp	.+88     	; 0x213a <malloc+0x9c>
    20e2:	90 93 e1 03 	sts	0x03E1, r25
    20e6:	80 93 e0 03 	sts	0x03E0, r24
    20ea:	27 c0       	rjmp	.+78     	; 0x213a <malloc+0x9c>
    20ec:	21 15       	cp	r18, r1
    20ee:	31 05       	cpc	r19, r1
    20f0:	31 f0       	breq	.+12     	; 0x20fe <malloc+0x60>
    20f2:	42 17       	cp	r20, r18
    20f4:	53 07       	cpc	r21, r19
    20f6:	18 f0       	brcs	.+6      	; 0x20fe <malloc+0x60>
    20f8:	a9 01       	movw	r20, r18
    20fa:	db 01       	movw	r26, r22
    20fc:	01 c0       	rjmp	.+2      	; 0x2100 <malloc+0x62>
    20fe:	ef 01       	movw	r28, r30
    2100:	9a 01       	movw	r18, r20
    2102:	bd 01       	movw	r22, r26
    2104:	df 01       	movw	r26, r30
    2106:	02 80       	ldd	r0, Z+2	; 0x02
    2108:	f3 81       	ldd	r31, Z+3	; 0x03
    210a:	e0 2d       	mov	r30, r0
    210c:	d7 cf       	rjmp	.-82     	; 0x20bc <malloc+0x1e>
    210e:	21 15       	cp	r18, r1
    2110:	31 05       	cpc	r19, r1
    2112:	f9 f0       	breq	.+62     	; 0x2152 <malloc+0xb4>
    2114:	28 1b       	sub	r18, r24
    2116:	39 0b       	sbc	r19, r25
    2118:	24 30       	cpi	r18, 0x04	; 4
    211a:	31 05       	cpc	r19, r1
    211c:	80 f4       	brcc	.+32     	; 0x213e <malloc+0xa0>
    211e:	8a 81       	ldd	r24, Y+2	; 0x02
    2120:	9b 81       	ldd	r25, Y+3	; 0x03
    2122:	61 15       	cp	r22, r1
    2124:	71 05       	cpc	r23, r1
    2126:	21 f0       	breq	.+8      	; 0x2130 <malloc+0x92>
    2128:	fb 01       	movw	r30, r22
    212a:	93 83       	std	Z+3, r25	; 0x03
    212c:	82 83       	std	Z+2, r24	; 0x02
    212e:	04 c0       	rjmp	.+8      	; 0x2138 <malloc+0x9a>
    2130:	90 93 e1 03 	sts	0x03E1, r25
    2134:	80 93 e0 03 	sts	0x03E0, r24
    2138:	fe 01       	movw	r30, r28
    213a:	32 96       	adiw	r30, 0x02	; 2
    213c:	44 c0       	rjmp	.+136    	; 0x21c6 <malloc+0x128>
    213e:	fe 01       	movw	r30, r28
    2140:	e2 0f       	add	r30, r18
    2142:	f3 1f       	adc	r31, r19
    2144:	81 93       	st	Z+, r24
    2146:	91 93       	st	Z+, r25
    2148:	22 50       	subi	r18, 0x02	; 2
    214a:	31 09       	sbc	r19, r1
    214c:	39 83       	std	Y+1, r19	; 0x01
    214e:	28 83       	st	Y, r18
    2150:	3a c0       	rjmp	.+116    	; 0x21c6 <malloc+0x128>
    2152:	20 91 de 03 	lds	r18, 0x03DE
    2156:	30 91 df 03 	lds	r19, 0x03DF
    215a:	23 2b       	or	r18, r19
    215c:	41 f4       	brne	.+16     	; 0x216e <malloc+0xd0>
    215e:	20 91 02 01 	lds	r18, 0x0102
    2162:	30 91 03 01 	lds	r19, 0x0103
    2166:	30 93 df 03 	sts	0x03DF, r19
    216a:	20 93 de 03 	sts	0x03DE, r18
    216e:	20 91 00 01 	lds	r18, 0x0100
    2172:	30 91 01 01 	lds	r19, 0x0101
    2176:	21 15       	cp	r18, r1
    2178:	31 05       	cpc	r19, r1
    217a:	41 f4       	brne	.+16     	; 0x218c <malloc+0xee>
    217c:	2d b7       	in	r18, 0x3d	; 61
    217e:	3e b7       	in	r19, 0x3e	; 62
    2180:	40 91 04 01 	lds	r20, 0x0104
    2184:	50 91 05 01 	lds	r21, 0x0105
    2188:	24 1b       	sub	r18, r20
    218a:	35 0b       	sbc	r19, r21
    218c:	e0 91 de 03 	lds	r30, 0x03DE
    2190:	f0 91 df 03 	lds	r31, 0x03DF
    2194:	e2 17       	cp	r30, r18
    2196:	f3 07       	cpc	r31, r19
    2198:	a0 f4       	brcc	.+40     	; 0x21c2 <malloc+0x124>
    219a:	2e 1b       	sub	r18, r30
    219c:	3f 0b       	sbc	r19, r31
    219e:	28 17       	cp	r18, r24
    21a0:	39 07       	cpc	r19, r25
    21a2:	78 f0       	brcs	.+30     	; 0x21c2 <malloc+0x124>
    21a4:	ac 01       	movw	r20, r24
    21a6:	4e 5f       	subi	r20, 0xFE	; 254
    21a8:	5f 4f       	sbci	r21, 0xFF	; 255
    21aa:	24 17       	cp	r18, r20
    21ac:	35 07       	cpc	r19, r21
    21ae:	48 f0       	brcs	.+18     	; 0x21c2 <malloc+0x124>
    21b0:	4e 0f       	add	r20, r30
    21b2:	5f 1f       	adc	r21, r31
    21b4:	50 93 df 03 	sts	0x03DF, r21
    21b8:	40 93 de 03 	sts	0x03DE, r20
    21bc:	81 93       	st	Z+, r24
    21be:	91 93       	st	Z+, r25
    21c0:	02 c0       	rjmp	.+4      	; 0x21c6 <malloc+0x128>
    21c2:	e0 e0       	ldi	r30, 0x00	; 0
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	cf 01       	movw	r24, r30
    21c8:	df 91       	pop	r29
    21ca:	cf 91       	pop	r28
    21cc:	08 95       	ret

000021ce <free>:
    21ce:	cf 93       	push	r28
    21d0:	df 93       	push	r29
    21d2:	00 97       	sbiw	r24, 0x00	; 0
    21d4:	09 f4       	brne	.+2      	; 0x21d8 <free+0xa>
    21d6:	87 c0       	rjmp	.+270    	; 0x22e6 <free+0x118>
    21d8:	fc 01       	movw	r30, r24
    21da:	32 97       	sbiw	r30, 0x02	; 2
    21dc:	13 82       	std	Z+3, r1	; 0x03
    21de:	12 82       	std	Z+2, r1	; 0x02
    21e0:	c0 91 e0 03 	lds	r28, 0x03E0
    21e4:	d0 91 e1 03 	lds	r29, 0x03E1
    21e8:	20 97       	sbiw	r28, 0x00	; 0
    21ea:	81 f4       	brne	.+32     	; 0x220c <free+0x3e>
    21ec:	20 81       	ld	r18, Z
    21ee:	31 81       	ldd	r19, Z+1	; 0x01
    21f0:	28 0f       	add	r18, r24
    21f2:	39 1f       	adc	r19, r25
    21f4:	80 91 de 03 	lds	r24, 0x03DE
    21f8:	90 91 df 03 	lds	r25, 0x03DF
    21fc:	82 17       	cp	r24, r18
    21fe:	93 07       	cpc	r25, r19
    2200:	79 f5       	brne	.+94     	; 0x2260 <free+0x92>
    2202:	f0 93 df 03 	sts	0x03DF, r31
    2206:	e0 93 de 03 	sts	0x03DE, r30
    220a:	6d c0       	rjmp	.+218    	; 0x22e6 <free+0x118>
    220c:	de 01       	movw	r26, r28
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	ae 17       	cp	r26, r30
    2214:	bf 07       	cpc	r27, r31
    2216:	50 f4       	brcc	.+20     	; 0x222c <free+0x5e>
    2218:	12 96       	adiw	r26, 0x02	; 2
    221a:	4d 91       	ld	r20, X+
    221c:	5c 91       	ld	r21, X
    221e:	13 97       	sbiw	r26, 0x03	; 3
    2220:	9d 01       	movw	r18, r26
    2222:	41 15       	cp	r20, r1
    2224:	51 05       	cpc	r21, r1
    2226:	09 f1       	breq	.+66     	; 0x226a <free+0x9c>
    2228:	da 01       	movw	r26, r20
    222a:	f3 cf       	rjmp	.-26     	; 0x2212 <free+0x44>
    222c:	b3 83       	std	Z+3, r27	; 0x03
    222e:	a2 83       	std	Z+2, r26	; 0x02
    2230:	40 81       	ld	r20, Z
    2232:	51 81       	ldd	r21, Z+1	; 0x01
    2234:	84 0f       	add	r24, r20
    2236:	95 1f       	adc	r25, r21
    2238:	8a 17       	cp	r24, r26
    223a:	9b 07       	cpc	r25, r27
    223c:	71 f4       	brne	.+28     	; 0x225a <free+0x8c>
    223e:	8d 91       	ld	r24, X+
    2240:	9c 91       	ld	r25, X
    2242:	11 97       	sbiw	r26, 0x01	; 1
    2244:	84 0f       	add	r24, r20
    2246:	95 1f       	adc	r25, r21
    2248:	02 96       	adiw	r24, 0x02	; 2
    224a:	91 83       	std	Z+1, r25	; 0x01
    224c:	80 83       	st	Z, r24
    224e:	12 96       	adiw	r26, 0x02	; 2
    2250:	8d 91       	ld	r24, X+
    2252:	9c 91       	ld	r25, X
    2254:	13 97       	sbiw	r26, 0x03	; 3
    2256:	93 83       	std	Z+3, r25	; 0x03
    2258:	82 83       	std	Z+2, r24	; 0x02
    225a:	21 15       	cp	r18, r1
    225c:	31 05       	cpc	r19, r1
    225e:	29 f4       	brne	.+10     	; 0x226a <free+0x9c>
    2260:	f0 93 e1 03 	sts	0x03E1, r31
    2264:	e0 93 e0 03 	sts	0x03E0, r30
    2268:	3e c0       	rjmp	.+124    	; 0x22e6 <free+0x118>
    226a:	d9 01       	movw	r26, r18
    226c:	13 96       	adiw	r26, 0x03	; 3
    226e:	fc 93       	st	X, r31
    2270:	ee 93       	st	-X, r30
    2272:	12 97       	sbiw	r26, 0x02	; 2
    2274:	4d 91       	ld	r20, X+
    2276:	5d 91       	ld	r21, X+
    2278:	a4 0f       	add	r26, r20
    227a:	b5 1f       	adc	r27, r21
    227c:	ea 17       	cp	r30, r26
    227e:	fb 07       	cpc	r31, r27
    2280:	79 f4       	brne	.+30     	; 0x22a0 <free+0xd2>
    2282:	80 81       	ld	r24, Z
    2284:	91 81       	ldd	r25, Z+1	; 0x01
    2286:	84 0f       	add	r24, r20
    2288:	95 1f       	adc	r25, r21
    228a:	02 96       	adiw	r24, 0x02	; 2
    228c:	d9 01       	movw	r26, r18
    228e:	11 96       	adiw	r26, 0x01	; 1
    2290:	9c 93       	st	X, r25
    2292:	8e 93       	st	-X, r24
    2294:	82 81       	ldd	r24, Z+2	; 0x02
    2296:	93 81       	ldd	r25, Z+3	; 0x03
    2298:	13 96       	adiw	r26, 0x03	; 3
    229a:	9c 93       	st	X, r25
    229c:	8e 93       	st	-X, r24
    229e:	12 97       	sbiw	r26, 0x02	; 2
    22a0:	e0 e0       	ldi	r30, 0x00	; 0
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	8a 81       	ldd	r24, Y+2	; 0x02
    22a6:	9b 81       	ldd	r25, Y+3	; 0x03
    22a8:	00 97       	sbiw	r24, 0x00	; 0
    22aa:	19 f0       	breq	.+6      	; 0x22b2 <free+0xe4>
    22ac:	fe 01       	movw	r30, r28
    22ae:	ec 01       	movw	r28, r24
    22b0:	f9 cf       	rjmp	.-14     	; 0x22a4 <free+0xd6>
    22b2:	ce 01       	movw	r24, r28
    22b4:	02 96       	adiw	r24, 0x02	; 2
    22b6:	28 81       	ld	r18, Y
    22b8:	39 81       	ldd	r19, Y+1	; 0x01
    22ba:	82 0f       	add	r24, r18
    22bc:	93 1f       	adc	r25, r19
    22be:	20 91 de 03 	lds	r18, 0x03DE
    22c2:	30 91 df 03 	lds	r19, 0x03DF
    22c6:	28 17       	cp	r18, r24
    22c8:	39 07       	cpc	r19, r25
    22ca:	69 f4       	brne	.+26     	; 0x22e6 <free+0x118>
    22cc:	30 97       	sbiw	r30, 0x00	; 0
    22ce:	29 f4       	brne	.+10     	; 0x22da <free+0x10c>
    22d0:	10 92 e1 03 	sts	0x03E1, r1
    22d4:	10 92 e0 03 	sts	0x03E0, r1
    22d8:	02 c0       	rjmp	.+4      	; 0x22de <free+0x110>
    22da:	13 82       	std	Z+3, r1	; 0x03
    22dc:	12 82       	std	Z+2, r1	; 0x02
    22de:	d0 93 df 03 	sts	0x03DF, r29
    22e2:	c0 93 de 03 	sts	0x03DE, r28
    22e6:	df 91       	pop	r29
    22e8:	cf 91       	pop	r28
    22ea:	08 95       	ret

000022ec <realloc>:
    22ec:	a0 e0       	ldi	r26, 0x00	; 0
    22ee:	b0 e0       	ldi	r27, 0x00	; 0
    22f0:	ec e7       	ldi	r30, 0x7C	; 124
    22f2:	f1 e1       	ldi	r31, 0x11	; 17
    22f4:	0c 94 7a 12 	jmp	0x24f4	; 0x24f4 <__prologue_saves__+0x8>
    22f8:	ec 01       	movw	r28, r24
    22fa:	cb 01       	movw	r24, r22
    22fc:	20 97       	sbiw	r28, 0x00	; 0
    22fe:	19 f4       	brne	.+6      	; 0x2306 <realloc+0x1a>
    2300:	0e 94 4f 10 	call	0x209e	; 0x209e <malloc>
    2304:	b8 c0       	rjmp	.+368    	; 0x2476 <realloc+0x18a>
    2306:	fe 01       	movw	r30, r28
    2308:	e6 0f       	add	r30, r22
    230a:	f7 1f       	adc	r31, r23
    230c:	9e 01       	movw	r18, r28
    230e:	22 50       	subi	r18, 0x02	; 2
    2310:	31 09       	sbc	r19, r1
    2312:	e2 17       	cp	r30, r18
    2314:	f3 07       	cpc	r31, r19
    2316:	08 f4       	brcc	.+2      	; 0x231a <realloc+0x2e>
    2318:	ac c0       	rjmp	.+344    	; 0x2472 <realloc+0x186>
    231a:	d9 01       	movw	r26, r18
    231c:	0d 91       	ld	r16, X+
    231e:	1c 91       	ld	r17, X
    2320:	11 97       	sbiw	r26, 0x01	; 1
    2322:	06 17       	cp	r16, r22
    2324:	17 07       	cpc	r17, r23
    2326:	b8 f0       	brcs	.+46     	; 0x2356 <realloc+0x6a>
    2328:	05 30       	cpi	r16, 0x05	; 5
    232a:	11 05       	cpc	r17, r1
    232c:	08 f4       	brcc	.+2      	; 0x2330 <realloc+0x44>
    232e:	9f c0       	rjmp	.+318    	; 0x246e <realloc+0x182>
    2330:	a8 01       	movw	r20, r16
    2332:	44 50       	subi	r20, 0x04	; 4
    2334:	51 09       	sbc	r21, r1
    2336:	46 17       	cp	r20, r22
    2338:	57 07       	cpc	r21, r23
    233a:	08 f4       	brcc	.+2      	; 0x233e <realloc+0x52>
    233c:	98 c0       	rjmp	.+304    	; 0x246e <realloc+0x182>
    233e:	02 50       	subi	r16, 0x02	; 2
    2340:	11 09       	sbc	r17, r1
    2342:	06 1b       	sub	r16, r22
    2344:	17 0b       	sbc	r17, r23
    2346:	01 93       	st	Z+, r16
    2348:	11 93       	st	Z+, r17
    234a:	6d 93       	st	X+, r22
    234c:	7c 93       	st	X, r23
    234e:	cf 01       	movw	r24, r30
    2350:	0e 94 e7 10 	call	0x21ce	; 0x21ce <free>
    2354:	8c c0       	rjmp	.+280    	; 0x246e <realloc+0x182>
    2356:	5b 01       	movw	r10, r22
    2358:	a0 1a       	sub	r10, r16
    235a:	b1 0a       	sbc	r11, r17
    235c:	4e 01       	movw	r8, r28
    235e:	80 0e       	add	r8, r16
    2360:	91 1e       	adc	r9, r17
    2362:	a0 91 e0 03 	lds	r26, 0x03E0
    2366:	b0 91 e1 03 	lds	r27, 0x03E1
    236a:	61 2c       	mov	r6, r1
    236c:	71 2c       	mov	r7, r1
    236e:	60 e0       	ldi	r22, 0x00	; 0
    2370:	70 e0       	ldi	r23, 0x00	; 0
    2372:	10 97       	sbiw	r26, 0x00	; 0
    2374:	09 f4       	brne	.+2      	; 0x2378 <realloc+0x8c>
    2376:	49 c0       	rjmp	.+146    	; 0x240a <realloc+0x11e>
    2378:	a8 15       	cp	r26, r8
    237a:	b9 05       	cpc	r27, r9
    237c:	c9 f5       	brne	.+114    	; 0x23f0 <realloc+0x104>
    237e:	ed 90       	ld	r14, X+
    2380:	fc 90       	ld	r15, X
    2382:	11 97       	sbiw	r26, 0x01	; 1
    2384:	67 01       	movw	r12, r14
    2386:	42 e0       	ldi	r20, 0x02	; 2
    2388:	c4 0e       	add	r12, r20
    238a:	d1 1c       	adc	r13, r1
    238c:	ca 14       	cp	r12, r10
    238e:	db 04       	cpc	r13, r11
    2390:	78 f1       	brcs	.+94     	; 0x23f0 <realloc+0x104>
    2392:	47 01       	movw	r8, r14
    2394:	8a 18       	sub	r8, r10
    2396:	9b 08       	sbc	r9, r11
    2398:	64 01       	movw	r12, r8
    239a:	42 e0       	ldi	r20, 0x02	; 2
    239c:	c4 0e       	add	r12, r20
    239e:	d1 1c       	adc	r13, r1
    23a0:	12 96       	adiw	r26, 0x02	; 2
    23a2:	bc 90       	ld	r11, X
    23a4:	12 97       	sbiw	r26, 0x02	; 2
    23a6:	13 96       	adiw	r26, 0x03	; 3
    23a8:	ac 91       	ld	r26, X
    23aa:	b5 e0       	ldi	r27, 0x05	; 5
    23ac:	cb 16       	cp	r12, r27
    23ae:	d1 04       	cpc	r13, r1
    23b0:	40 f0       	brcs	.+16     	; 0x23c2 <realloc+0xd6>
    23b2:	b2 82       	std	Z+2, r11	; 0x02
    23b4:	a3 83       	std	Z+3, r26	; 0x03
    23b6:	91 82       	std	Z+1, r9	; 0x01
    23b8:	80 82       	st	Z, r8
    23ba:	d9 01       	movw	r26, r18
    23bc:	8d 93       	st	X+, r24
    23be:	9c 93       	st	X, r25
    23c0:	09 c0       	rjmp	.+18     	; 0x23d4 <realloc+0xe8>
    23c2:	0e 5f       	subi	r16, 0xFE	; 254
    23c4:	1f 4f       	sbci	r17, 0xFF	; 255
    23c6:	0e 0d       	add	r16, r14
    23c8:	1f 1d       	adc	r17, r15
    23ca:	f9 01       	movw	r30, r18
    23cc:	11 83       	std	Z+1, r17	; 0x01
    23ce:	00 83       	st	Z, r16
    23d0:	eb 2d       	mov	r30, r11
    23d2:	fa 2f       	mov	r31, r26
    23d4:	61 15       	cp	r22, r1
    23d6:	71 05       	cpc	r23, r1
    23d8:	31 f0       	breq	.+12     	; 0x23e6 <realloc+0xfa>
    23da:	db 01       	movw	r26, r22
    23dc:	13 96       	adiw	r26, 0x03	; 3
    23de:	fc 93       	st	X, r31
    23e0:	ee 93       	st	-X, r30
    23e2:	12 97       	sbiw	r26, 0x02	; 2
    23e4:	44 c0       	rjmp	.+136    	; 0x246e <realloc+0x182>
    23e6:	f0 93 e1 03 	sts	0x03E1, r31
    23ea:	e0 93 e0 03 	sts	0x03E0, r30
    23ee:	3f c0       	rjmp	.+126    	; 0x246e <realloc+0x182>
    23f0:	6d 91       	ld	r22, X+
    23f2:	7c 91       	ld	r23, X
    23f4:	11 97       	sbiw	r26, 0x01	; 1
    23f6:	66 16       	cp	r6, r22
    23f8:	77 06       	cpc	r7, r23
    23fa:	08 f4       	brcc	.+2      	; 0x23fe <realloc+0x112>
    23fc:	3b 01       	movw	r6, r22
    23fe:	bd 01       	movw	r22, r26
    2400:	12 96       	adiw	r26, 0x02	; 2
    2402:	0d 90       	ld	r0, X+
    2404:	bc 91       	ld	r27, X
    2406:	a0 2d       	mov	r26, r0
    2408:	b4 cf       	rjmp	.-152    	; 0x2372 <realloc+0x86>
    240a:	60 91 de 03 	lds	r22, 0x03DE
    240e:	70 91 df 03 	lds	r23, 0x03DF
    2412:	68 15       	cp	r22, r8
    2414:	79 05       	cpc	r23, r9
    2416:	e9 f4       	brne	.+58     	; 0x2452 <realloc+0x166>
    2418:	68 16       	cp	r6, r24
    241a:	79 06       	cpc	r7, r25
    241c:	d0 f4       	brcc	.+52     	; 0x2452 <realloc+0x166>
    241e:	40 91 00 01 	lds	r20, 0x0100
    2422:	50 91 01 01 	lds	r21, 0x0101
    2426:	41 15       	cp	r20, r1
    2428:	51 05       	cpc	r21, r1
    242a:	41 f4       	brne	.+16     	; 0x243c <realloc+0x150>
    242c:	4d b7       	in	r20, 0x3d	; 61
    242e:	5e b7       	in	r21, 0x3e	; 62
    2430:	60 91 04 01 	lds	r22, 0x0104
    2434:	70 91 05 01 	lds	r23, 0x0105
    2438:	46 1b       	sub	r20, r22
    243a:	57 0b       	sbc	r21, r23
    243c:	e4 17       	cp	r30, r20
    243e:	f5 07       	cpc	r31, r21
    2440:	c0 f4       	brcc	.+48     	; 0x2472 <realloc+0x186>
    2442:	f0 93 df 03 	sts	0x03DF, r31
    2446:	e0 93 de 03 	sts	0x03DE, r30
    244a:	f9 01       	movw	r30, r18
    244c:	91 83       	std	Z+1, r25	; 0x01
    244e:	80 83       	st	Z, r24
    2450:	0e c0       	rjmp	.+28     	; 0x246e <realloc+0x182>
    2452:	0e 94 4f 10 	call	0x209e	; 0x209e <malloc>
    2456:	7c 01       	movw	r14, r24
    2458:	00 97       	sbiw	r24, 0x00	; 0
    245a:	59 f0       	breq	.+22     	; 0x2472 <realloc+0x186>
    245c:	a8 01       	movw	r20, r16
    245e:	be 01       	movw	r22, r28
    2460:	0e 94 40 12 	call	0x2480	; 0x2480 <memcpy>
    2464:	ce 01       	movw	r24, r28
    2466:	0e 94 e7 10 	call	0x21ce	; 0x21ce <free>
    246a:	c7 01       	movw	r24, r14
    246c:	04 c0       	rjmp	.+8      	; 0x2476 <realloc+0x18a>
    246e:	ce 01       	movw	r24, r28
    2470:	02 c0       	rjmp	.+4      	; 0x2476 <realloc+0x18a>
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	cd b7       	in	r28, 0x3d	; 61
    2478:	de b7       	in	r29, 0x3e	; 62
    247a:	ee e0       	ldi	r30, 0x0E	; 14
    247c:	0c 94 96 12 	jmp	0x252c	; 0x252c <__epilogue_restores__+0x8>

00002480 <memcpy>:
    2480:	fb 01       	movw	r30, r22
    2482:	dc 01       	movw	r26, r24
    2484:	02 c0       	rjmp	.+4      	; 0x248a <memcpy+0xa>
    2486:	01 90       	ld	r0, Z+
    2488:	0d 92       	st	X+, r0
    248a:	41 50       	subi	r20, 0x01	; 1
    248c:	50 40       	sbci	r21, 0x00	; 0
    248e:	d8 f7       	brcc	.-10     	; 0x2486 <memcpy+0x6>
    2490:	08 95       	ret

00002492 <strcmp>:
    2492:	fb 01       	movw	r30, r22
    2494:	dc 01       	movw	r26, r24
    2496:	8d 91       	ld	r24, X+
    2498:	01 90       	ld	r0, Z+
    249a:	80 19       	sub	r24, r0
    249c:	01 10       	cpse	r0, r1
    249e:	d9 f3       	breq	.-10     	; 0x2496 <strcmp+0x4>
    24a0:	99 0b       	sbc	r25, r25
    24a2:	08 95       	ret

000024a4 <strcpy>:
    24a4:	fb 01       	movw	r30, r22
    24a6:	dc 01       	movw	r26, r24
    24a8:	01 90       	ld	r0, Z+
    24aa:	0d 92       	st	X+, r0
    24ac:	00 20       	and	r0, r0
    24ae:	e1 f7       	brne	.-8      	; 0x24a8 <strcpy+0x4>
    24b0:	08 95       	ret

000024b2 <strncmp>:
    24b2:	fb 01       	movw	r30, r22
    24b4:	dc 01       	movw	r26, r24
    24b6:	41 50       	subi	r20, 0x01	; 1
    24b8:	50 40       	sbci	r21, 0x00	; 0
    24ba:	30 f0       	brcs	.+12     	; 0x24c8 <strncmp+0x16>
    24bc:	8d 91       	ld	r24, X+
    24be:	01 90       	ld	r0, Z+
    24c0:	80 19       	sub	r24, r0
    24c2:	19 f4       	brne	.+6      	; 0x24ca <strncmp+0x18>
    24c4:	00 20       	and	r0, r0
    24c6:	b9 f7       	brne	.-18     	; 0x24b6 <strncmp+0x4>
    24c8:	88 1b       	sub	r24, r24
    24ca:	99 0b       	sbc	r25, r25
    24cc:	08 95       	ret

000024ce <strncpy>:
    24ce:	fb 01       	movw	r30, r22
    24d0:	dc 01       	movw	r26, r24
    24d2:	41 50       	subi	r20, 0x01	; 1
    24d4:	50 40       	sbci	r21, 0x00	; 0
    24d6:	48 f0       	brcs	.+18     	; 0x24ea <strncpy+0x1c>
    24d8:	01 90       	ld	r0, Z+
    24da:	0d 92       	st	X+, r0
    24dc:	00 20       	and	r0, r0
    24de:	c9 f7       	brne	.-14     	; 0x24d2 <strncpy+0x4>
    24e0:	01 c0       	rjmp	.+2      	; 0x24e4 <strncpy+0x16>
    24e2:	1d 92       	st	X+, r1
    24e4:	41 50       	subi	r20, 0x01	; 1
    24e6:	50 40       	sbci	r21, 0x00	; 0
    24e8:	e0 f7       	brcc	.-8      	; 0x24e2 <strncpy+0x14>
    24ea:	08 95       	ret

000024ec <__prologue_saves__>:
    24ec:	2f 92       	push	r2
    24ee:	3f 92       	push	r3
    24f0:	4f 92       	push	r4
    24f2:	5f 92       	push	r5
    24f4:	6f 92       	push	r6
    24f6:	7f 92       	push	r7
    24f8:	8f 92       	push	r8
    24fa:	9f 92       	push	r9
    24fc:	af 92       	push	r10
    24fe:	bf 92       	push	r11
    2500:	cf 92       	push	r12
    2502:	df 92       	push	r13
    2504:	ef 92       	push	r14
    2506:	ff 92       	push	r15
    2508:	0f 93       	push	r16
    250a:	1f 93       	push	r17
    250c:	cf 93       	push	r28
    250e:	df 93       	push	r29
    2510:	cd b7       	in	r28, 0x3d	; 61
    2512:	de b7       	in	r29, 0x3e	; 62
    2514:	ca 1b       	sub	r28, r26
    2516:	db 0b       	sbc	r29, r27
    2518:	0f b6       	in	r0, 0x3f	; 63
    251a:	f8 94       	cli
    251c:	de bf       	out	0x3e, r29	; 62
    251e:	0f be       	out	0x3f, r0	; 63
    2520:	cd bf       	out	0x3d, r28	; 61
    2522:	09 94       	ijmp

00002524 <__epilogue_restores__>:
    2524:	2a 88       	ldd	r2, Y+18	; 0x12
    2526:	39 88       	ldd	r3, Y+17	; 0x11
    2528:	48 88       	ldd	r4, Y+16	; 0x10
    252a:	5f 84       	ldd	r5, Y+15	; 0x0f
    252c:	6e 84       	ldd	r6, Y+14	; 0x0e
    252e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2530:	8c 84       	ldd	r8, Y+12	; 0x0c
    2532:	9b 84       	ldd	r9, Y+11	; 0x0b
    2534:	aa 84       	ldd	r10, Y+10	; 0x0a
    2536:	b9 84       	ldd	r11, Y+9	; 0x09
    2538:	c8 84       	ldd	r12, Y+8	; 0x08
    253a:	df 80       	ldd	r13, Y+7	; 0x07
    253c:	ee 80       	ldd	r14, Y+6	; 0x06
    253e:	fd 80       	ldd	r15, Y+5	; 0x05
    2540:	0c 81       	ldd	r16, Y+4	; 0x04
    2542:	1b 81       	ldd	r17, Y+3	; 0x03
    2544:	aa 81       	ldd	r26, Y+2	; 0x02
    2546:	b9 81       	ldd	r27, Y+1	; 0x01
    2548:	ce 0f       	add	r28, r30
    254a:	d1 1d       	adc	r29, r1
    254c:	0f b6       	in	r0, 0x3f	; 63
    254e:	f8 94       	cli
    2550:	de bf       	out	0x3e, r29	; 62
    2552:	0f be       	out	0x3f, r0	; 63
    2554:	cd bf       	out	0x3d, r28	; 61
    2556:	ed 01       	movw	r28, r26
    2558:	08 95       	ret

0000255a <__do_global_dtors>:
    255a:	10 e0       	ldi	r17, 0x00	; 0
    255c:	c6 eb       	ldi	r28, 0xB6	; 182
    255e:	d0 e0       	ldi	r29, 0x00	; 0
    2560:	04 c0       	rjmp	.+8      	; 0x256a <__do_global_dtors+0x10>
    2562:	fe 01       	movw	r30, r28
    2564:	0e 94 4b 10 	call	0x2096	; 0x2096 <__tablejump__>
    2568:	22 96       	adiw	r28, 0x02	; 2
    256a:	c8 3b       	cpi	r28, 0xB8	; 184
    256c:	d1 07       	cpc	r29, r17
    256e:	c9 f7       	brne	.-14     	; 0x2562 <__do_global_dtors+0x8>
    2570:	f8 94       	cli

00002572 <__stop_program>:
    2572:	ff cf       	rjmp	.-2      	; 0x2572 <__stop_program>
