
SensorGloves.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000254  00800100  00002896  0000292a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002896  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000116  00800354  00800354  00002b7e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002b7e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000007a0  00000000  00000000  00002bae  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0001218e  00000000  00000000  0000334e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000282f  00000000  00000000  000154dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000029af  00000000  00000000  00017d0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001b30  00000000  00000000  0001a6bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002934  00000000  00000000  0001c1ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000090da  00000000  00000000  0001eb20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000008b8  00000000  00000000  00027bfa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__dtors_end>
       4:	0c 94 36 04 	jmp	0x86c	; 0x86c <__vector_1>
       8:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <__vector_2>
       c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      10:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      14:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      18:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      1c:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <__vector_7>
      20:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      24:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      28:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      2c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      30:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      34:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      38:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      3c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      40:	0c 94 90 04 	jmp	0x920	; 0x920 <__vector_16>
      44:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      48:	0c 94 ca 01 	jmp	0x394	; 0x394 <__vector_18>
      4c:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__vector_19>
      50:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      54:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      58:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      5c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      60:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      64:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	02 00       	.word	0x0002	; ????

00000069 <digital_pin_to_timer_PGM>:
      69:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      79:	00 00 00 00                                         ....

0000007d <digital_pin_to_bit_mask_PGM>:
      7d:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8d:	04 08 10 20                                         ... 

00000091 <digital_pin_to_port_PGM>:
      91:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a1:	03 03 03 03                                         ....

000000a5 <port_to_output_PGM>:
      a5:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000af <port_to_mode_PGM>:
      af:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000000ba <__ctors_start>:
      ba:	2c 02       	muls	r18, r28
      bc:	aa 02       	muls	r26, r26
      be:	f1 0f       	add	r31, r17

000000c0 <__ctors_end>:
      c0:	03 10       	cpse	r0, r3

000000c2 <__dtors_end>:
      c2:	11 24       	eor	r1, r1
      c4:	1f be       	out	0x3f, r1	; 63
      c6:	cf ef       	ldi	r28, 0xFF	; 255
      c8:	d8 e0       	ldi	r29, 0x08	; 8
      ca:	de bf       	out	0x3e, r29	; 62
      cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
      ce:	13 e0       	ldi	r17, 0x03	; 3
      d0:	a0 e0       	ldi	r26, 0x00	; 0
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	e6 e9       	ldi	r30, 0x96	; 150
      d6:	f8 e2       	ldi	r31, 0x28	; 40
      d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
      da:	05 90       	lpm	r0, Z+
      dc:	0d 92       	st	X+, r0
      de:	a4 35       	cpi	r26, 0x54	; 84
      e0:	b1 07       	cpc	r27, r17
      e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
      e4:	24 e0       	ldi	r18, 0x04	; 4
      e6:	a4 e5       	ldi	r26, 0x54	; 84
      e8:	b3 e0       	ldi	r27, 0x03	; 3
      ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
      ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
      ee:	aa 36       	cpi	r26, 0x6A	; 106
      f0:	b2 07       	cpc	r27, r18
      f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>

000000f4 <__do_global_ctors>:
      f4:	10 e0       	ldi	r17, 0x00	; 0
      f6:	c0 ec       	ldi	r28, 0xC0	; 192
      f8:	d0 e0       	ldi	r29, 0x00	; 0
      fa:	04 c0       	rjmp	.+8      	; 0x104 <__do_global_ctors+0x10>
      fc:	22 97       	sbiw	r28, 0x02	; 2
      fe:	fe 01       	movw	r30, r28
     100:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__tablejump__>
     104:	ca 3b       	cpi	r28, 0xBA	; 186
     106:	d1 07       	cpc	r29, r17
     108:	c9 f7       	brne	.-14     	; 0xfc <__do_global_ctors+0x8>
     10a:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <main>
     10e:	0c 94 3e 14 	jmp	0x287c	; 0x287c <__do_global_dtors>

00000112 <__bad_interrupt>:
     112:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000116 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     116:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     118:	81 8d       	ldd	r24, Z+25	; 0x19
     11a:	22 8d       	ldd	r18, Z+26	; 0x1a
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	80 5c       	subi	r24, 0xC0	; 192
     120:	9f 4f       	sbci	r25, 0xFF	; 255
     122:	82 1b       	sub	r24, r18
     124:	91 09       	sbc	r25, r1
}
     126:	8f 73       	andi	r24, 0x3F	; 63
     128:	99 27       	eor	r25, r25
     12a:	08 95       	ret

0000012c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     12c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     12e:	91 8d       	ldd	r25, Z+25	; 0x19
     130:	82 8d       	ldd	r24, Z+26	; 0x1a
     132:	98 17       	cp	r25, r24
     134:	31 f0       	breq	.+12     	; 0x142 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     136:	82 8d       	ldd	r24, Z+26	; 0x1a
     138:	e8 0f       	add	r30, r24
     13a:	f1 1d       	adc	r31, r1
     13c:	85 8d       	ldd	r24, Z+29	; 0x1d
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     142:	8f ef       	ldi	r24, 0xFF	; 255
     144:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     146:	08 95       	ret

00000148 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     148:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     14a:	91 8d       	ldd	r25, Z+25	; 0x19
     14c:	82 8d       	ldd	r24, Z+26	; 0x1a
     14e:	98 17       	cp	r25, r24
     150:	61 f0       	breq	.+24     	; 0x16a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     152:	82 8d       	ldd	r24, Z+26	; 0x1a
     154:	df 01       	movw	r26, r30
     156:	a8 0f       	add	r26, r24
     158:	b1 1d       	adc	r27, r1
     15a:	5d 96       	adiw	r26, 0x1d	; 29
     15c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     15e:	92 8d       	ldd	r25, Z+26	; 0x1a
     160:	9f 5f       	subi	r25, 0xFF	; 255
     162:	9f 73       	andi	r25, 0x3F	; 63
     164:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     16a:	8f ef       	ldi	r24, 0xFF	; 255
     16c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     16e:	08 95       	ret

00000170 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     170:	82 e2       	ldi	r24, 0x22	; 34
     172:	92 e0       	ldi	r25, 0x02	; 2
     174:	89 2b       	or	r24, r25
     176:	49 f0       	breq	.+18     	; 0x18a <_Z14serialEventRunv+0x1a>
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	89 2b       	or	r24, r25
     17e:	29 f0       	breq	.+10     	; 0x18a <_Z14serialEventRunv+0x1a>
     180:	0e 94 22 02 	call	0x444	; 0x444 <_Z17Serial0_availablev>
     184:	81 11       	cpse	r24, r1
     186:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     18a:	08 95       	ret

0000018c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     18c:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     18e:	84 8d       	ldd	r24, Z+28	; 0x1c
     190:	df 01       	movw	r26, r30
     192:	a8 0f       	add	r26, r24
     194:	b1 1d       	adc	r27, r1
     196:	a3 5a       	subi	r26, 0xA3	; 163
     198:	bf 4f       	sbci	r27, 0xFF	; 255
     19a:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     19c:	84 8d       	ldd	r24, Z+28	; 0x1c
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	01 96       	adiw	r24, 0x01	; 1
     1a2:	8f 73       	andi	r24, 0x3F	; 63
     1a4:	99 27       	eor	r25, r25
     1a6:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     1a8:	a6 89       	ldd	r26, Z+22	; 0x16
     1aa:	b7 89       	ldd	r27, Z+23	; 0x17
     1ac:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     1ae:	a0 89       	ldd	r26, Z+16	; 0x10
     1b0:	b1 89       	ldd	r27, Z+17	; 0x11
     1b2:	8c 91       	ld	r24, X
     1b4:	80 64       	ori	r24, 0x40	; 64
     1b6:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     1b8:	93 8d       	ldd	r25, Z+27	; 0x1b
     1ba:	84 8d       	ldd	r24, Z+28	; 0x1c
     1bc:	98 13       	cpse	r25, r24
     1be:	06 c0       	rjmp	.+12     	; 0x1cc <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     1c0:	02 88       	ldd	r0, Z+18	; 0x12
     1c2:	f3 89       	ldd	r31, Z+19	; 0x13
     1c4:	e0 2d       	mov	r30, r0
     1c6:	80 81       	ld	r24, Z
     1c8:	8f 7d       	andi	r24, 0xDF	; 223
     1ca:	80 83       	st	Z, r24
     1cc:	08 95       	ret

000001ce <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     1ce:	cf 93       	push	r28
     1d0:	df 93       	push	r29
     1d2:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     1d4:	88 8d       	ldd	r24, Y+24	; 0x18
     1d6:	88 23       	and	r24, r24
     1d8:	c9 f0       	breq	.+50     	; 0x20c <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     1da:	ea 89       	ldd	r30, Y+18	; 0x12
     1dc:	fb 89       	ldd	r31, Y+19	; 0x13
     1de:	80 81       	ld	r24, Z
     1e0:	85 fd       	sbrc	r24, 5
     1e2:	05 c0       	rjmp	.+10     	; 0x1ee <_ZN14HardwareSerial5flushEv+0x20>
     1e4:	a8 89       	ldd	r26, Y+16	; 0x10
     1e6:	b9 89       	ldd	r27, Y+17	; 0x11
     1e8:	8c 91       	ld	r24, X
     1ea:	86 fd       	sbrc	r24, 6
     1ec:	0f c0       	rjmp	.+30     	; 0x20c <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	07 fc       	sbrc	r0, 7
     1f2:	f5 cf       	rjmp	.-22     	; 0x1de <_ZN14HardwareSerial5flushEv+0x10>
     1f4:	80 81       	ld	r24, Z
     1f6:	85 ff       	sbrs	r24, 5
     1f8:	f2 cf       	rjmp	.-28     	; 0x1de <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     1fa:	a8 89       	ldd	r26, Y+16	; 0x10
     1fc:	b9 89       	ldd	r27, Y+17	; 0x11
     1fe:	8c 91       	ld	r24, X
     200:	85 ff       	sbrs	r24, 5
     202:	ed cf       	rjmp	.-38     	; 0x1de <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     204:	ce 01       	movw	r24, r28
     206:	0e 94 c6 00 	call	0x18c	; 0x18c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     20a:	e7 cf       	rjmp	.-50     	; 0x1da <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     20c:	df 91       	pop	r29
     20e:	cf 91       	pop	r28
     210:	08 95       	ret

00000212 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     212:	cf 92       	push	r12
     214:	df 92       	push	r13
     216:	ff 92       	push	r15
     218:	0f 93       	push	r16
     21a:	1f 93       	push	r17
     21c:	cf 93       	push	r28
     21e:	df 93       	push	r29
     220:	1f 92       	push	r1
     222:	cd b7       	in	r28, 0x3d	; 61
     224:	de b7       	in	r29, 0x3e	; 62
     226:	6c 01       	movw	r12, r24
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     228:	dc 01       	movw	r26, r24
     22a:	5b 96       	adiw	r26, 0x1b	; 27
     22c:	9c 91       	ld	r25, X
     22e:	5b 97       	sbiw	r26, 0x1b	; 27
     230:	5c 96       	adiw	r26, 0x1c	; 28
     232:	8c 91       	ld	r24, X
     234:	5c 97       	sbiw	r26, 0x1c	; 28
     236:	98 13       	cpse	r25, r24
     238:	07 c0       	rjmp	.+14     	; 0x248 <_ZN14HardwareSerial5writeEh+0x36>
     23a:	50 96       	adiw	r26, 0x10	; 16
     23c:	ed 91       	ld	r30, X+
     23e:	fc 91       	ld	r31, X
     240:	51 97       	sbiw	r26, 0x11	; 17
     242:	80 81       	ld	r24, Z
     244:	85 fd       	sbrc	r24, 5
     246:	32 c0       	rjmp	.+100    	; 0x2ac <_ZN14HardwareSerial5writeEh+0x9a>
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     248:	f6 01       	movw	r30, r12
     24a:	03 8d       	ldd	r16, Z+27	; 0x1b
     24c:	10 e0       	ldi	r17, 0x00	; 0
     24e:	0f 5f       	subi	r16, 0xFF	; 255
     250:	1f 4f       	sbci	r17, 0xFF	; 255
     252:	0f 73       	andi	r16, 0x3F	; 63
     254:	11 27       	eor	r17, r17
     256:	f0 2e       	mov	r15, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     258:	f6 01       	movw	r30, r12
     25a:	84 8d       	ldd	r24, Z+28	; 0x1c
     25c:	f8 12       	cpse	r15, r24
     25e:	11 c0       	rjmp	.+34     	; 0x282 <_ZN14HardwareSerial5writeEh+0x70>
    if (bit_is_clear(SREG, SREG_I)) {
     260:	0f b6       	in	r0, 0x3f	; 63
     262:	07 fc       	sbrc	r0, 7
     264:	f9 cf       	rjmp	.-14     	; 0x258 <_ZN14HardwareSerial5writeEh+0x46>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     266:	d6 01       	movw	r26, r12
     268:	50 96       	adiw	r26, 0x10	; 16
     26a:	ed 91       	ld	r30, X+
     26c:	fc 91       	ld	r31, X
     26e:	51 97       	sbiw	r26, 0x11	; 17
     270:	80 81       	ld	r24, Z
     272:	85 ff       	sbrs	r24, 5
     274:	f1 cf       	rjmp	.-30     	; 0x258 <_ZN14HardwareSerial5writeEh+0x46>
	_tx_udr_empty_irq();
     276:	c6 01       	movw	r24, r12
     278:	69 83       	std	Y+1, r22	; 0x01
     27a:	0e 94 c6 00 	call	0x18c	; 0x18c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     27e:	69 81       	ldd	r22, Y+1	; 0x01
     280:	eb cf       	rjmp	.-42     	; 0x258 <_ZN14HardwareSerial5writeEh+0x46>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     282:	83 8d       	ldd	r24, Z+27	; 0x1b
     284:	e8 0f       	add	r30, r24
     286:	f1 1d       	adc	r31, r1
     288:	e3 5a       	subi	r30, 0xA3	; 163
     28a:	ff 4f       	sbci	r31, 0xFF	; 255
     28c:	60 83       	st	Z, r22
  _tx_buffer_head = i;
     28e:	d6 01       	movw	r26, r12
     290:	5b 96       	adiw	r26, 0x1b	; 27
     292:	0c 93       	st	X, r16
     294:	5b 97       	sbiw	r26, 0x1b	; 27
	
  sbi(*_ucsrb, UDRIE0);
     296:	52 96       	adiw	r26, 0x12	; 18
     298:	ed 91       	ld	r30, X+
     29a:	fc 91       	ld	r31, X
     29c:	53 97       	sbiw	r26, 0x13	; 19
     29e:	80 81       	ld	r24, Z
     2a0:	80 62       	ori	r24, 0x20	; 32
     2a2:	80 83       	st	Z, r24
  _written = true;
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	58 96       	adiw	r26, 0x18	; 24
     2a8:	8c 93       	st	X, r24
     2aa:	0d c0       	rjmp	.+26     	; 0x2c6 <_ZN14HardwareSerial5writeEh+0xb4>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     2ac:	d6 01       	movw	r26, r12
     2ae:	56 96       	adiw	r26, 0x16	; 22
     2b0:	ed 91       	ld	r30, X+
     2b2:	fc 91       	ld	r31, X
     2b4:	57 97       	sbiw	r26, 0x17	; 23
     2b6:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     2b8:	50 96       	adiw	r26, 0x10	; 16
     2ba:	ed 91       	ld	r30, X+
     2bc:	fc 91       	ld	r31, X
     2be:	51 97       	sbiw	r26, 0x11	; 17
     2c0:	80 81       	ld	r24, Z
     2c2:	80 64       	ori	r24, 0x40	; 64
     2c4:	80 83       	st	Z, r24
	
  sbi(*_ucsrb, UDRIE0);
  _written = true;
  
  return 1;
}
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	0f 90       	pop	r0
     2cc:	df 91       	pop	r29
     2ce:	cf 91       	pop	r28
     2d0:	1f 91       	pop	r17
     2d2:	0f 91       	pop	r16
     2d4:	ff 90       	pop	r15
     2d6:	df 90       	pop	r13
     2d8:	cf 90       	pop	r12
     2da:	08 95       	ret

000002dc <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     2dc:	bf 92       	push	r11
     2de:	cf 92       	push	r12
     2e0:	df 92       	push	r13
     2e2:	ef 92       	push	r14
     2e4:	ff 92       	push	r15
     2e6:	cf 93       	push	r28
     2e8:	df 93       	push	r29
     2ea:	ec 01       	movw	r28, r24
     2ec:	6a 01       	movw	r12, r20
     2ee:	7b 01       	movw	r14, r22
     2f0:	b2 2e       	mov	r11, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     2f2:	60 e8       	ldi	r22, 0x80	; 128
     2f4:	74 e8       	ldi	r23, 0x84	; 132
     2f6:	8e e1       	ldi	r24, 0x1E	; 30
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	a7 01       	movw	r20, r14
     2fc:	96 01       	movw	r18, r12
     2fe:	0e 94 ad 11 	call	0x235a	; 0x235a <__udivmodsi4>
     302:	21 50       	subi	r18, 0x01	; 1
     304:	31 09       	sbc	r19, r1
     306:	41 09       	sbc	r20, r1
     308:	51 09       	sbc	r21, r1
     30a:	56 95       	lsr	r21
     30c:	47 95       	ror	r20
     30e:	37 95       	ror	r19
     310:	27 95       	ror	r18
  *_ucsra = 1 << U2X0;
     312:	e8 89       	ldd	r30, Y+16	; 0x10
     314:	f9 89       	ldd	r31, Y+17	; 0x11
     316:	82 e0       	ldi	r24, 0x02	; 2
     318:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     31a:	21 15       	cp	r18, r1
     31c:	80 e1       	ldi	r24, 0x10	; 16
     31e:	38 07       	cpc	r19, r24
     320:	98 f0       	brcs	.+38     	; 0x348 <_ZN14HardwareSerial5beginEmh+0x6c>
  {
    *_ucsra = 0;
     322:	e8 89       	ldd	r30, Y+16	; 0x10
     324:	f9 89       	ldd	r31, Y+17	; 0x11
     326:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     328:	60 e4       	ldi	r22, 0x40	; 64
     32a:	72 e4       	ldi	r23, 0x42	; 66
     32c:	8f e0       	ldi	r24, 0x0F	; 15
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	a7 01       	movw	r20, r14
     332:	96 01       	movw	r18, r12
     334:	0e 94 ad 11 	call	0x235a	; 0x235a <__udivmodsi4>
     338:	21 50       	subi	r18, 0x01	; 1
     33a:	31 09       	sbc	r19, r1
     33c:	41 09       	sbc	r20, r1
     33e:	51 09       	sbc	r21, r1
     340:	56 95       	lsr	r21
     342:	47 95       	ror	r20
     344:	37 95       	ror	r19
     346:	27 95       	ror	r18
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     348:	ec 85       	ldd	r30, Y+12	; 0x0c
     34a:	fd 85       	ldd	r31, Y+13	; 0x0d
     34c:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     34e:	ee 85       	ldd	r30, Y+14	; 0x0e
     350:	ff 85       	ldd	r31, Y+15	; 0x0f
     352:	20 83       	st	Z, r18

  _written = false;
     354:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     356:	ec 89       	ldd	r30, Y+20	; 0x14
     358:	fd 89       	ldd	r31, Y+21	; 0x15
     35a:	b0 82       	st	Z, r11
  
  sbi(*_ucsrb, RXEN0);
     35c:	ea 89       	ldd	r30, Y+18	; 0x12
     35e:	fb 89       	ldd	r31, Y+19	; 0x13
     360:	80 81       	ld	r24, Z
     362:	80 61       	ori	r24, 0x10	; 16
     364:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     366:	ea 89       	ldd	r30, Y+18	; 0x12
     368:	fb 89       	ldd	r31, Y+19	; 0x13
     36a:	80 81       	ld	r24, Z
     36c:	88 60       	ori	r24, 0x08	; 8
     36e:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     370:	ea 89       	ldd	r30, Y+18	; 0x12
     372:	fb 89       	ldd	r31, Y+19	; 0x13
     374:	80 81       	ld	r24, Z
     376:	80 68       	ori	r24, 0x80	; 128
     378:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     37a:	ea 89       	ldd	r30, Y+18	; 0x12
     37c:	fb 89       	ldd	r31, Y+19	; 0x13
     37e:	80 81       	ld	r24, Z
     380:	8f 7d       	andi	r24, 0xDF	; 223
     382:	80 83       	st	Z, r24
}
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	ff 90       	pop	r15
     38a:	ef 90       	pop	r14
     38c:	df 90       	pop	r13
     38e:	cf 90       	pop	r12
     390:	bf 90       	pop	r11
     392:	08 95       	ret

00000394 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     394:	1f 92       	push	r1
     396:	0f 92       	push	r0
     398:	0f b6       	in	r0, 0x3f	; 63
     39a:	0f 92       	push	r0
     39c:	11 24       	eor	r1, r1
     39e:	2f 93       	push	r18
     3a0:	8f 93       	push	r24
     3a2:	9f 93       	push	r25
     3a4:	ef 93       	push	r30
     3a6:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     3a8:	e0 91 64 03 	lds	r30, 0x0364
     3ac:	f0 91 65 03 	lds	r31, 0x0365
     3b0:	80 81       	ld	r24, Z
     3b2:	e0 91 6a 03 	lds	r30, 0x036A
     3b6:	f0 91 6b 03 	lds	r31, 0x036B
     3ba:	82 fd       	sbrc	r24, 2
     3bc:	12 c0       	rjmp	.+36     	; 0x3e2 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     3be:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     3c0:	80 91 6d 03 	lds	r24, 0x036D
     3c4:	8f 5f       	subi	r24, 0xFF	; 255
     3c6:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     3c8:	20 91 6e 03 	lds	r18, 0x036E
     3cc:	82 17       	cp	r24, r18
     3ce:	51 f0       	breq	.+20     	; 0x3e4 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     3d0:	e0 91 6d 03 	lds	r30, 0x036D
     3d4:	f0 e0       	ldi	r31, 0x00	; 0
     3d6:	ec 5a       	subi	r30, 0xAC	; 172
     3d8:	fc 4f       	sbci	r31, 0xFC	; 252
     3da:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     3dc:	80 93 6d 03 	sts	0x036D, r24
     3e0:	01 c0       	rjmp	.+2      	; 0x3e4 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     3e2:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     3e4:	ff 91       	pop	r31
     3e6:	ef 91       	pop	r30
     3e8:	9f 91       	pop	r25
     3ea:	8f 91       	pop	r24
     3ec:	2f 91       	pop	r18
     3ee:	0f 90       	pop	r0
     3f0:	0f be       	out	0x3f, r0	; 63
     3f2:	0f 90       	pop	r0
     3f4:	1f 90       	pop	r1
     3f6:	18 95       	reti

000003f8 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     3f8:	1f 92       	push	r1
     3fa:	0f 92       	push	r0
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	0f 92       	push	r0
     400:	11 24       	eor	r1, r1
     402:	2f 93       	push	r18
     404:	3f 93       	push	r19
     406:	4f 93       	push	r20
     408:	5f 93       	push	r21
     40a:	6f 93       	push	r22
     40c:	7f 93       	push	r23
     40e:	8f 93       	push	r24
     410:	9f 93       	push	r25
     412:	af 93       	push	r26
     414:	bf 93       	push	r27
     416:	ef 93       	push	r30
     418:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     41a:	84 e5       	ldi	r24, 0x54	; 84
     41c:	93 e0       	ldi	r25, 0x03	; 3
     41e:	0e 94 c6 00 	call	0x18c	; 0x18c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     422:	ff 91       	pop	r31
     424:	ef 91       	pop	r30
     426:	bf 91       	pop	r27
     428:	af 91       	pop	r26
     42a:	9f 91       	pop	r25
     42c:	8f 91       	pop	r24
     42e:	7f 91       	pop	r23
     430:	6f 91       	pop	r22
     432:	5f 91       	pop	r21
     434:	4f 91       	pop	r20
     436:	3f 91       	pop	r19
     438:	2f 91       	pop	r18
     43a:	0f 90       	pop	r0
     43c:	0f be       	out	0x3f, r0	; 63
     43e:	0f 90       	pop	r0
     440:	1f 90       	pop	r1
     442:	18 95       	reti

00000444 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     444:	84 e5       	ldi	r24, 0x54	; 84
     446:	93 e0       	ldi	r25, 0x03	; 3
     448:	0e 94 8b 00 	call	0x116	; 0x116 <_ZN14HardwareSerial9availableEv>
     44c:	21 e0       	ldi	r18, 0x01	; 1
     44e:	89 2b       	or	r24, r25
     450:	09 f4       	brne	.+2      	; 0x454 <_Z17Serial0_availablev+0x10>
     452:	20 e0       	ldi	r18, 0x00	; 0
}
     454:	82 2f       	mov	r24, r18
     456:	08 95       	ret

00000458 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     458:	10 92 57 03 	sts	0x0357, r1
     45c:	10 92 56 03 	sts	0x0356, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     460:	88 ee       	ldi	r24, 0xE8	; 232
     462:	93 e0       	ldi	r25, 0x03	; 3
     464:	a0 e0       	ldi	r26, 0x00	; 0
     466:	b0 e0       	ldi	r27, 0x00	; 0
     468:	80 93 58 03 	sts	0x0358, r24
     46c:	90 93 59 03 	sts	0x0359, r25
     470:	a0 93 5a 03 	sts	0x035A, r26
     474:	b0 93 5b 03 	sts	0x035B, r27
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     478:	8c e0       	ldi	r24, 0x0C	; 12
     47a:	91 e0       	ldi	r25, 0x01	; 1
     47c:	90 93 55 03 	sts	0x0355, r25
     480:	80 93 54 03 	sts	0x0354, r24
     484:	85 ec       	ldi	r24, 0xC5	; 197
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	90 93 61 03 	sts	0x0361, r25
     48c:	80 93 60 03 	sts	0x0360, r24
     490:	84 ec       	ldi	r24, 0xC4	; 196
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	90 93 63 03 	sts	0x0363, r25
     498:	80 93 62 03 	sts	0x0362, r24
     49c:	80 ec       	ldi	r24, 0xC0	; 192
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	90 93 65 03 	sts	0x0365, r25
     4a4:	80 93 64 03 	sts	0x0364, r24
     4a8:	81 ec       	ldi	r24, 0xC1	; 193
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	90 93 67 03 	sts	0x0367, r25
     4b0:	80 93 66 03 	sts	0x0366, r24
     4b4:	82 ec       	ldi	r24, 0xC2	; 194
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	90 93 69 03 	sts	0x0369, r25
     4bc:	80 93 68 03 	sts	0x0368, r24
     4c0:	86 ec       	ldi	r24, 0xC6	; 198
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	90 93 6b 03 	sts	0x036B, r25
     4c8:	80 93 6a 03 	sts	0x036A, r24
     4cc:	10 92 6d 03 	sts	0x036D, r1
     4d0:	10 92 6e 03 	sts	0x036E, r1
     4d4:	10 92 6f 03 	sts	0x036F, r1
     4d8:	10 92 70 03 	sts	0x0370, r1
     4dc:	08 95       	ret

000004de <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
     4de:	08 95       	ret

000004e0 <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
     4e0:	af 92       	push	r10
     4e2:	bf 92       	push	r11
     4e4:	cf 92       	push	r12
     4e6:	df 92       	push	r13
     4e8:	ef 92       	push	r14
     4ea:	ff 92       	push	r15
     4ec:	0f 93       	push	r16
     4ee:	1f 93       	push	r17
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	6c 01       	movw	r12, r24
     4f6:	7b 01       	movw	r14, r22
    size_t n = 0;
    for (int i =0; i < 3; i++)
     4f8:	c0 e0       	ldi	r28, 0x00	; 0
     4fa:	d0 e0       	ldi	r29, 0x00	; 0
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
     4fc:	00 e0       	ldi	r16, 0x00	; 0
     4fe:	10 e0       	ldi	r17, 0x00	; 0
     500:	f6 01       	movw	r30, r12
     502:	ec 0f       	add	r30, r28
     504:	fd 1f       	adc	r31, r29
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
     506:	4a e0       	ldi	r20, 0x0A	; 10
     508:	50 e0       	ldi	r21, 0x00	; 0
     50a:	62 81       	ldd	r22, Z+2	; 0x02
     50c:	c7 01       	movw	r24, r14
     50e:	0e 94 9e 03 	call	0x73c	; 0x73c <_ZN5Print5printEhi>
     512:	5c 01       	movw	r10, r24
        n += p.print('.');
     514:	6e e2       	ldi	r22, 0x2E	; 46
     516:	c7 01       	movw	r24, r14
     518:	0e 94 0b 03 	call	0x616	; 0x616 <_ZN5Print5printEc>
size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
     51c:	8a 0d       	add	r24, r10
     51e:	9b 1d       	adc	r25, r11
        n += p.print('.');
     520:	08 0f       	add	r16, r24
     522:	19 1f       	adc	r17, r25
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
     524:	21 96       	adiw	r28, 0x01	; 1
     526:	c3 30       	cpi	r28, 0x03	; 3
     528:	d1 05       	cpc	r29, r1
     52a:	51 f7       	brne	.-44     	; 0x500 <_ZNK9IPAddress7printToER5Print+0x20>
    {
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
     52c:	4a e0       	ldi	r20, 0x0A	; 10
     52e:	50 e0       	ldi	r21, 0x00	; 0
     530:	f6 01       	movw	r30, r12
     532:	65 81       	ldd	r22, Z+5	; 0x05
     534:	c7 01       	movw	r24, r14
     536:	0e 94 9e 03 	call	0x73c	; 0x73c <_ZN5Print5printEhi>
    return n;
}
     53a:	80 0f       	add	r24, r16
     53c:	91 1f       	adc	r25, r17
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	1f 91       	pop	r17
     544:	0f 91       	pop	r16
     546:	ff 90       	pop	r15
     548:	ef 90       	pop	r14
     54a:	df 90       	pop	r13
     54c:	cf 90       	pop	r12
     54e:	bf 90       	pop	r11
     550:	af 90       	pop	r10
     552:	08 95       	ret

00000554 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
     554:	8c e1       	ldi	r24, 0x1C	; 28
     556:	91 e0       	ldi	r25, 0x01	; 1
     558:	90 93 f2 03 	sts	0x03F2, r25
     55c:	80 93 f1 03 	sts	0x03F1, r24
{
    _address.bytes[0] = first_octet;
     560:	10 92 f3 03 	sts	0x03F3, r1
    _address.bytes[1] = second_octet;
     564:	10 92 f4 03 	sts	0x03F4, r1
    _address.bytes[2] = third_octet;
     568:	10 92 f5 03 	sts	0x03F5, r1
    _address.bytes[3] = fourth_octet;
     56c:	10 92 f6 03 	sts	0x03F6, r1
     570:	08 95       	ret

00000572 <_Znaj>:
void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
  return malloc(size);
     572:	0c 94 d5 11 	jmp	0x23aa	; 0x23aa <malloc>

00000576 <_ZdlPv>:
}

void operator delete(void * ptr) {
  free(ptr);
     576:	0c 94 6d 12 	jmp	0x24da	; 0x24da <free>

0000057a <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     57a:	cf 92       	push	r12
     57c:	df 92       	push	r13
     57e:	ef 92       	push	r14
     580:	ff 92       	push	r15
     582:	0f 93       	push	r16
     584:	1f 93       	push	r17
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	6c 01       	movw	r12, r24
     58c:	7a 01       	movw	r14, r20
     58e:	eb 01       	movw	r28, r22
     590:	e6 0e       	add	r14, r22
     592:	f7 1e       	adc	r15, r23
  size_t n = 0;
     594:	00 e0       	ldi	r16, 0x00	; 0
     596:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
     598:	ce 15       	cp	r28, r14
     59a:	df 05       	cpc	r29, r15
     59c:	61 f0       	breq	.+24     	; 0x5b6 <_ZN5Print5writeEPKhj+0x3c>
    n += write(*buffer++);
     59e:	69 91       	ld	r22, Y+
     5a0:	d6 01       	movw	r26, r12
     5a2:	ed 91       	ld	r30, X+
     5a4:	fc 91       	ld	r31, X
     5a6:	01 90       	ld	r0, Z+
     5a8:	f0 81       	ld	r31, Z
     5aa:	e0 2d       	mov	r30, r0
     5ac:	c6 01       	movw	r24, r12
     5ae:	09 95       	icall
     5b0:	08 0f       	add	r16, r24
     5b2:	19 1f       	adc	r17, r25
     5b4:	f1 cf       	rjmp	.-30     	; 0x598 <_ZN5Print5writeEPKhj+0x1e>
  }
  return n;
}
     5b6:	c8 01       	movw	r24, r16
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	1f 91       	pop	r17
     5be:	0f 91       	pop	r16
     5c0:	ff 90       	pop	r15
     5c2:	ef 90       	pop	r14
     5c4:	df 90       	pop	r13
     5c6:	cf 90       	pop	r12
     5c8:	08 95       	ret

000005ca <_ZN5Print5writeEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     5ca:	61 15       	cp	r22, r1
     5cc:	71 05       	cpc	r23, r1
     5ce:	81 f0       	breq	.+32     	; 0x5f0 <_ZN5Print5writeEPKc+0x26>
      return write((const uint8_t *)str, strlen(str));
     5d0:	db 01       	movw	r26, r22
     5d2:	0d 90       	ld	r0, X+
     5d4:	00 20       	and	r0, r0
     5d6:	e9 f7       	brne	.-6      	; 0x5d2 <_ZN5Print5writeEPKc+0x8>
     5d8:	ad 01       	movw	r20, r26
     5da:	41 50       	subi	r20, 0x01	; 1
     5dc:	51 09       	sbc	r21, r1
     5de:	46 1b       	sub	r20, r22
     5e0:	57 0b       	sbc	r21, r23
     5e2:	dc 01       	movw	r26, r24
     5e4:	ed 91       	ld	r30, X+
     5e6:	fc 91       	ld	r31, X
     5e8:	02 80       	ldd	r0, Z+2	; 0x02
     5ea:	f3 81       	ldd	r31, Z+3	; 0x03
     5ec:	e0 2d       	mov	r30, r0
     5ee:	09 94       	ijmp
    }
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	08 95       	ret

000005f6 <_ZN5Print5printERK6String>:
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
     5f6:	dc 01       	movw	r26, r24
     5f8:	ed 91       	ld	r30, X+
     5fa:	fc 91       	ld	r31, X
     5fc:	db 01       	movw	r26, r22
     5fe:	14 96       	adiw	r26, 0x04	; 4
     600:	4d 91       	ld	r20, X+
     602:	5c 91       	ld	r21, X
     604:	15 97       	sbiw	r26, 0x05	; 5
     606:	6d 91       	ld	r22, X+
     608:	7c 91       	ld	r23, X
     60a:	02 80       	ldd	r0, Z+2	; 0x02
     60c:	f3 81       	ldd	r31, Z+3	; 0x03
     60e:	e0 2d       	mov	r30, r0
     610:	09 94       	ijmp

00000612 <_ZN5Print5printEPKc>:
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     612:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <_ZN5Print5writeEPKc>

00000616 <_ZN5Print5printEc>:
}

size_t Print::print(char c)
{
  return write(c);
     616:	dc 01       	movw	r26, r24
     618:	ed 91       	ld	r30, X+
     61a:	fc 91       	ld	r31, X
     61c:	01 90       	ld	r0, Z+
     61e:	f0 81       	ld	r31, Z
     620:	e0 2d       	mov	r30, r0
     622:	09 94       	ijmp

00000624 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
     624:	0f 93       	push	r16
     626:	1f 93       	push	r17
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
     62c:	ec 01       	movw	r28, r24
  size_t n = print('\r');
     62e:	6d e0       	ldi	r22, 0x0D	; 13
     630:	0e 94 0b 03 	call	0x616	; 0x616 <_ZN5Print5printEc>
     634:	8c 01       	movw	r16, r24
  n += print('\n');
     636:	6a e0       	ldi	r22, 0x0A	; 10
     638:	ce 01       	movw	r24, r28
     63a:	0e 94 0b 03 	call	0x616	; 0x616 <_ZN5Print5printEc>
  return n;
}
     63e:	80 0f       	add	r24, r16
     640:	91 1f       	adc	r25, r17
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	1f 91       	pop	r17
     648:	0f 91       	pop	r16
     64a:	08 95       	ret

0000064c <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
     64c:	0f 93       	push	r16
     64e:	1f 93       	push	r17
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     656:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN5Print5writeEPKc>
     65a:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
     65c:	ce 01       	movw	r24, r28
     65e:	0e 94 12 03 	call	0x624	; 0x624 <_ZN5Print7printlnEv>
  return n;
}
     662:	80 0f       	add	r24, r16
     664:	91 1f       	adc	r25, r17
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	1f 91       	pop	r17
     66c:	0f 91       	pop	r16
     66e:	08 95       	ret

00000670 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
     670:	8f 92       	push	r8
     672:	9f 92       	push	r9
     674:	af 92       	push	r10
     676:	bf 92       	push	r11
     678:	cf 92       	push	r12
     67a:	df 92       	push	r13
     67c:	ef 92       	push	r14
     67e:	ff 92       	push	r15
     680:	0f 93       	push	r16
     682:	1f 93       	push	r17
     684:	cf 93       	push	r28
     686:	df 93       	push	r29
     688:	cd b7       	in	r28, 0x3d	; 61
     68a:	de b7       	in	r29, 0x3e	; 62
     68c:	a1 97       	sbiw	r28, 0x21	; 33
     68e:	0f b6       	in	r0, 0x3f	; 63
     690:	f8 94       	cli
     692:	de bf       	out	0x3e, r29	; 62
     694:	0f be       	out	0x3f, r0	; 63
     696:	cd bf       	out	0x3d, r28	; 61
     698:	7c 01       	movw	r14, r24
     69a:	c4 2e       	mov	r12, r20
     69c:	e5 2f       	mov	r30, r21
     69e:	cb 01       	movw	r24, r22
     6a0:	d2 2e       	mov	r13, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     6a2:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     6a4:	21 e0       	ldi	r18, 0x01	; 1
     6a6:	2d 15       	cp	r18, r13
     6a8:	10 f0       	brcs	.+4      	; 0x6ae <_ZN5Print11printNumberEmh+0x3e>
     6aa:	2a e0       	ldi	r18, 0x0A	; 10
     6ac:	d2 2e       	mov	r13, r18
     6ae:	8e 01       	movw	r16, r28
     6b0:	0f 5d       	subi	r16, 0xDF	; 223
     6b2:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    unsigned long m = n;
    n /= base;
     6b4:	8d 2c       	mov	r8, r13
     6b6:	91 2c       	mov	r9, r1
     6b8:	a1 2c       	mov	r10, r1
     6ba:	b1 2c       	mov	r11, r1
     6bc:	6c 2d       	mov	r22, r12
     6be:	7e 2f       	mov	r23, r30
     6c0:	a5 01       	movw	r20, r10
     6c2:	94 01       	movw	r18, r8
     6c4:	0e 94 ad 11 	call	0x235a	; 0x235a <__udivmodsi4>
    char c = m - base * n;
     6c8:	8c 2d       	mov	r24, r12
     6ca:	d2 9e       	mul	r13, r18
     6cc:	80 19       	sub	r24, r0
     6ce:	11 24       	eor	r1, r1
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     6d0:	01 50       	subi	r16, 0x01	; 1
     6d2:	11 09       	sbc	r17, r1
     6d4:	8a 30       	cpi	r24, 0x0A	; 10
     6d6:	10 f4       	brcc	.+4      	; 0x6dc <_ZN5Print11printNumberEmh+0x6c>
     6d8:	80 5d       	subi	r24, 0xD0	; 208
     6da:	01 c0       	rjmp	.+2      	; 0x6de <_ZN5Print11printNumberEmh+0x6e>
     6dc:	89 5c       	subi	r24, 0xC9	; 201
     6de:	f8 01       	movw	r30, r16
     6e0:	80 83       	st	Z, r24
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
     6e2:	21 15       	cp	r18, r1
     6e4:	31 05       	cpc	r19, r1
     6e6:	41 05       	cpc	r20, r1
     6e8:	51 05       	cpc	r21, r1
     6ea:	21 f0       	breq	.+8      	; 0x6f4 <_ZN5Print11printNumberEmh+0x84>
    unsigned long m = n;
    n /= base;
     6ec:	c2 2e       	mov	r12, r18
     6ee:	e3 2f       	mov	r30, r19
     6f0:	ca 01       	movw	r24, r20
     6f2:	e4 cf       	rjmp	.-56     	; 0x6bc <_ZN5Print11printNumberEmh+0x4c>
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
     6f4:	b8 01       	movw	r22, r16
     6f6:	c7 01       	movw	r24, r14
     6f8:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN5Print5writeEPKc>
}
     6fc:	a1 96       	adiw	r28, 0x21	; 33
     6fe:	0f b6       	in	r0, 0x3f	; 63
     700:	f8 94       	cli
     702:	de bf       	out	0x3e, r29	; 62
     704:	0f be       	out	0x3f, r0	; 63
     706:	cd bf       	out	0x3d, r28	; 61
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	1f 91       	pop	r17
     70e:	0f 91       	pop	r16
     710:	ff 90       	pop	r15
     712:	ef 90       	pop	r14
     714:	df 90       	pop	r13
     716:	cf 90       	pop	r12
     718:	bf 90       	pop	r11
     71a:	af 90       	pop	r10
     71c:	9f 90       	pop	r9
     71e:	8f 90       	pop	r8
     720:	08 95       	ret

00000722 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
     722:	21 15       	cp	r18, r1
     724:	31 05       	cpc	r19, r1
     726:	41 f4       	brne	.+16     	; 0x738 <_ZN5Print5printEmi+0x16>
     728:	dc 01       	movw	r26, r24
     72a:	ed 91       	ld	r30, X+
     72c:	fc 91       	ld	r31, X
     72e:	01 90       	ld	r0, Z+
     730:	f0 81       	ld	r31, Z
     732:	e0 2d       	mov	r30, r0
     734:	64 2f       	mov	r22, r20
     736:	09 94       	ijmp
  else return printNumber(n, base);
     738:	0c 94 38 03 	jmp	0x670	; 0x670 <_ZN5Print11printNumberEmh>

0000073c <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
     73c:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
     73e:	46 2f       	mov	r20, r22
     740:	50 e0       	ldi	r21, 0x00	; 0
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	70 e0       	ldi	r23, 0x00	; 0
     746:	0c 94 91 03 	jmp	0x722	; 0x722 <_ZN5Print5printEmi>

0000074a <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
     74a:	81 30       	cpi	r24, 0x01	; 1
     74c:	39 f0       	breq	.+14     	; 0x75c <_Z12disableTimerh+0x12>
     74e:	18 f0       	brcs	.+6      	; 0x756 <_Z12disableTimerh+0xc>
     750:	82 30       	cpi	r24, 0x02	; 2
     752:	51 f0       	breq	.+20     	; 0x768 <_Z12disableTimerh+0x1e>
     754:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
     756:	10 92 6e 00 	sts	0x006E, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
     75a:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
     75c:	80 91 6f 00 	lds	r24, 0x006F
     760:	8d 7f       	andi	r24, 0xFD	; 253
     762:	80 93 6f 00 	sts	0x006F, r24
      break;
     766:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
     768:	80 91 70 00 	lds	r24, 0x0070
     76c:	8d 7f       	andi	r24, 0xFD	; 253
     76e:	80 93 70 00 	sts	0x0070, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
     778:	80 91 b1 00 	lds	r24, 0x00B1
     77c:	88 7f       	andi	r24, 0xF8	; 248
     77e:	84 60       	ori	r24, 0x04	; 4
     780:	80 93 b1 00 	sts	0x00B1, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
     784:	10 92 b3 00 	sts	0x00B3, r1
     788:	08 95       	ret

0000078a <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
     78a:	cf 93       	push	r28
     78c:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
     78e:	80 91 06 01 	lds	r24, 0x0106
     792:	8c 13       	cpse	r24, r28
     794:	07 c0       	rjmp	.+14     	; 0x7a4 <_Z6noToneh+0x1a>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
     796:	e8 e6       	ldi	r30, 0x68	; 104
     798:	f0 e0       	ldi	r31, 0x00	; 0
     79a:	84 91       	lpm	r24, Z
      tone_pins[i] = 255;
     79c:	9f ef       	ldi	r25, 0xFF	; 255
     79e:	90 93 06 01 	sts	0x0106, r25
     7a2:	01 c0       	rjmp	.+2      	; 0x7a6 <_Z6noToneh+0x1c>
}


void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
     7a4:	8f ef       	ldi	r24, 0xFF	; 255
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
      tone_pins[i] = 255;
    }
  }
  
  disableTimer(_timer);
     7a6:	0e 94 a5 03 	call	0x74a	; 0x74a <_Z12disableTimerh>

  digitalWrite(_pin, 0);
     7aa:	60 e0       	ldi	r22, 0x00	; 0
     7ac:	8c 2f       	mov	r24, r28
}
     7ae:	cf 91       	pop	r28
    }
  }
  
  disableTimer(_timer);

  digitalWrite(_pin, 0);
     7b0:	0c 94 eb 05 	jmp	0xbd6	; 0xbd6 <digitalWrite>

000007b4 <__vector_7>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
     7b4:	1f 92       	push	r1
     7b6:	0f 92       	push	r0
     7b8:	0f b6       	in	r0, 0x3f	; 63
     7ba:	0f 92       	push	r0
     7bc:	11 24       	eor	r1, r1
     7be:	2f 93       	push	r18
     7c0:	3f 93       	push	r19
     7c2:	4f 93       	push	r20
     7c4:	5f 93       	push	r21
     7c6:	6f 93       	push	r22
     7c8:	7f 93       	push	r23
     7ca:	8f 93       	push	r24
     7cc:	9f 93       	push	r25
     7ce:	af 93       	push	r26
     7d0:	bf 93       	push	r27
     7d2:	ef 93       	push	r30
     7d4:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
     7d6:	80 91 fa 03 	lds	r24, 0x03FA
     7da:	90 91 fb 03 	lds	r25, 0x03FB
     7de:	a0 91 fc 03 	lds	r26, 0x03FC
     7e2:	b0 91 fd 03 	lds	r27, 0x03FD
     7e6:	89 2b       	or	r24, r25
     7e8:	8a 2b       	or	r24, r26
     7ea:	8b 2b       	or	r24, r27
     7ec:	51 f1       	breq	.+84     	; 0x842 <__vector_7+0x8e>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
     7ee:	90 91 f7 03 	lds	r25, 0x03F7
     7f2:	e0 91 f8 03 	lds	r30, 0x03F8
     7f6:	f0 91 f9 03 	lds	r31, 0x03F9
     7fa:	80 81       	ld	r24, Z
     7fc:	89 27       	eor	r24, r25
     7fe:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
     800:	80 91 fa 03 	lds	r24, 0x03FA
     804:	90 91 fb 03 	lds	r25, 0x03FB
     808:	a0 91 fc 03 	lds	r26, 0x03FC
     80c:	b0 91 fd 03 	lds	r27, 0x03FD
     810:	18 16       	cp	r1, r24
     812:	19 06       	cpc	r1, r25
     814:	1a 06       	cpc	r1, r26
     816:	1b 06       	cpc	r1, r27
     818:	c4 f4       	brge	.+48     	; 0x84a <__vector_7+0x96>
      timer2_toggle_count--;
     81a:	80 91 fa 03 	lds	r24, 0x03FA
     81e:	90 91 fb 03 	lds	r25, 0x03FB
     822:	a0 91 fc 03 	lds	r26, 0x03FC
     826:	b0 91 fd 03 	lds	r27, 0x03FD
     82a:	01 97       	sbiw	r24, 0x01	; 1
     82c:	a1 09       	sbc	r26, r1
     82e:	b1 09       	sbc	r27, r1
     830:	80 93 fa 03 	sts	0x03FA, r24
     834:	90 93 fb 03 	sts	0x03FB, r25
     838:	a0 93 fc 03 	sts	0x03FC, r26
     83c:	b0 93 fd 03 	sts	0x03FD, r27
     840:	04 c0       	rjmp	.+8      	; 0x84a <__vector_7+0x96>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
     842:	80 91 06 01 	lds	r24, 0x0106
     846:	0e 94 c5 03 	call	0x78a	; 0x78a <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
     84a:	ff 91       	pop	r31
     84c:	ef 91       	pop	r30
     84e:	bf 91       	pop	r27
     850:	af 91       	pop	r26
     852:	9f 91       	pop	r25
     854:	8f 91       	pop	r24
     856:	7f 91       	pop	r23
     858:	6f 91       	pop	r22
     85a:	5f 91       	pop	r21
     85c:	4f 91       	pop	r20
     85e:	3f 91       	pop	r19
     860:	2f 91       	pop	r18
     862:	0f 90       	pop	r0
     864:	0f be       	out	0x3f, r0	; 63
     866:	0f 90       	pop	r0
     868:	1f 90       	pop	r1
     86a:	18 95       	reti

0000086c <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

ISR(INT0_vect) {
     86c:	1f 92       	push	r1
     86e:	0f 92       	push	r0
     870:	0f b6       	in	r0, 0x3f	; 63
     872:	0f 92       	push	r0
     874:	11 24       	eor	r1, r1
     876:	2f 93       	push	r18
     878:	3f 93       	push	r19
     87a:	4f 93       	push	r20
     87c:	5f 93       	push	r21
     87e:	6f 93       	push	r22
     880:	7f 93       	push	r23
     882:	8f 93       	push	r24
     884:	9f 93       	push	r25
     886:	af 93       	push	r26
     888:	bf 93       	push	r27
     88a:	ef 93       	push	r30
     88c:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
     88e:	80 91 fe 03 	lds	r24, 0x03FE
     892:	90 91 ff 03 	lds	r25, 0x03FF
     896:	89 2b       	or	r24, r25
     898:	29 f0       	breq	.+10     	; 0x8a4 <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
     89a:	e0 91 fe 03 	lds	r30, 0x03FE
     89e:	f0 91 ff 03 	lds	r31, 0x03FF
     8a2:	09 95       	icall
}
     8a4:	ff 91       	pop	r31
     8a6:	ef 91       	pop	r30
     8a8:	bf 91       	pop	r27
     8aa:	af 91       	pop	r26
     8ac:	9f 91       	pop	r25
     8ae:	8f 91       	pop	r24
     8b0:	7f 91       	pop	r23
     8b2:	6f 91       	pop	r22
     8b4:	5f 91       	pop	r21
     8b6:	4f 91       	pop	r20
     8b8:	3f 91       	pop	r19
     8ba:	2f 91       	pop	r18
     8bc:	0f 90       	pop	r0
     8be:	0f be       	out	0x3f, r0	; 63
     8c0:	0f 90       	pop	r0
     8c2:	1f 90       	pop	r1
     8c4:	18 95       	reti

000008c6 <__vector_2>:

ISR(INT1_vect) {
     8c6:	1f 92       	push	r1
     8c8:	0f 92       	push	r0
     8ca:	0f b6       	in	r0, 0x3f	; 63
     8cc:	0f 92       	push	r0
     8ce:	11 24       	eor	r1, r1
     8d0:	2f 93       	push	r18
     8d2:	3f 93       	push	r19
     8d4:	4f 93       	push	r20
     8d6:	5f 93       	push	r21
     8d8:	6f 93       	push	r22
     8da:	7f 93       	push	r23
     8dc:	8f 93       	push	r24
     8de:	9f 93       	push	r25
     8e0:	af 93       	push	r26
     8e2:	bf 93       	push	r27
     8e4:	ef 93       	push	r30
     8e6:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
     8e8:	80 91 00 04 	lds	r24, 0x0400
     8ec:	90 91 01 04 	lds	r25, 0x0401
     8f0:	89 2b       	or	r24, r25
     8f2:	29 f0       	breq	.+10     	; 0x8fe <__vector_2+0x38>
    intFunc[EXTERNAL_INT_1]();
     8f4:	e0 91 00 04 	lds	r30, 0x0400
     8f8:	f0 91 01 04 	lds	r31, 0x0401
     8fc:	09 95       	icall
}
     8fe:	ff 91       	pop	r31
     900:	ef 91       	pop	r30
     902:	bf 91       	pop	r27
     904:	af 91       	pop	r26
     906:	9f 91       	pop	r25
     908:	8f 91       	pop	r24
     90a:	7f 91       	pop	r23
     90c:	6f 91       	pop	r22
     90e:	5f 91       	pop	r21
     910:	4f 91       	pop	r20
     912:	3f 91       	pop	r19
     914:	2f 91       	pop	r18
     916:	0f 90       	pop	r0
     918:	0f be       	out	0x3f, r0	; 63
     91a:	0f 90       	pop	r0
     91c:	1f 90       	pop	r1
     91e:	18 95       	reti

00000920 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     920:	1f 92       	push	r1
     922:	0f 92       	push	r0
     924:	0f b6       	in	r0, 0x3f	; 63
     926:	0f 92       	push	r0
     928:	11 24       	eor	r1, r1
     92a:	2f 93       	push	r18
     92c:	3f 93       	push	r19
     92e:	8f 93       	push	r24
     930:	9f 93       	push	r25
     932:	af 93       	push	r26
     934:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     936:	80 91 03 04 	lds	r24, 0x0403
     93a:	90 91 04 04 	lds	r25, 0x0404
     93e:	a0 91 05 04 	lds	r26, 0x0405
     942:	b0 91 06 04 	lds	r27, 0x0406
	unsigned char f = timer0_fract;
     946:	30 91 02 04 	lds	r19, 0x0402

	m += MILLIS_INC;
	f += FRACT_INC;
     94a:	26 e0       	ldi	r18, 0x06	; 6
     94c:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     94e:	2d 37       	cpi	r18, 0x7D	; 125
     950:	20 f4       	brcc	.+8      	; 0x95a <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     952:	02 96       	adiw	r24, 0x02	; 2
     954:	a1 1d       	adc	r26, r1
     956:	b1 1d       	adc	r27, r1
     958:	05 c0       	rjmp	.+10     	; 0x964 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     95a:	29 e8       	ldi	r18, 0x89	; 137
     95c:	23 0f       	add	r18, r19
		m += 1;
     95e:	03 96       	adiw	r24, 0x03	; 3
     960:	a1 1d       	adc	r26, r1
     962:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     964:	20 93 02 04 	sts	0x0402, r18
	timer0_millis = m;
     968:	80 93 03 04 	sts	0x0403, r24
     96c:	90 93 04 04 	sts	0x0404, r25
     970:	a0 93 05 04 	sts	0x0405, r26
     974:	b0 93 06 04 	sts	0x0406, r27
	timer0_overflow_count++;
     978:	80 91 07 04 	lds	r24, 0x0407
     97c:	90 91 08 04 	lds	r25, 0x0408
     980:	a0 91 09 04 	lds	r26, 0x0409
     984:	b0 91 0a 04 	lds	r27, 0x040A
     988:	01 96       	adiw	r24, 0x01	; 1
     98a:	a1 1d       	adc	r26, r1
     98c:	b1 1d       	adc	r27, r1
     98e:	80 93 07 04 	sts	0x0407, r24
     992:	90 93 08 04 	sts	0x0408, r25
     996:	a0 93 09 04 	sts	0x0409, r26
     99a:	b0 93 0a 04 	sts	0x040A, r27
}
     99e:	bf 91       	pop	r27
     9a0:	af 91       	pop	r26
     9a2:	9f 91       	pop	r25
     9a4:	8f 91       	pop	r24
     9a6:	3f 91       	pop	r19
     9a8:	2f 91       	pop	r18
     9aa:	0f 90       	pop	r0
     9ac:	0f be       	out	0x3f, r0	; 63
     9ae:	0f 90       	pop	r0
     9b0:	1f 90       	pop	r1
     9b2:	18 95       	reti

000009b4 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     9b4:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     9b6:	f8 94       	cli
	m = timer0_millis;
     9b8:	60 91 03 04 	lds	r22, 0x0403
     9bc:	70 91 04 04 	lds	r23, 0x0404
     9c0:	80 91 05 04 	lds	r24, 0x0405
     9c4:	90 91 06 04 	lds	r25, 0x0406
	SREG = oldSREG;
     9c8:	2f bf       	out	0x3f, r18	; 63

	return m;
}
     9ca:	08 95       	ret

000009cc <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     9cc:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     9ce:	f8 94       	cli
	m = timer0_overflow_count;
     9d0:	80 91 07 04 	lds	r24, 0x0407
     9d4:	90 91 08 04 	lds	r25, 0x0408
     9d8:	a0 91 09 04 	lds	r26, 0x0409
     9dc:	b0 91 0a 04 	lds	r27, 0x040A
#if defined(TCNT0)
	t = TCNT0;
     9e0:	26 b5       	in	r18, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     9e2:	a8 9b       	sbis	0x15, 0	; 21
     9e4:	05 c0       	rjmp	.+10     	; 0x9f0 <micros+0x24>
     9e6:	2f 3f       	cpi	r18, 0xFF	; 255
     9e8:	19 f0       	breq	.+6      	; 0x9f0 <micros+0x24>
		m++;
     9ea:	01 96       	adiw	r24, 0x01	; 1
     9ec:	a1 1d       	adc	r26, r1
     9ee:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     9f0:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     9f2:	66 27       	eor	r22, r22
     9f4:	78 2f       	mov	r23, r24
     9f6:	89 2f       	mov	r24, r25
     9f8:	9a 2f       	mov	r25, r26
     9fa:	62 0f       	add	r22, r18
     9fc:	71 1d       	adc	r23, r1
     9fe:	81 1d       	adc	r24, r1
     a00:	91 1d       	adc	r25, r1
     a02:	43 e0       	ldi	r20, 0x03	; 3
     a04:	66 0f       	add	r22, r22
     a06:	77 1f       	adc	r23, r23
     a08:	88 1f       	adc	r24, r24
     a0a:	99 1f       	adc	r25, r25
     a0c:	4a 95       	dec	r20
     a0e:	d1 f7       	brne	.-12     	; 0xa04 <micros+0x38>
}
     a10:	08 95       	ret

00000a12 <delay>:

void delay(unsigned long ms)
{
     a12:	cf 92       	push	r12
     a14:	df 92       	push	r13
     a16:	ef 92       	push	r14
     a18:	ff 92       	push	r15
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	6b 01       	movw	r12, r22
     a20:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
     a22:	0e 94 e6 04 	call	0x9cc	; 0x9cc <micros>
     a26:	eb 01       	movw	r28, r22

	while (ms > 0) {
     a28:	c1 14       	cp	r12, r1
     a2a:	d1 04       	cpc	r13, r1
     a2c:	e1 04       	cpc	r14, r1
     a2e:	f1 04       	cpc	r15, r1
     a30:	89 f0       	breq	.+34     	; 0xa54 <delay+0x42>
		yield();
     a32:	0e 94 6f 02 	call	0x4de	; 0x4de <yield>
		if (((uint16_t)micros() - start) >= 1000) {
     a36:	0e 94 e6 04 	call	0x9cc	; 0x9cc <micros>
     a3a:	6c 1b       	sub	r22, r28
     a3c:	7d 0b       	sbc	r23, r29
     a3e:	68 3e       	cpi	r22, 0xE8	; 232
     a40:	73 40       	sbci	r23, 0x03	; 3
     a42:	90 f3       	brcs	.-28     	; 0xa28 <delay+0x16>
			ms--;
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	c8 1a       	sub	r12, r24
     a48:	d1 08       	sbc	r13, r1
     a4a:	e1 08       	sbc	r14, r1
     a4c:	f1 08       	sbc	r15, r1
			start += 1000;
     a4e:	c8 51       	subi	r28, 0x18	; 24
     a50:	dc 4f       	sbci	r29, 0xFC	; 252
     a52:	ea cf       	rjmp	.-44     	; 0xa28 <delay+0x16>
		}
	}
}
     a54:	df 91       	pop	r29
     a56:	cf 91       	pop	r28
     a58:	ff 90       	pop	r15
     a5a:	ef 90       	pop	r14
     a5c:	df 90       	pop	r13
     a5e:	cf 90       	pop	r12
     a60:	08 95       	ret

00000a62 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     a62:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     a64:	84 b5       	in	r24, 0x24	; 36
     a66:	82 60       	ori	r24, 0x02	; 2
     a68:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     a6a:	84 b5       	in	r24, 0x24	; 36
     a6c:	81 60       	ori	r24, 0x01	; 1
     a6e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     a70:	85 b5       	in	r24, 0x25	; 37
     a72:	82 60       	ori	r24, 0x02	; 2
     a74:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     a76:	85 b5       	in	r24, 0x25	; 37
     a78:	81 60       	ori	r24, 0x01	; 1
     a7a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     a7c:	ee e6       	ldi	r30, 0x6E	; 110
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	80 81       	ld	r24, Z
     a82:	81 60       	ori	r24, 0x01	; 1
     a84:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     a86:	e1 e8       	ldi	r30, 0x81	; 129
     a88:	f0 e0       	ldi	r31, 0x00	; 0
     a8a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     a8c:	80 81       	ld	r24, Z
     a8e:	82 60       	ori	r24, 0x02	; 2
     a90:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     a92:	80 81       	ld	r24, Z
     a94:	81 60       	ori	r24, 0x01	; 1
     a96:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     a98:	e0 e8       	ldi	r30, 0x80	; 128
     a9a:	f0 e0       	ldi	r31, 0x00	; 0
     a9c:	80 81       	ld	r24, Z
     a9e:	81 60       	ori	r24, 0x01	; 1
     aa0:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     aa2:	e1 eb       	ldi	r30, 0xB1	; 177
     aa4:	f0 e0       	ldi	r31, 0x00	; 0
     aa6:	80 81       	ld	r24, Z
     aa8:	84 60       	ori	r24, 0x04	; 4
     aaa:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     aac:	e0 eb       	ldi	r30, 0xB0	; 176
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	80 81       	ld	r24, Z
     ab2:	81 60       	ori	r24, 0x01	; 1
     ab4:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
     ab6:	ea e7       	ldi	r30, 0x7A	; 122
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	80 81       	ld	r24, Z
     abc:	84 60       	ori	r24, 0x04	; 4
     abe:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
     ac0:	80 81       	ld	r24, Z
     ac2:	82 60       	ori	r24, 0x02	; 2
     ac4:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
     ac6:	80 81       	ld	r24, Z
     ac8:	81 60       	ori	r24, 0x01	; 1
     aca:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     acc:	80 81       	ld	r24, Z
     ace:	80 68       	ori	r24, 0x80	; 128
     ad0:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     ad2:	10 92 c1 00 	sts	0x00C1, r1
     ad6:	08 95       	ret

00000ad8 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
     ad8:	8e 30       	cpi	r24, 0x0E	; 14
     ada:	08 f0       	brcs	.+2      	; 0xade <analogRead+0x6>
     adc:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
     ade:	87 70       	andi	r24, 0x07	; 7
     ae0:	20 91 07 01 	lds	r18, 0x0107
     ae4:	90 e4       	ldi	r25, 0x40	; 64
     ae6:	29 9f       	mul	r18, r25
     ae8:	90 01       	movw	r18, r0
     aea:	11 24       	eor	r1, r1
     aec:	82 2b       	or	r24, r18
     aee:	80 93 7c 00 	sts	0x007C, r24
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
     af2:	80 91 7a 00 	lds	r24, 0x007A
     af6:	80 64       	ori	r24, 0x40	; 64
     af8:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
     afc:	80 91 7a 00 	lds	r24, 0x007A
     b00:	86 fd       	sbrc	r24, 6
     b02:	fc cf       	rjmp	.-8      	; 0xafc <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
     b04:	80 91 78 00 	lds	r24, 0x0078
	high = ADCH;
     b08:	20 91 79 00 	lds	r18, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
     b0c:	90 e0       	ldi	r25, 0x00	; 0
}
     b0e:	92 2b       	or	r25, r18
     b10:	08 95       	ret

00000b12 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     b12:	83 30       	cpi	r24, 0x03	; 3
     b14:	81 f0       	breq	.+32     	; 0xb36 <turnOffPWM+0x24>
     b16:	28 f4       	brcc	.+10     	; 0xb22 <turnOffPWM+0x10>
     b18:	81 30       	cpi	r24, 0x01	; 1
     b1a:	99 f0       	breq	.+38     	; 0xb42 <turnOffPWM+0x30>
     b1c:	82 30       	cpi	r24, 0x02	; 2
     b1e:	a1 f0       	breq	.+40     	; 0xb48 <turnOffPWM+0x36>
     b20:	08 95       	ret
     b22:	87 30       	cpi	r24, 0x07	; 7
     b24:	a9 f0       	breq	.+42     	; 0xb50 <turnOffPWM+0x3e>
     b26:	88 30       	cpi	r24, 0x08	; 8
     b28:	b9 f0       	breq	.+46     	; 0xb58 <turnOffPWM+0x46>
     b2a:	84 30       	cpi	r24, 0x04	; 4
     b2c:	d1 f4       	brne	.+52     	; 0xb62 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     b2e:	80 91 80 00 	lds	r24, 0x0080
     b32:	8f 7d       	andi	r24, 0xDF	; 223
     b34:	03 c0       	rjmp	.+6      	; 0xb3c <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     b36:	80 91 80 00 	lds	r24, 0x0080
     b3a:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     b3c:	80 93 80 00 	sts	0x0080, r24
     b40:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     b42:	84 b5       	in	r24, 0x24	; 36
     b44:	8f 77       	andi	r24, 0x7F	; 127
     b46:	02 c0       	rjmp	.+4      	; 0xb4c <turnOffPWM+0x3a>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     b48:	84 b5       	in	r24, 0x24	; 36
     b4a:	8f 7d       	andi	r24, 0xDF	; 223
     b4c:	84 bd       	out	0x24, r24	; 36
     b4e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     b50:	80 91 b0 00 	lds	r24, 0x00B0
     b54:	8f 77       	andi	r24, 0x7F	; 127
     b56:	03 c0       	rjmp	.+6      	; 0xb5e <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     b58:	80 91 b0 00 	lds	r24, 0x00B0
     b5c:	8f 7d       	andi	r24, 0xDF	; 223
     b5e:	80 93 b0 00 	sts	0x00B0, r24
     b62:	08 95       	ret

00000b64 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	fc 01       	movw	r30, r24
     b6c:	e3 58       	subi	r30, 0x83	; 131
     b6e:	ff 4f       	sbci	r31, 0xFF	; 255
     b70:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     b72:	fc 01       	movw	r30, r24
     b74:	ef 56       	subi	r30, 0x6F	; 111
     b76:	ff 4f       	sbci	r31, 0xFF	; 255
     b78:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     b7a:	88 23       	and	r24, r24
     b7c:	49 f1       	breq	.+82     	; 0xbd0 <pinMode+0x6c>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	fc 01       	movw	r30, r24
     b86:	e1 55       	subi	r30, 0x51	; 81
     b88:	ff 4f       	sbci	r31, 0xFF	; 255
     b8a:	a5 91       	lpm	r26, Z+
     b8c:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     b8e:	8b 55       	subi	r24, 0x5B	; 91
     b90:	9f 4f       	sbci	r25, 0xFF	; 255
     b92:	fc 01       	movw	r30, r24
     b94:	c5 91       	lpm	r28, Z+
     b96:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
		uint8_t oldSREG = SREG;
     b98:	9f b7       	in	r25, 0x3f	; 63

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
	out = portOutputRegister(port);

	if (mode == INPUT) { 
     b9a:	61 11       	cpse	r22, r1
     b9c:	08 c0       	rjmp	.+16     	; 0xbae <pinMode+0x4a>
		uint8_t oldSREG = SREG;
                cli();
     b9e:	f8 94       	cli
		*reg &= ~bit;
     ba0:	8c 91       	ld	r24, X
     ba2:	20 95       	com	r18
     ba4:	82 23       	and	r24, r18
     ba6:	8c 93       	st	X, r24
		*out &= ~bit;
     ba8:	88 81       	ld	r24, Y
     baa:	82 23       	and	r24, r18
     bac:	0a c0       	rjmp	.+20     	; 0xbc2 <pinMode+0x5e>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     bae:	62 30       	cpi	r22, 0x02	; 2
     bb0:	51 f4       	brne	.+20     	; 0xbc6 <pinMode+0x62>
		uint8_t oldSREG = SREG;
                cli();
     bb2:	f8 94       	cli
		*reg &= ~bit;
     bb4:	8c 91       	ld	r24, X
     bb6:	32 2f       	mov	r19, r18
     bb8:	30 95       	com	r19
     bba:	83 23       	and	r24, r19
     bbc:	8c 93       	st	X, r24
		*out |= bit;
     bbe:	88 81       	ld	r24, Y
     bc0:	82 2b       	or	r24, r18
     bc2:	88 83       	st	Y, r24
     bc4:	04 c0       	rjmp	.+8      	; 0xbce <pinMode+0x6a>
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
                cli();
     bc6:	f8 94       	cli
		*reg |= bit;
     bc8:	8c 91       	ld	r24, X
     bca:	82 2b       	or	r24, r18
     bcc:	8c 93       	st	X, r24
		SREG = oldSREG;
     bce:	9f bf       	out	0x3f, r25	; 63
	}
}
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	08 95       	ret

00000bd6 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     bd6:	0f 93       	push	r16
     bd8:	1f 93       	push	r17
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
     bde:	1f 92       	push	r1
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
     be4:	28 2f       	mov	r18, r24
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	f9 01       	movw	r30, r18
     bea:	e7 59       	subi	r30, 0x97	; 151
     bec:	ff 4f       	sbci	r31, 0xFF	; 255
     bee:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     bf0:	f9 01       	movw	r30, r18
     bf2:	e3 58       	subi	r30, 0x83	; 131
     bf4:	ff 4f       	sbci	r31, 0xFF	; 255
     bf6:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
     bf8:	f9 01       	movw	r30, r18
     bfa:	ef 56       	subi	r30, 0x6F	; 111
     bfc:	ff 4f       	sbci	r31, 0xFF	; 255
     bfe:	04 91       	lpm	r16, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     c00:	00 23       	and	r16, r16
     c02:	c9 f0       	breq	.+50     	; 0xc36 <digitalWrite+0x60>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     c04:	88 23       	and	r24, r24
     c06:	21 f0       	breq	.+8      	; 0xc10 <digitalWrite+0x3a>
     c08:	69 83       	std	Y+1, r22	; 0x01
     c0a:	0e 94 89 05 	call	0xb12	; 0xb12 <turnOffPWM>
     c0e:	69 81       	ldd	r22, Y+1	; 0x01

	out = portOutputRegister(port);
     c10:	e0 2f       	mov	r30, r16
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	ee 0f       	add	r30, r30
     c16:	ff 1f       	adc	r31, r31
     c18:	eb 55       	subi	r30, 0x5B	; 91
     c1a:	ff 4f       	sbci	r31, 0xFF	; 255
     c1c:	a5 91       	lpm	r26, Z+
     c1e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     c20:	9f b7       	in	r25, 0x3f	; 63
	cli();
     c22:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
     c24:	8c 91       	ld	r24, X
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
     c26:	61 11       	cpse	r22, r1
     c28:	03 c0       	rjmp	.+6      	; 0xc30 <digitalWrite+0x5a>
		*out &= ~bit;
     c2a:	10 95       	com	r17
     c2c:	81 23       	and	r24, r17
     c2e:	01 c0       	rjmp	.+2      	; 0xc32 <digitalWrite+0x5c>
	} else {
		*out |= bit;
     c30:	81 2b       	or	r24, r17
     c32:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
     c34:	9f bf       	out	0x3f, r25	; 63
}
     c36:	0f 90       	pop	r0
     c38:	df 91       	pop	r29
     c3a:	cf 91       	pop	r28
     c3c:	1f 91       	pop	r17
     c3e:	0f 91       	pop	r16
     c40:	08 95       	ret

00000c42 <_ZN6StringD1Ev>:
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	free(buffer);
     c42:	fc 01       	movw	r30, r24
     c44:	80 81       	ld	r24, Z
     c46:	91 81       	ldd	r25, Z+1	; 0x01
     c48:	0c 94 6d 12 	jmp	0x24da	; 0x24da <free>

00000c4c <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
     c52:	88 81       	ld	r24, Y
     c54:	99 81       	ldd	r25, Y+1	; 0x01
     c56:	00 97       	sbiw	r24, 0x00	; 0
     c58:	11 f0       	breq	.+4      	; 0xc5e <_ZN6String10invalidateEv+0x12>
     c5a:	0e 94 6d 12 	call	0x24da	; 0x24da <free>
	buffer = NULL;
     c5e:	19 82       	std	Y+1, r1	; 0x01
     c60:	18 82       	st	Y, r1
	capacity = len = 0;
     c62:	1d 82       	std	Y+5, r1	; 0x05
     c64:	1c 82       	std	Y+4, r1	; 0x04
     c66:	1b 82       	std	Y+3, r1	; 0x03
     c68:	1a 82       	std	Y+2, r1	; 0x02
}
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	08 95       	ret

00000c70 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
     c70:	0f 93       	push	r16
     c72:	1f 93       	push	r17
     c74:	cf 93       	push	r28
     c76:	df 93       	push	r29
     c78:	ec 01       	movw	r28, r24
     c7a:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     c7c:	6f 5f       	subi	r22, 0xFF	; 255
     c7e:	7f 4f       	sbci	r23, 0xFF	; 255
     c80:	88 81       	ld	r24, Y
     c82:	99 81       	ldd	r25, Y+1	; 0x01
     c84:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <realloc>
	if (newbuffer) {
     c88:	00 97       	sbiw	r24, 0x00	; 0
     c8a:	31 f0       	breq	.+12     	; 0xc98 <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
     c8c:	99 83       	std	Y+1, r25	; 0x01
     c8e:	88 83       	st	Y, r24
		capacity = maxStrLen;
     c90:	1b 83       	std	Y+3, r17	; 0x03
     c92:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	01 c0       	rjmp	.+2      	; 0xc9a <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
     c98:	80 e0       	ldi	r24, 0x00	; 0
}
     c9a:	df 91       	pop	r29
     c9c:	cf 91       	pop	r28
     c9e:	1f 91       	pop	r17
     ca0:	0f 91       	pop	r16
     ca2:	08 95       	ret

00000ca4 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
     ca4:	cf 93       	push	r28
     ca6:	df 93       	push	r29
     ca8:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
     caa:	88 81       	ld	r24, Y
     cac:	99 81       	ldd	r25, Y+1	; 0x01
     cae:	89 2b       	or	r24, r25
     cb0:	29 f0       	breq	.+10     	; 0xcbc <_ZN6String7reserveEj+0x18>
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	9b 81       	ldd	r25, Y+3	; 0x03
     cb6:	86 17       	cp	r24, r22
     cb8:	97 07       	cpc	r25, r23
     cba:	60 f4       	brcc	.+24     	; 0xcd4 <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
     cbc:	ce 01       	movw	r24, r28
     cbe:	0e 94 38 06 	call	0xc70	; 0xc70 <_ZN6String12changeBufferEj>
     cc2:	88 23       	and	r24, r24
     cc4:	41 f0       	breq	.+16     	; 0xcd6 <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
     cc6:	8c 81       	ldd	r24, Y+4	; 0x04
     cc8:	9d 81       	ldd	r25, Y+5	; 0x05
     cca:	89 2b       	or	r24, r25
     ccc:	19 f4       	brne	.+6      	; 0xcd4 <_ZN6String7reserveEj+0x30>
     cce:	e8 81       	ld	r30, Y
     cd0:	f9 81       	ldd	r31, Y+1	; 0x01
     cd2:	10 82       	st	Z, r1
     cd4:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
     cd6:	df 91       	pop	r29
     cd8:	cf 91       	pop	r28
     cda:	08 95       	ret

00000cdc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
     cdc:	ef 92       	push	r14
     cde:	ff 92       	push	r15
     ce0:	0f 93       	push	r16
     ce2:	1f 93       	push	r17
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	ec 01       	movw	r28, r24
     cea:	7b 01       	movw	r14, r22
     cec:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
     cee:	ba 01       	movw	r22, r20
     cf0:	0e 94 52 06 	call	0xca4	; 0xca4 <_ZN6String7reserveEj>
     cf4:	81 11       	cpse	r24, r1
     cf6:	04 c0       	rjmp	.+8      	; 0xd00 <_ZN6String4copyEPKcj+0x24>
		invalidate();
     cf8:	ce 01       	movw	r24, r28
     cfa:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN6String10invalidateEv>
		return *this;
     cfe:	07 c0       	rjmp	.+14     	; 0xd0e <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
     d00:	1d 83       	std	Y+5, r17	; 0x05
     d02:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
     d04:	b7 01       	movw	r22, r14
     d06:	88 81       	ld	r24, Y
     d08:	99 81       	ldd	r25, Y+1	; 0x01
     d0a:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <strcpy>
	return *this;
}
     d0e:	ce 01       	movw	r24, r28
     d10:	df 91       	pop	r29
     d12:	cf 91       	pop	r28
     d14:	1f 91       	pop	r17
     d16:	0f 91       	pop	r16
     d18:	ff 90       	pop	r15
     d1a:	ef 90       	pop	r14
     d1c:	08 95       	ret

00000d1e <_ZN6StringC1EPKc>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
     d1e:	fc 01       	movw	r30, r24
     d20:	11 82       	std	Z+1, r1	; 0x01
     d22:	10 82       	st	Z, r1
	capacity = 0;
     d24:	13 82       	std	Z+3, r1	; 0x03
     d26:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
     d28:	15 82       	std	Z+5, r1	; 0x05
     d2a:	14 82       	std	Z+4, r1	; 0x04
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
     d2c:	61 15       	cp	r22, r1
     d2e:	71 05       	cpc	r23, r1
     d30:	59 f0       	breq	.+22     	; 0xd48 <_ZN6StringC1EPKc+0x2a>
     d32:	fb 01       	movw	r30, r22
     d34:	01 90       	ld	r0, Z+
     d36:	00 20       	and	r0, r0
     d38:	e9 f7       	brne	.-6      	; 0xd34 <_ZN6StringC1EPKc+0x16>
     d3a:	af 01       	movw	r20, r30
     d3c:	41 50       	subi	r20, 0x01	; 1
     d3e:	51 09       	sbc	r21, r1
     d40:	46 1b       	sub	r20, r22
     d42:	57 0b       	sbc	r21, r23
     d44:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <_ZN6String4copyEPKcj>
     d48:	08 95       	ret

00000d4a <_ZN6StringaSERKS_>:
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
     d4a:	cf 93       	push	r28
     d4c:	df 93       	push	r29
     d4e:	ec 01       	movw	r28, r24
     d50:	fb 01       	movw	r30, r22
	if (this == &rhs) return *this;
     d52:	86 17       	cp	r24, r22
     d54:	97 07       	cpc	r25, r23
     d56:	61 f0       	breq	.+24     	; 0xd70 <_ZN6StringaSERKS_+0x26>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
     d58:	60 81       	ld	r22, Z
     d5a:	71 81       	ldd	r23, Z+1	; 0x01
     d5c:	61 15       	cp	r22, r1
     d5e:	71 05       	cpc	r23, r1
     d60:	29 f0       	breq	.+10     	; 0xd6c <_ZN6StringaSERKS_+0x22>
     d62:	44 81       	ldd	r20, Z+4	; 0x04
     d64:	55 81       	ldd	r21, Z+5	; 0x05
     d66:	0e 94 6e 06 	call	0xcdc	; 0xcdc <_ZN6String4copyEPKcj>
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <_ZN6StringaSERKS_+0x26>
	else invalidate();
     d6c:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN6String10invalidateEv>
	
	return *this;
}
     d70:	ce 01       	movw	r24, r28
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	08 95       	ret

00000d78 <_ZN6StringC1ERKS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
     d78:	fc 01       	movw	r30, r24
     d7a:	11 82       	std	Z+1, r1	; 0x01
     d7c:	10 82       	st	Z, r1
	capacity = 0;
     d7e:	13 82       	std	Z+3, r1	; 0x03
     d80:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
     d82:	15 82       	std	Z+5, r1	; 0x05
     d84:	14 82       	std	Z+4, r1	; 0x04
}

String::String(const String &value)
{
	init();
	*this = value;
     d86:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <_ZN6StringaSERKS_>

00000d8a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
     d8a:	cf 93       	push	r28
     d8c:	df 93       	push	r29
     d8e:	ec 01       	movw	r28, r24
	if (cstr) copy(cstr, strlen(cstr));
     d90:	61 15       	cp	r22, r1
     d92:	71 05       	cpc	r23, r1
     d94:	61 f0       	breq	.+24     	; 0xdae <_ZN6StringaSEPKc+0x24>
     d96:	fb 01       	movw	r30, r22
     d98:	01 90       	ld	r0, Z+
     d9a:	00 20       	and	r0, r0
     d9c:	e9 f7       	brne	.-6      	; 0xd98 <_ZN6StringaSEPKc+0xe>
     d9e:	af 01       	movw	r20, r30
     da0:	41 50       	subi	r20, 0x01	; 1
     da2:	51 09       	sbc	r21, r1
     da4:	46 1b       	sub	r20, r22
     da6:	57 0b       	sbc	r21, r23
     da8:	0e 94 6e 06 	call	0xcdc	; 0xcdc <_ZN6String4copyEPKcj>
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <_ZN6StringaSEPKc+0x28>
	else invalidate();
     dae:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN6String10invalidateEv>
	
	return *this;
}
     db2:	ce 01       	movw	r24, r28
     db4:	df 91       	pop	r29
     db6:	cf 91       	pop	r28
     db8:	08 95       	ret

00000dba <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
     dba:	ef 92       	push	r14
     dbc:	ff 92       	push	r15
     dbe:	0f 93       	push	r16
     dc0:	1f 93       	push	r17
     dc2:	cf 93       	push	r28
     dc4:	df 93       	push	r29
     dc6:	ec 01       	movw	r28, r24
     dc8:	7b 01       	movw	r14, r22
	unsigned int newlen = len + length;
     dca:	0c 81       	ldd	r16, Y+4	; 0x04
     dcc:	1d 81       	ldd	r17, Y+5	; 0x05
	if (!cstr) return 0;
     dce:	61 15       	cp	r22, r1
     dd0:	71 05       	cpc	r23, r1
     dd2:	11 f4       	brne	.+4      	; 0xdd8 <_ZN6String6concatEPKcj+0x1e>
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	16 c0       	rjmp	.+44     	; 0xe04 <_ZN6String6concatEPKcj+0x4a>
	if (length == 0) return 1;
     dd8:	41 15       	cp	r20, r1
     dda:	51 05       	cpc	r21, r1
     ddc:	91 f0       	breq	.+36     	; 0xe02 <_ZN6String6concatEPKcj+0x48>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
     dde:	04 0f       	add	r16, r20
     de0:	15 1f       	adc	r17, r21
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
     de2:	b8 01       	movw	r22, r16
     de4:	0e 94 52 06 	call	0xca4	; 0xca4 <_ZN6String7reserveEj>
     de8:	88 23       	and	r24, r24
     dea:	a1 f3       	breq	.-24     	; 0xdd4 <_ZN6String6concatEPKcj+0x1a>
	strcpy(buffer + len, cstr);
     dec:	28 81       	ld	r18, Y
     dee:	39 81       	ldd	r19, Y+1	; 0x01
     df0:	8c 81       	ldd	r24, Y+4	; 0x04
     df2:	9d 81       	ldd	r25, Y+5	; 0x05
     df4:	b7 01       	movw	r22, r14
     df6:	82 0f       	add	r24, r18
     df8:	93 1f       	adc	r25, r19
     dfa:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <strcpy>
	len = newlen;
     dfe:	1d 83       	std	Y+5, r17	; 0x05
     e00:	0c 83       	std	Y+4, r16	; 0x04

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
     e02:	81 e0       	ldi	r24, 0x01	; 1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
     e04:	df 91       	pop	r29
     e06:	cf 91       	pop	r28
     e08:	1f 91       	pop	r17
     e0a:	0f 91       	pop	r16
     e0c:	ff 90       	pop	r15
     e0e:	ef 90       	pop	r14
     e10:	08 95       	ret

00000e12 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
     e12:	61 15       	cp	r22, r1
     e14:	71 05       	cpc	r23, r1
     e16:	59 f0       	breq	.+22     	; 0xe2e <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
     e18:	fb 01       	movw	r30, r22
     e1a:	01 90       	ld	r0, Z+
     e1c:	00 20       	and	r0, r0
     e1e:	e9 f7       	brne	.-6      	; 0xe1a <_ZN6String6concatEPKc+0x8>
     e20:	af 01       	movw	r20, r30
     e22:	41 50       	subi	r20, 0x01	; 1
     e24:	51 09       	sbc	r21, r1
     e26:	46 1b       	sub	r20, r22
     e28:	57 0b       	sbc	r21, r23
     e2a:	0c 94 dd 06 	jmp	0xdba	; 0xdba <_ZN6String6concatEPKcj>
}
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	08 95       	ret

00000e32 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
     e32:	cf 93       	push	r28
     e34:	df 93       	push	r29
     e36:	00 d0       	rcall	.+0      	; 0xe38 <_ZN6String6concatEc+0x6>
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
	char buf[2];
	buf[0] = c;
     e3c:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
     e3e:	1a 82       	std	Y+2, r1	; 0x02
	return concat(buf, 1);
     e40:	41 e0       	ldi	r20, 0x01	; 1
     e42:	50 e0       	ldi	r21, 0x00	; 0
     e44:	be 01       	movw	r22, r28
     e46:	6f 5f       	subi	r22, 0xFF	; 255
     e48:	7f 4f       	sbci	r23, 0xFF	; 255
     e4a:	0e 94 dd 06 	call	0xdba	; 0xdba <_ZN6String6concatEPKcj>
}
     e4e:	0f 90       	pop	r0
     e50:	0f 90       	pop	r0
     e52:	df 91       	pop	r29
     e54:	cf 91       	pop	r28
     e56:	08 95       	ret

00000e58 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
     e58:	cf 93       	push	r28
     e5a:	df 93       	push	r29
     e5c:	ec 01       	movw	r28, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
     e5e:	fb 01       	movw	r30, r22
     e60:	44 81       	ldd	r20, Z+4	; 0x04
     e62:	55 81       	ldd	r21, Z+5	; 0x05
     e64:	60 81       	ld	r22, Z
     e66:	71 81       	ldd	r23, Z+1	; 0x01
     e68:	0e 94 dd 06 	call	0xdba	; 0xdba <_ZN6String6concatEPKcj>
     e6c:	81 11       	cpse	r24, r1
     e6e:	03 c0       	rjmp	.+6      	; 0xe76 <_ZplRK15StringSumHelperRK6String+0x1e>
     e70:	ce 01       	movw	r24, r28
     e72:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN6String10invalidateEv>
	return a;
}
     e76:	ce 01       	movw	r24, r28
     e78:	df 91       	pop	r29
     e7a:	cf 91       	pop	r28
     e7c:	08 95       	ret

00000e7e <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
     e82:	ec 01       	movw	r28, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
     e84:	61 15       	cp	r22, r1
     e86:	71 05       	cpc	r23, r1
     e88:	69 f0       	breq	.+26     	; 0xea4 <_ZplRK15StringSumHelperPKc+0x26>
     e8a:	fb 01       	movw	r30, r22
     e8c:	01 90       	ld	r0, Z+
     e8e:	00 20       	and	r0, r0
     e90:	e9 f7       	brne	.-6      	; 0xe8c <_ZplRK15StringSumHelperPKc+0xe>
     e92:	af 01       	movw	r20, r30
     e94:	41 50       	subi	r20, 0x01	; 1
     e96:	51 09       	sbc	r21, r1
     e98:	46 1b       	sub	r20, r22
     e9a:	57 0b       	sbc	r21, r23
     e9c:	0e 94 dd 06 	call	0xdba	; 0xdba <_ZN6String6concatEPKcj>
     ea0:	81 11       	cpse	r24, r1
     ea2:	03 c0       	rjmp	.+6      	; 0xeaa <_ZplRK15StringSumHelperPKc+0x2c>
     ea4:	ce 01       	movw	r24, r28
     ea6:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN6String10invalidateEv>
	return a;
}
     eaa:	ce 01       	movw	r24, r28
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	08 95       	ret

00000eb2 <_ZNK6String6equalsEPKc>:
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
     eb2:	fc 01       	movw	r30, r24
     eb4:	24 81       	ldd	r18, Z+4	; 0x04
     eb6:	35 81       	ldd	r19, Z+5	; 0x05
     eb8:	23 2b       	or	r18, r19
     eba:	31 f4       	brne	.+12     	; 0xec8 <_ZNK6String6equalsEPKc+0x16>
     ebc:	21 e0       	ldi	r18, 0x01	; 1
     ebe:	61 15       	cp	r22, r1
     ec0:	71 05       	cpc	r23, r1
     ec2:	a1 f0       	breq	.+40     	; 0xeec <_ZNK6String6equalsEPKc+0x3a>
     ec4:	fb 01       	movw	r30, r22
     ec6:	08 c0       	rjmp	.+16     	; 0xed8 <_ZNK6String6equalsEPKc+0x26>
     ec8:	fc 01       	movw	r30, r24
     eca:	80 81       	ld	r24, Z
     ecc:	91 81       	ldd	r25, Z+1	; 0x01
	if (cstr == NULL) return buffer[0] == 0;
     ece:	61 15       	cp	r22, r1
     ed0:	71 05       	cpc	r23, r1
     ed2:	31 f4       	brne	.+12     	; 0xee0 <_ZNK6String6equalsEPKc+0x2e>
     ed4:	21 e0       	ldi	r18, 0x01	; 1
     ed6:	fc 01       	movw	r30, r24
     ed8:	80 81       	ld	r24, Z
     eda:	88 23       	and	r24, r24
     edc:	39 f0       	breq	.+14     	; 0xeec <_ZNK6String6equalsEPKc+0x3a>
     ede:	05 c0       	rjmp	.+10     	; 0xeea <_ZNK6String6equalsEPKc+0x38>
	return strcmp(buffer, cstr) == 0;
     ee0:	0e 94 d7 13 	call	0x27ae	; 0x27ae <strcmp>
     ee4:	21 e0       	ldi	r18, 0x01	; 1
     ee6:	89 2b       	or	r24, r25
     ee8:	09 f0       	breq	.+2      	; 0xeec <_ZNK6String6equalsEPKc+0x3a>
     eea:	20 e0       	ldi	r18, 0x00	; 0
}
     eec:	82 2f       	mov	r24, r18
     eee:	08 95       	ret

00000ef0 <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
     ef0:	fa 01       	movw	r30, r20
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
     ef2:	db 01       	movw	r26, r22
     ef4:	14 96       	adiw	r26, 0x04	; 4
     ef6:	4d 91       	ld	r20, X+
     ef8:	5c 91       	ld	r21, X
     efa:	15 97       	sbiw	r26, 0x05	; 5
     efc:	dc 01       	movw	r26, r24
     efe:	14 96       	adiw	r26, 0x04	; 4
     f00:	2d 91       	ld	r18, X+
     f02:	3c 91       	ld	r19, X
     f04:	15 97       	sbiw	r26, 0x05	; 5
     f06:	24 1b       	sub	r18, r20
     f08:	35 0b       	sbc	r19, r21
     f0a:	2e 17       	cp	r18, r30
     f0c:	3f 07       	cpc	r19, r31
     f0e:	88 f0       	brcs	.+34     	; 0xf32 <_ZNK6String10startsWithERKS_j+0x42>
     f10:	8d 91       	ld	r24, X+
     f12:	9c 91       	ld	r25, X
     f14:	00 97       	sbiw	r24, 0x00	; 0
     f16:	69 f0       	breq	.+26     	; 0xf32 <_ZNK6String10startsWithERKS_j+0x42>
     f18:	db 01       	movw	r26, r22
     f1a:	6d 91       	ld	r22, X+
     f1c:	7c 91       	ld	r23, X
     f1e:	61 15       	cp	r22, r1
     f20:	71 05       	cpc	r23, r1
     f22:	39 f0       	breq	.+14     	; 0xf32 <_ZNK6String10startsWithERKS_j+0x42>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
     f24:	8e 0f       	add	r24, r30
     f26:	9f 1f       	adc	r25, r31
     f28:	0e 94 e7 13 	call	0x27ce	; 0x27ce <strncmp>
     f2c:	21 e0       	ldi	r18, 0x01	; 1
     f2e:	89 2b       	or	r24, r25
     f30:	09 f0       	breq	.+2      	; 0xf34 <_ZNK6String10startsWithERKS_j+0x44>
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
     f32:	20 e0       	ldi	r18, 0x00	; 0
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}
     f34:	82 2f       	mov	r24, r18
     f36:	08 95       	ret

00000f38 <_ZNK6String10startsWithERKS_>:
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
     f38:	fc 01       	movw	r30, r24
     f3a:	44 81       	ldd	r20, Z+4	; 0x04
     f3c:	55 81       	ldd	r21, Z+5	; 0x05
     f3e:	fb 01       	movw	r30, r22
     f40:	24 81       	ldd	r18, Z+4	; 0x04
     f42:	35 81       	ldd	r19, Z+5	; 0x05
     f44:	42 17       	cp	r20, r18
     f46:	53 07       	cpc	r21, r19
     f48:	20 f0       	brcs	.+8      	; 0xf52 <_ZNK6String10startsWithERKS_+0x1a>
	return startsWith(s2, 0);
     f4a:	40 e0       	ldi	r20, 0x00	; 0
     f4c:	50 e0       	ldi	r21, 0x00	; 0
     f4e:	0c 94 78 07 	jmp	0xef0	; 0xef0 <_ZNK6String10startsWithERKS_j>
}
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	08 95       	ret

00000f56 <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
     f56:	fc 01       	movw	r30, r24
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
     f58:	84 81       	ldd	r24, Z+4	; 0x04
     f5a:	95 81       	ldd	r25, Z+5	; 0x05
     f5c:	db 01       	movw	r26, r22
     f5e:	14 96       	adiw	r26, 0x04	; 4
     f60:	4d 91       	ld	r20, X+
     f62:	5c 91       	ld	r21, X
     f64:	15 97       	sbiw	r26, 0x05	; 5
     f66:	84 17       	cp	r24, r20
     f68:	95 07       	cpc	r25, r21
     f6a:	98 f0       	brcs	.+38     	; 0xf92 <_ZNK6String8endsWithERKS_+0x3c>
     f6c:	20 81       	ld	r18, Z
     f6e:	31 81       	ldd	r19, Z+1	; 0x01
     f70:	21 15       	cp	r18, r1
     f72:	31 05       	cpc	r19, r1
     f74:	71 f0       	breq	.+28     	; 0xf92 <_ZNK6String8endsWithERKS_+0x3c>
     f76:	6d 91       	ld	r22, X+
     f78:	7c 91       	ld	r23, X
     f7a:	61 15       	cp	r22, r1
     f7c:	71 05       	cpc	r23, r1
     f7e:	49 f0       	breq	.+18     	; 0xf92 <_ZNK6String8endsWithERKS_+0x3c>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
     f80:	84 1b       	sub	r24, r20
     f82:	95 0b       	sbc	r25, r21
     f84:	82 0f       	add	r24, r18
     f86:	93 1f       	adc	r25, r19
     f88:	0e 94 d7 13 	call	0x27ae	; 0x27ae <strcmp>
     f8c:	21 e0       	ldi	r18, 0x01	; 1
     f8e:	89 2b       	or	r24, r25
     f90:	09 f0       	breq	.+2      	; 0xf94 <_ZNK6String8endsWithERKS_+0x3e>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
     f92:	20 e0       	ldi	r18, 0x00	; 0
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
}
     f94:	82 2f       	mov	r24, r18
     f96:	08 95       	ret

00000f98 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
     f98:	fc 01       	movw	r30, r24
     f9a:	24 81       	ldd	r18, Z+4	; 0x04
     f9c:	35 81       	ldd	r19, Z+5	; 0x05
     f9e:	62 17       	cp	r22, r18
     fa0:	73 07       	cpc	r23, r19
     fa2:	48 f4       	brcc	.+18     	; 0xfb6 <_ZNK6StringixEj+0x1e>
     fa4:	80 81       	ld	r24, Z
     fa6:	91 81       	ldd	r25, Z+1	; 0x01
     fa8:	00 97       	sbiw	r24, 0x00	; 0
     faa:	29 f0       	breq	.+10     	; 0xfb6 <_ZNK6StringixEj+0x1e>
	return buffer[index];
     fac:	fc 01       	movw	r30, r24
     fae:	e6 0f       	add	r30, r22
     fb0:	f7 1f       	adc	r31, r23
     fb2:	80 81       	ld	r24, Z
     fb4:	08 95       	ret
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
     fb6:	80 e0       	ldi	r24, 0x00	; 0
	return buffer[index];
}
     fb8:	08 95       	ret

00000fba <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
     fba:	0c 94 cc 07 	jmp	0xf98	; 0xf98 <_ZNK6StringixEj>

00000fbe <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
     fbe:	0f 93       	push	r16
     fc0:	1f 93       	push	r17
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	eb 01       	movw	r28, r22
	if (!bufsize || !buf) return;
     fc8:	41 15       	cp	r20, r1
     fca:	51 05       	cpc	r21, r1
     fcc:	e9 f0       	breq	.+58     	; 0x1008 <_ZNK6String8getBytesEPhjj+0x4a>
     fce:	20 97       	sbiw	r28, 0x00	; 0
     fd0:	d9 f0       	breq	.+54     	; 0x1008 <_ZNK6String8getBytesEPhjj+0x4a>
	if (index >= len) {
     fd2:	fc 01       	movw	r30, r24
     fd4:	64 81       	ldd	r22, Z+4	; 0x04
     fd6:	75 81       	ldd	r23, Z+5	; 0x05
     fd8:	26 17       	cp	r18, r22
     fda:	37 07       	cpc	r19, r23
     fdc:	a0 f4       	brcc	.+40     	; 0x1006 <_ZNK6String8getBytesEPhjj+0x48>
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
     fde:	62 1b       	sub	r22, r18
     fe0:	73 0b       	sbc	r23, r19
     fe2:	8a 01       	movw	r16, r20
     fe4:	01 50       	subi	r16, 0x01	; 1
     fe6:	11 09       	sbc	r17, r1
     fe8:	60 17       	cp	r22, r16
     fea:	71 07       	cpc	r23, r17
     fec:	08 f4       	brcc	.+2      	; 0xff0 <_ZNK6String8getBytesEPhjj+0x32>
     fee:	8b 01       	movw	r16, r22
	strncpy((char *)buf, buffer + index, n);
     ff0:	fc 01       	movw	r30, r24
     ff2:	60 81       	ld	r22, Z
     ff4:	71 81       	ldd	r23, Z+1	; 0x01
     ff6:	62 0f       	add	r22, r18
     ff8:	73 1f       	adc	r23, r19
     ffa:	a8 01       	movw	r20, r16
     ffc:	ce 01       	movw	r24, r28
     ffe:	0e 94 f5 13 	call	0x27ea	; 0x27ea <strncpy>
	buf[n] = 0;
    1002:	c0 0f       	add	r28, r16
    1004:	d1 1f       	adc	r29, r17
    1006:	18 82       	st	Y, r1
}
    1008:	df 91       	pop	r29
    100a:	cf 91       	pop	r28
    100c:	1f 91       	pop	r17
    100e:	0f 91       	pop	r16
    1010:	08 95       	ret

00001012 <_ZN6String6removeEjj>:
	// below will take care of truncating it at the end of the
	// string.
	remove(index, (unsigned int)-1);
}

void String::remove(unsigned int index, unsigned int count){
    1012:	cf 93       	push	r28
    1014:	df 93       	push	r29
    1016:	ec 01       	movw	r28, r24
    1018:	cb 01       	movw	r24, r22
	if (index >= len) { return; }
    101a:	2c 81       	ldd	r18, Y+4	; 0x04
    101c:	3d 81       	ldd	r19, Y+5	; 0x05
    101e:	62 17       	cp	r22, r18
    1020:	73 07       	cpc	r23, r19
    1022:	10 f5       	brcc	.+68     	; 0x1068 <_ZN6String6removeEjj+0x56>
	if (count <= 0) { return; }
    1024:	41 15       	cp	r20, r1
    1026:	51 05       	cpc	r21, r1
    1028:	f9 f0       	breq	.+62     	; 0x1068 <_ZN6String6removeEjj+0x56>
    102a:	b9 01       	movw	r22, r18
    102c:	68 1b       	sub	r22, r24
    102e:	79 0b       	sbc	r23, r25
    1030:	46 17       	cp	r20, r22
    1032:	57 07       	cpc	r21, r23
    1034:	08 f4       	brcc	.+2      	; 0x1038 <_ZN6String6removeEjj+0x26>
    1036:	ba 01       	movw	r22, r20
	if (count > len - index) { count = len - index; }
	char *writeTo = buffer + index;
    1038:	e8 81       	ld	r30, Y
    103a:	f9 81       	ldd	r31, Y+1	; 0x01
	len = len - count;
    103c:	26 1b       	sub	r18, r22
    103e:	37 0b       	sbc	r19, r23
    1040:	3d 83       	std	Y+5, r19	; 0x05
    1042:	2c 83       	std	Y+4, r18	; 0x04
	strncpy(writeTo, buffer + index + count,len - index);
    1044:	a9 01       	movw	r20, r18
    1046:	48 1b       	sub	r20, r24
    1048:	59 0b       	sbc	r21, r25
    104a:	68 0f       	add	r22, r24
    104c:	79 1f       	adc	r23, r25
    104e:	6e 0f       	add	r22, r30
    1050:	7f 1f       	adc	r23, r31
    1052:	8e 0f       	add	r24, r30
    1054:	9f 1f       	adc	r25, r31
    1056:	0e 94 f5 13 	call	0x27ea	; 0x27ea <strncpy>
	buffer[len] = 0;
    105a:	e8 81       	ld	r30, Y
    105c:	f9 81       	ldd	r31, Y+1	; 0x01
    105e:	8c 81       	ldd	r24, Y+4	; 0x04
    1060:	9d 81       	ldd	r25, Y+5	; 0x05
    1062:	e8 0f       	add	r30, r24
    1064:	f9 1f       	adc	r31, r25
    1066:	10 82       	st	Z, r1
}
    1068:	df 91       	pop	r29
    106a:	cf 91       	pop	r28
    106c:	08 95       	ret

0000106e <_ZN6String4trimEv>:
		*p = toupper(*p);
	}
}

void String::trim(void)
{
    106e:	af 92       	push	r10
    1070:	bf 92       	push	r11
    1072:	cf 92       	push	r12
    1074:	df 92       	push	r13
    1076:	ef 92       	push	r14
    1078:	ff 92       	push	r15
    107a:	0f 93       	push	r16
    107c:	1f 93       	push	r17
    107e:	cf 93       	push	r28
    1080:	df 93       	push	r29
    1082:	7c 01       	movw	r14, r24
	if (!buffer || len == 0) return;
    1084:	dc 01       	movw	r26, r24
    1086:	cd 90       	ld	r12, X+
    1088:	dc 90       	ld	r13, X
    108a:	11 97       	sbiw	r26, 0x01	; 1
    108c:	c1 14       	cp	r12, r1
    108e:	d1 04       	cpc	r13, r1
    1090:	e9 f1       	breq	.+122    	; 0x110c <_ZN6String4trimEv+0x9e>
    1092:	14 96       	adiw	r26, 0x04	; 4
    1094:	cd 91       	ld	r28, X+
    1096:	dc 91       	ld	r29, X
    1098:	15 97       	sbiw	r26, 0x05	; 5
    109a:	20 97       	sbiw	r28, 0x00	; 0
    109c:	b9 f1       	breq	.+110    	; 0x110c <_ZN6String4trimEv+0x9e>
    109e:	56 01       	movw	r10, r12
    10a0:	85 01       	movw	r16, r10
    10a2:	bf ef       	ldi	r27, 0xFF	; 255
    10a4:	ab 1a       	sub	r10, r27
    10a6:	bb 0a       	sbc	r11, r27
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    10a8:	f8 01       	movw	r30, r16
    10aa:	80 81       	ld	r24, Z
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	0e 94 c6 13 	call	0x278c	; 0x278c <isspace>
    10b2:	89 2b       	or	r24, r25
    10b4:	a9 f7       	brne	.-22     	; 0x10a0 <_ZN6String4trimEv+0x32>
	char *end = buffer + len - 1;
    10b6:	21 97       	sbiw	r28, 0x01	; 1
    10b8:	cc 0d       	add	r28, r12
    10ba:	dd 1d       	adc	r29, r13
	while (isspace(*end) && end >= begin) end--;
    10bc:	88 81       	ld	r24, Y
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	0e 94 c6 13 	call	0x278c	; 0x278c <isspace>
    10c4:	89 2b       	or	r24, r25
    10c6:	91 f4       	brne	.+36     	; 0x10ec <_ZN6String4trimEv+0x7e>
	len = end + 1 - begin;
    10c8:	ae 01       	movw	r20, r28
    10ca:	4f 5f       	subi	r20, 0xFF	; 255
    10cc:	5f 4f       	sbci	r21, 0xFF	; 255
    10ce:	40 1b       	sub	r20, r16
    10d0:	51 0b       	sbc	r21, r17
    10d2:	d7 01       	movw	r26, r14
    10d4:	15 96       	adiw	r26, 0x05	; 5
    10d6:	5c 93       	st	X, r21
    10d8:	4e 93       	st	-X, r20
    10da:	14 97       	sbiw	r26, 0x04	; 4
	if (begin > buffer) memcpy(buffer, begin, len);
    10dc:	c0 16       	cp	r12, r16
    10de:	d1 06       	cpc	r13, r17
    10e0:	50 f4       	brcc	.+20     	; 0x10f6 <_ZN6String4trimEv+0x88>
    10e2:	b8 01       	movw	r22, r16
    10e4:	c6 01       	movw	r24, r12
    10e6:	0e 94 ce 13 	call	0x279c	; 0x279c <memcpy>
    10ea:	05 c0       	rjmp	.+10     	; 0x10f6 <_ZN6String4trimEv+0x88>
{
	if (!buffer || len == 0) return;
	char *begin = buffer;
	while (isspace(*begin)) begin++;
	char *end = buffer + len - 1;
	while (isspace(*end) && end >= begin) end--;
    10ec:	c0 17       	cp	r28, r16
    10ee:	d1 07       	cpc	r29, r17
    10f0:	58 f3       	brcs	.-42     	; 0x10c8 <_ZN6String4trimEv+0x5a>
    10f2:	21 97       	sbiw	r28, 0x01	; 1
    10f4:	e3 cf       	rjmp	.-58     	; 0x10bc <_ZN6String4trimEv+0x4e>
	len = end + 1 - begin;
	if (begin > buffer) memcpy(buffer, begin, len);
	buffer[len] = 0;
    10f6:	d7 01       	movw	r26, r14
    10f8:	ed 91       	ld	r30, X+
    10fa:	fc 91       	ld	r31, X
    10fc:	11 97       	sbiw	r26, 0x01	; 1
    10fe:	14 96       	adiw	r26, 0x04	; 4
    1100:	8d 91       	ld	r24, X+
    1102:	9c 91       	ld	r25, X
    1104:	15 97       	sbiw	r26, 0x05	; 5
    1106:	e8 0f       	add	r30, r24
    1108:	f9 1f       	adc	r31, r25
    110a:	10 82       	st	Z, r1
}
    110c:	df 91       	pop	r29
    110e:	cf 91       	pop	r28
    1110:	1f 91       	pop	r17
    1112:	0f 91       	pop	r16
    1114:	ff 90       	pop	r15
    1116:	ef 90       	pop	r14
    1118:	df 90       	pop	r13
    111a:	cf 90       	pop	r12
    111c:	bf 90       	pop	r11
    111e:	af 90       	pop	r10
    1120:	08 95       	ret

00001122 <_ZN8BLEMate2C1EP6Stream>:
#include "SparkFun_BLEMate2.h"
#include "../Arduino/Arduino.h"

// Constructor. All we really need to do is link the user's Stream instance to
//  our local reference.
BLEMate2::BLEMate2(Stream *sp)
    1122:	cf 92       	push	r12
    1124:	df 92       	push	r13
    1126:	ef 92       	push	r14
    1128:	ff 92       	push	r15
    112a:	0f 93       	push	r16
    112c:	1f 93       	push	r17
    112e:	cf 93       	push	r28
    1130:	df 93       	push	r29
    1132:	ec 01       	movw	r28, r24
    1134:	7b 01       	movw	r14, r22
    1136:	8c 01       	movw	r16, r24
    1138:	0e 5f       	subi	r16, 0xFE	; 254
    113a:	1f 4f       	sbci	r17, 0xFF	; 255
    113c:	6c 01       	movw	r12, r24
    113e:	80 e2       	ldi	r24, 0x20	; 32
    1140:	c8 0e       	add	r12, r24
    1142:	d1 1c       	adc	r13, r1
    1144:	60 e2       	ldi	r22, 0x20	; 32
    1146:	71 e0       	ldi	r23, 0x01	; 1
    1148:	c8 01       	movw	r24, r16
    114a:	0e 94 8f 06 	call	0xd1e	; 0xd1e <_ZN6StringC1EPKc>
    114e:	0a 5f       	subi	r16, 0xFA	; 250
    1150:	1f 4f       	sbci	r17, 0xFF	; 255
    1152:	0c 15       	cp	r16, r12
    1154:	1d 05       	cpc	r17, r13
    1156:	b1 f7       	brne	.-20     	; 0x1144 <_ZN8BLEMate2C1EP6Stream+0x22>
{
  _serialPort = sp;
    1158:	fa a2       	std	Y+34, r15	; 0x22
    115a:	e9 a2       	std	Y+33, r14	; 0x21
  _numAddresses = 0;
    115c:	18 a2       	std	Y+32, r1	; 0x20
}
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	1f 91       	pop	r17
    1164:	0f 91       	pop	r16
    1166:	ff 90       	pop	r15
    1168:	ef 90       	pop	r14
    116a:	df 90       	pop	r13
    116c:	cf 90       	pop	r12
    116e:	08 95       	ret

00001170 <_ZN8BLEMate210knownStartEv>:

// Create a known state for the module to start from. If a partial command is
//  already in the module's buffer, we can purge it by sending an EOL to the
//  the module. If not, we'll just get an error.
BLEMate2::opResult BLEMate2::knownStart()
{
    1170:	8f 92       	push	r8
    1172:	9f 92       	push	r9
    1174:	af 92       	push	r10
    1176:	bf 92       	push	r11
    1178:	cf 92       	push	r12
    117a:	df 92       	push	r13
    117c:	ef 92       	push	r14
    117e:	ff 92       	push	r15
    1180:	0f 93       	push	r16
    1182:	1f 93       	push	r17
    1184:	cf 93       	push	r28
    1186:	df 93       	push	r29
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	62 97       	sbiw	r28, 0x12	; 18
    118e:	0f b6       	in	r0, 0x3f	; 63
    1190:	f8 94       	cli
    1192:	de bf       	out	0x3e, r29	; 62
    1194:	0f be       	out	0x3f, r0	; 63
    1196:	cd bf       	out	0x3d, r28	; 61
    1198:	8c 01       	movw	r16, r24
  String EOL = String("\n\r");
    119a:	6e e1       	ldi	r22, 0x1E	; 30
    119c:	71 e0       	ldi	r23, 0x01	; 1
    119e:	ce 01       	movw	r24, r28
    11a0:	0d 96       	adiw	r24, 0x0d	; 13
    11a2:	0e 94 8f 06 	call	0xd1e	; 0xd1e <_ZN6StringC1EPKc>
  String buffer = "";
    11a6:	60 e2       	ldi	r22, 0x20	; 32
    11a8:	71 e0       	ldi	r23, 0x01	; 1
    11aa:	ce 01       	movw	r24, r28
    11ac:	07 96       	adiw	r24, 0x07	; 7
    11ae:	0e 94 8f 06 	call	0xd1e	; 0xd1e <_ZN6StringC1EPKc>
  
  _serialPort->print("\r");
    11b2:	6f e1       	ldi	r22, 0x1F	; 31
    11b4:	71 e0       	ldi	r23, 0x01	; 1
    11b6:	d8 01       	movw	r26, r16
    11b8:	91 96       	adiw	r26, 0x21	; 33
    11ba:	8d 91       	ld	r24, X+
    11bc:	9c 91       	ld	r25, X
    11be:	92 97       	sbiw	r26, 0x22	; 34
    11c0:	0e 94 09 03 	call	0x612	; 0x612 <_ZN5Print5printEPKc>
  _serialPort->flush();
    11c4:	f8 01       	movw	r30, r16
    11c6:	81 a1       	ldd	r24, Z+33	; 0x21
    11c8:	92 a1       	ldd	r25, Z+34	; 0x22
    11ca:	dc 01       	movw	r26, r24
    11cc:	ed 91       	ld	r30, X+
    11ce:	fc 91       	ld	r31, X
    11d0:	02 84       	ldd	r0, Z+10	; 0x0a
    11d2:	f3 85       	ldd	r31, Z+11	; 0x0b
    11d4:	e0 2d       	mov	r30, r0
    11d6:	09 95       	icall
  
  // We're going to use the internal timer to track the elapsed time since we
  //  issued the reset. Bog-standard Arduino stuff.
  unsigned long startTime = millis();
    11d8:	0e 94 da 04 	call	0x9b4	; 0x9b4 <millis>
    11dc:	6b 01       	movw	r12, r22
    11de:	7c 01       	movw	r14, r24
  
  // This is our timeout loop. We're going to give our module 1s to come up
  //  with a new character, and return with a timeout failure otherwise.
  while (buffer.endsWith(EOL) != true)
    11e0:	be 01       	movw	r22, r28
    11e2:	63 5f       	subi	r22, 0xF3	; 243
    11e4:	7f 4f       	sbci	r23, 0xFF	; 255
    11e6:	ce 01       	movw	r24, r28
    11e8:	07 96       	adiw	r24, 0x07	; 7
    11ea:	0e 94 ab 07 	call	0xf56	; 0xf56 <_ZNK6String8endsWithERKS_>
    11ee:	81 30       	cpi	r24, 0x01	; 1
    11f0:	89 f1       	breq	.+98     	; 0x1254 <_ZN8BLEMate210knownStartEv+0xe4>
  {
    // Purge the serial data received from the module, along with any data in
    //  the buffer at the time this command was sent.
    if (_serialPort->available() > 0) 
    11f2:	f8 01       	movw	r30, r16
    11f4:	81 a1       	ldd	r24, Z+33	; 0x21
    11f6:	92 a1       	ldd	r25, Z+34	; 0x22
    11f8:	dc 01       	movw	r26, r24
    11fa:	ed 91       	ld	r30, X+
    11fc:	fc 91       	ld	r31, X
    11fe:	04 80       	ldd	r0, Z+4	; 0x04
    1200:	f5 81       	ldd	r31, Z+5	; 0x05
    1202:	e0 2d       	mov	r30, r0
    1204:	09 95       	icall
    1206:	18 16       	cp	r1, r24
    1208:	19 06       	cpc	r1, r25
    120a:	9c f4       	brge	.+38     	; 0x1232 <_ZN8BLEMate210knownStartEv+0xc2>
    {
      buffer.concat(char(_serialPort->read()));
    120c:	f8 01       	movw	r30, r16
    120e:	81 a1       	ldd	r24, Z+33	; 0x21
    1210:	92 a1       	ldd	r25, Z+34	; 0x22
    1212:	dc 01       	movw	r26, r24
    1214:	ed 91       	ld	r30, X+
    1216:	fc 91       	ld	r31, X
    1218:	06 80       	ldd	r0, Z+6	; 0x06
    121a:	f7 81       	ldd	r31, Z+7	; 0x07
    121c:	e0 2d       	mov	r30, r0
    121e:	09 95       	icall
    1220:	68 2f       	mov	r22, r24
    1222:	ce 01       	movw	r24, r28
    1224:	07 96       	adiw	r24, 0x07	; 7
    1226:	0e 94 19 07 	call	0xe32	; 0xe32 <_ZN6String6concatEc>
      startTime = millis();
    122a:	0e 94 da 04 	call	0x9b4	; 0x9b4 <millis>
    122e:	6b 01       	movw	r12, r22
    1230:	7c 01       	movw	r14, r24
    }
    if ((startTime + 1000) < millis()) return TIMEOUT_ERROR;
    1232:	0e 94 da 04 	call	0x9b4	; 0x9b4 <millis>
    1236:	46 01       	movw	r8, r12
    1238:	57 01       	movw	r10, r14
    123a:	b8 ee       	ldi	r27, 0xE8	; 232
    123c:	8b 0e       	add	r8, r27
    123e:	b3 e0       	ldi	r27, 0x03	; 3
    1240:	9b 1e       	adc	r9, r27
    1242:	a1 1c       	adc	r10, r1
    1244:	b1 1c       	adc	r11, r1
    1246:	86 16       	cp	r8, r22
    1248:	97 06       	cpc	r9, r23
    124a:	a8 06       	cpc	r10, r24
    124c:	b9 06       	cpc	r11, r25
    124e:	40 f6       	brcc	.-112    	; 0x11e0 <_ZN8BLEMate210knownStartEv+0x70>
    1250:	1e ef       	ldi	r17, 0xFE	; 254
    1252:	12 c0       	rjmp	.+36     	; 0x1278 <_ZN8BLEMate210knownStartEv+0x108>
  }
  if (buffer.startsWith("ERR")) return SUCCESS;
    1254:	61 e2       	ldi	r22, 0x21	; 33
    1256:	71 e0       	ldi	r23, 0x01	; 1
    1258:	ce 01       	movw	r24, r28
    125a:	01 96       	adiw	r24, 0x01	; 1
    125c:	0e 94 8f 06 	call	0xd1e	; 0xd1e <_ZN6StringC1EPKc>
    1260:	be 01       	movw	r22, r28
    1262:	6f 5f       	subi	r22, 0xFF	; 255
    1264:	7f 4f       	sbci	r23, 0xFF	; 255
    1266:	ce 01       	movw	r24, r28
    1268:	07 96       	adiw	r24, 0x07	; 7
    126a:	0e 94 9c 07 	call	0xf38	; 0xf38 <_ZNK6String10startsWithERKS_>
    126e:	ce 01       	movw	r24, r28
    1270:	01 96       	adiw	r24, 0x01	; 1
    1272:	0e 94 21 06 	call	0xc42	; 0xc42 <_ZN6StringD1Ev>
    1276:	11 e0       	ldi	r17, 0x01	; 1
//  already in the module's buffer, we can purge it by sending an EOL to the
//  the module. If not, we'll just get an error.
BLEMate2::opResult BLEMate2::knownStart()
{
  String EOL = String("\n\r");
  String buffer = "";
    1278:	ce 01       	movw	r24, r28
    127a:	07 96       	adiw	r24, 0x07	; 7
    127c:	0e 94 21 06 	call	0xc42	; 0xc42 <_ZN6StringD1Ev>
      startTime = millis();
    }
    if ((startTime + 1000) < millis()) return TIMEOUT_ERROR;
  }
  if (buffer.startsWith("ERR")) return SUCCESS;
  else return SUCCESS;
    1280:	ce 01       	movw	r24, r28
    1282:	0d 96       	adiw	r24, 0x0d	; 13
    1284:	0e 94 21 06 	call	0xc42	; 0xc42 <_ZN6StringD1Ev>
}
    1288:	81 2f       	mov	r24, r17
    128a:	62 96       	adiw	r28, 0x12	; 18
    128c:	0f b6       	in	r0, 0x3f	; 63
    128e:	f8 94       	cli
    1290:	de bf       	out	0x3e, r29	; 62
    1292:	0f be       	out	0x3f, r0	; 63
    1294:	cd bf       	out	0x3d, r28	; 61
    1296:	df 91       	pop	r29
    1298:	cf 91       	pop	r28
    129a:	1f 91       	pop	r17
    129c:	0f 91       	pop	r16
    129e:	ff 90       	pop	r15
    12a0:	ef 90       	pop	r14
    12a2:	df 90       	pop	r13
    12a4:	cf 90       	pop	r12
    12a6:	bf 90       	pop	r11
    12a8:	af 90       	pop	r10
    12aa:	9f 90       	pop	r9
    12ac:	8f 90       	pop	r8
    12ae:	08 95       	ret

000012b0 <_ZN8BLEMate26stdCmdE6String>:
}

// There are several commands that look for either OK or ERROR; let's abstract
//  support for those commands to one single private function, to save memory.
BLEMate2::opResult BLEMate2::stdCmd(String command)
{
    12b0:	bf 92       	push	r11
    12b2:	cf 92       	push	r12
    12b4:	df 92       	push	r13
    12b6:	ef 92       	push	r14
    12b8:	ff 92       	push	r15
    12ba:	0f 93       	push	r16
    12bc:	1f 93       	push	r17
    12be:	cf 93       	push	r28
    12c0:	df 93       	push	r29
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	62 97       	sbiw	r28, 0x12	; 18
    12c8:	0f b6       	in	r0, 0x3f	; 63
    12ca:	f8 94       	cli
    12cc:	de bf       	out	0x3e, r29	; 62
    12ce:	0f be       	out	0x3f, r0	; 63
    12d0:	cd bf       	out	0x3d, r28	; 61
    12d2:	8c 01       	movw	r16, r24
    12d4:	7b 01       	movw	r14, r22
  String buffer;
    12d6:	60 e2       	ldi	r22, 0x20	; 32
    12d8:	71 e0       	ldi	r23, 0x01	; 1
    12da:	ce 01       	movw	r24, r28
    12dc:	0d 96       	adiw	r24, 0x0d	; 13
    12de:	0e 94 8f 06 	call	0xd1e	; 0xd1e <_ZN6StringC1EPKc>
  String EOL = String("\n\r");
    12e2:	6e e1       	ldi	r22, 0x1E	; 30
    12e4:	71 e0       	ldi	r23, 0x01	; 1
    12e6:	ce 01       	movw	r24, r28
    12e8:	07 96       	adiw	r24, 0x07	; 7
    12ea:	0e 94 8f 06 	call	0xd1e	; 0xd1e <_ZN6StringC1EPKc>
  
  knownStart(); // Clear the serial buffer in the module and the Arduino.
    12ee:	c8 01       	movw	r24, r16
    12f0:	0e 94 b8 08 	call	0x1170	; 0x1170 <_ZN8BLEMate210knownStartEv>
  
  _serialPort->print(command);
    12f4:	b7 01       	movw	r22, r14
    12f6:	d8 01       	movw	r26, r16
    12f8:	91 96       	adiw	r26, 0x21	; 33
    12fa:	8d 91       	ld	r24, X+
    12fc:	9c 91       	ld	r25, X
    12fe:	92 97       	sbiw	r26, 0x22	; 34
    1300:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN5Print5printERK6String>
  _serialPort->print("\r");
    1304:	6f e1       	ldi	r22, 0x1F	; 31
    1306:	71 e0       	ldi	r23, 0x01	; 1
    1308:	f8 01       	movw	r30, r16
    130a:	81 a1       	ldd	r24, Z+33	; 0x21
    130c:	92 a1       	ldd	r25, Z+34	; 0x22
    130e:	0e 94 09 03 	call	0x612	; 0x612 <_ZN5Print5printEPKc>
  _serialPort->flush();
    1312:	d8 01       	movw	r26, r16
    1314:	91 96       	adiw	r26, 0x21	; 33
    1316:	8d 91       	ld	r24, X+
    1318:	9c 91       	ld	r25, X
    131a:	92 97       	sbiw	r26, 0x22	; 34
    131c:	dc 01       	movw	r26, r24
    131e:	ed 91       	ld	r30, X+
    1320:	fc 91       	ld	r31, X
    1322:	02 84       	ldd	r0, Z+10	; 0x0a
    1324:	f3 85       	ldd	r31, Z+11	; 0x0b
    1326:	e0 2d       	mov	r30, r0
    1328:	09 95       	icall
  
  // We're going to use the internal timer to track the elapsed time since we
  //  issued the command. Bog-standard Arduino stuff.
  unsigned long startTime = millis();
    132a:	0e 94 da 04 	call	0x9b4	; 0x9b4 <millis>
    132e:	6b 01       	movw	r12, r22
    1330:	7c 01       	movw	r14, r24
    
  // This is our timeout loop. We'll give the module 3 seconds.
  while ((startTime + 3000) > millis())
    1332:	b8 eb       	ldi	r27, 0xB8	; 184
    1334:	cb 0e       	add	r12, r27
    1336:	bb e0       	ldi	r27, 0x0B	; 11
    1338:	db 1e       	adc	r13, r27
    133a:	e1 1c       	adc	r14, r1
    133c:	f1 1c       	adc	r15, r1
    133e:	0e 94 da 04 	call	0x9b4	; 0x9b4 <millis>
    1342:	6c 15       	cp	r22, r12
    1344:	7d 05       	cpc	r23, r13
    1346:	8e 05       	cpc	r24, r14
    1348:	9f 05       	cpc	r25, r15
    134a:	08 f0       	brcs	.+2      	; 0x134e <_ZN8BLEMate26stdCmdE6String+0x9e>
    134c:	54 c0       	rjmp	.+168    	; 0x13f6 <_ZN8BLEMate26stdCmdE6String+0x146>
  {
    // Grow the current buffered data, until we receive the EOL string.    
    if (_serialPort->available() > 0) buffer.concat(char(_serialPort->read()));
    134e:	f8 01       	movw	r30, r16
    1350:	81 a1       	ldd	r24, Z+33	; 0x21
    1352:	92 a1       	ldd	r25, Z+34	; 0x22
    1354:	dc 01       	movw	r26, r24
    1356:	ed 91       	ld	r30, X+
    1358:	fc 91       	ld	r31, X
    135a:	04 80       	ldd	r0, Z+4	; 0x04
    135c:	f5 81       	ldd	r31, Z+5	; 0x05
    135e:	e0 2d       	mov	r30, r0
    1360:	09 95       	icall
    1362:	18 16       	cp	r1, r24
    1364:	19 06       	cpc	r1, r25
    1366:	7c f4       	brge	.+30     	; 0x1386 <_ZN8BLEMate26stdCmdE6String+0xd6>
    1368:	f8 01       	movw	r30, r16
    136a:	81 a1       	ldd	r24, Z+33	; 0x21
    136c:	92 a1       	ldd	r25, Z+34	; 0x22
    136e:	dc 01       	movw	r26, r24
    1370:	ed 91       	ld	r30, X+
    1372:	fc 91       	ld	r31, X
    1374:	06 80       	ldd	r0, Z+6	; 0x06
    1376:	f7 81       	ldd	r31, Z+7	; 0x07
    1378:	e0 2d       	mov	r30, r0
    137a:	09 95       	icall
    137c:	68 2f       	mov	r22, r24
    137e:	ce 01       	movw	r24, r28
    1380:	0d 96       	adiw	r24, 0x0d	; 13
    1382:	0e 94 19 07 	call	0xe32	; 0xe32 <_ZN6String6concatEc>

    if (buffer.endsWith(EOL))
    1386:	be 01       	movw	r22, r28
    1388:	69 5f       	subi	r22, 0xF9	; 249
    138a:	7f 4f       	sbci	r23, 0xFF	; 255
    138c:	ce 01       	movw	r24, r28
    138e:	0d 96       	adiw	r24, 0x0d	; 13
    1390:	0e 94 ab 07 	call	0xf56	; 0xf56 <_ZNK6String8endsWithERKS_>
    1394:	88 23       	and	r24, r24
    1396:	99 f2       	breq	.-90     	; 0x133e <_ZN8BLEMate26stdCmdE6String+0x8e>
    {
      if (buffer.startsWith("ER")) return MODULE_ERROR;
    1398:	6a e2       	ldi	r22, 0x2A	; 42
    139a:	71 e0       	ldi	r23, 0x01	; 1
    139c:	ce 01       	movw	r24, r28
    139e:	01 96       	adiw	r24, 0x01	; 1
    13a0:	0e 94 8f 06 	call	0xd1e	; 0xd1e <_ZN6StringC1EPKc>
    13a4:	be 01       	movw	r22, r28
    13a6:	6f 5f       	subi	r22, 0xFF	; 255
    13a8:	7f 4f       	sbci	r23, 0xFF	; 255
    13aa:	ce 01       	movw	r24, r28
    13ac:	0d 96       	adiw	r24, 0x0d	; 13
    13ae:	0e 94 9c 07 	call	0xf38	; 0xf38 <_ZNK6String10startsWithERKS_>
    13b2:	b8 2e       	mov	r11, r24
    13b4:	ce 01       	movw	r24, r28
    13b6:	01 96       	adiw	r24, 0x01	; 1
    13b8:	0e 94 21 06 	call	0xc42	; 0xc42 <_ZN6StringD1Ev>
    13bc:	b1 10       	cpse	r11, r1
    13be:	1d c0       	rjmp	.+58     	; 0x13fa <_ZN8BLEMate26stdCmdE6String+0x14a>
      if (buffer.startsWith("OK")) return SUCCESS;
    13c0:	63 e3       	ldi	r22, 0x33	; 51
    13c2:	71 e0       	ldi	r23, 0x01	; 1
    13c4:	ce 01       	movw	r24, r28
    13c6:	01 96       	adiw	r24, 0x01	; 1
    13c8:	0e 94 8f 06 	call	0xd1e	; 0xd1e <_ZN6StringC1EPKc>
    13cc:	be 01       	movw	r22, r28
    13ce:	6f 5f       	subi	r22, 0xFF	; 255
    13d0:	7f 4f       	sbci	r23, 0xFF	; 255
    13d2:	ce 01       	movw	r24, r28
    13d4:	0d 96       	adiw	r24, 0x0d	; 13
    13d6:	0e 94 9c 07 	call	0xf38	; 0xf38 <_ZNK6String10startsWithERKS_>
    13da:	b8 2e       	mov	r11, r24
    13dc:	ce 01       	movw	r24, r28
    13de:	01 96       	adiw	r24, 0x01	; 1
    13e0:	0e 94 21 06 	call	0xc42	; 0xc42 <_ZN6StringD1Ev>
    13e4:	b1 10       	cpse	r11, r1
    13e6:	0b c0       	rjmp	.+22     	; 0x13fe <_ZN8BLEMate26stdCmdE6String+0x14e>
      buffer = "";
    13e8:	60 e2       	ldi	r22, 0x20	; 32
    13ea:	71 e0       	ldi	r23, 0x01	; 1
    13ec:	ce 01       	movw	r24, r28
    13ee:	0d 96       	adiw	r24, 0x0d	; 13
    13f0:	0e 94 c5 06 	call	0xd8a	; 0xd8a <_ZN6StringaSEPKc>
    13f4:	a4 cf       	rjmp	.-184    	; 0x133e <_ZN8BLEMate26stdCmdE6String+0x8e>
    }    
  }
  return TIMEOUT_ERROR;
    13f6:	1e ef       	ldi	r17, 0xFE	; 254
    13f8:	03 c0       	rjmp	.+6      	; 0x1400 <_ZN8BLEMate26stdCmdE6String+0x150>
    // Grow the current buffered data, until we receive the EOL string.    
    if (_serialPort->available() > 0) buffer.concat(char(_serialPort->read()));

    if (buffer.endsWith(EOL))
    {
      if (buffer.startsWith("ER")) return MODULE_ERROR;
    13fa:	1f ef       	ldi	r17, 0xFF	; 255
    13fc:	01 c0       	rjmp	.+2      	; 0x1400 <_ZN8BLEMate26stdCmdE6String+0x150>
      if (buffer.startsWith("OK")) return SUCCESS;
    13fe:	11 e0       	ldi	r17, 0x01	; 1
// There are several commands that look for either OK or ERROR; let's abstract
//  support for those commands to one single private function, to save memory.
BLEMate2::opResult BLEMate2::stdCmd(String command)
{
  String buffer;
  String EOL = String("\n\r");
    1400:	ce 01       	movw	r24, r28
    1402:	07 96       	adiw	r24, 0x07	; 7
    1404:	0e 94 21 06 	call	0xc42	; 0xc42 <_ZN6StringD1Ev>
      if (buffer.startsWith("ER")) return MODULE_ERROR;
      if (buffer.startsWith("OK")) return SUCCESS;
      buffer = "";
    }    
  }
  return TIMEOUT_ERROR;
    1408:	ce 01       	movw	r24, r28
    140a:	0d 96       	adiw	r24, 0x0d	; 13
    140c:	0e 94 21 06 	call	0xc42	; 0xc42 <_ZN6StringD1Ev>
}
    1410:	81 2f       	mov	r24, r17
    1412:	62 96       	adiw	r28, 0x12	; 18
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	f8 94       	cli
    1418:	de bf       	out	0x3e, r29	; 62
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	cd bf       	out	0x3d, r28	; 61
    141e:	df 91       	pop	r29
    1420:	cf 91       	pop	r28
    1422:	1f 91       	pop	r17
    1424:	0f 91       	pop	r16
    1426:	ff 90       	pop	r15
    1428:	ef 90       	pop	r14
    142a:	df 90       	pop	r13
    142c:	cf 90       	pop	r12
    142e:	bf 90       	pop	r11
    1430:	08 95       	ret

00001432 <_ZN8BLEMate27restoreEv>:

// Issue the "RESTORE" command over the serial port to the BC118. This will
//  reset the device to factory default settings, which is a good thing to do
//  once in a while.
BLEMate2::opResult BLEMate2::restore()
{
    1432:	0f 93       	push	r16
    1434:	1f 93       	push	r17
    1436:	cf 93       	push	r28
    1438:	df 93       	push	r29
    143a:	00 d0       	rcall	.+0      	; 0x143c <_ZN8BLEMate27restoreEv+0xa>
    143c:	00 d0       	rcall	.+0      	; 0x143e <_ZN8BLEMate27restoreEv+0xc>
    143e:	00 d0       	rcall	.+0      	; 0x1440 <_ZN8BLEMate27restoreEv+0xe>
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
    1444:	8c 01       	movw	r16, r24
  return stdCmd("RTR");
    1446:	66 e3       	ldi	r22, 0x36	; 54
    1448:	71 e0       	ldi	r23, 0x01	; 1
    144a:	ce 01       	movw	r24, r28
    144c:	01 96       	adiw	r24, 0x01	; 1
    144e:	0e 94 8f 06 	call	0xd1e	; 0xd1e <_ZN6StringC1EPKc>
    1452:	be 01       	movw	r22, r28
    1454:	6f 5f       	subi	r22, 0xFF	; 255
    1456:	7f 4f       	sbci	r23, 0xFF	; 255
    1458:	c8 01       	movw	r24, r16
    145a:	0e 94 58 09 	call	0x12b0	; 0x12b0 <_ZN8BLEMate26stdCmdE6String>
    145e:	18 2f       	mov	r17, r24
    1460:	ce 01       	movw	r24, r28
    1462:	01 96       	adiw	r24, 0x01	; 1
    1464:	0e 94 21 06 	call	0xc42	; 0xc42 <_ZN6StringD1Ev>
}
    1468:	81 2f       	mov	r24, r17
    146a:	26 96       	adiw	r28, 0x06	; 6
    146c:	0f b6       	in	r0, 0x3f	; 63
    146e:	f8 94       	cli
    1470:	de bf       	out	0x3e, r29	; 62
    1472:	0f be       	out	0x3f, r0	; 63
    1474:	cd bf       	out	0x3d, r28	; 61
    1476:	df 91       	pop	r29
    1478:	cf 91       	pop	r28
    147a:	1f 91       	pop	r17
    147c:	0f 91       	pop	r16
    147e:	08 95       	ret

00001480 <_ZN8BLEMate211writeConfigEv>:

// Issue the "WRITE" command over the serial port to the BC118. This will
//  save the current settings to NVM, so they will be applied after a reset
//  or power cycle.
BLEMate2::opResult BLEMate2::writeConfig()
{
    1480:	0f 93       	push	r16
    1482:	1f 93       	push	r17
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
    1488:	00 d0       	rcall	.+0      	; 0x148a <_ZN8BLEMate211writeConfigEv+0xa>
    148a:	00 d0       	rcall	.+0      	; 0x148c <_ZN8BLEMate211writeConfigEv+0xc>
    148c:	00 d0       	rcall	.+0      	; 0x148e <_ZN8BLEMate211writeConfigEv+0xe>
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
    1492:	8c 01       	movw	r16, r24
  return stdCmd("WRT");
    1494:	6a e3       	ldi	r22, 0x3A	; 58
    1496:	71 e0       	ldi	r23, 0x01	; 1
    1498:	ce 01       	movw	r24, r28
    149a:	01 96       	adiw	r24, 0x01	; 1
    149c:	0e 94 8f 06 	call	0xd1e	; 0xd1e <_ZN6StringC1EPKc>
    14a0:	be 01       	movw	r22, r28
    14a2:	6f 5f       	subi	r22, 0xFF	; 255
    14a4:	7f 4f       	sbci	r23, 0xFF	; 255
    14a6:	c8 01       	movw	r24, r16
    14a8:	0e 94 58 09 	call	0x12b0	; 0x12b0 <_ZN8BLEMate26stdCmdE6String>
    14ac:	18 2f       	mov	r17, r24
    14ae:	ce 01       	movw	r24, r28
    14b0:	01 96       	adiw	r24, 0x01	; 1
    14b2:	0e 94 21 06 	call	0xc42	; 0xc42 <_ZN6StringD1Ev>
}
    14b6:	81 2f       	mov	r24, r17
    14b8:	26 96       	adiw	r28, 0x06	; 6
    14ba:	0f b6       	in	r0, 0x3f	; 63
    14bc:	f8 94       	cli
    14be:	de bf       	out	0x3e, r29	; 62
    14c0:	0f be       	out	0x3f, r0	; 63
    14c2:	cd bf       	out	0x3d, r28	; 61
    14c4:	df 91       	pop	r29
    14c6:	cf 91       	pop	r28
    14c8:	1f 91       	pop	r17
    14ca:	0f 91       	pop	r16
    14cc:	08 95       	ret

000014ce <_ZN8BLEMate25resetEv>:
//    READY
// If there is some sort of error, the module will respond with
//    ERR
// We'll buffer characters until we see an EOL (\n\r), then check the string.
BLEMate2::opResult BLEMate2::reset()
{
    14ce:	bf 92       	push	r11
    14d0:	cf 92       	push	r12
    14d2:	df 92       	push	r13
    14d4:	ef 92       	push	r14
    14d6:	ff 92       	push	r15
    14d8:	0f 93       	push	r16
    14da:	1f 93       	push	r17
    14dc:	cf 93       	push	r28
    14de:	df 93       	push	r29
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    14e4:	62 97       	sbiw	r28, 0x12	; 18
    14e6:	0f b6       	in	r0, 0x3f	; 63
    14e8:	f8 94       	cli
    14ea:	de bf       	out	0x3e, r29	; 62
    14ec:	0f be       	out	0x3f, r0	; 63
    14ee:	cd bf       	out	0x3d, r28	; 61
    14f0:	8c 01       	movw	r16, r24
  String buffer;
    14f2:	60 e2       	ldi	r22, 0x20	; 32
    14f4:	71 e0       	ldi	r23, 0x01	; 1
    14f6:	ce 01       	movw	r24, r28
    14f8:	0d 96       	adiw	r24, 0x0d	; 13
    14fa:	0e 94 8f 06 	call	0xd1e	; 0xd1e <_ZN6StringC1EPKc>
  String EOL = String("\n\r");
    14fe:	6e e1       	ldi	r22, 0x1E	; 30
    1500:	71 e0       	ldi	r23, 0x01	; 1
    1502:	ce 01       	movw	r24, r28
    1504:	07 96       	adiw	r24, 0x07	; 7
    1506:	0e 94 8f 06 	call	0xd1e	; 0xd1e <_ZN6StringC1EPKc>
  
  knownStart();
    150a:	c8 01       	movw	r24, r16
    150c:	0e 94 b8 08 	call	0x1170	; 0x1170 <_ZN8BLEMate210knownStartEv>
  
  // Now issue the reset command.
  _serialPort->print("RST");
    1510:	6b e6       	ldi	r22, 0x6B	; 107
    1512:	71 e0       	ldi	r23, 0x01	; 1
    1514:	d8 01       	movw	r26, r16
    1516:	91 96       	adiw	r26, 0x21	; 33
    1518:	8d 91       	ld	r24, X+
    151a:	9c 91       	ld	r25, X
    151c:	92 97       	sbiw	r26, 0x22	; 34
    151e:	0e 94 09 03 	call	0x612	; 0x612 <_ZN5Print5printEPKc>
  _serialPort->print("\r");
    1522:	6f e1       	ldi	r22, 0x1F	; 31
    1524:	71 e0       	ldi	r23, 0x01	; 1
    1526:	f8 01       	movw	r30, r16
    1528:	81 a1       	ldd	r24, Z+33	; 0x21
    152a:	92 a1       	ldd	r25, Z+34	; 0x22
    152c:	0e 94 09 03 	call	0x612	; 0x612 <_ZN5Print5printEPKc>
  _serialPort->flush();
    1530:	d8 01       	movw	r26, r16
    1532:	91 96       	adiw	r26, 0x21	; 33
    1534:	8d 91       	ld	r24, X+
    1536:	9c 91       	ld	r25, X
    1538:	92 97       	sbiw	r26, 0x22	; 34
    153a:	dc 01       	movw	r26, r24
    153c:	ed 91       	ld	r30, X+
    153e:	fc 91       	ld	r31, X
    1540:	02 84       	ldd	r0, Z+10	; 0x0a
    1542:	f3 85       	ldd	r31, Z+11	; 0x0b
    1544:	e0 2d       	mov	r30, r0
    1546:	09 95       	icall
  
  // We're going to use the internal timer to track the elapsed time since we
  //  issued the reset. Bog-standard Arduino stuff.
  unsigned long resetStart = millis();
    1548:	0e 94 da 04 	call	0x9b4	; 0x9b4 <millis>
    154c:	6b 01       	movw	r12, r22
    154e:	7c 01       	movw	r14, r24
  
  // This is our timeout loop. We'll give the module 6 seconds to reset.
  while ((resetStart + 6000) > millis())
    1550:	b0 e7       	ldi	r27, 0x70	; 112
    1552:	cb 0e       	add	r12, r27
    1554:	b7 e1       	ldi	r27, 0x17	; 23
    1556:	db 1e       	adc	r13, r27
    1558:	e1 1c       	adc	r14, r1
    155a:	f1 1c       	adc	r15, r1
    155c:	0e 94 da 04 	call	0x9b4	; 0x9b4 <millis>
    1560:	6c 15       	cp	r22, r12
    1562:	7d 05       	cpc	r23, r13
    1564:	8e 05       	cpc	r24, r14
    1566:	9f 05       	cpc	r25, r15
    1568:	08 f0       	brcs	.+2      	; 0x156c <_ZN8BLEMate25resetEv+0x9e>
    156a:	83 c0       	rjmp	.+262    	; 0x1672 <_ZN8BLEMate25resetEv+0x1a4>
  {
    // Grow the current buffered data, until we receive the EOL string.    
    if (_serialPort->available() > 0) 
    156c:	f8 01       	movw	r30, r16
    156e:	81 a1       	ldd	r24, Z+33	; 0x21
    1570:	92 a1       	ldd	r25, Z+34	; 0x22
    1572:	dc 01       	movw	r26, r24
    1574:	ed 91       	ld	r30, X+
    1576:	fc 91       	ld	r31, X
    1578:	04 80       	ldd	r0, Z+4	; 0x04
    157a:	f5 81       	ldd	r31, Z+5	; 0x05
    157c:	e0 2d       	mov	r30, r0
    157e:	09 95       	icall
    1580:	18 16       	cp	r1, r24
    1582:	19 06       	cpc	r1, r25
    1584:	7c f4       	brge	.+30     	; 0x15a4 <_ZN8BLEMate25resetEv+0xd6>
    {
      char temp = _serialPort->read();
    1586:	f8 01       	movw	r30, r16
    1588:	81 a1       	ldd	r24, Z+33	; 0x21
    158a:	92 a1       	ldd	r25, Z+34	; 0x22
    158c:	dc 01       	movw	r26, r24
    158e:	ed 91       	ld	r30, X+
    1590:	fc 91       	ld	r31, X
    1592:	06 80       	ldd	r0, Z+6	; 0x06
    1594:	f7 81       	ldd	r31, Z+7	; 0x07
    1596:	e0 2d       	mov	r30, r0
    1598:	09 95       	icall
      buffer.concat(temp);
    159a:	68 2f       	mov	r22, r24
    159c:	ce 01       	movw	r24, r28
    159e:	0d 96       	adiw	r24, 0x0d	; 13
    15a0:	0e 94 19 07 	call	0xe32	; 0xe32 <_ZN6String6concatEc>
    }
    
    if (buffer.endsWith(EOL))
    15a4:	be 01       	movw	r22, r28
    15a6:	69 5f       	subi	r22, 0xF9	; 249
    15a8:	7f 4f       	sbci	r23, 0xFF	; 255
    15aa:	ce 01       	movw	r24, r28
    15ac:	0d 96       	adiw	r24, 0x0d	; 13
    15ae:	0e 94 ab 07 	call	0xf56	; 0xf56 <_ZNK6String8endsWithERKS_>
    15b2:	88 23       	and	r24, r24
    15b4:	99 f2       	breq	.-90     	; 0x155c <_ZN8BLEMate25resetEv+0x8e>
    {
      // If ERR or READY, we've finished the reset. Otherwise, just discard
      //  the data and wait for the next EOL.
      if (buffer.startsWith("ER")) return MODULE_ERROR;
    15b6:	6a e2       	ldi	r22, 0x2A	; 42
    15b8:	71 e0       	ldi	r23, 0x01	; 1
    15ba:	ce 01       	movw	r24, r28
    15bc:	01 96       	adiw	r24, 0x01	; 1
    15be:	0e 94 8f 06 	call	0xd1e	; 0xd1e <_ZN6StringC1EPKc>
    15c2:	be 01       	movw	r22, r28
    15c4:	6f 5f       	subi	r22, 0xFF	; 255
    15c6:	7f 4f       	sbci	r23, 0xFF	; 255
    15c8:	ce 01       	movw	r24, r28
    15ca:	0d 96       	adiw	r24, 0x0d	; 13
    15cc:	0e 94 9c 07 	call	0xf38	; 0xf38 <_ZNK6String10startsWithERKS_>
    15d0:	b8 2e       	mov	r11, r24
    15d2:	ce 01       	movw	r24, r28
    15d4:	01 96       	adiw	r24, 0x01	; 1
    15d6:	0e 94 21 06 	call	0xc42	; 0xc42 <_ZN6StringD1Ev>
    15da:	b1 10       	cpse	r11, r1
    15dc:	4c c0       	rjmp	.+152    	; 0x1676 <_ZN8BLEMate25resetEv+0x1a8>
      if (buffer.startsWith("RE")) 
    15de:	6f e6       	ldi	r22, 0x6F	; 111
    15e0:	71 e0       	ldi	r23, 0x01	; 1
    15e2:	ce 01       	movw	r24, r28
    15e4:	01 96       	adiw	r24, 0x01	; 1
    15e6:	0e 94 8f 06 	call	0xd1e	; 0xd1e <_ZN6StringC1EPKc>
    15ea:	be 01       	movw	r22, r28
    15ec:	6f 5f       	subi	r22, 0xFF	; 255
    15ee:	7f 4f       	sbci	r23, 0xFF	; 255
    15f0:	ce 01       	movw	r24, r28
    15f2:	0d 96       	adiw	r24, 0x0d	; 13
    15f4:	0e 94 9c 07 	call	0xf38	; 0xf38 <_ZNK6String10startsWithERKS_>
    15f8:	b8 2e       	mov	r11, r24
    15fa:	ce 01       	movw	r24, r28
    15fc:	01 96       	adiw	r24, 0x01	; 1
    15fe:	0e 94 21 06 	call	0xc42	; 0xc42 <_ZN6StringD1Ev>
    1602:	bb 20       	and	r11, r11
    1604:	79 f1       	breq	.+94     	; 0x1664 <_ZN8BLEMate25resetEv+0x196>
      {
        stdCmd("SCN OFF"); // When we come out of reset, we *could* be
    1606:	62 e7       	ldi	r22, 0x72	; 114
    1608:	71 e0       	ldi	r23, 0x01	; 1
    160a:	ce 01       	movw	r24, r28
    160c:	01 96       	adiw	r24, 0x01	; 1
    160e:	0e 94 8f 06 	call	0xd1e	; 0xd1e <_ZN6StringC1EPKc>
    1612:	be 01       	movw	r22, r28
    1614:	6f 5f       	subi	r22, 0xFF	; 255
    1616:	7f 4f       	sbci	r23, 0xFF	; 255
    1618:	c8 01       	movw	r24, r16
    161a:	0e 94 58 09 	call	0x12b0	; 0x12b0 <_ZN8BLEMate26stdCmdE6String>
    161e:	ce 01       	movw	r24, r28
    1620:	01 96       	adiw	r24, 0x01	; 1
    1622:	0e 94 21 06 	call	0xc42	; 0xc42 <_ZN6StringD1Ev>
                           //  in scan mode. We don't want that; it's too
                           //  random and noisy.
        delay(500);        // Let the scanning noise complete.
    1626:	64 ef       	ldi	r22, 0xF4	; 244
    1628:	71 e0       	ldi	r23, 0x01	; 1
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	0e 94 09 05 	call	0xa12	; 0xa12 <delay>
        while(_serialPort->available())
    1632:	f8 01       	movw	r30, r16
    1634:	81 a1       	ldd	r24, Z+33	; 0x21
    1636:	92 a1       	ldd	r25, Z+34	; 0x22
    1638:	dc 01       	movw	r26, r24
    163a:	ed 91       	ld	r30, X+
    163c:	fc 91       	ld	r31, X
    163e:	04 80       	ldd	r0, Z+4	; 0x04
    1640:	f5 81       	ldd	r31, Z+5	; 0x05
    1642:	e0 2d       	mov	r30, r0
    1644:	09 95       	icall
    1646:	89 2b       	or	r24, r25
    1648:	59 f0       	breq	.+22     	; 0x1660 <_ZN8BLEMate25resetEv+0x192>
        {
          _serialPort->read();
    164a:	f8 01       	movw	r30, r16
    164c:	81 a1       	ldd	r24, Z+33	; 0x21
    164e:	92 a1       	ldd	r25, Z+34	; 0x22
    1650:	dc 01       	movw	r26, r24
    1652:	ed 91       	ld	r30, X+
    1654:	fc 91       	ld	r31, X
    1656:	06 80       	ldd	r0, Z+6	; 0x06
    1658:	f7 81       	ldd	r31, Z+7	; 0x07
    165a:	e0 2d       	mov	r30, r0
    165c:	09 95       	icall
    165e:	e9 cf       	rjmp	.-46     	; 0x1632 <_ZN8BLEMate25resetEv+0x164>
        } 
        return SUCCESS;
    1660:	11 e0       	ldi	r17, 0x01	; 1
    1662:	0a c0       	rjmp	.+20     	; 0x1678 <_ZN8BLEMate25resetEv+0x1aa>
      }
      buffer = "";
    1664:	60 e2       	ldi	r22, 0x20	; 32
    1666:	71 e0       	ldi	r23, 0x01	; 1
    1668:	ce 01       	movw	r24, r28
    166a:	0d 96       	adiw	r24, 0x0d	; 13
    166c:	0e 94 c5 06 	call	0xd8a	; 0xd8a <_ZN6StringaSEPKc>
    1670:	75 cf       	rjmp	.-278    	; 0x155c <_ZN8BLEMate25resetEv+0x8e>
    }    
  }
  return TIMEOUT_ERROR;
    1672:	1e ef       	ldi	r17, 0xFE	; 254
    1674:	01 c0       	rjmp	.+2      	; 0x1678 <_ZN8BLEMate25resetEv+0x1aa>
    
    if (buffer.endsWith(EOL))
    {
      // If ERR or READY, we've finished the reset. Otherwise, just discard
      //  the data and wait for the next EOL.
      if (buffer.startsWith("ER")) return MODULE_ERROR;
    1676:	1f ef       	ldi	r17, 0xFF	; 255
//    ERR
// We'll buffer characters until we see an EOL (\n\r), then check the string.
BLEMate2::opResult BLEMate2::reset()
{
  String buffer;
  String EOL = String("\n\r");
    1678:	ce 01       	movw	r24, r28
    167a:	07 96       	adiw	r24, 0x07	; 7
    167c:	0e 94 21 06 	call	0xc42	; 0xc42 <_ZN6StringD1Ev>
        return SUCCESS;
      }
      buffer = "";
    }    
  }
  return TIMEOUT_ERROR;
    1680:	ce 01       	movw	r24, r28
    1682:	0d 96       	adiw	r24, 0x0d	; 13
    1684:	0e 94 21 06 	call	0xc42	; 0xc42 <_ZN6StringD1Ev>
}
    1688:	81 2f       	mov	r24, r17
    168a:	62 96       	adiw	r28, 0x12	; 18
    168c:	0f b6       	in	r0, 0x3f	; 63
    168e:	f8 94       	cli
    1690:	de bf       	out	0x3e, r29	; 62
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	cd bf       	out	0x3d, r28	; 61
    1696:	df 91       	pop	r29
    1698:	cf 91       	pop	r28
    169a:	1f 91       	pop	r17
    169c:	0f 91       	pop	r16
    169e:	ff 90       	pop	r15
    16a0:	ef 90       	pop	r14
    16a2:	df 90       	pop	r13
    16a4:	cf 90       	pop	r12
    16a6:	bf 90       	pop	r11
    16a8:	08 95       	ret

000016aa <_ZN8BLEMate29amCentralERb>:
//  device; that's important information, so we should be able to query
//  the module regarding that. We're not going to store that info, however, 
//  since the whole point is to get it "from the horse's mouth" rather than
//  trusting that our software is in sync with the state of the module.
BLEMate2::opResult BLEMate2::amCentral(boolean &inCentralMode)
{
    16aa:	8f 92       	push	r8
    16ac:	9f 92       	push	r9
    16ae:	af 92       	push	r10
    16b0:	bf 92       	push	r11
    16b2:	cf 92       	push	r12
    16b4:	df 92       	push	r13
    16b6:	ef 92       	push	r14
    16b8:	ff 92       	push	r15
    16ba:	0f 93       	push	r16
    16bc:	1f 93       	push	r17
    16be:	cf 93       	push	r28
    16c0:	df 93       	push	r29
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
    16c6:	62 97       	sbiw	r28, 0x12	; 18
    16c8:	0f b6       	in	r0, 0x3f	; 63
    16ca:	f8 94       	cli
    16cc:	de bf       	out	0x3e, r29	; 62
    16ce:	0f be       	out	0x3f, r0	; 63
    16d0:	cd bf       	out	0x3d, r28	; 61
    16d2:	8c 01       	movw	r16, r24
    16d4:	5b 01       	movw	r10, r22
  String buffer;
    16d6:	60 e2       	ldi	r22, 0x20	; 32
    16d8:	71 e0       	ldi	r23, 0x01	; 1
    16da:	ce 01       	movw	r24, r28
    16dc:	0d 96       	adiw	r24, 0x0d	; 13
    16de:	0e 94 8f 06 	call	0xd1e	; 0xd1e <_ZN6StringC1EPKc>
  String EOL = String("\n\r");
    16e2:	6e e1       	ldi	r22, 0x1E	; 30
    16e4:	71 e0       	ldi	r23, 0x01	; 1
    16e6:	ce 01       	movw	r24, r28
    16e8:	07 96       	adiw	r24, 0x07	; 7
    16ea:	0e 94 8f 06 	call	0xd1e	; 0xd1e <_ZN6StringC1EPKc>
  
  knownStart(); // Clear the serial buffer in the module and the Arduino.
    16ee:	c8 01       	movw	r24, r16
    16f0:	0e 94 b8 08 	call	0x1170	; 0x1170 <_ZN8BLEMate210knownStartEv>
  
  _serialPort->print("STS\r");
    16f4:	6a e7       	ldi	r22, 0x7A	; 122
    16f6:	71 e0       	ldi	r23, 0x01	; 1
    16f8:	d8 01       	movw	r26, r16
    16fa:	91 96       	adiw	r26, 0x21	; 33
    16fc:	8d 91       	ld	r24, X+
    16fe:	9c 91       	ld	r25, X
    1700:	92 97       	sbiw	r26, 0x22	; 34
    1702:	0e 94 09 03 	call	0x612	; 0x612 <_ZN5Print5printEPKc>
  _serialPort->flush();
    1706:	f8 01       	movw	r30, r16
    1708:	81 a1       	ldd	r24, Z+33	; 0x21
    170a:	92 a1       	ldd	r25, Z+34	; 0x22
    170c:	dc 01       	movw	r26, r24
    170e:	ed 91       	ld	r30, X+
    1710:	fc 91       	ld	r31, X
    1712:	02 84       	ldd	r0, Z+10	; 0x0a
    1714:	f3 85       	ldd	r31, Z+11	; 0x0b
    1716:	e0 2d       	mov	r30, r0
    1718:	09 95       	icall
  
  // We're going to use the internal timer to track the elapsed time since we
  //  issued the command. Bog-standard Arduino stuff.
  unsigned long startTime = millis();
    171a:	0e 94 da 04 	call	0x9b4	; 0x9b4 <millis>
    171e:	6b 01       	movw	r12, r22
    1720:	7c 01       	movw	r14, r24
    
  // This is our timeout loop. We'll give the module 3 seconds.
  while ((startTime + 3000) > millis())
    1722:	b8 eb       	ldi	r27, 0xB8	; 184
    1724:	cb 0e       	add	r12, r27
    1726:	bb e0       	ldi	r27, 0x0B	; 11
    1728:	db 1e       	adc	r13, r27
    172a:	e1 1c       	adc	r14, r1
    172c:	f1 1c       	adc	r15, r1
      }
      else if (buffer.startsWith("STS")) 
      {
        if (buffer.charAt(4) == 'C')
        {
          inCentralMode = true;
    172e:	99 24       	eor	r9, r9
    1730:	93 94       	inc	r9
  // We're going to use the internal timer to track the elapsed time since we
  //  issued the command. Bog-standard Arduino stuff.
  unsigned long startTime = millis();
    
  // This is our timeout loop. We'll give the module 3 seconds.
  while ((startTime + 3000) > millis())
    1732:	0e 94 da 04 	call	0x9b4	; 0x9b4 <millis>
    1736:	6c 15       	cp	r22, r12
    1738:	7d 05       	cpc	r23, r13
    173a:	8e 05       	cpc	r24, r14
    173c:	9f 05       	cpc	r25, r15
    173e:	08 f0       	brcs	.+2      	; 0x1742 <_ZN8BLEMate29amCentralERb+0x98>
    1740:	75 c0       	rjmp	.+234    	; 0x182c <_ZN8BLEMate29amCentralERb+0x182>
  {
    // Grow the current buffered data, until we receive the EOL string.    
    if (_serialPort->available() > 0) 
    1742:	f8 01       	movw	r30, r16
    1744:	81 a1       	ldd	r24, Z+33	; 0x21
    1746:	92 a1       	ldd	r25, Z+34	; 0x22
    1748:	dc 01       	movw	r26, r24
    174a:	ed 91       	ld	r30, X+
    174c:	fc 91       	ld	r31, X
    174e:	04 80       	ldd	r0, Z+4	; 0x04
    1750:	f5 81       	ldd	r31, Z+5	; 0x05
    1752:	e0 2d       	mov	r30, r0
    1754:	09 95       	icall
    1756:	18 16       	cp	r1, r24
    1758:	19 06       	cpc	r1, r25
    175a:	7c f4       	brge	.+30     	; 0x177a <_ZN8BLEMate29amCentralERb+0xd0>
    {
      buffer.concat(char(_serialPort->read()));
    175c:	f8 01       	movw	r30, r16
    175e:	81 a1       	ldd	r24, Z+33	; 0x21
    1760:	92 a1       	ldd	r25, Z+34	; 0x22
    1762:	dc 01       	movw	r26, r24
    1764:	ed 91       	ld	r30, X+
    1766:	fc 91       	ld	r31, X
    1768:	06 80       	ldd	r0, Z+6	; 0x06
    176a:	f7 81       	ldd	r31, Z+7	; 0x07
    176c:	e0 2d       	mov	r30, r0
    176e:	09 95       	icall
    1770:	68 2f       	mov	r22, r24
    1772:	ce 01       	movw	r24, r28
    1774:	0d 96       	adiw	r24, 0x0d	; 13
    1776:	0e 94 19 07 	call	0xe32	; 0xe32 <_ZN6String6concatEc>
    }
    if (buffer.endsWith(EOL))
    177a:	be 01       	movw	r22, r28
    177c:	69 5f       	subi	r22, 0xF9	; 249
    177e:	7f 4f       	sbci	r23, 0xFF	; 255
    1780:	ce 01       	movw	r24, r28
    1782:	0d 96       	adiw	r24, 0x0d	; 13
    1784:	0e 94 ab 07 	call	0xf56	; 0xf56 <_ZNK6String8endsWithERKS_>
    1788:	88 23       	and	r24, r24
    178a:	99 f2       	breq	.-90     	; 0x1732 <_ZN8BLEMate29amCentralERb+0x88>
    {
      if (buffer.startsWith("ER")) 
    178c:	6a e2       	ldi	r22, 0x2A	; 42
    178e:	71 e0       	ldi	r23, 0x01	; 1
    1790:	ce 01       	movw	r24, r28
    1792:	01 96       	adiw	r24, 0x01	; 1
    1794:	0e 94 8f 06 	call	0xd1e	; 0xd1e <_ZN6StringC1EPKc>
    1798:	be 01       	movw	r22, r28
    179a:	6f 5f       	subi	r22, 0xFF	; 255
    179c:	7f 4f       	sbci	r23, 0xFF	; 255
    179e:	ce 01       	movw	r24, r28
    17a0:	0d 96       	adiw	r24, 0x0d	; 13
    17a2:	0e 94 9c 07 	call	0xf38	; 0xf38 <_ZNK6String10startsWithERKS_>
    17a6:	88 2e       	mov	r8, r24
    17a8:	ce 01       	movw	r24, r28
    17aa:	01 96       	adiw	r24, 0x01	; 1
    17ac:	0e 94 21 06 	call	0xc42	; 0xc42 <_ZN6StringD1Ev>
    17b0:	81 10       	cpse	r8, r1
    17b2:	3e c0       	rjmp	.+124    	; 0x1830 <_ZN8BLEMate29amCentralERb+0x186>
      {
        return MODULE_ERROR;
      }
      else if (buffer.startsWith("OK")) 
    17b4:	63 e3       	ldi	r22, 0x33	; 51
    17b6:	71 e0       	ldi	r23, 0x01	; 1
    17b8:	ce 01       	movw	r24, r28
    17ba:	01 96       	adiw	r24, 0x01	; 1
    17bc:	0e 94 8f 06 	call	0xd1e	; 0xd1e <_ZN6StringC1EPKc>
    17c0:	be 01       	movw	r22, r28
    17c2:	6f 5f       	subi	r22, 0xFF	; 255
    17c4:	7f 4f       	sbci	r23, 0xFF	; 255
    17c6:	ce 01       	movw	r24, r28
    17c8:	0d 96       	adiw	r24, 0x0d	; 13
    17ca:	0e 94 9c 07 	call	0xf38	; 0xf38 <_ZNK6String10startsWithERKS_>
    17ce:	88 2e       	mov	r8, r24
    17d0:	ce 01       	movw	r24, r28
    17d2:	01 96       	adiw	r24, 0x01	; 1
    17d4:	0e 94 21 06 	call	0xc42	; 0xc42 <_ZN6StringD1Ev>
    17d8:	81 10       	cpse	r8, r1
    17da:	2c c0       	rjmp	.+88     	; 0x1834 <_ZN8BLEMate29amCentralERb+0x18a>
      {
        return SUCCESS;
      }
      else if (buffer.startsWith("STS")) 
    17dc:	6f e7       	ldi	r22, 0x7F	; 127
    17de:	71 e0       	ldi	r23, 0x01	; 1
    17e0:	ce 01       	movw	r24, r28
    17e2:	01 96       	adiw	r24, 0x01	; 1
    17e4:	0e 94 8f 06 	call	0xd1e	; 0xd1e <_ZN6StringC1EPKc>
    17e8:	be 01       	movw	r22, r28
    17ea:	6f 5f       	subi	r22, 0xFF	; 255
    17ec:	7f 4f       	sbci	r23, 0xFF	; 255
    17ee:	ce 01       	movw	r24, r28
    17f0:	0d 96       	adiw	r24, 0x0d	; 13
    17f2:	0e 94 9c 07 	call	0xf38	; 0xf38 <_ZNK6String10startsWithERKS_>
    17f6:	88 2e       	mov	r8, r24
    17f8:	ce 01       	movw	r24, r28
    17fa:	01 96       	adiw	r24, 0x01	; 1
    17fc:	0e 94 21 06 	call	0xc42	; 0xc42 <_ZN6StringD1Ev>
    1800:	88 20       	and	r8, r8
    1802:	69 f0       	breq	.+26     	; 0x181e <_ZN8BLEMate29amCentralERb+0x174>
      {
        if (buffer.charAt(4) == 'C')
    1804:	64 e0       	ldi	r22, 0x04	; 4
    1806:	70 e0       	ldi	r23, 0x00	; 0
    1808:	ce 01       	movw	r24, r28
    180a:	0d 96       	adiw	r24, 0x0d	; 13
    180c:	0e 94 dd 07 	call	0xfba	; 0xfba <_ZNK6String6charAtEj>
    1810:	83 34       	cpi	r24, 0x43	; 67
    1812:	19 f4       	brne	.+6      	; 0x181a <_ZN8BLEMate29amCentralERb+0x170>
        {
          inCentralMode = true;
    1814:	f5 01       	movw	r30, r10
    1816:	90 82       	st	Z, r9
    1818:	02 c0       	rjmp	.+4      	; 0x181e <_ZN8BLEMate29amCentralERb+0x174>
        }
        else
        {
          inCentralMode = false;
    181a:	d5 01       	movw	r26, r10
    181c:	1c 92       	st	X, r1
        }
      } 
      buffer = "";
    181e:	60 e2       	ldi	r22, 0x20	; 32
    1820:	71 e0       	ldi	r23, 0x01	; 1
    1822:	ce 01       	movw	r24, r28
    1824:	0d 96       	adiw	r24, 0x0d	; 13
    1826:	0e 94 c5 06 	call	0xd8a	; 0xd8a <_ZN6StringaSEPKc>
    182a:	83 cf       	rjmp	.-250    	; 0x1732 <_ZN8BLEMate29amCentralERb+0x88>
    }    
  }
  return TIMEOUT_ERROR;
    182c:	1e ef       	ldi	r17, 0xFE	; 254
    182e:	03 c0       	rjmp	.+6      	; 0x1836 <_ZN8BLEMate29amCentralERb+0x18c>
    }
    if (buffer.endsWith(EOL))
    {
      if (buffer.startsWith("ER")) 
      {
        return MODULE_ERROR;
    1830:	1f ef       	ldi	r17, 0xFF	; 255
    1832:	01 c0       	rjmp	.+2      	; 0x1836 <_ZN8BLEMate29amCentralERb+0x18c>
      }
      else if (buffer.startsWith("OK")) 
      {
        return SUCCESS;
    1834:	11 e0       	ldi	r17, 0x01	; 1
//  since the whole point is to get it "from the horse's mouth" rather than
//  trusting that our software is in sync with the state of the module.
BLEMate2::opResult BLEMate2::amCentral(boolean &inCentralMode)
{
  String buffer;
  String EOL = String("\n\r");
    1836:	ce 01       	movw	r24, r28
    1838:	07 96       	adiw	r24, 0x07	; 7
    183a:	0e 94 21 06 	call	0xc42	; 0xc42 <_ZN6StringD1Ev>
        }
      } 
      buffer = "";
    }    
  }
  return TIMEOUT_ERROR;
    183e:	ce 01       	movw	r24, r28
    1840:	0d 96       	adiw	r24, 0x0d	; 13
    1842:	0e 94 21 06 	call	0xc42	; 0xc42 <_ZN6StringD1Ev>
}
    1846:	81 2f       	mov	r24, r17
    1848:	62 96       	adiw	r28, 0x12	; 18
    184a:	0f b6       	in	r0, 0x3f	; 63
    184c:	f8 94       	cli
    184e:	de bf       	out	0x3e, r29	; 62
    1850:	0f be       	out	0x3f, r0	; 63
    1852:	cd bf       	out	0x3d, r28	; 61
    1854:	df 91       	pop	r29
    1856:	cf 91       	pop	r28
    1858:	1f 91       	pop	r17
    185a:	0f 91       	pop	r16
    185c:	ff 90       	pop	r15
    185e:	ef 90       	pop	r14
    1860:	df 90       	pop	r13
    1862:	cf 90       	pop	r12
    1864:	bf 90       	pop	r11
    1866:	af 90       	pop	r10
    1868:	9f 90       	pop	r9
    186a:	8f 90       	pop	r8
    186c:	08 95       	ret

0000186e <_ZN8BLEMate28sendDataEPch>:
  return result;
}

// Now, byte array.
BLEMate2::opResult BLEMate2::sendData(char *dataBuffer, byte dataLen)
{
    186e:	8f 92       	push	r8
    1870:	9f 92       	push	r9
    1872:	af 92       	push	r10
    1874:	bf 92       	push	r11
    1876:	cf 92       	push	r12
    1878:	df 92       	push	r13
    187a:	ef 92       	push	r14
    187c:	ff 92       	push	r15
    187e:	0f 93       	push	r16
    1880:	1f 93       	push	r17
    1882:	cf 93       	push	r28
    1884:	df 93       	push	r29
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
    188a:	63 97       	sbiw	r28, 0x13	; 19
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	f8 94       	cli
    1890:	de bf       	out	0x3e, r29	; 62
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	cd bf       	out	0x3d, r28	; 61
    1896:	8c 01       	movw	r16, r24
    1898:	7b 01       	movw	r14, r22
    189a:	94 2e       	mov	r9, r20
  String EOL = String("\n\r");
    189c:	6e e1       	ldi	r22, 0x1E	; 30
    189e:	71 e0       	ldi	r23, 0x01	; 1
    18a0:	ce 01       	movw	r24, r28
    18a2:	0d 96       	adiw	r24, 0x0d	; 13
    18a4:	0e 94 8f 06 	call	0xd1e	; 0xd1e <_ZN6StringC1EPKc>
  //  I don't want to burden the user with that, unduly, so I'm going to chop
  //  up their data and send it out in smaller blocks.
   
  // Thus, the first quetion is: am I in central mode, or not?
  boolean inCentralMode;
  amCentral(inCentralMode);
    18a8:	be 01       	movw	r22, r28
    18aa:	6d 5e       	subi	r22, 0xED	; 237
    18ac:	7f 4f       	sbci	r23, 0xFF	; 255
    18ae:	c8 01       	movw	r24, r16
    18b0:	0e 94 55 0b 	call	0x16aa	; 0x16aa <_ZN8BLEMate29amCentralERb>
  // What we're now going to do is to build a String object with our buffer
  //  contents and then hit send on that buffer when it reaches a the length
  //  limited by the mode.

  byte outBufLenLimit = 20;
  if (!inCentralMode)
    18b4:	8b 89       	ldd	r24, Y+19	; 0x13
    18b6:	88 23       	and	r24, r24
    18b8:	19 f0       	breq	.+6      	; 0x18c0 <_ZN8BLEMate28sendDataEPch+0x52>

  // What we're now going to do is to build a String object with our buffer
  //  contents and then hit send on that buffer when it reaches a the length
  //  limited by the mode.

  byte outBufLenLimit = 20;
    18ba:	94 e1       	ldi	r25, 0x14	; 20
    18bc:	c9 2e       	mov	r12, r25
    18be:	02 c0       	rjmp	.+4      	; 0x18c4 <_ZN8BLEMate28sendDataEPch+0x56>
  if (!inCentralMode)
  {
    outBufLenLimit = 125;
    18c0:	8d e7       	ldi	r24, 0x7D	; 125
    18c2:	c8 2e       	mov	r12, r24
    }
    dataLeft -= outBufLenLimit;
    String outBuf;
    while (outBufLen < outBufLenLimit)
    {
      outBuf.concat(dataBuffer[inBufPtr++]);
    18c4:	b9 2c       	mov	r11, r9
    18c6:	aa 24       	eor	r10, r10
    18c8:	a3 94       	inc	r10
    18ca:	d1 2c       	mov	r13, r1
  byte inBufPtr = 0;
  byte outBufLen = 0;
  byte dataLeft = dataLen;

  opResult result = SUCCESS;
  while (inBufPtr < dataLen)
    18cc:	d9 14       	cp	r13, r9
    18ce:	08 f0       	brcs	.+2      	; 0x18d2 <_ZN8BLEMate28sendDataEPch+0x64>
    18d0:	4c c0       	rjmp	.+152    	; 0x196a <_ZN8BLEMate28sendDataEPch+0xfc>
    18d2:	bc 14       	cp	r11, r12
    18d4:	08 f4       	brcc	.+2      	; 0x18d8 <_ZN8BLEMate28sendDataEPch+0x6a>
    18d6:	cb 2c       	mov	r12, r11
  {
    if (dataLeft < outBufLenLimit)
    {
      outBufLenLimit = dataLeft;
    }
    dataLeft -= outBufLenLimit;
    18d8:	bc 18       	sub	r11, r12
    String outBuf;
    18da:	60 e2       	ldi	r22, 0x20	; 32
    18dc:	71 e0       	ldi	r23, 0x01	; 1
    18de:	ce 01       	movw	r24, r28
    18e0:	07 96       	adiw	r24, 0x07	; 7
    18e2:	0e 94 8f 06 	call	0xd1e	; 0xd1e <_ZN6StringC1EPKc>
    18e6:	ac 2c       	mov	r10, r12
    18e8:	ad 0c       	add	r10, r13
    while (outBufLen < outBufLenLimit)
    18ea:	da 14       	cp	r13, r10
    18ec:	69 f0       	breq	.+26     	; 0x1908 <_ZN8BLEMate28sendDataEPch+0x9a>
    {
      outBuf.concat(dataBuffer[inBufPtr++]);
    18ee:	88 24       	eor	r8, r8
    18f0:	83 94       	inc	r8
    18f2:	8d 0c       	add	r8, r13
    18f4:	f7 01       	movw	r30, r14
    18f6:	ed 0d       	add	r30, r13
    18f8:	f1 1d       	adc	r31, r1
    18fa:	60 81       	ld	r22, Z
    18fc:	ce 01       	movw	r24, r28
    18fe:	07 96       	adiw	r24, 0x07	; 7
    1900:	0e 94 19 07 	call	0xe32	; 0xe32 <_ZN6String6concatEc>
    1904:	d8 2c       	mov	r13, r8
    1906:	f1 cf       	rjmp	.-30     	; 0x18ea <_ZN8BLEMate28sendDataEPch+0x7c>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1908:	63 e8       	ldi	r22, 0x83	; 131
    190a:	71 e0       	ldi	r23, 0x01	; 1
    190c:	ce 01       	movw	r24, r28
    190e:	01 96       	adiw	r24, 0x01	; 1
    1910:	0e 94 8f 06 	call	0xd1e	; 0xd1e <_ZN6StringC1EPKc>
      outBufLen++;
    }
    outBuf = "SND " + outBuf + "\r";
    1914:	be 01       	movw	r22, r28
    1916:	69 5f       	subi	r22, 0xF9	; 249
    1918:	7f 4f       	sbci	r23, 0xFF	; 255
    191a:	ce 01       	movw	r24, r28
    191c:	01 96       	adiw	r24, 0x01	; 1
    191e:	0e 94 2c 07 	call	0xe58	; 0xe58 <_ZplRK15StringSumHelperRK6String>
    1922:	6f e1       	ldi	r22, 0x1F	; 31
    1924:	71 e0       	ldi	r23, 0x01	; 1
    1926:	0e 94 3f 07 	call	0xe7e	; 0xe7e <_ZplRK15StringSumHelperPKc>
    192a:	bc 01       	movw	r22, r24
    192c:	ce 01       	movw	r24, r28
    192e:	07 96       	adiw	r24, 0x07	; 7
    1930:	0e 94 a5 06 	call	0xd4a	; 0xd4a <_ZN6StringaSERKS_>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1934:	ce 01       	movw	r24, r28
    1936:	01 96       	adiw	r24, 0x01	; 1
    1938:	0e 94 21 06 	call	0xc42	; 0xc42 <_ZN6StringD1Ev>
    result = stdCmd(outBuf);
    193c:	be 01       	movw	r22, r28
    193e:	69 5f       	subi	r22, 0xF9	; 249
    1940:	7f 4f       	sbci	r23, 0xFF	; 255
    1942:	ce 01       	movw	r24, r28
    1944:	01 96       	adiw	r24, 0x01	; 1
    1946:	0e 94 bc 06 	call	0xd78	; 0xd78 <_ZN6StringC1ERKS_>
    194a:	be 01       	movw	r22, r28
    194c:	6f 5f       	subi	r22, 0xFF	; 255
    194e:	7f 4f       	sbci	r23, 0xFF	; 255
    1950:	c8 01       	movw	r24, r16
    1952:	0e 94 58 09 	call	0x12b0	; 0x12b0 <_ZN8BLEMate26stdCmdE6String>
    1956:	a8 2e       	mov	r10, r24
    1958:	ce 01       	movw	r24, r28
    195a:	01 96       	adiw	r24, 0x01	; 1
    195c:	0e 94 21 06 	call	0xc42	; 0xc42 <_ZN6StringD1Ev>
    outBufLen = 0;
  }
    1960:	ce 01       	movw	r24, r28
    1962:	07 96       	adiw	r24, 0x07	; 7
    1964:	0e 94 21 06 	call	0xc42	; 0xc42 <_ZN6StringD1Ev>
    1968:	b1 cf       	rjmp	.-158    	; 0x18cc <_ZN8BLEMate28sendDataEPch+0x5e>
  return result;
    196a:	ce 01       	movw	r24, r28
    196c:	0d 96       	adiw	r24, 0x0d	; 13
    196e:	0e 94 21 06 	call	0xc42	; 0xc42 <_ZN6StringD1Ev>
}
    1972:	8a 2d       	mov	r24, r10
    1974:	63 96       	adiw	r28, 0x13	; 19
    1976:	0f b6       	in	r0, 0x3f	; 63
    1978:	f8 94       	cli
    197a:	de bf       	out	0x3e, r29	; 62
    197c:	0f be       	out	0x3f, r0	; 63
    197e:	cd bf       	out	0x3d, r28	; 61
    1980:	df 91       	pop	r29
    1982:	cf 91       	pop	r28
    1984:	1f 91       	pop	r17
    1986:	0f 91       	pop	r16
    1988:	ff 90       	pop	r15
    198a:	ef 90       	pop	r14
    198c:	df 90       	pop	r13
    198e:	cf 90       	pop	r12
    1990:	bf 90       	pop	r11
    1992:	af 90       	pop	r10
    1994:	9f 90       	pop	r9
    1996:	8f 90       	pop	r8
    1998:	08 95       	ret

0000199a <_ZN8BLEMate28sendDataER6String>:
  String newBuffer = dataBuffer;
  return sendData(newBuffer);
}

BLEMate2::opResult BLEMate2::sendData(String &dataBuffer)
{
    199a:	cf 92       	push	r12
    199c:	df 92       	push	r13
    199e:	ef 92       	push	r14
    19a0:	ff 92       	push	r15
    19a2:	0f 93       	push	r16
    19a4:	1f 93       	push	r17
    19a6:	cf 93       	push	r28
    19a8:	df 93       	push	r29
    19aa:	6c 01       	movw	r12, r24
    19ac:	7b 01       	movw	r14, r22
  // First, we'll need to figure out the length of the string.
  int bufLength = dataBuffer.length()+1;
    19ae:	fb 01       	movw	r30, r22
    19b0:	c4 81       	ldd	r28, Z+4	; 0x04
    19b2:	d5 81       	ldd	r29, Z+5	; 0x05
    19b4:	21 96       	adiw	r28, 0x01	; 1

  // Now dynamically allocate an array of the appropriate size.
  char *charArray = new char [bufLength];
    19b6:	ce 01       	movw	r24, r28
    19b8:	0e 94 b9 02 	call	0x572	; 0x572 <_Znaj>
    19bc:	8c 01       	movw	r16, r24
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	ae 01       	movw	r20, r28
    19c4:	bc 01       	movw	r22, r24
    19c6:	c7 01       	movw	r24, r14
    19c8:	0e 94 df 07 	call	0xfbe	; 0xfbe <_ZNK6String8getBytesEPhjj>

  // Copy over the data.
  dataBuffer.toCharArray(charArray, bufLength);

  // Call the byte array function
  opResult result = sendData(charArray, bufLength);
    19cc:	4c 2f       	mov	r20, r28
    19ce:	b8 01       	movw	r22, r16
    19d0:	c6 01       	movw	r24, r12
    19d2:	0e 94 37 0c 	call	0x186e	; 0x186e <_ZN8BLEMate28sendDataEPch>
    19d6:	c8 2f       	mov	r28, r24

  // de-allocate the memory.
  delete charArray;
    19d8:	c8 01       	movw	r24, r16
    19da:	0e 94 bb 02 	call	0x576	; 0x576 <_ZdlPv>

  return result;
}
    19de:	8c 2f       	mov	r24, r28
    19e0:	df 91       	pop	r29
    19e2:	cf 91       	pop	r28
    19e4:	1f 91       	pop	r17
    19e6:	0f 91       	pop	r16
    19e8:	ff 90       	pop	r15
    19ea:	ef 90       	pop	r14
    19ec:	df 90       	pop	r13
    19ee:	cf 90       	pop	r12
    19f0:	08 95       	ret

000019f2 <setup_leds>:
unsigned long timer_top_arrow = 0;
unsigned long timer_right_arrow = 0;
unsigned long timer_status_led = 0;

void setup_leds()
{
    19f2:	cf 93       	push	r28
    19f4:	c2 e0       	ldi	r28, 0x02	; 2
    for (int i = 2; i < 12; i++) {
        pinMode(i, OUTPUT);
    19f6:	61 e0       	ldi	r22, 0x01	; 1
    19f8:	8c 2f       	mov	r24, r28
    19fa:	0e 94 b2 05 	call	0xb64	; 0xb64 <pinMode>
    19fe:	cf 5f       	subi	r28, 0xFF	; 255
unsigned long timer_right_arrow = 0;
unsigned long timer_status_led = 0;

void setup_leds()
{
    for (int i = 2; i < 12; i++) {
    1a00:	cc 30       	cpi	r28, 0x0C	; 12
    1a02:	c9 f7       	brne	.-14     	; 0x19f6 <setup_leds+0x4>
    1a04:	c2 e0       	ldi	r28, 0x02	; 2
        pinMode(i, OUTPUT);
    }
    for (int i = 2; i < 12; i++) {
        digitalWrite(i, HIGH);
    1a06:	61 e0       	ldi	r22, 0x01	; 1
    1a08:	8c 2f       	mov	r24, r28
    1a0a:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <digitalWrite>
        delay(500);
    1a0e:	64 ef       	ldi	r22, 0xF4	; 244
    1a10:	71 e0       	ldi	r23, 0x01	; 1
    1a12:	80 e0       	ldi	r24, 0x00	; 0
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	0e 94 09 05 	call	0xa12	; 0xa12 <delay>
        digitalWrite(i, LOW);
    1a1a:	60 e0       	ldi	r22, 0x00	; 0
    1a1c:	8c 2f       	mov	r24, r28
    1a1e:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <digitalWrite>
    1a22:	cf 5f       	subi	r28, 0xFF	; 255
void setup_leds()
{
    for (int i = 2; i < 12; i++) {
        pinMode(i, OUTPUT);
    }
    for (int i = 2; i < 12; i++) {
    1a24:	cc 30       	cpi	r28, 0x0C	; 12
    1a26:	79 f7       	brne	.-34     	; 0x1a06 <setup_leds+0x14>
        digitalWrite(i, HIGH);
        delay(500);
        digitalWrite(i, LOW);
    }
}
    1a28:	cf 91       	pop	r28
    1a2a:	08 95       	ret

00001a2c <blink_left_arrow>:

void blink_left_arrow ()
{ 
    1a2c:	0f 93       	push	r16
    1a2e:	1f 93       	push	r17
    if ((!left_arrow_is_on) && (millis() - timer_left_arrow > 500)) {
    1a30:	80 91 63 04 	lds	r24, 0x0463
    1a34:	81 11       	cpse	r24, r1
    1a36:	2c c0       	rjmp	.+88     	; 0x1a90 <blink_left_arrow+0x64>
    1a38:	0e 94 da 04 	call	0x9b4	; 0x9b4 <millis>
    1a3c:	00 91 17 04 	lds	r16, 0x0417
    1a40:	10 91 18 04 	lds	r17, 0x0418
    1a44:	20 91 19 04 	lds	r18, 0x0419
    1a48:	30 91 1a 04 	lds	r19, 0x041A
    1a4c:	60 1b       	sub	r22, r16
    1a4e:	71 0b       	sbc	r23, r17
    1a50:	82 0b       	sbc	r24, r18
    1a52:	93 0b       	sbc	r25, r19
    1a54:	65 3f       	cpi	r22, 0xF5	; 245
    1a56:	71 40       	sbci	r23, 0x01	; 1
    1a58:	81 05       	cpc	r24, r1
    1a5a:	91 05       	cpc	r25, r1
    1a5c:	c8 f0       	brcs	.+50     	; 0x1a90 <blink_left_arrow+0x64>
            digitalWrite(7, HIGH);
    1a5e:	61 e0       	ldi	r22, 0x01	; 1
    1a60:	87 e0       	ldi	r24, 0x07	; 7
    1a62:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <digitalWrite>
            digitalWrite(3, HIGH);
    1a66:	61 e0       	ldi	r22, 0x01	; 1
    1a68:	83 e0       	ldi	r24, 0x03	; 3
    1a6a:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <digitalWrite>
            digitalWrite(2, HIGH);
    1a6e:	61 e0       	ldi	r22, 0x01	; 1
    1a70:	82 e0       	ldi	r24, 0x02	; 2
    1a72:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <digitalWrite>
            timer_left_arrow = millis();
    1a76:	0e 94 da 04 	call	0x9b4	; 0x9b4 <millis>
    1a7a:	60 93 17 04 	sts	0x0417, r22
    1a7e:	70 93 18 04 	sts	0x0418, r23
    1a82:	80 93 19 04 	sts	0x0419, r24
    1a86:	90 93 1a 04 	sts	0x041A, r25
            left_arrow_is_on = true;
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	80 93 63 04 	sts	0x0463, r24
    }
    if (left_arrow_is_on && (millis() - timer_left_arrow > 500)) {
    1a90:	80 91 63 04 	lds	r24, 0x0463
    1a94:	88 23       	and	r24, r24
    1a96:	59 f1       	breq	.+86     	; 0x1aee <blink_left_arrow+0xc2>
    1a98:	0e 94 da 04 	call	0x9b4	; 0x9b4 <millis>
    1a9c:	00 91 17 04 	lds	r16, 0x0417
    1aa0:	10 91 18 04 	lds	r17, 0x0418
    1aa4:	20 91 19 04 	lds	r18, 0x0419
    1aa8:	30 91 1a 04 	lds	r19, 0x041A
    1aac:	60 1b       	sub	r22, r16
    1aae:	71 0b       	sbc	r23, r17
    1ab0:	82 0b       	sbc	r24, r18
    1ab2:	93 0b       	sbc	r25, r19
    1ab4:	65 3f       	cpi	r22, 0xF5	; 245
    1ab6:	71 40       	sbci	r23, 0x01	; 1
    1ab8:	81 05       	cpc	r24, r1
    1aba:	91 05       	cpc	r25, r1
    1abc:	c0 f0       	brcs	.+48     	; 0x1aee <blink_left_arrow+0xc2>
            digitalWrite(7, LOW);
    1abe:	60 e0       	ldi	r22, 0x00	; 0
    1ac0:	87 e0       	ldi	r24, 0x07	; 7
    1ac2:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <digitalWrite>
            digitalWrite(3, LOW);
    1ac6:	60 e0       	ldi	r22, 0x00	; 0
    1ac8:	83 e0       	ldi	r24, 0x03	; 3
    1aca:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <digitalWrite>
            digitalWrite(2, LOW);
    1ace:	60 e0       	ldi	r22, 0x00	; 0
    1ad0:	82 e0       	ldi	r24, 0x02	; 2
    1ad2:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <digitalWrite>
            timer_left_arrow = millis();
    1ad6:	0e 94 da 04 	call	0x9b4	; 0x9b4 <millis>
    1ada:	60 93 17 04 	sts	0x0417, r22
    1ade:	70 93 18 04 	sts	0x0418, r23
    1ae2:	80 93 19 04 	sts	0x0419, r24
    1ae6:	90 93 1a 04 	sts	0x041A, r25
            left_arrow_is_on = false;
    1aea:	10 92 63 04 	sts	0x0463, r1
    }
}
    1aee:	1f 91       	pop	r17
    1af0:	0f 91       	pop	r16
    1af2:	08 95       	ret

00001af4 <turn_off_left_arrow>:

void turn_off_left_arrow()
{
    digitalWrite(7, LOW);
    1af4:	60 e0       	ldi	r22, 0x00	; 0
    1af6:	87 e0       	ldi	r24, 0x07	; 7
    1af8:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <digitalWrite>
    digitalWrite(3, LOW);
    1afc:	60 e0       	ldi	r22, 0x00	; 0
    1afe:	83 e0       	ldi	r24, 0x03	; 3
    1b00:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <digitalWrite>
    digitalWrite(2, LOW);
    1b04:	60 e0       	ldi	r22, 0x00	; 0
    1b06:	82 e0       	ldi	r24, 0x02	; 2
    1b08:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <digitalWrite>
    timer_left_arrow = 0;
    1b0c:	10 92 17 04 	sts	0x0417, r1
    1b10:	10 92 18 04 	sts	0x0418, r1
    1b14:	10 92 19 04 	sts	0x0419, r1
    1b18:	10 92 1a 04 	sts	0x041A, r1
    left_arrow_is_on = false;
    1b1c:	10 92 63 04 	sts	0x0463, r1
    1b20:	08 95       	ret

00001b22 <blink_right_arrow>:
}

void blink_right_arrow ()
{
    1b22:	0f 93       	push	r16
    1b24:	1f 93       	push	r17
    if ((!right_arrow_is_on) && (millis() - timer_right_arrow > 500)) {
    1b26:	80 91 62 04 	lds	r24, 0x0462
    1b2a:	81 11       	cpse	r24, r1
    1b2c:	2c c0       	rjmp	.+88     	; 0x1b86 <blink_right_arrow+0x64>
    1b2e:	0e 94 da 04 	call	0x9b4	; 0x9b4 <millis>
    1b32:	00 91 0f 04 	lds	r16, 0x040F
    1b36:	10 91 10 04 	lds	r17, 0x0410
    1b3a:	20 91 11 04 	lds	r18, 0x0411
    1b3e:	30 91 12 04 	lds	r19, 0x0412
    1b42:	60 1b       	sub	r22, r16
    1b44:	71 0b       	sbc	r23, r17
    1b46:	82 0b       	sbc	r24, r18
    1b48:	93 0b       	sbc	r25, r19
    1b4a:	65 3f       	cpi	r22, 0xF5	; 245
    1b4c:	71 40       	sbci	r23, 0x01	; 1
    1b4e:	81 05       	cpc	r24, r1
    1b50:	91 05       	cpc	r25, r1
    1b52:	c8 f0       	brcs	.+50     	; 0x1b86 <blink_right_arrow+0x64>
        digitalWrite(8, HIGH);
    1b54:	61 e0       	ldi	r22, 0x01	; 1
    1b56:	88 e0       	ldi	r24, 0x08	; 8
    1b58:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <digitalWrite>
        digitalWrite(10, HIGH);
    1b5c:	61 e0       	ldi	r22, 0x01	; 1
    1b5e:	8a e0       	ldi	r24, 0x0A	; 10
    1b60:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <digitalWrite>
        digitalWrite(5, HIGH);
    1b64:	61 e0       	ldi	r22, 0x01	; 1
    1b66:	85 e0       	ldi	r24, 0x05	; 5
    1b68:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <digitalWrite>
        timer_right_arrow = millis();
    1b6c:	0e 94 da 04 	call	0x9b4	; 0x9b4 <millis>
    1b70:	60 93 0f 04 	sts	0x040F, r22
    1b74:	70 93 10 04 	sts	0x0410, r23
    1b78:	80 93 11 04 	sts	0x0411, r24
    1b7c:	90 93 12 04 	sts	0x0412, r25
        right_arrow_is_on = true;
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	80 93 62 04 	sts	0x0462, r24
    }
    if (right_arrow_is_on && (millis() - timer_right_arrow > 500)) {
    1b86:	80 91 62 04 	lds	r24, 0x0462
    1b8a:	88 23       	and	r24, r24
    1b8c:	59 f1       	breq	.+86     	; 0x1be4 <blink_right_arrow+0xc2>
    1b8e:	0e 94 da 04 	call	0x9b4	; 0x9b4 <millis>
    1b92:	00 91 0f 04 	lds	r16, 0x040F
    1b96:	10 91 10 04 	lds	r17, 0x0410
    1b9a:	20 91 11 04 	lds	r18, 0x0411
    1b9e:	30 91 12 04 	lds	r19, 0x0412
    1ba2:	60 1b       	sub	r22, r16
    1ba4:	71 0b       	sbc	r23, r17
    1ba6:	82 0b       	sbc	r24, r18
    1ba8:	93 0b       	sbc	r25, r19
    1baa:	65 3f       	cpi	r22, 0xF5	; 245
    1bac:	71 40       	sbci	r23, 0x01	; 1
    1bae:	81 05       	cpc	r24, r1
    1bb0:	91 05       	cpc	r25, r1
    1bb2:	c0 f0       	brcs	.+48     	; 0x1be4 <blink_right_arrow+0xc2>
        digitalWrite(8, LOW);
    1bb4:	60 e0       	ldi	r22, 0x00	; 0
    1bb6:	88 e0       	ldi	r24, 0x08	; 8
    1bb8:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <digitalWrite>
        digitalWrite(10, LOW);
    1bbc:	60 e0       	ldi	r22, 0x00	; 0
    1bbe:	8a e0       	ldi	r24, 0x0A	; 10
    1bc0:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <digitalWrite>
        digitalWrite(5, LOW);
    1bc4:	60 e0       	ldi	r22, 0x00	; 0
    1bc6:	85 e0       	ldi	r24, 0x05	; 5
    1bc8:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <digitalWrite>
        timer_right_arrow = millis();
    1bcc:	0e 94 da 04 	call	0x9b4	; 0x9b4 <millis>
    1bd0:	60 93 0f 04 	sts	0x040F, r22
    1bd4:	70 93 10 04 	sts	0x0410, r23
    1bd8:	80 93 11 04 	sts	0x0411, r24
    1bdc:	90 93 12 04 	sts	0x0412, r25
        right_arrow_is_on = false;
    1be0:	10 92 62 04 	sts	0x0462, r1
    }
}
    1be4:	1f 91       	pop	r17
    1be6:	0f 91       	pop	r16
    1be8:	08 95       	ret

00001bea <turn_off_right_arrow>:

void turn_off_right_arrow()
{
    digitalWrite(8, LOW);
    1bea:	60 e0       	ldi	r22, 0x00	; 0
    1bec:	88 e0       	ldi	r24, 0x08	; 8
    1bee:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <digitalWrite>
    digitalWrite(10, LOW);
    1bf2:	60 e0       	ldi	r22, 0x00	; 0
    1bf4:	8a e0       	ldi	r24, 0x0A	; 10
    1bf6:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <digitalWrite>
    digitalWrite(5, LOW);
    1bfa:	60 e0       	ldi	r22, 0x00	; 0
    1bfc:	85 e0       	ldi	r24, 0x05	; 5
    1bfe:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <digitalWrite>
    timer_right_arrow = 0;
    1c02:	10 92 0f 04 	sts	0x040F, r1
    1c06:	10 92 10 04 	sts	0x0410, r1
    1c0a:	10 92 11 04 	sts	0x0411, r1
    1c0e:	10 92 12 04 	sts	0x0412, r1
    right_arrow_is_on = false;
    1c12:	10 92 62 04 	sts	0x0462, r1
    1c16:	08 95       	ret

00001c18 <blink_top_arrow>:
}

void blink_top_arrow ()
{
    1c18:	0f 93       	push	r16
    1c1a:	1f 93       	push	r17
    if ((!top_arrow_is_on) && (millis() - timer_top_arrow > 500)) {
    1c1c:	80 91 64 04 	lds	r24, 0x0464
    1c20:	81 11       	cpse	r24, r1
    1c22:	2c c0       	rjmp	.+88     	; 0x1c7c <blink_top_arrow+0x64>
    1c24:	0e 94 da 04 	call	0x9b4	; 0x9b4 <millis>
    1c28:	00 91 13 04 	lds	r16, 0x0413
    1c2c:	10 91 14 04 	lds	r17, 0x0414
    1c30:	20 91 15 04 	lds	r18, 0x0415
    1c34:	30 91 16 04 	lds	r19, 0x0416
    1c38:	60 1b       	sub	r22, r16
    1c3a:	71 0b       	sbc	r23, r17
    1c3c:	82 0b       	sbc	r24, r18
    1c3e:	93 0b       	sbc	r25, r19
    1c40:	65 3f       	cpi	r22, 0xF5	; 245
    1c42:	71 40       	sbci	r23, 0x01	; 1
    1c44:	81 05       	cpc	r24, r1
    1c46:	91 05       	cpc	r25, r1
    1c48:	c8 f0       	brcs	.+50     	; 0x1c7c <blink_top_arrow+0x64>
        digitalWrite(4, HIGH);
    1c4a:	61 e0       	ldi	r22, 0x01	; 1
    1c4c:	84 e0       	ldi	r24, 0x04	; 4
    1c4e:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <digitalWrite>
        digitalWrite(9, HIGH);
    1c52:	61 e0       	ldi	r22, 0x01	; 1
    1c54:	89 e0       	ldi	r24, 0x09	; 9
    1c56:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <digitalWrite>
        digitalWrite(6, HIGH);
    1c5a:	61 e0       	ldi	r22, 0x01	; 1
    1c5c:	86 e0       	ldi	r24, 0x06	; 6
    1c5e:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <digitalWrite>
        timer_top_arrow = millis();
    1c62:	0e 94 da 04 	call	0x9b4	; 0x9b4 <millis>
    1c66:	60 93 13 04 	sts	0x0413, r22
    1c6a:	70 93 14 04 	sts	0x0414, r23
    1c6e:	80 93 15 04 	sts	0x0415, r24
    1c72:	90 93 16 04 	sts	0x0416, r25
        top_arrow_is_on = true;
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	80 93 64 04 	sts	0x0464, r24
    }
    if (top_arrow_is_on && (millis() - timer_top_arrow > 500)) {
    1c7c:	80 91 64 04 	lds	r24, 0x0464
    1c80:	88 23       	and	r24, r24
    1c82:	59 f1       	breq	.+86     	; 0x1cda <blink_top_arrow+0xc2>
    1c84:	0e 94 da 04 	call	0x9b4	; 0x9b4 <millis>
    1c88:	00 91 13 04 	lds	r16, 0x0413
    1c8c:	10 91 14 04 	lds	r17, 0x0414
    1c90:	20 91 15 04 	lds	r18, 0x0415
    1c94:	30 91 16 04 	lds	r19, 0x0416
    1c98:	60 1b       	sub	r22, r16
    1c9a:	71 0b       	sbc	r23, r17
    1c9c:	82 0b       	sbc	r24, r18
    1c9e:	93 0b       	sbc	r25, r19
    1ca0:	65 3f       	cpi	r22, 0xF5	; 245
    1ca2:	71 40       	sbci	r23, 0x01	; 1
    1ca4:	81 05       	cpc	r24, r1
    1ca6:	91 05       	cpc	r25, r1
    1ca8:	c0 f0       	brcs	.+48     	; 0x1cda <blink_top_arrow+0xc2>
        digitalWrite(4, LOW);
    1caa:	60 e0       	ldi	r22, 0x00	; 0
    1cac:	84 e0       	ldi	r24, 0x04	; 4
    1cae:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <digitalWrite>
        digitalWrite(9, LOW);
    1cb2:	60 e0       	ldi	r22, 0x00	; 0
    1cb4:	89 e0       	ldi	r24, 0x09	; 9
    1cb6:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <digitalWrite>
        digitalWrite(6, LOW);
    1cba:	60 e0       	ldi	r22, 0x00	; 0
    1cbc:	86 e0       	ldi	r24, 0x06	; 6
    1cbe:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <digitalWrite>
        timer_top_arrow = millis();
    1cc2:	0e 94 da 04 	call	0x9b4	; 0x9b4 <millis>
    1cc6:	60 93 13 04 	sts	0x0413, r22
    1cca:	70 93 14 04 	sts	0x0414, r23
    1cce:	80 93 15 04 	sts	0x0415, r24
    1cd2:	90 93 16 04 	sts	0x0416, r25
        top_arrow_is_on = false;
    1cd6:	10 92 64 04 	sts	0x0464, r1
    }
}
    1cda:	1f 91       	pop	r17
    1cdc:	0f 91       	pop	r16
    1cde:	08 95       	ret

00001ce0 <turn_off_top_arrow>:

void turn_off_top_arrow()
{
    digitalWrite(4, LOW);
    1ce0:	60 e0       	ldi	r22, 0x00	; 0
    1ce2:	84 e0       	ldi	r24, 0x04	; 4
    1ce4:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <digitalWrite>
    digitalWrite(9, LOW);
    1ce8:	60 e0       	ldi	r22, 0x00	; 0
    1cea:	89 e0       	ldi	r24, 0x09	; 9
    1cec:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <digitalWrite>
    digitalWrite(6, LOW);
    1cf0:	60 e0       	ldi	r22, 0x00	; 0
    1cf2:	86 e0       	ldi	r24, 0x06	; 6
    1cf4:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <digitalWrite>
    timer_top_arrow = 0;
    1cf8:	10 92 13 04 	sts	0x0413, r1
    1cfc:	10 92 14 04 	sts	0x0414, r1
    1d00:	10 92 15 04 	sts	0x0415, r1
    1d04:	10 92 16 04 	sts	0x0416, r1
    top_arrow_is_on = false;
    1d08:	10 92 64 04 	sts	0x0464, r1
    1d0c:	08 95       	ret

00001d0e <blink_status_led>:
}

void blink_status_led()
{
    1d0e:	0f 93       	push	r16
    1d10:	1f 93       	push	r17

    if ((!status_led_is_on) && (millis() - timer_status_led > 500)) {
    1d12:	80 91 65 04 	lds	r24, 0x0465
    1d16:	81 11       	cpse	r24, r1
    1d18:	24 c0       	rjmp	.+72     	; 0x1d62 <blink_status_led+0x54>
    1d1a:	0e 94 da 04 	call	0x9b4	; 0x9b4 <millis>
    1d1e:	00 91 0b 04 	lds	r16, 0x040B
    1d22:	10 91 0c 04 	lds	r17, 0x040C
    1d26:	20 91 0d 04 	lds	r18, 0x040D
    1d2a:	30 91 0e 04 	lds	r19, 0x040E
    1d2e:	60 1b       	sub	r22, r16
    1d30:	71 0b       	sbc	r23, r17
    1d32:	82 0b       	sbc	r24, r18
    1d34:	93 0b       	sbc	r25, r19
    1d36:	65 3f       	cpi	r22, 0xF5	; 245
    1d38:	71 40       	sbci	r23, 0x01	; 1
    1d3a:	81 05       	cpc	r24, r1
    1d3c:	91 05       	cpc	r25, r1
    1d3e:	88 f0       	brcs	.+34     	; 0x1d62 <blink_status_led+0x54>
        digitalWrite(11, HIGH);
    1d40:	61 e0       	ldi	r22, 0x01	; 1
    1d42:	8b e0       	ldi	r24, 0x0B	; 11
    1d44:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <digitalWrite>
        timer_status_led = millis();
    1d48:	0e 94 da 04 	call	0x9b4	; 0x9b4 <millis>
    1d4c:	60 93 0b 04 	sts	0x040B, r22
    1d50:	70 93 0c 04 	sts	0x040C, r23
    1d54:	80 93 0d 04 	sts	0x040D, r24
    1d58:	90 93 0e 04 	sts	0x040E, r25
        status_led_is_on = true;
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	80 93 65 04 	sts	0x0465, r24
    }
    if (status_led_is_on && (millis() - timer_status_led > 500)) {
    1d62:	80 91 65 04 	lds	r24, 0x0465
    1d66:	88 23       	and	r24, r24
    1d68:	19 f1       	breq	.+70     	; 0x1db0 <blink_status_led+0xa2>
    1d6a:	0e 94 da 04 	call	0x9b4	; 0x9b4 <millis>
    1d6e:	00 91 0b 04 	lds	r16, 0x040B
    1d72:	10 91 0c 04 	lds	r17, 0x040C
    1d76:	20 91 0d 04 	lds	r18, 0x040D
    1d7a:	30 91 0e 04 	lds	r19, 0x040E
    1d7e:	60 1b       	sub	r22, r16
    1d80:	71 0b       	sbc	r23, r17
    1d82:	82 0b       	sbc	r24, r18
    1d84:	93 0b       	sbc	r25, r19
    1d86:	65 3f       	cpi	r22, 0xF5	; 245
    1d88:	71 40       	sbci	r23, 0x01	; 1
    1d8a:	81 05       	cpc	r24, r1
    1d8c:	91 05       	cpc	r25, r1
    1d8e:	80 f0       	brcs	.+32     	; 0x1db0 <blink_status_led+0xa2>
        digitalWrite(11, LOW);
    1d90:	60 e0       	ldi	r22, 0x00	; 0
    1d92:	8b e0       	ldi	r24, 0x0B	; 11
    1d94:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <digitalWrite>
        timer_status_led = millis();
    1d98:	0e 94 da 04 	call	0x9b4	; 0x9b4 <millis>
    1d9c:	60 93 0b 04 	sts	0x040B, r22
    1da0:	70 93 0c 04 	sts	0x040C, r23
    1da4:	80 93 0d 04 	sts	0x040D, r24
    1da8:	90 93 0e 04 	sts	0x040E, r25
        status_led_is_on = false;
    1dac:	10 92 65 04 	sts	0x0465, r1
    }
      
}
    1db0:	1f 91       	pop	r17
    1db2:	0f 91       	pop	r16
    1db4:	08 95       	ret

00001db6 <turn_off_status_led>:

void turn_off_status_led()
{
    digitalWrite(11, LOW);
    1db6:	60 e0       	ldi	r22, 0x00	; 0
    1db8:	8b e0       	ldi	r24, 0x0B	; 11
    1dba:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <digitalWrite>
    timer_status_led = 0;
    1dbe:	10 92 0b 04 	sts	0x040B, r1
    1dc2:	10 92 0c 04 	sts	0x040C, r1
    1dc6:	10 92 0d 04 	sts	0x040D, r1
    1dca:	10 92 0e 04 	sts	0x040E, r1
    status_led_is_on = false;
    1dce:	10 92 65 04 	sts	0x0465, r1
    1dd2:	08 95       	ret

00001dd4 <initVariant>:
int atexit(void (*func)()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    1dd4:	08 95       	ret

00001dd6 <main>:

int main(void)
{
	init();
    1dd6:	0e 94 31 05 	call	0xa62	; 0xa62 <init>

	initVariant();
    1dda:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1dde:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <_Z5setupv>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1de2:	c8 eb       	ldi	r28, 0xB8	; 184
    1de4:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    1de6:	0e 94 4b 11 	call	0x2296	; 0x2296 <_Z4loopv>
		if (serialEventRun) serialEventRun();
    1dea:	20 97       	sbiw	r28, 0x00	; 0
    1dec:	e1 f3       	breq	.-8      	; 0x1de6 <main+0x10>
    1dee:	0e 94 b8 00 	call	0x170	; 0x170 <_Z14serialEventRunv>
    1df2:	f9 cf       	rjmp	.-14     	; 0x1de6 <main+0x10>

00001df4 <_Z41__static_initialization_and_destruction_0ii.part.1>:
    if (status_led_on) {
        blink_status_led();
    } else {
        turn_off_status_led();
    }
}
    1df4:	cf 93       	push	r28
    1df6:	df 93       	push	r29
#ifndef BLEMate2_h
#define BLEMate2_h

#include "../Arduino/Arduino.h"

class BLEMate2
    1df8:	81 e3       	ldi	r24, 0x31	; 49
    1dfa:	94 e0       	ldi	r25, 0x04	; 4
    1dfc:	89 2b       	or	r24, r25
    1dfe:	51 f4       	brne	.+20     	; 0x1e14 <_Z41__static_initialization_and_destruction_0ii.part.1+0x20>
}
#include "../lib/Arduino/Arduino.h"
#include "../lib/SparkFun_BLEMate2/SparkFun_BLEMate2.h"

String inputBuffer;
String sendBuffer;
    1e00:	86 e5       	ldi	r24, 0x56	; 86
    1e02:	94 e0       	ldi	r25, 0x04	; 4
    1e04:	0e 94 21 06 	call	0xc42	; 0xc42 <_ZN6StringD1Ev>
    #include "blink_leds.h"
}
#include "../lib/Arduino/Arduino.h"
#include "../lib/SparkFun_BLEMate2/SparkFun_BLEMate2.h"

String inputBuffer;
    1e08:	8c e5       	ldi	r24, 0x5C	; 92
    1e0a:	94 e0       	ldi	r25, 0x04	; 4
    if (status_led_on) {
        blink_status_led();
    } else {
        turn_off_status_led();
    }
}
    1e0c:	df 91       	pop	r29
    1e0e:	cf 91       	pop	r28
    #include "blink_leds.h"
}
#include "../lib/Arduino/Arduino.h"
#include "../lib/SparkFun_BLEMate2/SparkFun_BLEMate2.h"

String inputBuffer;
    1e10:	0c 94 21 06 	jmp	0xc42	; 0xc42 <_ZN6StringD1Ev>
    1e14:	cf e4       	ldi	r28, 0x4F	; 79
    1e16:	d4 e0       	ldi	r29, 0x04	; 4
    1e18:	26 97       	sbiw	r28, 0x06	; 6
    1e1a:	ce 01       	movw	r24, r28
    1e1c:	0e 94 21 06 	call	0xc42	; 0xc42 <_ZN6StringD1Ev>
    1e20:	84 e0       	ldi	r24, 0x04	; 4
    1e22:	c1 33       	cpi	r28, 0x31	; 49
    1e24:	d8 07       	cpc	r29, r24
    1e26:	c1 f7       	brne	.-16     	; 0x1e18 <_Z41__static_initialization_and_destruction_0ii.part.1+0x24>
    1e28:	eb cf       	rjmp	.-42     	; 0x1e00 <_Z41__static_initialization_and_destruction_0ii.part.1+0xc>

00001e2a <_Z5setupv>:
unsigned long flex_sensor_read_task_last_run = 0;
unsigned long led_blink_task_last_run = 0;


void setup()
{
    1e2a:	ff 92       	push	r15
    1e2c:	0f 93       	push	r16
    1e2e:	1f 93       	push	r17
    1e30:	cf 93       	push	r28
    1e32:	df 93       	push	r29
    setup_leds();
    1e34:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <setup_leds>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    1e38:	26 e0       	ldi	r18, 0x06	; 6
    1e3a:	40 e8       	ldi	r20, 0x80	; 128
    1e3c:	55 e2       	ldi	r21, 0x25	; 37
    1e3e:	60 e0       	ldi	r22, 0x00	; 0
    1e40:	70 e0       	ldi	r23, 0x00	; 0
    1e42:	84 e5       	ldi	r24, 0x54	; 84
    1e44:	93 e0       	ldi	r25, 0x03	; 3
    1e46:	0e 94 6e 01 	call	0x2dc	; 0x2dc <_ZN14HardwareSerial5beginEmh>
    
    Serial.begin(9600);           // This is the BC118 default baud rate.

    #ifdef DEBUG
    Serial.println("Serial has started...");
    1e4a:	68 e8       	ldi	r22, 0x88	; 136
    1e4c:	71 e0       	ldi	r23, 0x01	; 1
    1e4e:	84 e5       	ldi	r24, 0x54	; 84
    1e50:	93 e0       	ldi	r25, 0x03	; 3
    1e52:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN5Print7printlnEPKc>
    1e56:	ca e0       	ldi	r28, 0x0A	; 10
    1e58:	d0 e0       	ldi	r29, 0x00	; 0
    //  SUCCESS - What it says.


    boolean firstResetSuccess = false;
    boolean restoreSuccess = false;
    boolean writeConfigSuccess = false;
    1e5a:	f1 2c       	mov	r15, r1
    //                  commands and parameters outside the built-ins.
    //  SUCCESS - What it says.


    boolean firstResetSuccess = false;
    boolean restoreSuccess = false;
    1e5c:	00 e0       	ldi	r16, 0x00	; 0
    //                  This will probably only occur when you attempt to send
    //                  commands and parameters outside the built-ins.
    //  SUCCESS - What it says.


    boolean firstResetSuccess = false;
    1e5e:	10 e0       	ldi	r17, 0x00	; 0
        //  the "SCN OFF" command after the reset is completed. Why is this important?
        //  Because if the device is in central mode, it *will* be scanning on reset.
        //  No way to change that. The text traffic generated by the scanning will
        //  interfere with the firmware on the Arduino properly identifying response
        //  strings from the BC118.
        if (BTModu.reset() == BLEMate2::SUCCESS)
    1e60:	8f e2       	ldi	r24, 0x2F	; 47
    1e62:	94 e0       	ldi	r25, 0x04	; 4
    1e64:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZN8BLEMate25resetEv>
    1e68:	81 30       	cpi	r24, 0x01	; 1
    1e6a:	b1 f4       	brne	.+44     	; 0x1e98 <_Z5setupv+0x6e>
        // restore() resets the module to factory defaults; you'll need to perform
        //  a writeConfig() and reset() to make those settings take effect. We don't
        //  do that automatically because there may be things the user wants to
        //  change before committing the settings to non-volatile memory and
        //  resetting.
        if (BTModu.restore() == BLEMate2::SUCCESS)
    1e6c:	8f e2       	ldi	r24, 0x2F	; 47
    1e6e:	94 e0       	ldi	r25, 0x04	; 4
    1e70:	0e 94 19 0a 	call	0x1432	; 0x1432 <_ZN8BLEMate27restoreEv>
    1e74:	81 30       	cpi	r24, 0x01	; 1
    1e76:	c9 f4       	brne	.+50     	; 0x1eaa <_Z5setupv+0x80>
        }
        // writeConfig() stores the current settings in non-volatile memory, so they
        //  will be in place on the next reboot of the module. Note that some, but
        //  not all, settings changes require a reboot. It's probably in general best
        //  to write/reset when changing anything.
        if (BTModu.writeConfig() == BLEMate2::SUCCESS)
    1e78:	8f e2       	ldi	r24, 0x2F	; 47
    1e7a:	94 e0       	ldi	r25, 0x04	; 4
    1e7c:	0e 94 40 0a 	call	0x1480	; 0x1480 <_ZN8BLEMate211writeConfigEv>
    1e80:	81 30       	cpi	r24, 0x01	; 1
    1e82:	c1 f4       	brne	.+48     	; 0x1eb4 <_Z5setupv+0x8a>
        // One more reset, to make the changes take effect.
        // NB!!!!!!!!!!!!! This write/reset thing is *really* important.
        //  The status command (STS) and the LEDs *will* lie to you and tell you that
        //  you are e.g. advertising or in central mode when in fact that is not the
        //  case and the module still needs to be reset before that is actually true.
        if (BTModu.reset() == BLEMate2::SUCCESS)
    1e84:	8f e2       	ldi	r24, 0x2F	; 47
    1e86:	94 e0       	ldi	r25, 0x04	; 4
    1e88:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZN8BLEMate25resetEv>
    1e8c:	81 30       	cpi	r24, 0x01	; 1
    1e8e:	01 f1       	breq	.+64     	; 0x1ed0 <_Z5setupv+0xa6>
        //  will be in place on the next reboot of the module. Note that some, but
        //  not all, settings changes require a reboot. It's probably in general best
        //  to write/reset when changing anything.
        if (BTModu.writeConfig() == BLEMate2::SUCCESS)
        {
            writeConfigSuccess = true;
    1e90:	ff 24       	eor	r15, r15
    1e92:	f3 94       	inc	r15
        //  do that automatically because there may be things the user wants to
        //  change before committing the settings to non-volatile memory and
        //  resetting.
        if (BTModu.restore() == BLEMate2::SUCCESS)
        {
            restoreSuccess = true;
    1e94:	01 e0       	ldi	r16, 0x01	; 1
    1e96:	14 c0       	rjmp	.+40     	; 0x1ec0 <_Z5setupv+0x96>
            goto setup_try_again;
        }

        setup_try_again:
        //#ifdef DEBUG
        if (!firstResetSuccess) {
    1e98:	11 11       	cpse	r17, r1
    1e9a:	07 c0       	rjmp	.+14     	; 0x1eaa <_Z5setupv+0x80>
            Serial.println("Module reset error!");
    1e9c:	6e e9       	ldi	r22, 0x9E	; 158
    1e9e:	71 e0       	ldi	r23, 0x01	; 1
    1ea0:	84 e5       	ldi	r24, 0x54	; 84
    1ea2:	93 e0       	ldi	r25, 0x03	; 3
    1ea4:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN5Print7printlnEPKc>
    1ea8:	2a c0       	rjmp	.+84     	; 0x1efe <_Z5setupv+0xd4>
            } else if (!restoreSuccess) {
    1eaa:	01 11       	cpse	r16, r1
    1eac:	04 c0       	rjmp	.+8      	; 0x1eb6 <_Z5setupv+0x8c>
            Serial.println("Module restore error!");
    1eae:	62 eb       	ldi	r22, 0xB2	; 178
    1eb0:	71 e0       	ldi	r23, 0x01	; 1
    1eb2:	08 c0       	rjmp	.+16     	; 0x1ec4 <_Z5setupv+0x9a>
        //  do that automatically because there may be things the user wants to
        //  change before committing the settings to non-volatile memory and
        //  resetting.
        if (BTModu.restore() == BLEMate2::SUCCESS)
        {
            restoreSuccess = true;
    1eb4:	01 e0       	ldi	r16, 0x01	; 1
        //#ifdef DEBUG
        if (!firstResetSuccess) {
            Serial.println("Module reset error!");
            } else if (!restoreSuccess) {
            Serial.println("Module restore error!");
            } else if (!writeConfigSuccess) {
    1eb6:	f1 10       	cpse	r15, r1
    1eb8:	03 c0       	rjmp	.+6      	; 0x1ec0 <_Z5setupv+0x96>
            Serial.println("Module write config error!");
    1eba:	68 ec       	ldi	r22, 0xC8	; 200
    1ebc:	71 e0       	ldi	r23, 0x01	; 1
    1ebe:	02 c0       	rjmp	.+4      	; 0x1ec4 <_Z5setupv+0x9a>
            } else if (!secondResetSuccess) {
            Serial.println("Second module reset error!");
    1ec0:	63 ee       	ldi	r22, 0xE3	; 227
    1ec2:	71 e0       	ldi	r23, 0x01	; 1
    1ec4:	84 e5       	ldi	r24, 0x54	; 84
    1ec6:	93 e0       	ldi	r25, 0x03	; 3
    1ec8:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN5Print7printlnEPKc>
    1ecc:	11 e0       	ldi	r17, 0x01	; 1
    1ece:	17 c0       	rjmp	.+46     	; 0x1efe <_Z5setupv+0xd4>
            } else {
            Serial.println("Reset/Restore/Write Config PASSED...");
    1ed0:	6e ef       	ldi	r22, 0xFE	; 254
    1ed2:	71 e0       	ldi	r23, 0x01	; 1
    1ed4:	84 e5       	ldi	r24, 0x54	; 84
    1ed6:	93 e0       	ldi	r25, 0x03	; 3
    1ed8:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN5Print7printlnEPKc>
        #endif
        while(1) {}
    }
    
    #ifdef DEBUG
    Serial.println("Reset/Restore/Write Config DONE!");
    1edc:	61 e6       	ldi	r22, 0x61	; 97
    1ede:	72 e0       	ldi	r23, 0x02	; 2
    1ee0:	84 e5       	ldi	r24, 0x54	; 84
    1ee2:	93 e0       	ldi	r25, 0x03	; 3
    1ee4:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN5Print7printlnEPKc>
    #endif
    delay(1000);
    1ee8:	68 ee       	ldi	r22, 0xE8	; 232
    1eea:	73 e0       	ldi	r23, 0x03	; 3
    1eec:	80 e0       	ldi	r24, 0x00	; 0
    1eee:	90 e0       	ldi	r25, 0x00	; 0
}
    1ef0:	df 91       	pop	r29
    1ef2:	cf 91       	pop	r28
    1ef4:	1f 91       	pop	r17
    1ef6:	0f 91       	pop	r16
    1ef8:	ff 90       	pop	r15
    }
    
    #ifdef DEBUG
    Serial.println("Reset/Restore/Write Config DONE!");
    #endif
    delay(1000);
    1efa:	0c 94 09 05 	jmp	0xa12	; 0xa12 <delay>
    1efe:	21 97       	sbiw	r28, 0x01	; 1

    boolean firstResetSuccess = false;
    boolean restoreSuccess = false;
    boolean writeConfigSuccess = false;
    boolean secondResetSuccess = false;
    for (int i = 0; i < 10; i++) {
    1f00:	20 97       	sbiw	r28, 0x00	; 0
    1f02:	09 f0       	breq	.+2      	; 0x1f06 <_Z5setupv+0xdc>
    1f04:	ad cf       	rjmp	.-166    	; 0x1e60 <_Z5setupv+0x36>
        //#endif
    }
    if (!(firstResetSuccess && restoreSuccess && writeConfigSuccess && secondResetSuccess)) {
        // Setup failed after 10 tries
        #ifdef DEBUG
        Serial.println("Reset/Restore/Write Config FAILED 10 TIMES. STOP EXECUTION...");
    1f06:	63 e2       	ldi	r22, 0x23	; 35
    1f08:	72 e0       	ldi	r23, 0x02	; 2
    1f0a:	84 e5       	ldi	r24, 0x54	; 84
    1f0c:	93 e0       	ldi	r25, 0x03	; 3
    1f0e:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN5Print7printlnEPKc>
    1f12:	ff cf       	rjmp	.-2      	; 0x1f12 <_Z5setupv+0xe8>

00001f14 <_Z24do_flex_sensor_read_taskv>:

void do_flex_sensor_read_task()
{
    //read them flex sensors here
    #ifdef LEFTGLOVE
    leftThumbReading = analogRead(LEFTTHUMBPIN);
    1f14:	80 e0       	ldi	r24, 0x00	; 0
    1f16:	0e 94 6c 05 	call	0xad8	; 0xad8 <analogRead>
    1f1a:	90 93 2c 04 	sts	0x042C, r25
    1f1e:	80 93 2b 04 	sts	0x042B, r24
    leftIndexReading = analogRead(LEFTINDEXPIN);
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	0e 94 6c 05 	call	0xad8	; 0xad8 <analogRead>
    1f28:	90 93 2a 04 	sts	0x042A, r25
    1f2c:	80 93 29 04 	sts	0x0429, r24
    leftMiddleReading = analogRead(LEFTMIDDLEPIN);
    1f30:	82 e0       	ldi	r24, 0x02	; 2
    1f32:	0e 94 6c 05 	call	0xad8	; 0xad8 <analogRead>
    1f36:	90 93 28 04 	sts	0x0428, r25
    1f3a:	80 93 27 04 	sts	0x0427, r24
    //Serial.println("Right Flex Reading (T, I, M): ");
    //Serial.println(leftThumbReading);
    //Serial.println(leftIndexReading);
    //Serial.println(leftMiddleReading);
    if ((leftThumbReading > 530) && (leftIndexReading > 530) && (leftMiddleReading > 530) && (turnSignalSent == 0)) {
    1f3e:	20 91 2b 04 	lds	r18, 0x042B
    1f42:	30 91 2c 04 	lds	r19, 0x042C
    1f46:	23 31       	cpi	r18, 0x13	; 19
    1f48:	32 40       	sbci	r19, 0x02	; 2
    1f4a:	44 f1       	brlt	.+80     	; 0x1f9c <_Z24do_flex_sensor_read_taskv+0x88>
    1f4c:	20 91 29 04 	lds	r18, 0x0429
    1f50:	30 91 2a 04 	lds	r19, 0x042A
    1f54:	23 31       	cpi	r18, 0x13	; 19
    1f56:	32 40       	sbci	r19, 0x02	; 2
    1f58:	0c f1       	brlt	.+66     	; 0x1f9c <_Z24do_flex_sensor_read_taskv+0x88>
    1f5a:	83 31       	cpi	r24, 0x13	; 19
    1f5c:	92 40       	sbci	r25, 0x02	; 2
    1f5e:	f4 f0       	brlt	.+60     	; 0x1f9c <_Z24do_flex_sensor_read_taskv+0x88>
    1f60:	80 91 2d 04 	lds	r24, 0x042D
    1f64:	90 91 2e 04 	lds	r25, 0x042E
    1f68:	89 2b       	or	r24, r25
    1f6a:	c1 f4       	brne	.+48     	; 0x1f9c <_Z24do_flex_sensor_read_taskv+0x88>
        //Serial.flush();
        sendBuffer.concat(BPLGHEADER);
    1f6c:	68 ea       	ldi	r22, 0xA8	; 168
    1f6e:	72 e0       	ldi	r23, 0x02	; 2
    1f70:	86 e5       	ldi	r24, 0x56	; 86
    1f72:	94 e0       	ldi	r25, 0x04	; 4
    1f74:	0e 94 09 07 	call	0xe12	; 0xe12 <_ZN6String6concatEPKc>
        sendBuffer.concat("1");
    1f78:	61 e2       	ldi	r22, 0x21	; 33
    1f7a:	73 e0       	ldi	r23, 0x03	; 3
    1f7c:	86 e5       	ldi	r24, 0x56	; 86
    1f7e:	94 e0       	ldi	r25, 0x04	; 4
    1f80:	0e 94 09 07 	call	0xe12	; 0xe12 <_ZN6String6concatEPKc>
        //BTModu.sendData(sendBuffer);
        sendBuffer = "";
    1f84:	60 e2       	ldi	r22, 0x20	; 32
    1f86:	71 e0       	ldi	r23, 0x01	; 1
    1f88:	86 e5       	ldi	r24, 0x56	; 86
    1f8a:	94 e0       	ldi	r25, 0x04	; 4
    1f8c:	0e 94 c5 06 	call	0xd8a	; 0xd8a <_ZN6StringaSEPKc>
        turnSignalSent = 1;
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	90 93 2e 04 	sts	0x042E, r25
    1f98:	80 93 2d 04 	sts	0x042D, r24
    1f9c:	08 95       	ret

00001f9e <_Z17do_led_blink_taskv>:
    #endif
}

void do_led_blink_task()
{
    if (left_arrow_on) {
    1f9e:	80 91 55 04 	lds	r24, 0x0455
    1fa2:	88 23       	and	r24, r24
    1fa4:	19 f0       	breq	.+6      	; 0x1fac <_Z17do_led_blink_taskv+0xe>
        blink_left_arrow();
    1fa6:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <blink_left_arrow>
    1faa:	02 c0       	rjmp	.+4      	; 0x1fb0 <_Z17do_led_blink_taskv+0x12>
    } else {
        turn_off_left_arrow();
    1fac:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <turn_off_left_arrow>
    }
    
    if (right_arrow_on) {
    1fb0:	80 91 54 04 	lds	r24, 0x0454
    1fb4:	88 23       	and	r24, r24
    1fb6:	19 f0       	breq	.+6      	; 0x1fbe <_Z17do_led_blink_taskv+0x20>
        blink_right_arrow();
    1fb8:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <blink_right_arrow>
    1fbc:	02 c0       	rjmp	.+4      	; 0x1fc2 <_Z17do_led_blink_taskv+0x24>
    } else {
        turn_off_right_arrow();
    1fbe:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <turn_off_right_arrow>
    }
    
    if (top_arrow_on) {
    1fc2:	80 91 53 04 	lds	r24, 0x0453
    1fc6:	88 23       	and	r24, r24
    1fc8:	19 f0       	breq	.+6      	; 0x1fd0 <_Z17do_led_blink_taskv+0x32>
        blink_top_arrow();
    1fca:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <blink_top_arrow>
    1fce:	02 c0       	rjmp	.+4      	; 0x1fd4 <_Z17do_led_blink_taskv+0x36>
    } else {
        turn_off_top_arrow();
    1fd0:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <turn_off_top_arrow>
    }
    
    if (status_led_on) {
    1fd4:	80 91 52 04 	lds	r24, 0x0452
    1fd8:	81 11       	cpse	r24, r1
        blink_status_led();
    1fda:	0c 94 87 0e 	jmp	0x1d0e	; 0x1d0e <blink_status_led>
    } else {
        turn_off_status_led();
    1fde:	0c 94 db 0e 	jmp	0x1db6	; 0x1db6 <turn_off_status_led>

00001fe2 <_GLOBAL__sub_I_inputBuffer>:
    #include "blink_leds.h"
}
#include "../lib/Arduino/Arduino.h"
#include "../lib/SparkFun_BLEMate2/SparkFun_BLEMate2.h"

String inputBuffer;
    1fe2:	60 e2       	ldi	r22, 0x20	; 32
    1fe4:	71 e0       	ldi	r23, 0x01	; 1
    1fe6:	8c e5       	ldi	r24, 0x5C	; 92
    1fe8:	94 e0       	ldi	r25, 0x04	; 4
    1fea:	0e 94 8f 06 	call	0xd1e	; 0xd1e <_ZN6StringC1EPKc>
String sendBuffer;
    1fee:	60 e2       	ldi	r22, 0x20	; 32
    1ff0:	71 e0       	ldi	r23, 0x01	; 1
    1ff2:	86 e5       	ldi	r24, 0x56	; 86
    1ff4:	94 e0       	ldi	r25, 0x04	; 4
    1ff6:	0e 94 8f 06 	call	0xd1e	; 0xd1e <_ZN6StringC1EPKc>
boolean left_arrow_on;
boolean right_arrow_on;
boolean top_arrow_on;
boolean status_led_on;

BLEMate2 BTModu(&Serial);
    1ffa:	64 e5       	ldi	r22, 0x54	; 84
    1ffc:	73 e0       	ldi	r23, 0x03	; 3
    1ffe:	8f e2       	ldi	r24, 0x2F	; 47
    2000:	94 e0       	ldi	r25, 0x04	; 4
    2002:	0c 94 91 08 	jmp	0x1122	; 0x1122 <_ZN8BLEMate2C1EP6Stream>

00002006 <_GLOBAL__sub_D_inputBuffer>:
    if (status_led_on) {
        blink_status_led();
    } else {
        turn_off_status_led();
    }
}
    2006:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <_Z41__static_initialization_and_destruction_0ii.part.1>

0000200a <_Z14do_serial_taskv>:

    // We're set up to allow anything to connect to us now.
}

void do_serial_task()
{
    200a:	1f 93       	push	r17
    200c:	cf 93       	push	r28
    200e:	df 93       	push	r29
    2010:	00 d0       	rcall	.+0      	; 0x2012 <_Z14do_serial_taskv+0x8>
    2012:	00 d0       	rcall	.+0      	; 0x2014 <_Z14do_serial_taskv+0xa>
    2014:	00 d0       	rcall	.+0      	; 0x2016 <_Z14do_serial_taskv+0xc>
    2016:	cd b7       	in	r28, 0x3d	; 61
    2018:	de b7       	in	r29, 0x3e	; 62
    //unsigned long serial_task_start = millis();
    digitalWrite(11,HIGH);
    201a:	61 e0       	ldi	r22, 0x01	; 1
    201c:	8b e0       	ldi	r24, 0x0B	; 11
    201e:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <digitalWrite>
    //while ((millis() - serial_task_start) < 500)
    while (Serial.available() > 0)
    2022:	84 e5       	ldi	r24, 0x54	; 84
    2024:	93 e0       	ldi	r25, 0x03	; 3
    2026:	0e 94 8b 00 	call	0x116	; 0x116 <_ZN14HardwareSerial9availableEv>
    202a:	18 16       	cp	r1, r24
    202c:	19 06       	cpc	r1, r25
    202e:	84 f4       	brge	.+32     	; 0x2050 <_Z14do_serial_taskv+0x46>
    {        
        inputBuffer.concat((char)Serial.read());
    2030:	84 e5       	ldi	r24, 0x54	; 84
    2032:	93 e0       	ldi	r25, 0x03	; 3
    2034:	0e 94 a4 00 	call	0x148	; 0x148 <_ZN14HardwareSerial4readEv>
    2038:	68 2f       	mov	r22, r24
    203a:	8c e5       	ldi	r24, 0x5C	; 92
    203c:	94 e0       	ldi	r25, 0x04	; 4
    203e:	0e 94 19 07 	call	0xe32	; 0xe32 <_ZN6String6concatEc>
        delay(50);
    2042:	62 e3       	ldi	r22, 0x32	; 50
    2044:	70 e0       	ldi	r23, 0x00	; 0
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	0e 94 09 05 	call	0xa12	; 0xa12 <delay>
    204e:	e9 cf       	rjmp	.-46     	; 0x2022 <_Z14do_serial_taskv+0x18>
    }
    digitalWrite(11,LOW);
    2050:	60 e0       	ldi	r22, 0x00	; 0
    2052:	8b e0       	ldi	r24, 0x0B	; 11
    2054:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <digitalWrite>

    // The state machine for capturing that can be pretty easy: when we've read
    // in \n\r, check to see if the string began with "RCV=". If yes, do
    // something. If no, discard it.

    if (inputBuffer.endsWith("\n\r")) {
    2058:	6e e1       	ldi	r22, 0x1E	; 30
    205a:	71 e0       	ldi	r23, 0x01	; 1
    205c:	ce 01       	movw	r24, r28
    205e:	01 96       	adiw	r24, 0x01	; 1
    2060:	0e 94 8f 06 	call	0xd1e	; 0xd1e <_ZN6StringC1EPKc>
    2064:	be 01       	movw	r22, r28
    2066:	6f 5f       	subi	r22, 0xFF	; 255
    2068:	7f 4f       	sbci	r23, 0xFF	; 255
    206a:	8c e5       	ldi	r24, 0x5C	; 92
    206c:	94 e0       	ldi	r25, 0x04	; 4
    206e:	0e 94 ab 07 	call	0xf56	; 0xf56 <_ZNK6String8endsWithERKS_>
    2072:	18 2f       	mov	r17, r24
    2074:	ce 01       	movw	r24, r28
    2076:	01 96       	adiw	r24, 0x01	; 1
    2078:	0e 94 21 06 	call	0xc42	; 0xc42 <_ZN6StringD1Ev>
    207c:	11 23       	and	r17, r17
    207e:	09 f1       	breq	.+66     	; 0x20c2 <_Z14do_serial_taskv+0xb8>
        if (inputBuffer.startsWith("RCV=")) {
    2080:	6b ea       	ldi	r22, 0xAB	; 171
    2082:	72 e0       	ldi	r23, 0x02	; 2
    2084:	ce 01       	movw	r24, r28
    2086:	01 96       	adiw	r24, 0x01	; 1
    2088:	0e 94 8f 06 	call	0xd1e	; 0xd1e <_ZN6StringC1EPKc>
    208c:	be 01       	movw	r22, r28
    208e:	6f 5f       	subi	r22, 0xFF	; 255
    2090:	7f 4f       	sbci	r23, 0xFF	; 255
    2092:	8c e5       	ldi	r24, 0x5C	; 92
    2094:	94 e0       	ldi	r25, 0x04	; 4
    2096:	0e 94 9c 07 	call	0xf38	; 0xf38 <_ZNK6String10startsWithERKS_>
    209a:	18 2f       	mov	r17, r24
    209c:	ce 01       	movw	r24, r28
    209e:	01 96       	adiw	r24, 0x01	; 1
    20a0:	0e 94 21 06 	call	0xc42	; 0xc42 <_ZN6StringD1Ev>
    20a4:	11 23       	and	r17, r17
    20a6:	69 f0       	breq	.+26     	; 0x20c2 <_Z14do_serial_taskv+0xb8>
            inputBuffer.trim();
    20a8:	8c e5       	ldi	r24, 0x5C	; 92
    20aa:	94 e0       	ldi	r25, 0x04	; 4
    20ac:	0e 94 37 08 	call	0x106e	; 0x106e <_ZN6String4trimEv>
            inputBuffer.remove(0, 4);
    20b0:	44 e0       	ldi	r20, 0x04	; 4
    20b2:	50 e0       	ldi	r21, 0x00	; 0
    20b4:	60 e0       	ldi	r22, 0x00	; 0
    20b6:	70 e0       	ldi	r23, 0x00	; 0
    20b8:	8c e5       	ldi	r24, 0x5C	; 92
    20ba:	94 e0       	ldi	r25, 0x04	; 4
    20bc:	0e 94 09 08 	call	0x1012	; 0x1012 <_ZN6String6removeEjj>
            //Serial.println(inputBuffer);
            //left_arrow_on = true;
            //inputBuffer = "";
            goto parse_message;
    20c0:	06 c0       	rjmp	.+12     	; 0x20ce <_Z14do_serial_taskv+0xc4>
        } else {
            inputBuffer = "";
    20c2:	60 e2       	ldi	r22, 0x20	; 32
    20c4:	71 e0       	ldi	r23, 0x01	; 1
    20c6:	8c e5       	ldi	r24, 0x5C	; 92
    20c8:	94 e0       	ldi	r25, 0x04	; 4
    20ca:	0e 94 c5 06 	call	0xd8a	; 0xd8a <_ZN6StringaSEPKc>
    // then check flex sensors for any special readings for sending to backpack

    //for acknowledgement: if there's already been an acknowledgment for
        
    #ifdef LEFTGLOVE
    if (inputBuffer.startsWith("LP1")) {
    20ce:	60 eb       	ldi	r22, 0xB0	; 176
    20d0:	72 e0       	ldi	r23, 0x02	; 2
    20d2:	ce 01       	movw	r24, r28
    20d4:	01 96       	adiw	r24, 0x01	; 1
    20d6:	0e 94 8f 06 	call	0xd1e	; 0xd1e <_ZN6StringC1EPKc>
    20da:	be 01       	movw	r22, r28
    20dc:	6f 5f       	subi	r22, 0xFF	; 255
    20de:	7f 4f       	sbci	r23, 0xFF	; 255
    20e0:	8c e5       	ldi	r24, 0x5C	; 92
    20e2:	94 e0       	ldi	r25, 0x04	; 4
    20e4:	0e 94 9c 07 	call	0xf38	; 0xf38 <_ZNK6String10startsWithERKS_>
    20e8:	18 2f       	mov	r17, r24
    20ea:	ce 01       	movw	r24, r28
    20ec:	01 96       	adiw	r24, 0x01	; 1
    20ee:	0e 94 21 06 	call	0xc42	; 0xc42 <_ZN6StringD1Ev>
    20f2:	11 23       	and	r17, r17
    20f4:	b1 f0       	breq	.+44     	; 0x2122 <_Z14do_serial_taskv+0x118>
        Serial.println("TO LEFT GLOVE: NAV SAYS LEFT");
    20f6:	64 eb       	ldi	r22, 0xB4	; 180
    20f8:	72 e0       	ldi	r23, 0x02	; 2
    20fa:	84 e5       	ldi	r24, 0x54	; 84
    20fc:	93 e0       	ldi	r25, 0x03	; 3
    20fe:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN5Print7printlnEPKc>
        left_arrow_on = true;
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	80 93 55 04 	sts	0x0455, r24
        //do some ack stuff here
        Serial.flush();
    2108:	84 e5       	ldi	r24, 0x54	; 84
    210a:	93 e0       	ldi	r25, 0x03	; 3
    210c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_ZN14HardwareSerial5flushEv>
        sendBuffer.concat(PLGHEADER);
    2110:	61 ed       	ldi	r22, 0xD1	; 209
    2112:	72 e0       	ldi	r23, 0x02	; 2
    2114:	86 e5       	ldi	r24, 0x56	; 86
    2116:	94 e0       	ldi	r25, 0x04	; 4
    2118:	0e 94 09 07 	call	0xe12	; 0xe12 <_ZN6String6concatEPKc>
        sendBuffer.concat("1");
    211c:	61 e2       	ldi	r22, 0x21	; 33
    211e:	73 e0       	ldi	r23, 0x03	; 3
    2120:	29 c0       	rjmp	.+82     	; 0x2174 <_Z14do_serial_taskv+0x16a>
        BTModu.sendData(sendBuffer);
        sendBuffer = "";
      
    } else if (inputBuffer.startsWith("LP2")) {
    2122:	64 ed       	ldi	r22, 0xD4	; 212
    2124:	72 e0       	ldi	r23, 0x02	; 2
    2126:	ce 01       	movw	r24, r28
    2128:	01 96       	adiw	r24, 0x01	; 1
    212a:	0e 94 8f 06 	call	0xd1e	; 0xd1e <_ZN6StringC1EPKc>
    212e:	be 01       	movw	r22, r28
    2130:	6f 5f       	subi	r22, 0xFF	; 255
    2132:	7f 4f       	sbci	r23, 0xFF	; 255
    2134:	8c e5       	ldi	r24, 0x5C	; 92
    2136:	94 e0       	ldi	r25, 0x04	; 4
    2138:	0e 94 9c 07 	call	0xf38	; 0xf38 <_ZNK6String10startsWithERKS_>
    213c:	18 2f       	mov	r17, r24
    213e:	ce 01       	movw	r24, r28
    2140:	01 96       	adiw	r24, 0x01	; 1
    2142:	0e 94 21 06 	call	0xc42	; 0xc42 <_ZN6StringD1Ev>
    2146:	11 23       	and	r17, r17
    2148:	31 f1       	breq	.+76     	; 0x2196 <_Z14do_serial_taskv+0x18c>
        Serial.println("TO LEFT GLOVE: NAV SAYS RIGHT");
    214a:	68 ed       	ldi	r22, 0xD8	; 216
    214c:	72 e0       	ldi	r23, 0x02	; 2
    214e:	84 e5       	ldi	r24, 0x54	; 84
    2150:	93 e0       	ldi	r25, 0x03	; 3
    2152:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN5Print7printlnEPKc>
        right_arrow_on = true;
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	80 93 54 04 	sts	0x0454, r24
        //do some ack stuff here
        Serial.flush();
    215c:	84 e5       	ldi	r24, 0x54	; 84
    215e:	93 e0       	ldi	r25, 0x03	; 3
    2160:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_ZN14HardwareSerial5flushEv>
        sendBuffer.concat(PLGHEADER);
    2164:	61 ed       	ldi	r22, 0xD1	; 209
    2166:	72 e0       	ldi	r23, 0x02	; 2
    2168:	86 e5       	ldi	r24, 0x56	; 86
    216a:	94 e0       	ldi	r25, 0x04	; 4
    216c:	0e 94 09 07 	call	0xe12	; 0xe12 <_ZN6String6concatEPKc>
        sendBuffer.concat("2");
    2170:	65 e2       	ldi	r22, 0x25	; 37
    2172:	73 e0       	ldi	r23, 0x03	; 3
    2174:	86 e5       	ldi	r24, 0x56	; 86
    2176:	94 e0       	ldi	r25, 0x04	; 4
    2178:	0e 94 09 07 	call	0xe12	; 0xe12 <_ZN6String6concatEPKc>
        BTModu.sendData(sendBuffer);
    217c:	66 e5       	ldi	r22, 0x56	; 86
    217e:	74 e0       	ldi	r23, 0x04	; 4
    2180:	8f e2       	ldi	r24, 0x2F	; 47
    2182:	94 e0       	ldi	r25, 0x04	; 4
    2184:	0e 94 cd 0c 	call	0x199a	; 0x199a <_ZN8BLEMate28sendDataER6String>
        sendBuffer = "";
    2188:	60 e2       	ldi	r22, 0x20	; 32
    218a:	71 e0       	ldi	r23, 0x01	; 1
    218c:	86 e5       	ldi	r24, 0x56	; 86
    218e:	94 e0       	ldi	r25, 0x04	; 4
    2190:	0e 94 c5 06 	call	0xd8a	; 0xd8a <_ZN6StringaSEPKc>
    2194:	76 c0       	rjmp	.+236    	; 0x2282 <_Z14do_serial_taskv+0x278>
    } else if (inputBuffer.startsWith("LP3")) {
    2196:	66 ef       	ldi	r22, 0xF6	; 246
    2198:	72 e0       	ldi	r23, 0x02	; 2
    219a:	ce 01       	movw	r24, r28
    219c:	01 96       	adiw	r24, 0x01	; 1
    219e:	0e 94 8f 06 	call	0xd1e	; 0xd1e <_ZN6StringC1EPKc>
    21a2:	be 01       	movw	r22, r28
    21a4:	6f 5f       	subi	r22, 0xFF	; 255
    21a6:	7f 4f       	sbci	r23, 0xFF	; 255
    21a8:	8c e5       	ldi	r24, 0x5C	; 92
    21aa:	94 e0       	ldi	r25, 0x04	; 4
    21ac:	0e 94 9c 07 	call	0xf38	; 0xf38 <_ZNK6String10startsWithERKS_>
    21b0:	18 2f       	mov	r17, r24
    21b2:	ce 01       	movw	r24, r28
    21b4:	01 96       	adiw	r24, 0x01	; 1
    21b6:	0e 94 21 06 	call	0xc42	; 0xc42 <_ZN6StringD1Ev>
    21ba:	11 23       	and	r17, r17
    21bc:	b1 f0       	breq	.+44     	; 0x21ea <_Z14do_serial_taskv+0x1e0>
        Serial.println("TO LEFT GLOVE: NAV SAYS STRAIGHT");
    21be:	6a ef       	ldi	r22, 0xFA	; 250
    21c0:	72 e0       	ldi	r23, 0x02	; 2
    21c2:	84 e5       	ldi	r24, 0x54	; 84
    21c4:	93 e0       	ldi	r25, 0x03	; 3
    21c6:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN5Print7printlnEPKc>
        top_arrow_on = true;
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	80 93 53 04 	sts	0x0453, r24
        //do some ack stuff here
        Serial.flush();
    21d0:	84 e5       	ldi	r24, 0x54	; 84
    21d2:	93 e0       	ldi	r25, 0x03	; 3
    21d4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_ZN14HardwareSerial5flushEv>
        sendBuffer.concat(PLGHEADER);
    21d8:	61 ed       	ldi	r22, 0xD1	; 209
    21da:	72 e0       	ldi	r23, 0x02	; 2
    21dc:	86 e5       	ldi	r24, 0x56	; 86
    21de:	94 e0       	ldi	r25, 0x04	; 4
    21e0:	0e 94 09 07 	call	0xe12	; 0xe12 <_ZN6String6concatEPKc>
        sendBuffer.concat("3");
    21e4:	69 e2       	ldi	r22, 0x29	; 41
    21e6:	73 e0       	ldi	r23, 0x03	; 3
    21e8:	c5 cf       	rjmp	.-118    	; 0x2174 <_Z14do_serial_taskv+0x16a>
        BTModu.sendData(sendBuffer);
        sendBuffer = "";
    } else if (inputBuffer.startsWith("LP4")) {
    21ea:	6b e1       	ldi	r22, 0x1B	; 27
    21ec:	73 e0       	ldi	r23, 0x03	; 3
    21ee:	ce 01       	movw	r24, r28
    21f0:	01 96       	adiw	r24, 0x01	; 1
    21f2:	0e 94 8f 06 	call	0xd1e	; 0xd1e <_ZN6StringC1EPKc>
    21f6:	be 01       	movw	r22, r28
    21f8:	6f 5f       	subi	r22, 0xFF	; 255
    21fa:	7f 4f       	sbci	r23, 0xFF	; 255
    21fc:	8c e5       	ldi	r24, 0x5C	; 92
    21fe:	94 e0       	ldi	r25, 0x04	; 4
    2200:	0e 94 9c 07 	call	0xf38	; 0xf38 <_ZNK6String10startsWithERKS_>
    2204:	18 2f       	mov	r17, r24
    2206:	ce 01       	movw	r24, r28
    2208:	01 96       	adiw	r24, 0x01	; 1
    220a:	0e 94 21 06 	call	0xc42	; 0xc42 <_ZN6StringD1Ev>
    220e:	11 23       	and	r17, r17
    2210:	99 f0       	breq	.+38     	; 0x2238 <_Z14do_serial_taskv+0x22e>
        left_arrow_on = false;
    2212:	10 92 55 04 	sts	0x0455, r1
        right_arrow_on = false;
    2216:	10 92 54 04 	sts	0x0454, r1
        top_arrow_on = false;
    221a:	10 92 53 04 	sts	0x0453, r1
        //do some ack stuff here
        Serial.flush();
    221e:	84 e5       	ldi	r24, 0x54	; 84
    2220:	93 e0       	ldi	r25, 0x03	; 3
    2222:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_ZN14HardwareSerial5flushEv>
        sendBuffer.concat(PLGHEADER);
    2226:	61 ed       	ldi	r22, 0xD1	; 209
    2228:	72 e0       	ldi	r23, 0x02	; 2
    222a:	86 e5       	ldi	r24, 0x56	; 86
    222c:	94 e0       	ldi	r25, 0x04	; 4
    222e:	0e 94 09 07 	call	0xe12	; 0xe12 <_ZN6String6concatEPKc>
        sendBuffer.concat("4");
    2232:	6d e1       	ldi	r22, 0x1D	; 29
    2234:	73 e0       	ldi	r23, 0x03	; 3
    2236:	9e cf       	rjmp	.-196    	; 0x2174 <_Z14do_serial_taskv+0x16a>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    2238:	6f e1       	ldi	r22, 0x1F	; 31
    223a:	73 e0       	ldi	r23, 0x03	; 3
    223c:	8c e5       	ldi	r24, 0x5C	; 92
    223e:	94 e0       	ldi	r25, 0x04	; 4
    2240:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZNK6String6equalsEPKc>
        BTModu.sendData(sendBuffer);
        sendBuffer = "";
    } else if (inputBuffer == "LB1" || inputBuffer == "LB2" || inputBuffer == "LB3") {
    2244:	81 11       	cpse	r24, r1
    2246:	10 c0       	rjmp	.+32     	; 0x2268 <_Z14do_serial_taskv+0x25e>
    2248:	63 e2       	ldi	r22, 0x23	; 35
    224a:	73 e0       	ldi	r23, 0x03	; 3
    224c:	8c e5       	ldi	r24, 0x5C	; 92
    224e:	94 e0       	ldi	r25, 0x04	; 4
    2250:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZNK6String6equalsEPKc>
    2254:	81 11       	cpse	r24, r1
    2256:	08 c0       	rjmp	.+16     	; 0x2268 <_Z14do_serial_taskv+0x25e>
    2258:	67 e2       	ldi	r22, 0x27	; 39
    225a:	73 e0       	ldi	r23, 0x03	; 3
    225c:	8c e5       	ldi	r24, 0x5C	; 92
    225e:	94 e0       	ldi	r25, 0x04	; 4
    2260:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZNK6String6equalsEPKc>
    2264:	88 23       	and	r24, r24
    2266:	69 f0       	breq	.+26     	; 0x2282 <_Z14do_serial_taskv+0x278>
        Serial.println("TO LEFT GLOVE: BACKPACK KNOWS WHAT'S UP");
    2268:	6b e2       	ldi	r22, 0x2B	; 43
    226a:	73 e0       	ldi	r23, 0x03	; 3
    226c:	84 e5       	ldi	r24, 0x54	; 84
    226e:	93 e0       	ldi	r25, 0x03	; 3
    2270:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN5Print7printlnEPKc>
        status_led_on = true;
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	80 93 52 04 	sts	0x0452, r24
        turnSignalSent = 0;
    227a:	10 92 2e 04 	sts	0x042E, r1
    227e:	10 92 2d 04 	sts	0x042D, r1
        Serial.println("TO RIGHT GLOVE: BACKPACK KNOWS WHAT'S UP");
        blink_indicator(10);
        turnSignalSent = 0;
    }
    #endif
}
    2282:	26 96       	adiw	r28, 0x06	; 6
    2284:	0f b6       	in	r0, 0x3f	; 63
    2286:	f8 94       	cli
    2288:	de bf       	out	0x3e, r29	; 62
    228a:	0f be       	out	0x3f, r0	; 63
    228c:	cd bf       	out	0x3d, r28	; 61
    228e:	df 91       	pop	r29
    2290:	cf 91       	pop	r28
    2292:	1f 91       	pop	r17
    2294:	08 95       	ret

00002296 <_Z4loopv>:
    }
    return foundpos;
}

void loop()
{
    2296:	0f 93       	push	r16
    2298:	1f 93       	push	r17
    if (millis() > (serial_task_last_run + SERIAL_READ_TASK_PERIOD)) {
    229a:	0e 94 da 04 	call	0x9b4	; 0x9b4 <millis>
    229e:	00 91 23 04 	lds	r16, 0x0423
    22a2:	10 91 24 04 	lds	r17, 0x0424
    22a6:	20 91 25 04 	lds	r18, 0x0425
    22aa:	30 91 26 04 	lds	r19, 0x0426
    22ae:	08 51       	subi	r16, 0x18	; 24
    22b0:	1c 4f       	sbci	r17, 0xFC	; 252
    22b2:	2f 4f       	sbci	r18, 0xFF	; 255
    22b4:	3f 4f       	sbci	r19, 0xFF	; 255
    22b6:	06 17       	cp	r16, r22
    22b8:	17 07       	cpc	r17, r23
    22ba:	28 07       	cpc	r18, r24
    22bc:	39 07       	cpc	r19, r25
    22be:	60 f4       	brcc	.+24     	; 0x22d8 <_Z4loopv+0x42>
        //Serial.println("Serial runs");
        do_serial_task();
    22c0:	0e 94 05 10 	call	0x200a	; 0x200a <_Z14do_serial_taskv>
        serial_task_last_run = millis();
    22c4:	0e 94 da 04 	call	0x9b4	; 0x9b4 <millis>
    22c8:	60 93 23 04 	sts	0x0423, r22
    22cc:	70 93 24 04 	sts	0x0424, r23
    22d0:	80 93 25 04 	sts	0x0425, r24
    22d4:	90 93 26 04 	sts	0x0426, r25
    }

    if (millis() > (flex_sensor_read_task_last_run + FLEX_SENSOR_READ_TASK_PERIOD)) {
    22d8:	0e 94 da 04 	call	0x9b4	; 0x9b4 <millis>
    22dc:	00 91 1f 04 	lds	r16, 0x041F
    22e0:	10 91 20 04 	lds	r17, 0x0420
    22e4:	20 91 21 04 	lds	r18, 0x0421
    22e8:	30 91 22 04 	lds	r19, 0x0422
    22ec:	0c 50       	subi	r16, 0x0C	; 12
    22ee:	1e 4f       	sbci	r17, 0xFE	; 254
    22f0:	2f 4f       	sbci	r18, 0xFF	; 255
    22f2:	3f 4f       	sbci	r19, 0xFF	; 255
    22f4:	06 17       	cp	r16, r22
    22f6:	17 07       	cpc	r17, r23
    22f8:	28 07       	cpc	r18, r24
    22fa:	39 07       	cpc	r19, r25
    22fc:	60 f4       	brcc	.+24     	; 0x2316 <_Z4loopv+0x80>
        //Serial.println("Flex read runs");
        do_flex_sensor_read_task();
    22fe:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <_Z24do_flex_sensor_read_taskv>
        flex_sensor_read_task_last_run = millis();
    2302:	0e 94 da 04 	call	0x9b4	; 0x9b4 <millis>
    2306:	60 93 1f 04 	sts	0x041F, r22
    230a:	70 93 20 04 	sts	0x0420, r23
    230e:	80 93 21 04 	sts	0x0421, r24
    2312:	90 93 22 04 	sts	0x0422, r25
    }
        

    if (millis() > (led_blink_task_last_run + LED_BLINK_TASK_PERIOD)) {
    2316:	0e 94 da 04 	call	0x9b4	; 0x9b4 <millis>
    231a:	00 91 1b 04 	lds	r16, 0x041B
    231e:	10 91 1c 04 	lds	r17, 0x041C
    2322:	20 91 1d 04 	lds	r18, 0x041D
    2326:	30 91 1e 04 	lds	r19, 0x041E
    232a:	0c 50       	subi	r16, 0x0C	; 12
    232c:	1e 4f       	sbci	r17, 0xFE	; 254
    232e:	2f 4f       	sbci	r18, 0xFF	; 255
    2330:	3f 4f       	sbci	r19, 0xFF	; 255
    2332:	06 17       	cp	r16, r22
    2334:	17 07       	cpc	r17, r23
    2336:	28 07       	cpc	r18, r24
    2338:	39 07       	cpc	r19, r25
    233a:	60 f4       	brcc	.+24     	; 0x2354 <_Z4loopv+0xbe>
        //Serial.println("LED blink runs");
        do_led_blink_task();
    233c:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <_Z17do_led_blink_taskv>
        led_blink_task_last_run = millis();
    2340:	0e 94 da 04 	call	0x9b4	; 0x9b4 <millis>
    2344:	60 93 1b 04 	sts	0x041B, r22
    2348:	70 93 1c 04 	sts	0x041C, r23
    234c:	80 93 1d 04 	sts	0x041D, r24
    2350:	90 93 1e 04 	sts	0x041E, r25
    }
}
    2354:	1f 91       	pop	r17
    2356:	0f 91       	pop	r16
    2358:	08 95       	ret

0000235a <__udivmodsi4>:
    235a:	a1 e2       	ldi	r26, 0x21	; 33
    235c:	1a 2e       	mov	r1, r26
    235e:	aa 1b       	sub	r26, r26
    2360:	bb 1b       	sub	r27, r27
    2362:	fd 01       	movw	r30, r26
    2364:	0d c0       	rjmp	.+26     	; 0x2380 <__udivmodsi4_ep>

00002366 <__udivmodsi4_loop>:
    2366:	aa 1f       	adc	r26, r26
    2368:	bb 1f       	adc	r27, r27
    236a:	ee 1f       	adc	r30, r30
    236c:	ff 1f       	adc	r31, r31
    236e:	a2 17       	cp	r26, r18
    2370:	b3 07       	cpc	r27, r19
    2372:	e4 07       	cpc	r30, r20
    2374:	f5 07       	cpc	r31, r21
    2376:	20 f0       	brcs	.+8      	; 0x2380 <__udivmodsi4_ep>
    2378:	a2 1b       	sub	r26, r18
    237a:	b3 0b       	sbc	r27, r19
    237c:	e4 0b       	sbc	r30, r20
    237e:	f5 0b       	sbc	r31, r21

00002380 <__udivmodsi4_ep>:
    2380:	66 1f       	adc	r22, r22
    2382:	77 1f       	adc	r23, r23
    2384:	88 1f       	adc	r24, r24
    2386:	99 1f       	adc	r25, r25
    2388:	1a 94       	dec	r1
    238a:	69 f7       	brne	.-38     	; 0x2366 <__udivmodsi4_loop>
    238c:	60 95       	com	r22
    238e:	70 95       	com	r23
    2390:	80 95       	com	r24
    2392:	90 95       	com	r25
    2394:	9b 01       	movw	r18, r22
    2396:	ac 01       	movw	r20, r24
    2398:	bd 01       	movw	r22, r26
    239a:	cf 01       	movw	r24, r30
    239c:	08 95       	ret

0000239e <__tablejump2__>:
    239e:	ee 0f       	add	r30, r30
    23a0:	ff 1f       	adc	r31, r31

000023a2 <__tablejump__>:
    23a2:	05 90       	lpm	r0, Z+
    23a4:	f4 91       	lpm	r31, Z
    23a6:	e0 2d       	mov	r30, r0
    23a8:	09 94       	ijmp

000023aa <malloc>:
    23aa:	cf 93       	push	r28
    23ac:	df 93       	push	r29
    23ae:	82 30       	cpi	r24, 0x02	; 2
    23b0:	91 05       	cpc	r25, r1
    23b2:	10 f4       	brcc	.+4      	; 0x23b8 <malloc+0xe>
    23b4:	82 e0       	ldi	r24, 0x02	; 2
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	e0 91 68 04 	lds	r30, 0x0468
    23bc:	f0 91 69 04 	lds	r31, 0x0469
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	a0 e0       	ldi	r26, 0x00	; 0
    23c6:	b0 e0       	ldi	r27, 0x00	; 0
    23c8:	30 97       	sbiw	r30, 0x00	; 0
    23ca:	39 f1       	breq	.+78     	; 0x241a <malloc+0x70>
    23cc:	40 81       	ld	r20, Z
    23ce:	51 81       	ldd	r21, Z+1	; 0x01
    23d0:	48 17       	cp	r20, r24
    23d2:	59 07       	cpc	r21, r25
    23d4:	b8 f0       	brcs	.+46     	; 0x2404 <malloc+0x5a>
    23d6:	48 17       	cp	r20, r24
    23d8:	59 07       	cpc	r21, r25
    23da:	71 f4       	brne	.+28     	; 0x23f8 <malloc+0x4e>
    23dc:	82 81       	ldd	r24, Z+2	; 0x02
    23de:	93 81       	ldd	r25, Z+3	; 0x03
    23e0:	10 97       	sbiw	r26, 0x00	; 0
    23e2:	29 f0       	breq	.+10     	; 0x23ee <malloc+0x44>
    23e4:	13 96       	adiw	r26, 0x03	; 3
    23e6:	9c 93       	st	X, r25
    23e8:	8e 93       	st	-X, r24
    23ea:	12 97       	sbiw	r26, 0x02	; 2
    23ec:	2c c0       	rjmp	.+88     	; 0x2446 <malloc+0x9c>
    23ee:	90 93 69 04 	sts	0x0469, r25
    23f2:	80 93 68 04 	sts	0x0468, r24
    23f6:	27 c0       	rjmp	.+78     	; 0x2446 <malloc+0x9c>
    23f8:	21 15       	cp	r18, r1
    23fa:	31 05       	cpc	r19, r1
    23fc:	31 f0       	breq	.+12     	; 0x240a <malloc+0x60>
    23fe:	42 17       	cp	r20, r18
    2400:	53 07       	cpc	r21, r19
    2402:	18 f0       	brcs	.+6      	; 0x240a <malloc+0x60>
    2404:	a9 01       	movw	r20, r18
    2406:	db 01       	movw	r26, r22
    2408:	01 c0       	rjmp	.+2      	; 0x240c <malloc+0x62>
    240a:	ef 01       	movw	r28, r30
    240c:	9a 01       	movw	r18, r20
    240e:	bd 01       	movw	r22, r26
    2410:	df 01       	movw	r26, r30
    2412:	02 80       	ldd	r0, Z+2	; 0x02
    2414:	f3 81       	ldd	r31, Z+3	; 0x03
    2416:	e0 2d       	mov	r30, r0
    2418:	d7 cf       	rjmp	.-82     	; 0x23c8 <malloc+0x1e>
    241a:	21 15       	cp	r18, r1
    241c:	31 05       	cpc	r19, r1
    241e:	f9 f0       	breq	.+62     	; 0x245e <malloc+0xb4>
    2420:	28 1b       	sub	r18, r24
    2422:	39 0b       	sbc	r19, r25
    2424:	24 30       	cpi	r18, 0x04	; 4
    2426:	31 05       	cpc	r19, r1
    2428:	80 f4       	brcc	.+32     	; 0x244a <malloc+0xa0>
    242a:	8a 81       	ldd	r24, Y+2	; 0x02
    242c:	9b 81       	ldd	r25, Y+3	; 0x03
    242e:	61 15       	cp	r22, r1
    2430:	71 05       	cpc	r23, r1
    2432:	21 f0       	breq	.+8      	; 0x243c <malloc+0x92>
    2434:	fb 01       	movw	r30, r22
    2436:	93 83       	std	Z+3, r25	; 0x03
    2438:	82 83       	std	Z+2, r24	; 0x02
    243a:	04 c0       	rjmp	.+8      	; 0x2444 <malloc+0x9a>
    243c:	90 93 69 04 	sts	0x0469, r25
    2440:	80 93 68 04 	sts	0x0468, r24
    2444:	fe 01       	movw	r30, r28
    2446:	32 96       	adiw	r30, 0x02	; 2
    2448:	44 c0       	rjmp	.+136    	; 0x24d2 <malloc+0x128>
    244a:	fe 01       	movw	r30, r28
    244c:	e2 0f       	add	r30, r18
    244e:	f3 1f       	adc	r31, r19
    2450:	81 93       	st	Z+, r24
    2452:	91 93       	st	Z+, r25
    2454:	22 50       	subi	r18, 0x02	; 2
    2456:	31 09       	sbc	r19, r1
    2458:	39 83       	std	Y+1, r19	; 0x01
    245a:	28 83       	st	Y, r18
    245c:	3a c0       	rjmp	.+116    	; 0x24d2 <malloc+0x128>
    245e:	20 91 66 04 	lds	r18, 0x0466
    2462:	30 91 67 04 	lds	r19, 0x0467
    2466:	23 2b       	or	r18, r19
    2468:	41 f4       	brne	.+16     	; 0x247a <malloc+0xd0>
    246a:	20 91 02 01 	lds	r18, 0x0102
    246e:	30 91 03 01 	lds	r19, 0x0103
    2472:	30 93 67 04 	sts	0x0467, r19
    2476:	20 93 66 04 	sts	0x0466, r18
    247a:	20 91 00 01 	lds	r18, 0x0100
    247e:	30 91 01 01 	lds	r19, 0x0101
    2482:	21 15       	cp	r18, r1
    2484:	31 05       	cpc	r19, r1
    2486:	41 f4       	brne	.+16     	; 0x2498 <malloc+0xee>
    2488:	2d b7       	in	r18, 0x3d	; 61
    248a:	3e b7       	in	r19, 0x3e	; 62
    248c:	40 91 04 01 	lds	r20, 0x0104
    2490:	50 91 05 01 	lds	r21, 0x0105
    2494:	24 1b       	sub	r18, r20
    2496:	35 0b       	sbc	r19, r21
    2498:	e0 91 66 04 	lds	r30, 0x0466
    249c:	f0 91 67 04 	lds	r31, 0x0467
    24a0:	e2 17       	cp	r30, r18
    24a2:	f3 07       	cpc	r31, r19
    24a4:	a0 f4       	brcc	.+40     	; 0x24ce <malloc+0x124>
    24a6:	2e 1b       	sub	r18, r30
    24a8:	3f 0b       	sbc	r19, r31
    24aa:	28 17       	cp	r18, r24
    24ac:	39 07       	cpc	r19, r25
    24ae:	78 f0       	brcs	.+30     	; 0x24ce <malloc+0x124>
    24b0:	ac 01       	movw	r20, r24
    24b2:	4e 5f       	subi	r20, 0xFE	; 254
    24b4:	5f 4f       	sbci	r21, 0xFF	; 255
    24b6:	24 17       	cp	r18, r20
    24b8:	35 07       	cpc	r19, r21
    24ba:	48 f0       	brcs	.+18     	; 0x24ce <malloc+0x124>
    24bc:	4e 0f       	add	r20, r30
    24be:	5f 1f       	adc	r21, r31
    24c0:	50 93 67 04 	sts	0x0467, r21
    24c4:	40 93 66 04 	sts	0x0466, r20
    24c8:	81 93       	st	Z+, r24
    24ca:	91 93       	st	Z+, r25
    24cc:	02 c0       	rjmp	.+4      	; 0x24d2 <malloc+0x128>
    24ce:	e0 e0       	ldi	r30, 0x00	; 0
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	cf 01       	movw	r24, r30
    24d4:	df 91       	pop	r29
    24d6:	cf 91       	pop	r28
    24d8:	08 95       	ret

000024da <free>:
    24da:	cf 93       	push	r28
    24dc:	df 93       	push	r29
    24de:	00 97       	sbiw	r24, 0x00	; 0
    24e0:	09 f4       	brne	.+2      	; 0x24e4 <free+0xa>
    24e2:	87 c0       	rjmp	.+270    	; 0x25f2 <free+0x118>
    24e4:	fc 01       	movw	r30, r24
    24e6:	32 97       	sbiw	r30, 0x02	; 2
    24e8:	13 82       	std	Z+3, r1	; 0x03
    24ea:	12 82       	std	Z+2, r1	; 0x02
    24ec:	c0 91 68 04 	lds	r28, 0x0468
    24f0:	d0 91 69 04 	lds	r29, 0x0469
    24f4:	20 97       	sbiw	r28, 0x00	; 0
    24f6:	81 f4       	brne	.+32     	; 0x2518 <free+0x3e>
    24f8:	20 81       	ld	r18, Z
    24fa:	31 81       	ldd	r19, Z+1	; 0x01
    24fc:	28 0f       	add	r18, r24
    24fe:	39 1f       	adc	r19, r25
    2500:	80 91 66 04 	lds	r24, 0x0466
    2504:	90 91 67 04 	lds	r25, 0x0467
    2508:	82 17       	cp	r24, r18
    250a:	93 07       	cpc	r25, r19
    250c:	79 f5       	brne	.+94     	; 0x256c <free+0x92>
    250e:	f0 93 67 04 	sts	0x0467, r31
    2512:	e0 93 66 04 	sts	0x0466, r30
    2516:	6d c0       	rjmp	.+218    	; 0x25f2 <free+0x118>
    2518:	de 01       	movw	r26, r28
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	ae 17       	cp	r26, r30
    2520:	bf 07       	cpc	r27, r31
    2522:	50 f4       	brcc	.+20     	; 0x2538 <free+0x5e>
    2524:	12 96       	adiw	r26, 0x02	; 2
    2526:	4d 91       	ld	r20, X+
    2528:	5c 91       	ld	r21, X
    252a:	13 97       	sbiw	r26, 0x03	; 3
    252c:	9d 01       	movw	r18, r26
    252e:	41 15       	cp	r20, r1
    2530:	51 05       	cpc	r21, r1
    2532:	09 f1       	breq	.+66     	; 0x2576 <free+0x9c>
    2534:	da 01       	movw	r26, r20
    2536:	f3 cf       	rjmp	.-26     	; 0x251e <free+0x44>
    2538:	b3 83       	std	Z+3, r27	; 0x03
    253a:	a2 83       	std	Z+2, r26	; 0x02
    253c:	40 81       	ld	r20, Z
    253e:	51 81       	ldd	r21, Z+1	; 0x01
    2540:	84 0f       	add	r24, r20
    2542:	95 1f       	adc	r25, r21
    2544:	8a 17       	cp	r24, r26
    2546:	9b 07       	cpc	r25, r27
    2548:	71 f4       	brne	.+28     	; 0x2566 <free+0x8c>
    254a:	8d 91       	ld	r24, X+
    254c:	9c 91       	ld	r25, X
    254e:	11 97       	sbiw	r26, 0x01	; 1
    2550:	84 0f       	add	r24, r20
    2552:	95 1f       	adc	r25, r21
    2554:	02 96       	adiw	r24, 0x02	; 2
    2556:	91 83       	std	Z+1, r25	; 0x01
    2558:	80 83       	st	Z, r24
    255a:	12 96       	adiw	r26, 0x02	; 2
    255c:	8d 91       	ld	r24, X+
    255e:	9c 91       	ld	r25, X
    2560:	13 97       	sbiw	r26, 0x03	; 3
    2562:	93 83       	std	Z+3, r25	; 0x03
    2564:	82 83       	std	Z+2, r24	; 0x02
    2566:	21 15       	cp	r18, r1
    2568:	31 05       	cpc	r19, r1
    256a:	29 f4       	brne	.+10     	; 0x2576 <free+0x9c>
    256c:	f0 93 69 04 	sts	0x0469, r31
    2570:	e0 93 68 04 	sts	0x0468, r30
    2574:	3e c0       	rjmp	.+124    	; 0x25f2 <free+0x118>
    2576:	d9 01       	movw	r26, r18
    2578:	13 96       	adiw	r26, 0x03	; 3
    257a:	fc 93       	st	X, r31
    257c:	ee 93       	st	-X, r30
    257e:	12 97       	sbiw	r26, 0x02	; 2
    2580:	4d 91       	ld	r20, X+
    2582:	5d 91       	ld	r21, X+
    2584:	a4 0f       	add	r26, r20
    2586:	b5 1f       	adc	r27, r21
    2588:	ea 17       	cp	r30, r26
    258a:	fb 07       	cpc	r31, r27
    258c:	79 f4       	brne	.+30     	; 0x25ac <free+0xd2>
    258e:	80 81       	ld	r24, Z
    2590:	91 81       	ldd	r25, Z+1	; 0x01
    2592:	84 0f       	add	r24, r20
    2594:	95 1f       	adc	r25, r21
    2596:	02 96       	adiw	r24, 0x02	; 2
    2598:	d9 01       	movw	r26, r18
    259a:	11 96       	adiw	r26, 0x01	; 1
    259c:	9c 93       	st	X, r25
    259e:	8e 93       	st	-X, r24
    25a0:	82 81       	ldd	r24, Z+2	; 0x02
    25a2:	93 81       	ldd	r25, Z+3	; 0x03
    25a4:	13 96       	adiw	r26, 0x03	; 3
    25a6:	9c 93       	st	X, r25
    25a8:	8e 93       	st	-X, r24
    25aa:	12 97       	sbiw	r26, 0x02	; 2
    25ac:	e0 e0       	ldi	r30, 0x00	; 0
    25ae:	f0 e0       	ldi	r31, 0x00	; 0
    25b0:	8a 81       	ldd	r24, Y+2	; 0x02
    25b2:	9b 81       	ldd	r25, Y+3	; 0x03
    25b4:	00 97       	sbiw	r24, 0x00	; 0
    25b6:	19 f0       	breq	.+6      	; 0x25be <free+0xe4>
    25b8:	fe 01       	movw	r30, r28
    25ba:	ec 01       	movw	r28, r24
    25bc:	f9 cf       	rjmp	.-14     	; 0x25b0 <free+0xd6>
    25be:	ce 01       	movw	r24, r28
    25c0:	02 96       	adiw	r24, 0x02	; 2
    25c2:	28 81       	ld	r18, Y
    25c4:	39 81       	ldd	r19, Y+1	; 0x01
    25c6:	82 0f       	add	r24, r18
    25c8:	93 1f       	adc	r25, r19
    25ca:	20 91 66 04 	lds	r18, 0x0466
    25ce:	30 91 67 04 	lds	r19, 0x0467
    25d2:	28 17       	cp	r18, r24
    25d4:	39 07       	cpc	r19, r25
    25d6:	69 f4       	brne	.+26     	; 0x25f2 <free+0x118>
    25d8:	30 97       	sbiw	r30, 0x00	; 0
    25da:	29 f4       	brne	.+10     	; 0x25e6 <free+0x10c>
    25dc:	10 92 69 04 	sts	0x0469, r1
    25e0:	10 92 68 04 	sts	0x0468, r1
    25e4:	02 c0       	rjmp	.+4      	; 0x25ea <free+0x110>
    25e6:	13 82       	std	Z+3, r1	; 0x03
    25e8:	12 82       	std	Z+2, r1	; 0x02
    25ea:	d0 93 67 04 	sts	0x0467, r29
    25ee:	c0 93 66 04 	sts	0x0466, r28
    25f2:	df 91       	pop	r29
    25f4:	cf 91       	pop	r28
    25f6:	08 95       	ret

000025f8 <realloc>:
    25f8:	a0 e0       	ldi	r26, 0x00	; 0
    25fa:	b0 e0       	ldi	r27, 0x00	; 0
    25fc:	e2 e0       	ldi	r30, 0x02	; 2
    25fe:	f3 e1       	ldi	r31, 0x13	; 19
    2600:	0c 94 0b 14 	jmp	0x2816	; 0x2816 <__prologue_saves__+0x8>
    2604:	ec 01       	movw	r28, r24
    2606:	cb 01       	movw	r24, r22
    2608:	20 97       	sbiw	r28, 0x00	; 0
    260a:	19 f4       	brne	.+6      	; 0x2612 <realloc+0x1a>
    260c:	0e 94 d5 11 	call	0x23aa	; 0x23aa <malloc>
    2610:	b8 c0       	rjmp	.+368    	; 0x2782 <realloc+0x18a>
    2612:	fe 01       	movw	r30, r28
    2614:	e6 0f       	add	r30, r22
    2616:	f7 1f       	adc	r31, r23
    2618:	9e 01       	movw	r18, r28
    261a:	22 50       	subi	r18, 0x02	; 2
    261c:	31 09       	sbc	r19, r1
    261e:	e2 17       	cp	r30, r18
    2620:	f3 07       	cpc	r31, r19
    2622:	08 f4       	brcc	.+2      	; 0x2626 <realloc+0x2e>
    2624:	ac c0       	rjmp	.+344    	; 0x277e <realloc+0x186>
    2626:	d9 01       	movw	r26, r18
    2628:	0d 91       	ld	r16, X+
    262a:	1c 91       	ld	r17, X
    262c:	11 97       	sbiw	r26, 0x01	; 1
    262e:	06 17       	cp	r16, r22
    2630:	17 07       	cpc	r17, r23
    2632:	b8 f0       	brcs	.+46     	; 0x2662 <realloc+0x6a>
    2634:	05 30       	cpi	r16, 0x05	; 5
    2636:	11 05       	cpc	r17, r1
    2638:	08 f4       	brcc	.+2      	; 0x263c <realloc+0x44>
    263a:	9f c0       	rjmp	.+318    	; 0x277a <realloc+0x182>
    263c:	a8 01       	movw	r20, r16
    263e:	44 50       	subi	r20, 0x04	; 4
    2640:	51 09       	sbc	r21, r1
    2642:	46 17       	cp	r20, r22
    2644:	57 07       	cpc	r21, r23
    2646:	08 f4       	brcc	.+2      	; 0x264a <realloc+0x52>
    2648:	98 c0       	rjmp	.+304    	; 0x277a <realloc+0x182>
    264a:	02 50       	subi	r16, 0x02	; 2
    264c:	11 09       	sbc	r17, r1
    264e:	06 1b       	sub	r16, r22
    2650:	17 0b       	sbc	r17, r23
    2652:	01 93       	st	Z+, r16
    2654:	11 93       	st	Z+, r17
    2656:	6d 93       	st	X+, r22
    2658:	7c 93       	st	X, r23
    265a:	cf 01       	movw	r24, r30
    265c:	0e 94 6d 12 	call	0x24da	; 0x24da <free>
    2660:	8c c0       	rjmp	.+280    	; 0x277a <realloc+0x182>
    2662:	5b 01       	movw	r10, r22
    2664:	a0 1a       	sub	r10, r16
    2666:	b1 0a       	sbc	r11, r17
    2668:	4e 01       	movw	r8, r28
    266a:	80 0e       	add	r8, r16
    266c:	91 1e       	adc	r9, r17
    266e:	a0 91 68 04 	lds	r26, 0x0468
    2672:	b0 91 69 04 	lds	r27, 0x0469
    2676:	61 2c       	mov	r6, r1
    2678:	71 2c       	mov	r7, r1
    267a:	60 e0       	ldi	r22, 0x00	; 0
    267c:	70 e0       	ldi	r23, 0x00	; 0
    267e:	10 97       	sbiw	r26, 0x00	; 0
    2680:	09 f4       	brne	.+2      	; 0x2684 <realloc+0x8c>
    2682:	49 c0       	rjmp	.+146    	; 0x2716 <realloc+0x11e>
    2684:	a8 15       	cp	r26, r8
    2686:	b9 05       	cpc	r27, r9
    2688:	c9 f5       	brne	.+114    	; 0x26fc <realloc+0x104>
    268a:	ed 90       	ld	r14, X+
    268c:	fc 90       	ld	r15, X
    268e:	11 97       	sbiw	r26, 0x01	; 1
    2690:	67 01       	movw	r12, r14
    2692:	42 e0       	ldi	r20, 0x02	; 2
    2694:	c4 0e       	add	r12, r20
    2696:	d1 1c       	adc	r13, r1
    2698:	ca 14       	cp	r12, r10
    269a:	db 04       	cpc	r13, r11
    269c:	78 f1       	brcs	.+94     	; 0x26fc <realloc+0x104>
    269e:	47 01       	movw	r8, r14
    26a0:	8a 18       	sub	r8, r10
    26a2:	9b 08       	sbc	r9, r11
    26a4:	64 01       	movw	r12, r8
    26a6:	42 e0       	ldi	r20, 0x02	; 2
    26a8:	c4 0e       	add	r12, r20
    26aa:	d1 1c       	adc	r13, r1
    26ac:	12 96       	adiw	r26, 0x02	; 2
    26ae:	bc 90       	ld	r11, X
    26b0:	12 97       	sbiw	r26, 0x02	; 2
    26b2:	13 96       	adiw	r26, 0x03	; 3
    26b4:	ac 91       	ld	r26, X
    26b6:	b5 e0       	ldi	r27, 0x05	; 5
    26b8:	cb 16       	cp	r12, r27
    26ba:	d1 04       	cpc	r13, r1
    26bc:	40 f0       	brcs	.+16     	; 0x26ce <realloc+0xd6>
    26be:	b2 82       	std	Z+2, r11	; 0x02
    26c0:	a3 83       	std	Z+3, r26	; 0x03
    26c2:	91 82       	std	Z+1, r9	; 0x01
    26c4:	80 82       	st	Z, r8
    26c6:	d9 01       	movw	r26, r18
    26c8:	8d 93       	st	X+, r24
    26ca:	9c 93       	st	X, r25
    26cc:	09 c0       	rjmp	.+18     	; 0x26e0 <realloc+0xe8>
    26ce:	0e 5f       	subi	r16, 0xFE	; 254
    26d0:	1f 4f       	sbci	r17, 0xFF	; 255
    26d2:	0e 0d       	add	r16, r14
    26d4:	1f 1d       	adc	r17, r15
    26d6:	f9 01       	movw	r30, r18
    26d8:	11 83       	std	Z+1, r17	; 0x01
    26da:	00 83       	st	Z, r16
    26dc:	eb 2d       	mov	r30, r11
    26de:	fa 2f       	mov	r31, r26
    26e0:	61 15       	cp	r22, r1
    26e2:	71 05       	cpc	r23, r1
    26e4:	31 f0       	breq	.+12     	; 0x26f2 <realloc+0xfa>
    26e6:	db 01       	movw	r26, r22
    26e8:	13 96       	adiw	r26, 0x03	; 3
    26ea:	fc 93       	st	X, r31
    26ec:	ee 93       	st	-X, r30
    26ee:	12 97       	sbiw	r26, 0x02	; 2
    26f0:	44 c0       	rjmp	.+136    	; 0x277a <realloc+0x182>
    26f2:	f0 93 69 04 	sts	0x0469, r31
    26f6:	e0 93 68 04 	sts	0x0468, r30
    26fa:	3f c0       	rjmp	.+126    	; 0x277a <realloc+0x182>
    26fc:	6d 91       	ld	r22, X+
    26fe:	7c 91       	ld	r23, X
    2700:	11 97       	sbiw	r26, 0x01	; 1
    2702:	66 16       	cp	r6, r22
    2704:	77 06       	cpc	r7, r23
    2706:	08 f4       	brcc	.+2      	; 0x270a <realloc+0x112>
    2708:	3b 01       	movw	r6, r22
    270a:	bd 01       	movw	r22, r26
    270c:	12 96       	adiw	r26, 0x02	; 2
    270e:	0d 90       	ld	r0, X+
    2710:	bc 91       	ld	r27, X
    2712:	a0 2d       	mov	r26, r0
    2714:	b4 cf       	rjmp	.-152    	; 0x267e <realloc+0x86>
    2716:	60 91 66 04 	lds	r22, 0x0466
    271a:	70 91 67 04 	lds	r23, 0x0467
    271e:	68 15       	cp	r22, r8
    2720:	79 05       	cpc	r23, r9
    2722:	e9 f4       	brne	.+58     	; 0x275e <realloc+0x166>
    2724:	68 16       	cp	r6, r24
    2726:	79 06       	cpc	r7, r25
    2728:	d0 f4       	brcc	.+52     	; 0x275e <realloc+0x166>
    272a:	40 91 00 01 	lds	r20, 0x0100
    272e:	50 91 01 01 	lds	r21, 0x0101
    2732:	41 15       	cp	r20, r1
    2734:	51 05       	cpc	r21, r1
    2736:	41 f4       	brne	.+16     	; 0x2748 <realloc+0x150>
    2738:	4d b7       	in	r20, 0x3d	; 61
    273a:	5e b7       	in	r21, 0x3e	; 62
    273c:	60 91 04 01 	lds	r22, 0x0104
    2740:	70 91 05 01 	lds	r23, 0x0105
    2744:	46 1b       	sub	r20, r22
    2746:	57 0b       	sbc	r21, r23
    2748:	e4 17       	cp	r30, r20
    274a:	f5 07       	cpc	r31, r21
    274c:	c0 f4       	brcc	.+48     	; 0x277e <realloc+0x186>
    274e:	f0 93 67 04 	sts	0x0467, r31
    2752:	e0 93 66 04 	sts	0x0466, r30
    2756:	f9 01       	movw	r30, r18
    2758:	91 83       	std	Z+1, r25	; 0x01
    275a:	80 83       	st	Z, r24
    275c:	0e c0       	rjmp	.+28     	; 0x277a <realloc+0x182>
    275e:	0e 94 d5 11 	call	0x23aa	; 0x23aa <malloc>
    2762:	7c 01       	movw	r14, r24
    2764:	00 97       	sbiw	r24, 0x00	; 0
    2766:	59 f0       	breq	.+22     	; 0x277e <realloc+0x186>
    2768:	a8 01       	movw	r20, r16
    276a:	be 01       	movw	r22, r28
    276c:	0e 94 ce 13 	call	0x279c	; 0x279c <memcpy>
    2770:	ce 01       	movw	r24, r28
    2772:	0e 94 6d 12 	call	0x24da	; 0x24da <free>
    2776:	c7 01       	movw	r24, r14
    2778:	04 c0       	rjmp	.+8      	; 0x2782 <realloc+0x18a>
    277a:	ce 01       	movw	r24, r28
    277c:	02 c0       	rjmp	.+4      	; 0x2782 <realloc+0x18a>
    277e:	80 e0       	ldi	r24, 0x00	; 0
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	cd b7       	in	r28, 0x3d	; 61
    2784:	de b7       	in	r29, 0x3e	; 62
    2786:	ee e0       	ldi	r30, 0x0E	; 14
    2788:	0c 94 27 14 	jmp	0x284e	; 0x284e <__epilogue_restores__+0x8>

0000278c <isspace>:
    278c:	91 11       	cpse	r25, r1
    278e:	3c c0       	rjmp	.+120    	; 0x2808 <__ctype_isfalse>
    2790:	80 32       	cpi	r24, 0x20	; 32
    2792:	19 f0       	breq	.+6      	; 0x279a <isspace+0xe>
    2794:	89 50       	subi	r24, 0x09	; 9
    2796:	85 50       	subi	r24, 0x05	; 5
    2798:	d0 f7       	brcc	.-12     	; 0x278e <isspace+0x2>
    279a:	08 95       	ret

0000279c <memcpy>:
    279c:	fb 01       	movw	r30, r22
    279e:	dc 01       	movw	r26, r24
    27a0:	02 c0       	rjmp	.+4      	; 0x27a6 <memcpy+0xa>
    27a2:	01 90       	ld	r0, Z+
    27a4:	0d 92       	st	X+, r0
    27a6:	41 50       	subi	r20, 0x01	; 1
    27a8:	50 40       	sbci	r21, 0x00	; 0
    27aa:	d8 f7       	brcc	.-10     	; 0x27a2 <memcpy+0x6>
    27ac:	08 95       	ret

000027ae <strcmp>:
    27ae:	fb 01       	movw	r30, r22
    27b0:	dc 01       	movw	r26, r24
    27b2:	8d 91       	ld	r24, X+
    27b4:	01 90       	ld	r0, Z+
    27b6:	80 19       	sub	r24, r0
    27b8:	01 10       	cpse	r0, r1
    27ba:	d9 f3       	breq	.-10     	; 0x27b2 <strcmp+0x4>
    27bc:	99 0b       	sbc	r25, r25
    27be:	08 95       	ret

000027c0 <strcpy>:
    27c0:	fb 01       	movw	r30, r22
    27c2:	dc 01       	movw	r26, r24
    27c4:	01 90       	ld	r0, Z+
    27c6:	0d 92       	st	X+, r0
    27c8:	00 20       	and	r0, r0
    27ca:	e1 f7       	brne	.-8      	; 0x27c4 <strcpy+0x4>
    27cc:	08 95       	ret

000027ce <strncmp>:
    27ce:	fb 01       	movw	r30, r22
    27d0:	dc 01       	movw	r26, r24
    27d2:	41 50       	subi	r20, 0x01	; 1
    27d4:	50 40       	sbci	r21, 0x00	; 0
    27d6:	30 f0       	brcs	.+12     	; 0x27e4 <strncmp+0x16>
    27d8:	8d 91       	ld	r24, X+
    27da:	01 90       	ld	r0, Z+
    27dc:	80 19       	sub	r24, r0
    27de:	19 f4       	brne	.+6      	; 0x27e6 <strncmp+0x18>
    27e0:	00 20       	and	r0, r0
    27e2:	b9 f7       	brne	.-18     	; 0x27d2 <strncmp+0x4>
    27e4:	88 1b       	sub	r24, r24
    27e6:	99 0b       	sbc	r25, r25
    27e8:	08 95       	ret

000027ea <strncpy>:
    27ea:	fb 01       	movw	r30, r22
    27ec:	dc 01       	movw	r26, r24
    27ee:	41 50       	subi	r20, 0x01	; 1
    27f0:	50 40       	sbci	r21, 0x00	; 0
    27f2:	48 f0       	brcs	.+18     	; 0x2806 <strncpy+0x1c>
    27f4:	01 90       	ld	r0, Z+
    27f6:	0d 92       	st	X+, r0
    27f8:	00 20       	and	r0, r0
    27fa:	c9 f7       	brne	.-14     	; 0x27ee <strncpy+0x4>
    27fc:	01 c0       	rjmp	.+2      	; 0x2800 <strncpy+0x16>
    27fe:	1d 92       	st	X+, r1
    2800:	41 50       	subi	r20, 0x01	; 1
    2802:	50 40       	sbci	r21, 0x00	; 0
    2804:	e0 f7       	brcc	.-8      	; 0x27fe <strncpy+0x14>
    2806:	08 95       	ret

00002808 <__ctype_isfalse>:
    2808:	99 27       	eor	r25, r25
    280a:	88 27       	eor	r24, r24

0000280c <__ctype_istrue>:
    280c:	08 95       	ret

0000280e <__prologue_saves__>:
    280e:	2f 92       	push	r2
    2810:	3f 92       	push	r3
    2812:	4f 92       	push	r4
    2814:	5f 92       	push	r5
    2816:	6f 92       	push	r6
    2818:	7f 92       	push	r7
    281a:	8f 92       	push	r8
    281c:	9f 92       	push	r9
    281e:	af 92       	push	r10
    2820:	bf 92       	push	r11
    2822:	cf 92       	push	r12
    2824:	df 92       	push	r13
    2826:	ef 92       	push	r14
    2828:	ff 92       	push	r15
    282a:	0f 93       	push	r16
    282c:	1f 93       	push	r17
    282e:	cf 93       	push	r28
    2830:	df 93       	push	r29
    2832:	cd b7       	in	r28, 0x3d	; 61
    2834:	de b7       	in	r29, 0x3e	; 62
    2836:	ca 1b       	sub	r28, r26
    2838:	db 0b       	sbc	r29, r27
    283a:	0f b6       	in	r0, 0x3f	; 63
    283c:	f8 94       	cli
    283e:	de bf       	out	0x3e, r29	; 62
    2840:	0f be       	out	0x3f, r0	; 63
    2842:	cd bf       	out	0x3d, r28	; 61
    2844:	09 94       	ijmp

00002846 <__epilogue_restores__>:
    2846:	2a 88       	ldd	r2, Y+18	; 0x12
    2848:	39 88       	ldd	r3, Y+17	; 0x11
    284a:	48 88       	ldd	r4, Y+16	; 0x10
    284c:	5f 84       	ldd	r5, Y+15	; 0x0f
    284e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2850:	7d 84       	ldd	r7, Y+13	; 0x0d
    2852:	8c 84       	ldd	r8, Y+12	; 0x0c
    2854:	9b 84       	ldd	r9, Y+11	; 0x0b
    2856:	aa 84       	ldd	r10, Y+10	; 0x0a
    2858:	b9 84       	ldd	r11, Y+9	; 0x09
    285a:	c8 84       	ldd	r12, Y+8	; 0x08
    285c:	df 80       	ldd	r13, Y+7	; 0x07
    285e:	ee 80       	ldd	r14, Y+6	; 0x06
    2860:	fd 80       	ldd	r15, Y+5	; 0x05
    2862:	0c 81       	ldd	r16, Y+4	; 0x04
    2864:	1b 81       	ldd	r17, Y+3	; 0x03
    2866:	aa 81       	ldd	r26, Y+2	; 0x02
    2868:	b9 81       	ldd	r27, Y+1	; 0x01
    286a:	ce 0f       	add	r28, r30
    286c:	d1 1d       	adc	r29, r1
    286e:	0f b6       	in	r0, 0x3f	; 63
    2870:	f8 94       	cli
    2872:	de bf       	out	0x3e, r29	; 62
    2874:	0f be       	out	0x3f, r0	; 63
    2876:	cd bf       	out	0x3d, r28	; 61
    2878:	ed 01       	movw	r28, r26
    287a:	08 95       	ret

0000287c <__do_global_dtors>:
    287c:	10 e0       	ldi	r17, 0x00	; 0
    287e:	c0 ec       	ldi	r28, 0xC0	; 192
    2880:	d0 e0       	ldi	r29, 0x00	; 0
    2882:	04 c0       	rjmp	.+8      	; 0x288c <__do_global_dtors+0x10>
    2884:	fe 01       	movw	r30, r28
    2886:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__tablejump__>
    288a:	22 96       	adiw	r28, 0x02	; 2
    288c:	c2 3c       	cpi	r28, 0xC2	; 194
    288e:	d1 07       	cpc	r29, r17
    2890:	c9 f7       	brne	.-14     	; 0x2884 <__do_global_dtors+0x8>
    2892:	f8 94       	cli

00002894 <__stop_program>:
    2894:	ff cf       	rjmp	.-2      	; 0x2894 <__stop_program>
