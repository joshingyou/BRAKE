
BackpackLED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e2  00800200  00004ba6  00004c3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004ba6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000313  008003e2  008003e2  00004e1c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004e1c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000009a0  00000000  00000000  00004e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0001d3e0  00000000  00000000  000057ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000038d3  00000000  00000000  00022bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00006244  00000000  00000000  0002649f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00002a00  00000000  00000000  0002c6e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000333f  00000000  00000000  0002f0e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000f92f  00000000  00000000  00032423  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000009d8  00000000  00000000  00041d52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7e c3       	rjmp	.+1788   	; 0x6fe <__dtors_end>
       2:	00 00       	nop
       4:	0c 94 c5 12 	jmp	0x258a	; 0x258a <__vector_1>
       8:	0c 94 f6 12 	jmp	0x25ec	; 0x25ec <__vector_2>
       c:	0c 94 27 13 	jmp	0x264e	; 0x264e <__vector_3>
      10:	0c 94 58 13 	jmp	0x26b0	; 0x26b0 <__vector_4>
      14:	0c 94 89 13 	jmp	0x2712	; 0x2712 <__vector_5>
      18:	0c 94 ba 13 	jmp	0x2774	; 0x2774 <__vector_6>
      1c:	0c 94 eb 13 	jmp	0x27d6	; 0x27d6 <__vector_7>
      20:	0c 94 1c 14 	jmp	0x2838	; 0x2838 <__vector_8>
      24:	9d c3       	rjmp	.+1850   	; 0x760 <__bad_interrupt>
      26:	00 00       	nop
      28:	9b c3       	rjmp	.+1846   	; 0x760 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	99 c3       	rjmp	.+1842   	; 0x760 <__bad_interrupt>
      2e:	00 00       	nop
      30:	97 c3       	rjmp	.+1838   	; 0x760 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 66 12 	jmp	0x24cc	; 0x24cc <__vector_13>
      38:	93 c3       	rjmp	.+1830   	; 0x760 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	91 c3       	rjmp	.+1826   	; 0x760 <__bad_interrupt>
      3e:	00 00       	nop
      40:	8f c3       	rjmp	.+1822   	; 0x760 <__bad_interrupt>
      42:	00 00       	nop
      44:	8d c3       	rjmp	.+1818   	; 0x760 <__bad_interrupt>
      46:	00 00       	nop
      48:	8b c3       	rjmp	.+1814   	; 0x760 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	89 c3       	rjmp	.+1810   	; 0x760 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 f6 0c 	jmp	0x19ec	; 0x19ec <__vector_20>
      54:	85 c3       	rjmp	.+1802   	; 0x760 <__bad_interrupt>
      56:	00 00       	nop
      58:	83 c3       	rjmp	.+1798   	; 0x760 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 4d 14 	jmp	0x289a	; 0x289a <__vector_23>
      60:	7f c3       	rjmp	.+1790   	; 0x760 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 04 0e 	jmp	0x1c08	; 0x1c08 <__vector_25>
      68:	0c 94 43 0e 	jmp	0x1c86	; 0x1c86 <__vector_26>
      6c:	79 c3       	rjmp	.+1778   	; 0x760 <__bad_interrupt>
      6e:	00 00       	nop
      70:	77 c3       	rjmp	.+1774   	; 0x760 <__bad_interrupt>
      72:	00 00       	nop
      74:	75 c3       	rjmp	.+1770   	; 0x760 <__bad_interrupt>
      76:	00 00       	nop
      78:	73 c3       	rjmp	.+1766   	; 0x760 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	71 c3       	rjmp	.+1762   	; 0x760 <__bad_interrupt>
      7e:	00 00       	nop
      80:	6f c3       	rjmp	.+1758   	; 0x760 <__bad_interrupt>
      82:	00 00       	nop
      84:	6d c3       	rjmp	.+1754   	; 0x760 <__bad_interrupt>
      86:	00 00       	nop
      88:	6b c3       	rjmp	.+1750   	; 0x760 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	69 c3       	rjmp	.+1746   	; 0x760 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 af 0e 	jmp	0x1d5e	; 0x1d5e <__vector_36>
      94:	0c 94 ee 0e 	jmp	0x1ddc	; 0x1ddc <__vector_37>
      98:	63 c3       	rjmp	.+1734   	; 0x760 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	61 c3       	rjmp	.+1730   	; 0x760 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	5f c3       	rjmp	.+1726   	; 0x760 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	5d c3       	rjmp	.+1722   	; 0x760 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	5b c3       	rjmp	.+1718   	; 0x760 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	59 c3       	rjmp	.+1714   	; 0x760 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	57 c3       	rjmp	.+1710   	; 0x760 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	55 c3       	rjmp	.+1706   	; 0x760 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	53 c3       	rjmp	.+1702   	; 0x760 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	51 c3       	rjmp	.+1698   	; 0x760 <__bad_interrupt>
      be:	00 00       	nop
      c0:	4f c3       	rjmp	.+1694   	; 0x760 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	4d c3       	rjmp	.+1690   	; 0x760 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	4b c3       	rjmp	.+1686   	; 0x760 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <__vector_51>
      d0:	0c 94 99 0f 	jmp	0x1f32	; 0x1f32 <__vector_52>
      d4:	45 c3       	rjmp	.+1674   	; 0x760 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 05 10 	jmp	0x200a	; 0x200a <__vector_54>
      dc:	0c 94 44 10 	jmp	0x2088	; 0x2088 <__vector_55>
      e0:	3f c3       	rjmp	.+1662   	; 0x760 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	0f 15       	cp	r16, r15
      e6:	13 15       	cp	r17, r3
      e8:	fd 14       	cp	r15, r13
      ea:	03 15       	cp	r16, r3
      ec:	09 15       	cp	r16, r9
      ee:	58 15       	cp	r21, r8
      f0:	17 15       	cp	r17, r7
      f2:	1d 15       	cp	r17, r13
      f4:	23 15       	cp	r18, r3
      f6:	29 15       	cp	r18, r9
      f8:	2f 15       	cp	r18, r15
      fa:	35 15       	cp	r19, r5
      fc:	3b 15       	cp	r19, r11
      fe:	41 15       	cp	r20, r1
     100:	58 15       	cp	r21, r8
     102:	47 15       	cp	r20, r7
     104:	4d 15       	cp	r20, r13
     106:	53 15       	cp	r21, r3

00000108 <__trampolines_end>:
     108:	00 00       	nop
     10a:	00 00       	nop
     10c:	00 3e       	cpi	r16, 0xE0	; 224
     10e:	5b 4f       	sbci	r21, 0xFB	; 251
     110:	5b 3e       	cpi	r21, 0xEB	; 235
     112:	3e 6b       	ori	r19, 0xBE	; 190
     114:	4f 6b       	ori	r20, 0xBF	; 191
     116:	3e 1c       	adc	r3, r14
     118:	3e 7c       	andi	r19, 0xCE	; 206
     11a:	3e 1c       	adc	r3, r14
     11c:	18 3c       	cpi	r17, 0xC8	; 200
     11e:	7e 3c       	cpi	r23, 0xCE	; 206
     120:	18 1c       	adc	r1, r8
     122:	57 7d       	andi	r21, 0xD7	; 215
     124:	57 1c       	adc	r5, r7
     126:	1c 5e       	subi	r17, 0xEC	; 236
     128:	7f 5e       	subi	r23, 0xEF	; 239
     12a:	1c 00       	.word	0x001c	; ????
     12c:	18 3c       	cpi	r17, 0xC8	; 200
     12e:	18 00       	.word	0x0018	; ????
     130:	ff e7       	ldi	r31, 0x7F	; 127
     132:	c3 e7       	ldi	r28, 0x73	; 115
     134:	ff 00       	.word	0x00ff	; ????
     136:	18 24       	eor	r1, r8
     138:	18 00       	.word	0x0018	; ????
     13a:	ff e7       	ldi	r31, 0x7F	; 127
     13c:	db e7       	ldi	r29, 0x7B	; 123
     13e:	ff 30       	cpi	r31, 0x0F	; 15
     140:	48 3a       	cpi	r20, 0xA8	; 168
     142:	06 0e       	add	r0, r22
     144:	26 29       	or	r18, r6
     146:	79 29       	or	r23, r9
     148:	26 40       	sbci	r18, 0x06	; 6
     14a:	7f 05       	cpc	r23, r15
     14c:	05 07       	cpc	r16, r21
     14e:	40 7f       	andi	r20, 0xF0	; 240
     150:	05 25       	eor	r16, r5
     152:	3f 5a       	subi	r19, 0xAF	; 175
     154:	3c e7       	ldi	r19, 0x7C	; 124
     156:	3c 5a       	subi	r19, 0xAC	; 172
     158:	7f 3e       	cpi	r23, 0xEF	; 239
     15a:	1c 1c       	adc	r1, r12
     15c:	08 08       	sbc	r0, r8
     15e:	1c 1c       	adc	r1, r12
     160:	3e 7f       	andi	r19, 0xFE	; 254
     162:	14 22       	and	r1, r20
     164:	7f 22       	and	r7, r31
     166:	14 5f       	subi	r17, 0xF4	; 244
     168:	5f 00       	.word	0x005f	; ????
     16a:	5f 5f       	subi	r21, 0xFF	; 255
     16c:	06 09       	sbc	r16, r6
     16e:	7f 01       	movw	r14, r30
     170:	7f 00       	.word	0x007f	; ????
     172:	66 89       	ldd	r22, Z+22	; 0x16
     174:	95 6a       	ori	r25, 0xA5	; 165
     176:	60 60       	ori	r22, 0x00	; 0
     178:	60 60       	ori	r22, 0x00	; 0
     17a:	60 94       	com	r6
     17c:	a2 ff       	sbrs	r26, 2
     17e:	a2 94       	swap	r10
     180:	08 04       	cpc	r0, r8
     182:	7e 04       	cpc	r7, r14
     184:	08 10       	cpse	r0, r8
     186:	20 7e       	andi	r18, 0xE0	; 224
     188:	20 10       	cpse	r2, r0
     18a:	08 08       	sbc	r0, r8
     18c:	2a 1c       	adc	r2, r10
     18e:	08 08       	sbc	r0, r8
     190:	1c 2a       	or	r1, r28
     192:	08 08       	sbc	r0, r8
     194:	1e 10       	cpse	r1, r14
     196:	10 10       	cpse	r1, r0
     198:	10 0c       	add	r1, r0
     19a:	1e 0c       	add	r1, r14
     19c:	1e 0c       	add	r1, r14
     19e:	30 38       	cpi	r19, 0x80	; 128
     1a0:	3e 38       	cpi	r19, 0x8E	; 142
     1a2:	30 06       	cpc	r3, r16
     1a4:	0e 3e       	cpi	r16, 0xEE	; 238
     1a6:	0e 06       	cpc	r0, r30
     1a8:	00 00       	nop
     1aa:	00 00       	nop
     1ac:	00 00       	nop
     1ae:	00 5f       	subi	r16, 0xF0	; 240
     1b0:	00 00       	nop
     1b2:	00 07       	cpc	r16, r16
     1b4:	00 07       	cpc	r16, r16
     1b6:	00 14       	cp	r0, r0
     1b8:	7f 14       	cp	r7, r15
     1ba:	7f 14       	cp	r7, r15
     1bc:	24 2a       	or	r2, r20
     1be:	7f 2a       	or	r7, r31
     1c0:	12 23       	and	r17, r18
     1c2:	13 08       	sbc	r1, r3
     1c4:	64 62       	ori	r22, 0x24	; 36
     1c6:	36 49       	sbci	r19, 0x96	; 150
     1c8:	56 20       	and	r5, r6
     1ca:	50 00       	.word	0x0050	; ????
     1cc:	08 07       	cpc	r16, r24
     1ce:	03 00       	.word	0x0003	; ????
     1d0:	00 1c       	adc	r0, r0
     1d2:	22 41       	sbci	r18, 0x12	; 18
     1d4:	00 00       	nop
     1d6:	41 22       	and	r4, r17
     1d8:	1c 00       	.word	0x001c	; ????
     1da:	2a 1c       	adc	r2, r10
     1dc:	7f 1c       	adc	r7, r15
     1de:	2a 08       	sbc	r2, r10
     1e0:	08 3e       	cpi	r16, 0xE8	; 232
     1e2:	08 08       	sbc	r0, r8
     1e4:	00 80       	ld	r0, Z
     1e6:	70 30       	cpi	r23, 0x00	; 0
     1e8:	00 08       	sbc	r0, r0
     1ea:	08 08       	sbc	r0, r8
     1ec:	08 08       	sbc	r0, r8
     1ee:	00 00       	nop
     1f0:	60 60       	ori	r22, 0x00	; 0
     1f2:	00 20       	and	r0, r0
     1f4:	10 08       	sbc	r1, r0
     1f6:	04 02       	muls	r16, r20
     1f8:	3e 51       	subi	r19, 0x1E	; 30
     1fa:	49 45       	sbci	r20, 0x59	; 89
     1fc:	3e 00       	.word	0x003e	; ????
     1fe:	42 7f       	andi	r20, 0xF2	; 242
     200:	40 00       	.word	0x0040	; ????
     202:	72 49       	sbci	r23, 0x92	; 146
     204:	49 49       	sbci	r20, 0x99	; 153
     206:	46 21       	and	r20, r6
     208:	41 49       	sbci	r20, 0x91	; 145
     20a:	4d 33       	cpi	r20, 0x3D	; 61
     20c:	18 14       	cp	r1, r8
     20e:	12 7f       	andi	r17, 0xF2	; 242
     210:	10 27       	eor	r17, r16
     212:	45 45       	sbci	r20, 0x55	; 85
     214:	45 39       	cpi	r20, 0x95	; 149
     216:	3c 4a       	sbci	r19, 0xAC	; 172
     218:	49 49       	sbci	r20, 0x99	; 153
     21a:	31 41       	sbci	r19, 0x11	; 17
     21c:	21 11       	cpse	r18, r1
     21e:	09 07       	cpc	r16, r25
     220:	36 49       	sbci	r19, 0x96	; 150
     222:	49 49       	sbci	r20, 0x99	; 153
     224:	36 46       	sbci	r19, 0x66	; 102
     226:	49 49       	sbci	r20, 0x99	; 153
     228:	29 1e       	adc	r2, r25
     22a:	00 00       	nop
     22c:	14 00       	.word	0x0014	; ????
     22e:	00 00       	nop
     230:	40 34       	cpi	r20, 0x40	; 64
     232:	00 00       	nop
     234:	00 08       	sbc	r0, r0
     236:	14 22       	and	r1, r20
     238:	41 14       	cp	r4, r1
     23a:	14 14       	cp	r1, r4
     23c:	14 14       	cp	r1, r4
     23e:	00 41       	sbci	r16, 0x10	; 16
     240:	22 14       	cp	r2, r2
     242:	08 02       	muls	r16, r24
     244:	01 59       	subi	r16, 0x91	; 145
     246:	09 06       	cpc	r0, r25
     248:	3e 41       	sbci	r19, 0x1E	; 30
     24a:	5d 59       	subi	r21, 0x9D	; 157
     24c:	4e 7c       	andi	r20, 0xCE	; 206
     24e:	12 11       	cpse	r17, r2
     250:	12 7c       	andi	r17, 0xC2	; 194
     252:	7f 49       	sbci	r23, 0x9F	; 159
     254:	49 49       	sbci	r20, 0x99	; 153
     256:	36 3e       	cpi	r19, 0xE6	; 230
     258:	41 41       	sbci	r20, 0x11	; 17
     25a:	41 22       	and	r4, r17
     25c:	7f 41       	sbci	r23, 0x1F	; 31
     25e:	41 41       	sbci	r20, 0x11	; 17
     260:	3e 7f       	andi	r19, 0xFE	; 254
     262:	49 49       	sbci	r20, 0x99	; 153
     264:	49 41       	sbci	r20, 0x19	; 25
     266:	7f 09       	sbc	r23, r15
     268:	09 09       	sbc	r16, r9
     26a:	01 3e       	cpi	r16, 0xE1	; 225
     26c:	41 41       	sbci	r20, 0x11	; 17
     26e:	51 73       	andi	r21, 0x31	; 49
     270:	7f 08       	sbc	r7, r15
     272:	08 08       	sbc	r0, r8
     274:	7f 00       	.word	0x007f	; ????
     276:	41 7f       	andi	r20, 0xF1	; 241
     278:	41 00       	.word	0x0041	; ????
     27a:	20 40       	sbci	r18, 0x00	; 0
     27c:	41 3f       	cpi	r20, 0xF1	; 241
     27e:	01 7f       	andi	r16, 0xF1	; 241
     280:	08 14       	cp	r0, r8
     282:	22 41       	sbci	r18, 0x12	; 18
     284:	7f 40       	sbci	r23, 0x0F	; 15
     286:	40 40       	sbci	r20, 0x00	; 0
     288:	40 7f       	andi	r20, 0xF0	; 240
     28a:	02 1c       	adc	r0, r2
     28c:	02 7f       	andi	r16, 0xF2	; 242
     28e:	7f 04       	cpc	r7, r15
     290:	08 10       	cpse	r0, r8
     292:	7f 3e       	cpi	r23, 0xEF	; 239
     294:	41 41       	sbci	r20, 0x11	; 17
     296:	41 3e       	cpi	r20, 0xE1	; 225
     298:	7f 09       	sbc	r23, r15
     29a:	09 09       	sbc	r16, r9
     29c:	06 3e       	cpi	r16, 0xE6	; 230
     29e:	41 51       	subi	r20, 0x11	; 17
     2a0:	21 5e       	subi	r18, 0xE1	; 225
     2a2:	7f 09       	sbc	r23, r15
     2a4:	19 29       	or	r17, r9
     2a6:	46 26       	eor	r4, r22
     2a8:	49 49       	sbci	r20, 0x99	; 153
     2aa:	49 32       	cpi	r20, 0x29	; 41
     2ac:	03 01       	movw	r0, r6
     2ae:	7f 01       	movw	r14, r30
     2b0:	03 3f       	cpi	r16, 0xF3	; 243
     2b2:	40 40       	sbci	r20, 0x00	; 0
     2b4:	40 3f       	cpi	r20, 0xF0	; 240
     2b6:	1f 20       	and	r1, r15
     2b8:	40 20       	and	r4, r0
     2ba:	1f 3f       	cpi	r17, 0xFF	; 255
     2bc:	40 38       	cpi	r20, 0x80	; 128
     2be:	40 3f       	cpi	r20, 0xF0	; 240
     2c0:	63 14       	cp	r6, r3
     2c2:	08 14       	cp	r0, r8
     2c4:	63 03       	mulsu	r22, r19
     2c6:	04 78       	andi	r16, 0x84	; 132
     2c8:	04 03       	mulsu	r16, r20
     2ca:	61 59       	subi	r22, 0x91	; 145
     2cc:	49 4d       	sbci	r20, 0xD9	; 217
     2ce:	43 00       	.word	0x0043	; ????
     2d0:	7f 41       	sbci	r23, 0x1F	; 31
     2d2:	41 41       	sbci	r20, 0x11	; 17
     2d4:	02 04       	cpc	r0, r2
     2d6:	08 10       	cpse	r0, r8
     2d8:	20 00       	.word	0x0020	; ????
     2da:	41 41       	sbci	r20, 0x11	; 17
     2dc:	41 7f       	andi	r20, 0xF1	; 241
     2de:	04 02       	muls	r16, r20
     2e0:	01 02       	muls	r16, r17
     2e2:	04 40       	sbci	r16, 0x04	; 4
     2e4:	40 40       	sbci	r20, 0x00	; 0
     2e6:	40 40       	sbci	r20, 0x00	; 0
     2e8:	00 03       	mulsu	r16, r16
     2ea:	07 08       	sbc	r0, r7
     2ec:	00 20       	and	r0, r0
     2ee:	54 54       	subi	r21, 0x44	; 68
     2f0:	78 40       	sbci	r23, 0x08	; 8
     2f2:	7f 28       	or	r7, r15
     2f4:	44 44       	sbci	r20, 0x44	; 68
     2f6:	38 38       	cpi	r19, 0x88	; 136
     2f8:	44 44       	sbci	r20, 0x44	; 68
     2fa:	44 28       	or	r4, r4
     2fc:	38 44       	sbci	r19, 0x48	; 72
     2fe:	44 28       	or	r4, r4
     300:	7f 38       	cpi	r23, 0x8F	; 143
     302:	54 54       	subi	r21, 0x44	; 68
     304:	54 18       	sub	r5, r4
     306:	00 08       	sbc	r0, r0
     308:	7e 09       	sbc	r23, r14
     30a:	02 18       	sub	r0, r2
     30c:	a4 a4       	ldd	r10, Z+44	; 0x2c
     30e:	9c 78       	andi	r25, 0x8C	; 140
     310:	7f 08       	sbc	r7, r15
     312:	04 04       	cpc	r0, r4
     314:	78 00       	.word	0x0078	; ????
     316:	44 7d       	andi	r20, 0xD4	; 212
     318:	40 00       	.word	0x0040	; ????
     31a:	20 40       	sbci	r18, 0x00	; 0
     31c:	40 3d       	cpi	r20, 0xD0	; 208
     31e:	00 7f       	andi	r16, 0xF0	; 240
     320:	10 28       	or	r1, r0
     322:	44 00       	.word	0x0044	; ????
     324:	00 41       	sbci	r16, 0x10	; 16
     326:	7f 40       	sbci	r23, 0x0F	; 15
     328:	00 7c       	andi	r16, 0xC0	; 192
     32a:	04 78       	andi	r16, 0x84	; 132
     32c:	04 78       	andi	r16, 0x84	; 132
     32e:	7c 08       	sbc	r7, r12
     330:	04 04       	cpc	r0, r4
     332:	78 38       	cpi	r23, 0x88	; 136
     334:	44 44       	sbci	r20, 0x44	; 68
     336:	44 38       	cpi	r20, 0x84	; 132
     338:	fc 18       	sub	r15, r12
     33a:	24 24       	eor	r2, r4
     33c:	18 18       	sub	r1, r8
     33e:	24 24       	eor	r2, r4
     340:	18 fc       	.word	0xfc18	; ????
     342:	7c 08       	sbc	r7, r12
     344:	04 04       	cpc	r0, r4
     346:	08 48       	sbci	r16, 0x88	; 136
     348:	54 54       	subi	r21, 0x44	; 68
     34a:	54 24       	eor	r5, r4
     34c:	04 04       	cpc	r0, r4
     34e:	3f 44       	sbci	r19, 0x4F	; 79
     350:	24 3c       	cpi	r18, 0xC4	; 196
     352:	40 40       	sbci	r20, 0x00	; 0
     354:	20 7c       	andi	r18, 0xC0	; 192
     356:	1c 20       	and	r1, r12
     358:	40 20       	and	r4, r0
     35a:	1c 3c       	cpi	r17, 0xCC	; 204
     35c:	40 30       	cpi	r20, 0x00	; 0
     35e:	40 3c       	cpi	r20, 0xC0	; 192
     360:	44 28       	or	r4, r4
     362:	10 28       	or	r1, r0
     364:	44 4c       	sbci	r20, 0xC4	; 196
     366:	90 90 90 7c 	lds	r9, 0x7C90
     36a:	44 64       	ori	r20, 0x44	; 68
     36c:	54 4c       	sbci	r21, 0xC4	; 196
     36e:	44 00       	.word	0x0044	; ????
     370:	08 36       	cpi	r16, 0x68	; 104
     372:	41 00       	.word	0x0041	; ????
     374:	00 00       	nop
     376:	77 00       	.word	0x0077	; ????
     378:	00 00       	nop
     37a:	41 36       	cpi	r20, 0x61	; 97
     37c:	08 00       	.word	0x0008	; ????
     37e:	02 01       	movw	r0, r4
     380:	02 04       	cpc	r0, r2
     382:	02 3c       	cpi	r16, 0xC2	; 194
     384:	26 23       	and	r18, r22
     386:	26 3c       	cpi	r18, 0xC6	; 198
     388:	1e a1       	ldd	r17, Y+38	; 0x26
     38a:	a1 61       	ori	r26, 0x11	; 17
     38c:	12 3a       	cpi	r17, 0xA2	; 162
     38e:	40 40       	sbci	r20, 0x00	; 0
     390:	20 7a       	andi	r18, 0xA0	; 160
     392:	38 54       	subi	r19, 0x48	; 72
     394:	54 55       	subi	r21, 0x54	; 84
     396:	59 21       	and	r21, r9
     398:	55 55       	subi	r21, 0x55	; 85
     39a:	79 41       	sbci	r23, 0x19	; 25
     39c:	22 54       	subi	r18, 0x42	; 66
     39e:	54 78       	andi	r21, 0x84	; 132
     3a0:	42 21       	and	r20, r2
     3a2:	55 54       	subi	r21, 0x45	; 69
     3a4:	78 40       	sbci	r23, 0x08	; 8
     3a6:	20 54       	subi	r18, 0x40	; 64
     3a8:	55 79       	andi	r21, 0x95	; 149
     3aa:	40 0c       	add	r4, r0
     3ac:	1e 52       	subi	r17, 0x2E	; 46
     3ae:	72 12       	cpse	r7, r18
     3b0:	39 55       	subi	r19, 0x59	; 89
     3b2:	55 55       	subi	r21, 0x55	; 85
     3b4:	59 39       	cpi	r21, 0x99	; 153
     3b6:	54 54       	subi	r21, 0x44	; 68
     3b8:	54 59       	subi	r21, 0x94	; 148
     3ba:	39 55       	subi	r19, 0x59	; 89
     3bc:	54 54       	subi	r21, 0x44	; 68
     3be:	58 00       	.word	0x0058	; ????
     3c0:	00 45       	sbci	r16, 0x50	; 80
     3c2:	7c 41       	sbci	r23, 0x1C	; 28
     3c4:	00 02       	muls	r16, r16
     3c6:	45 7d       	andi	r20, 0xD5	; 213
     3c8:	42 00       	.word	0x0042	; ????
     3ca:	01 45       	sbci	r16, 0x51	; 81
     3cc:	7c 40       	sbci	r23, 0x0C	; 12
     3ce:	7d 12       	cpse	r7, r29
     3d0:	11 12       	cpse	r1, r17
     3d2:	7d f0       	brhs	.+30     	; 0x3f2 <__trampolines_end+0x2ea>
     3d4:	28 25       	eor	r18, r8
     3d6:	28 f0       	brcs	.+10     	; 0x3e2 <__trampolines_end+0x2da>
     3d8:	7c 54       	subi	r23, 0x4C	; 76
     3da:	55 45       	sbci	r21, 0x55	; 85
     3dc:	00 20       	and	r0, r0
     3de:	54 54       	subi	r21, 0x44	; 68
     3e0:	7c 54       	subi	r23, 0x4C	; 76
     3e2:	7c 0a       	sbc	r7, r28
     3e4:	09 7f       	andi	r16, 0xF9	; 249
     3e6:	49 32       	cpi	r20, 0x29	; 41
     3e8:	49 49       	sbci	r20, 0x99	; 153
     3ea:	49 32       	cpi	r20, 0x29	; 41
     3ec:	3a 44       	sbci	r19, 0x4A	; 74
     3ee:	44 44       	sbci	r20, 0x44	; 68
     3f0:	3a 32       	cpi	r19, 0x2A	; 42
     3f2:	4a 48       	sbci	r20, 0x8A	; 138
     3f4:	48 30       	cpi	r20, 0x08	; 8
     3f6:	3a 41       	sbci	r19, 0x1A	; 26
     3f8:	41 21       	and	r20, r1
     3fa:	7a 3a       	cpi	r23, 0xAA	; 170
     3fc:	42 40       	sbci	r20, 0x02	; 2
     3fe:	20 78       	andi	r18, 0x80	; 128
     400:	00 9d       	mul	r16, r0
     402:	a0 a0       	ldd	r10, Z+32	; 0x20
     404:	7d 3d       	cpi	r23, 0xDD	; 221
     406:	42 42       	sbci	r20, 0x22	; 34
     408:	42 3d       	cpi	r20, 0xD2	; 210
     40a:	3d 40       	sbci	r19, 0x0D	; 13
     40c:	40 40       	sbci	r20, 0x00	; 0
     40e:	3d 3c       	cpi	r19, 0xCD	; 205
     410:	24 ff       	sbrs	r18, 4
     412:	24 24       	eor	r2, r4
     414:	48 7e       	andi	r20, 0xE8	; 232
     416:	49 43       	sbci	r20, 0x39	; 57
     418:	66 2b       	or	r22, r22
     41a:	2f fc       	.word	0xfc2f	; ????
     41c:	2f 2b       	or	r18, r31
     41e:	ff 09       	sbc	r31, r15
     420:	29 f6       	brne	.-118    	; 0x3ac <__trampolines_end+0x2a4>
     422:	20 c0       	rjmp	.+64     	; 0x464 <__trampolines_end+0x35c>
     424:	88 7e       	andi	r24, 0xE8	; 232
     426:	09 03       	fmul	r16, r17
     428:	20 54       	subi	r18, 0x40	; 64
     42a:	54 79       	andi	r21, 0x94	; 148
     42c:	41 00       	.word	0x0041	; ????
     42e:	00 44       	sbci	r16, 0x40	; 64
     430:	7d 41       	sbci	r23, 0x1D	; 29
     432:	30 48       	sbci	r19, 0x80	; 128
     434:	48 4a       	sbci	r20, 0xA8	; 168
     436:	32 38       	cpi	r19, 0x82	; 130
     438:	40 40       	sbci	r20, 0x00	; 0
     43a:	22 7a       	andi	r18, 0xA2	; 162
     43c:	00 7a       	andi	r16, 0xA0	; 160
     43e:	0a 0a       	sbc	r0, r26
     440:	72 7d       	andi	r23, 0xD2	; 210
     442:	0d 19       	sub	r16, r13
     444:	31 7d       	andi	r19, 0xD1	; 209
     446:	26 29       	or	r18, r6
     448:	29 2f       	mov	r18, r25
     44a:	28 26       	eor	r2, r24
     44c:	29 29       	or	r18, r9
     44e:	29 26       	eor	r2, r25
     450:	30 48       	sbci	r19, 0x80	; 128
     452:	4d 40       	sbci	r20, 0x0D	; 13
     454:	20 38       	cpi	r18, 0x80	; 128
     456:	08 08       	sbc	r0, r8
     458:	08 08       	sbc	r0, r8
     45a:	08 08       	sbc	r0, r8
     45c:	08 08       	sbc	r0, r8
     45e:	38 2f       	mov	r19, r24
     460:	10 c8       	rjmp	.-4064   	; 0xfffff482 <__eeprom_end+0xff7ef482>
     462:	ac ba       	out	0x1c, r10	; 28
     464:	2f 10       	cpse	r2, r15
     466:	28 34       	cpi	r18, 0x48	; 72
     468:	fa 00       	.word	0x00fa	; ????
     46a:	00 7b       	andi	r16, 0xB0	; 176
     46c:	00 00       	nop
     46e:	08 14       	cp	r0, r8
     470:	2a 14       	cp	r2, r10
     472:	22 22       	and	r2, r18
     474:	14 2a       	or	r1, r20
     476:	14 08       	sbc	r1, r4
     478:	aa 00       	.word	0x00aa	; ????
     47a:	55 00       	.word	0x0055	; ????
     47c:	aa aa       	std	Y+50, r10	; 0x32
     47e:	55 aa       	std	Z+53, r5	; 0x35
     480:	55 aa       	std	Z+53, r5	; 0x35
     482:	00 00       	nop
     484:	00 ff       	sbrs	r16, 0
     486:	00 10       	cpse	r0, r0
     488:	10 10       	cpse	r1, r0
     48a:	ff 00       	.word	0x00ff	; ????
     48c:	14 14       	cp	r1, r4
     48e:	14 ff       	sbrs	r17, 4
     490:	00 10       	cpse	r0, r0
     492:	10 ff       	sbrs	r17, 0
     494:	00 ff       	sbrs	r16, 0
     496:	10 10       	cpse	r1, r0
     498:	f0 10       	cpse	r15, r0
     49a:	f0 14       	cp	r15, r0
     49c:	14 14       	cp	r1, r4
     49e:	fc 00       	.word	0x00fc	; ????
     4a0:	14 14       	cp	r1, r4
     4a2:	f7 00       	.word	0x00f7	; ????
     4a4:	ff 00       	.word	0x00ff	; ????
     4a6:	00 ff       	sbrs	r16, 0
     4a8:	00 ff       	sbrs	r16, 0
     4aa:	14 14       	cp	r1, r4
     4ac:	f4 04       	cpc	r15, r4
     4ae:	fc 14       	cp	r15, r12
     4b0:	14 17       	cp	r17, r20
     4b2:	10 1f       	adc	r17, r16
     4b4:	10 10       	cpse	r1, r0
     4b6:	1f 10       	cpse	r1, r15
     4b8:	1f 14       	cp	r1, r15
     4ba:	14 14       	cp	r1, r4
     4bc:	1f 00       	.word	0x001f	; ????
     4be:	10 10       	cpse	r1, r0
     4c0:	10 f0       	brcs	.+4      	; 0x4c6 <__trampolines_end+0x3be>
     4c2:	00 00       	nop
     4c4:	00 00       	nop
     4c6:	1f 10       	cpse	r1, r15
     4c8:	10 10       	cpse	r1, r0
     4ca:	10 1f       	adc	r17, r16
     4cc:	10 10       	cpse	r1, r0
     4ce:	10 10       	cpse	r1, r0
     4d0:	f0 10       	cpse	r15, r0
     4d2:	00 00       	nop
     4d4:	00 ff       	sbrs	r16, 0
     4d6:	10 10       	cpse	r1, r0
     4d8:	10 10       	cpse	r1, r0
     4da:	10 10       	cpse	r1, r0
     4dc:	10 10       	cpse	r1, r0
     4de:	10 ff       	sbrs	r17, 0
     4e0:	10 00       	.word	0x0010	; ????
     4e2:	00 00       	nop
     4e4:	ff 14       	cp	r15, r15
     4e6:	00 00       	nop
     4e8:	ff 00       	.word	0x00ff	; ????
     4ea:	ff 00       	.word	0x00ff	; ????
     4ec:	00 1f       	adc	r16, r16
     4ee:	10 17       	cp	r17, r16
     4f0:	00 00       	nop
     4f2:	fc 04       	cpc	r15, r12
     4f4:	f4 14       	cp	r15, r4
     4f6:	14 17       	cp	r17, r20
     4f8:	10 17       	cp	r17, r16
     4fa:	14 14       	cp	r1, r4
     4fc:	f4 04       	cpc	r15, r4
     4fe:	f4 00       	.word	0x00f4	; ????
     500:	00 ff       	sbrs	r16, 0
     502:	00 f7       	brcc	.-64     	; 0x4c4 <__trampolines_end+0x3bc>
     504:	14 14       	cp	r1, r4
     506:	14 14       	cp	r1, r4
     508:	14 14       	cp	r1, r4
     50a:	14 f7       	brge	.-60     	; 0x4d0 <__trampolines_end+0x3c8>
     50c:	00 f7       	brcc	.-64     	; 0x4ce <__trampolines_end+0x3c6>
     50e:	14 14       	cp	r1, r4
     510:	14 17       	cp	r17, r20
     512:	14 10       	cpse	r1, r4
     514:	10 1f       	adc	r17, r16
     516:	10 1f       	adc	r17, r16
     518:	14 14       	cp	r1, r4
     51a:	14 f4       	brge	.+4      	; 0x520 <__trampolines_end+0x418>
     51c:	14 10       	cpse	r1, r4
     51e:	10 f0       	brcs	.+4      	; 0x524 <__trampolines_end+0x41c>
     520:	10 f0       	brcs	.+4      	; 0x526 <__trampolines_end+0x41e>
     522:	00 00       	nop
     524:	1f 10       	cpse	r1, r15
     526:	1f 00       	.word	0x001f	; ????
     528:	00 00       	nop
     52a:	1f 14       	cp	r1, r15
     52c:	00 00       	nop
     52e:	00 fc       	sbrc	r0, 0
     530:	14 00       	.word	0x0014	; ????
     532:	00 f0       	brcs	.+0      	; 0x534 <__trampolines_end+0x42c>
     534:	10 f0       	brcs	.+4      	; 0x53a <__trampolines_end+0x432>
     536:	10 10       	cpse	r1, r0
     538:	ff 10       	cpse	r15, r15
     53a:	ff 14       	cp	r15, r15
     53c:	14 14       	cp	r1, r4
     53e:	ff 14       	cp	r15, r15
     540:	10 10       	cpse	r1, r0
     542:	10 1f       	adc	r17, r16
     544:	00 00       	nop
     546:	00 00       	nop
     548:	f0 10       	cpse	r15, r0
     54a:	ff ff       	.word	0xffff	; ????
     54c:	ff ff       	.word	0xffff	; ????
     54e:	ff f0       	brie	.+62     	; 0x58e <__trampolines_end+0x486>
     550:	f0 f0       	brcs	.+60     	; 0x58e <__trampolines_end+0x486>
     552:	f0 f0       	brcs	.+60     	; 0x590 <__trampolines_end+0x488>
     554:	ff ff       	.word	0xffff	; ????
     556:	ff 00       	.word	0x00ff	; ????
     558:	00 00       	nop
     55a:	00 00       	nop
     55c:	ff ff       	.word	0xffff	; ????
     55e:	0f 0f       	add	r16, r31
     560:	0f 0f       	add	r16, r31
     562:	0f 38       	cpi	r16, 0x8F	; 143
     564:	44 44       	sbci	r20, 0x44	; 68
     566:	38 44       	sbci	r19, 0x48	; 72
     568:	fc 4a       	sbci	r31, 0xAC	; 172
     56a:	4a 4a       	sbci	r20, 0xAA	; 170
     56c:	34 7e       	andi	r19, 0xE4	; 228
     56e:	02 02       	muls	r16, r18
     570:	06 06       	cpc	r0, r22
     572:	02 7e       	andi	r16, 0xE2	; 226
     574:	02 7e       	andi	r16, 0xE2	; 226
     576:	02 63       	ori	r16, 0x32	; 50
     578:	55 49       	sbci	r21, 0x95	; 149
     57a:	41 63       	ori	r20, 0x31	; 49
     57c:	38 44       	sbci	r19, 0x48	; 72
     57e:	44 3c       	cpi	r20, 0xC4	; 196
     580:	04 40       	sbci	r16, 0x04	; 4
     582:	7e 20       	and	r7, r14
     584:	1e 20       	and	r1, r14
     586:	06 02       	muls	r16, r22
     588:	7e 02       	muls	r23, r30
     58a:	02 99       	sbic	0x00, 2	; 0
     58c:	a5 e7       	ldi	r26, 0x75	; 117
     58e:	a5 99       	sbic	0x14, 5	; 20
     590:	1c 2a       	or	r1, r28
     592:	49 2a       	or	r4, r25
     594:	1c 4c       	sbci	r17, 0xCC	; 204
     596:	72 01       	movw	r14, r4
     598:	72 4c       	sbci	r23, 0xC2	; 194
     59a:	30 4a       	sbci	r19, 0xA0	; 160
     59c:	4d 4d       	sbci	r20, 0xDD	; 221
     59e:	30 30       	cpi	r19, 0x00	; 0
     5a0:	48 78       	andi	r20, 0x88	; 136
     5a2:	48 30       	cpi	r20, 0x08	; 8
     5a4:	bc 62       	ori	r27, 0x2C	; 44
     5a6:	5a 46       	sbci	r21, 0x6A	; 106
     5a8:	3d 3e       	cpi	r19, 0xED	; 237
     5aa:	49 49       	sbci	r20, 0x99	; 153
     5ac:	49 00       	.word	0x0049	; ????
     5ae:	7e 01       	movw	r14, r28
     5b0:	01 01       	movw	r0, r2
     5b2:	7e 2a       	or	r7, r30
     5b4:	2a 2a       	or	r2, r26
     5b6:	2a 2a       	or	r2, r26
     5b8:	44 44       	sbci	r20, 0x44	; 68
     5ba:	5f 44       	sbci	r21, 0x4F	; 79
     5bc:	44 40       	sbci	r20, 0x04	; 4
     5be:	51 4a       	sbci	r21, 0xA1	; 161
     5c0:	44 40       	sbci	r20, 0x04	; 4
     5c2:	40 44       	sbci	r20, 0x40	; 64
     5c4:	4a 51       	subi	r20, 0x1A	; 26
     5c6:	40 00       	.word	0x0040	; ????
     5c8:	00 ff       	sbrs	r16, 0
     5ca:	01 03       	mulsu	r16, r17
     5cc:	e0 80       	ld	r14, Z
     5ce:	ff 00       	.word	0x00ff	; ????
     5d0:	00 08       	sbc	r0, r0
     5d2:	08 6b       	ori	r16, 0xB8	; 184
     5d4:	6b 08       	sbc	r6, r11
     5d6:	36 12       	cpse	r3, r22
     5d8:	36 24       	eor	r3, r6
     5da:	36 06       	cpc	r3, r22
     5dc:	0f 09       	sbc	r16, r15
     5de:	0f 06       	cpc	r0, r31
     5e0:	00 00       	nop
     5e2:	18 18       	sub	r1, r8
     5e4:	00 00       	nop
     5e6:	00 10       	cpse	r0, r0
     5e8:	10 00       	.word	0x0010	; ????
     5ea:	30 40       	sbci	r19, 0x00	; 0
     5ec:	ff 01       	movw	r30, r30
     5ee:	01 00       	.word	0x0001	; ????
     5f0:	1f 01       	movw	r2, r30
     5f2:	01 1e       	adc	r0, r17
     5f4:	00 19       	sub	r16, r0
     5f6:	1d 17       	cp	r17, r29
     5f8:	12 00       	.word	0x0012	; ????
     5fa:	3c 3c       	cpi	r19, 0xCC	; 204
     5fc:	3c 3c       	cpi	r19, 0xCC	; 204
     5fe:	00 00       	nop
     600:	00 00       	nop
	...

00000603 <_ZL21tone_pin_to_timer_PGM>:
     603:	02                                                  .

00000604 <digital_pin_to_timer_PGM>:
     604:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     630:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

0000064a <digital_pin_to_bit_mask_PGM>:
     64a:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     65a:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     66a:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     67a:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     68a:	04 08 10 20 40 80                                   ... @.

00000690 <digital_pin_to_port_PGM>:
     690:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     6a0:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     6b0:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     6c0:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     6d0:	0b 0b 0b 0b 0b 0b                                   ......

000006d6 <port_to_output_PGM>:
     6d6:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     6e6:	02 01 00 00 05 01 08 01 0b 01                       ..........

000006f0 <__ctors_start>:
     6f0:	6c 0e       	add	r6, r28
     6f2:	17 0f       	add	r17, r23
     6f4:	c2 0f       	add	r28, r18
     6f6:	6d 10       	cpse	r6, r13
     6f8:	f4 10       	cpse	r15, r4
     6fa:	75 21       	and	r23, r5

000006fc <__ctors_end>:
     6fc:	af 21       	and	r26, r15

000006fe <__dtors_end>:
     6fe:	11 24       	eor	r1, r1
     700:	1f be       	out	0x3f, r1	; 63
     702:	cf ef       	ldi	r28, 0xFF	; 255
     704:	d1 e2       	ldi	r29, 0x21	; 33
     706:	de bf       	out	0x3e, r29	; 62
     708:	cd bf       	out	0x3d, r28	; 61
     70a:	00 e0       	ldi	r16, 0x00	; 0
     70c:	0c bf       	out	0x3c, r16	; 60

0000070e <__do_copy_data>:
     70e:	13 e0       	ldi	r17, 0x03	; 3
     710:	a0 e0       	ldi	r26, 0x00	; 0
     712:	b2 e0       	ldi	r27, 0x02	; 2
     714:	e6 ea       	ldi	r30, 0xA6	; 166
     716:	fb e4       	ldi	r31, 0x4B	; 75
     718:	00 e0       	ldi	r16, 0x00	; 0
     71a:	0b bf       	out	0x3b, r16	; 59
     71c:	02 c0       	rjmp	.+4      	; 0x722 <__do_copy_data+0x14>
     71e:	07 90       	elpm	r0, Z+
     720:	0d 92       	st	X+, r0
     722:	a2 3e       	cpi	r26, 0xE2	; 226
     724:	b1 07       	cpc	r27, r17
     726:	d9 f7       	brne	.-10     	; 0x71e <__do_copy_data+0x10>

00000728 <__do_clear_bss>:
     728:	26 e0       	ldi	r18, 0x06	; 6
     72a:	a2 ee       	ldi	r26, 0xE2	; 226
     72c:	b3 e0       	ldi	r27, 0x03	; 3
     72e:	01 c0       	rjmp	.+2      	; 0x732 <.do_clear_bss_start>

00000730 <.do_clear_bss_loop>:
     730:	1d 92       	st	X+, r1

00000732 <.do_clear_bss_start>:
     732:	a5 3f       	cpi	r26, 0xF5	; 245
     734:	b2 07       	cpc	r27, r18
     736:	e1 f7       	brne	.-8      	; 0x730 <.do_clear_bss_loop>

00000738 <__do_global_ctors>:
     738:	16 e0       	ldi	r17, 0x06	; 6
     73a:	cc ef       	ldi	r28, 0xFC	; 252
     73c:	d6 e0       	ldi	r29, 0x06	; 6
     73e:	00 e0       	ldi	r16, 0x00	; 0
     740:	06 c0       	rjmp	.+12     	; 0x74e <__do_global_ctors+0x16>
     742:	22 97       	sbiw	r28, 0x02	; 2
     744:	01 09       	sbc	r16, r1
     746:	fe 01       	movw	r30, r28
     748:	0b bf       	out	0x3b, r16	; 59
     74a:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <__tablejump_elpm__>
     74e:	c0 3f       	cpi	r28, 0xF0	; 240
     750:	d1 07       	cpc	r29, r17
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	08 07       	cpc	r16, r24
     756:	a9 f7       	brne	.-22     	; 0x742 <__do_global_ctors+0xa>
     758:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <main>
     75c:	0c 94 c2 25 	jmp	0x4b84	; 0x4b84 <__do_global_dtors>

00000760 <__bad_interrupt>:
     760:	4f cc       	rjmp	.-1890   	; 0x0 <__vectors>

00000762 <_ZN12Adafruit_GFX8drawLineEiiiij>:
      if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (1 << (i % 8))) {
        drawPixel(x+i, y+j, color);
      }
    }
  }
}
     762:	2f 92       	push	r2
     764:	3f 92       	push	r3
     766:	4f 92       	push	r4
     768:	5f 92       	push	r5
     76a:	6f 92       	push	r6
     76c:	7f 92       	push	r7
     76e:	8f 92       	push	r8
     770:	9f 92       	push	r9
     772:	af 92       	push	r10
     774:	bf 92       	push	r11
     776:	cf 92       	push	r12
     778:	df 92       	push	r13
     77a:	ef 92       	push	r14
     77c:	ff 92       	push	r15
     77e:	0f 93       	push	r16
     780:	1f 93       	push	r17
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	00 d0       	rcall	.+0      	; 0x788 <_ZN12Adafruit_GFX8drawLineEiiiij+0x26>
     788:	1f 92       	push	r1
     78a:	cd b7       	in	r28, 0x3d	; 61
     78c:	de b7       	in	r29, 0x3e	; 62
     78e:	4c 01       	movw	r8, r24
     790:	7c 83       	std	Y+4, r23	; 0x04
     792:	6b 83       	std	Y+3, r22	; 0x03
     794:	5a 01       	movw	r10, r20
     796:	39 01       	movw	r6, r18
     798:	c8 01       	movw	r24, r16
     79a:	84 1b       	sub	r24, r20
     79c:	95 0b       	sbc	r25, r21
     79e:	9c 01       	movw	r18, r24
     7a0:	22 f4       	brpl	.+8      	; 0x7aa <_ZN12Adafruit_GFX8drawLineEiiiij+0x48>
     7a2:	22 27       	eor	r18, r18
     7a4:	33 27       	eor	r19, r19
     7a6:	28 1b       	sub	r18, r24
     7a8:	39 0b       	sbc	r19, r25
     7aa:	a3 01       	movw	r20, r6
     7ac:	8b 81       	ldd	r24, Y+3	; 0x03
     7ae:	9c 81       	ldd	r25, Y+4	; 0x04
     7b0:	48 1b       	sub	r20, r24
     7b2:	59 0b       	sbc	r21, r25
     7b4:	ca 01       	movw	r24, r20
     7b6:	99 23       	and	r25, r25
     7b8:	24 f4       	brge	.+8      	; 0x7c2 <_ZN12Adafruit_GFX8drawLineEiiiij+0x60>
     7ba:	88 27       	eor	r24, r24
     7bc:	99 27       	eor	r25, r25
     7be:	84 1b       	sub	r24, r20
     7c0:	95 0b       	sbc	r25, r21
     7c2:	51 e0       	ldi	r21, 0x01	; 1
     7c4:	40 e0       	ldi	r20, 0x00	; 0
     7c6:	82 17       	cp	r24, r18
     7c8:	93 07       	cpc	r25, r19
     7ca:	0c f0       	brlt	.+2      	; 0x7ce <_ZN12Adafruit_GFX8drawLineEiiiij+0x6c>
     7cc:	50 e0       	ldi	r21, 0x00	; 0
     7ce:	45 2e       	mov	r4, r21
     7d0:	54 2e       	mov	r5, r20
     7d2:	41 14       	cp	r4, r1
     7d4:	51 04       	cpc	r5, r1
     7d6:	59 f0       	breq	.+22     	; 0x7ee <_ZN12Adafruit_GFX8drawLineEiiiij+0x8c>
     7d8:	96 2d       	mov	r25, r6
     7da:	87 2d       	mov	r24, r7
     7dc:	38 01       	movw	r6, r16
     7de:	09 2f       	mov	r16, r25
     7e0:	18 2f       	mov	r17, r24
     7e2:	9b 81       	ldd	r25, Y+3	; 0x03
     7e4:	8c 81       	ldd	r24, Y+4	; 0x04
     7e6:	bc 82       	std	Y+4, r11	; 0x04
     7e8:	ab 82       	std	Y+3, r10	; 0x03
     7ea:	a9 2e       	mov	r10, r25
     7ec:	b8 2e       	mov	r11, r24
     7ee:	ab 81       	ldd	r26, Y+3	; 0x03
     7f0:	bc 81       	ldd	r27, Y+4	; 0x04
     7f2:	6a 16       	cp	r6, r26
     7f4:	7b 06       	cpc	r7, r27
     7f6:	5c f4       	brge	.+22     	; 0x80e <_ZN12Adafruit_GFX8drawLineEiiiij+0xac>
     7f8:	9a 2d       	mov	r25, r10
     7fa:	8b 2d       	mov	r24, r11
     7fc:	58 01       	movw	r10, r16
     7fe:	09 2f       	mov	r16, r25
     800:	18 2f       	mov	r17, r24
     802:	9b 81       	ldd	r25, Y+3	; 0x03
     804:	8c 81       	ldd	r24, Y+4	; 0x04
     806:	7c 82       	std	Y+4, r7	; 0x04
     808:	6b 82       	std	Y+3, r6	; 0x03
     80a:	69 2e       	mov	r6, r25
     80c:	78 2e       	mov	r7, r24
     80e:	f3 01       	movw	r30, r6
     810:	2b 81       	ldd	r18, Y+3	; 0x03
     812:	3c 81       	ldd	r19, Y+4	; 0x04
     814:	e2 1b       	sub	r30, r18
     816:	f3 0b       	sbc	r31, r19
     818:	fa 83       	std	Y+2, r31	; 0x02
     81a:	e9 83       	std	Y+1, r30	; 0x01
     81c:	c8 01       	movw	r24, r16
     81e:	8a 19       	sub	r24, r10
     820:	9b 09       	sbc	r25, r11
     822:	1c 01       	movw	r2, r24
     824:	22 f4       	brpl	.+8      	; 0x82e <_ZN12Adafruit_GFX8drawLineEiiiij+0xcc>
     826:	22 24       	eor	r2, r2
     828:	33 24       	eor	r3, r3
     82a:	28 1a       	sub	r2, r24
     82c:	39 0a       	sbc	r3, r25
     82e:	c9 80       	ldd	r12, Y+1	; 0x01
     830:	da 80       	ldd	r13, Y+2	; 0x02
     832:	dd 20       	and	r13, r13
     834:	1c f4       	brge	.+6      	; 0x83c <_ZN12Adafruit_GFX8drawLineEiiiij+0xda>
     836:	3f ef       	ldi	r19, 0xFF	; 255
     838:	c3 1a       	sub	r12, r19
     83a:	d3 0a       	sbc	r13, r19
     83c:	d5 94       	asr	r13
     83e:	c7 94       	ror	r12
     840:	a0 16       	cp	r10, r16
     842:	b1 06       	cpc	r11, r17
     844:	1c f4       	brge	.+6      	; 0x84c <_ZN12Adafruit_GFX8drawLineEiiiij+0xea>
     846:	01 e0       	ldi	r16, 0x01	; 1
     848:	10 e0       	ldi	r17, 0x00	; 0
     84a:	02 c0       	rjmp	.+4      	; 0x850 <_ZN12Adafruit_GFX8drawLineEiiiij+0xee>
     84c:	0f ef       	ldi	r16, 0xFF	; 255
     84e:	1f ef       	ldi	r17, 0xFF	; 255
     850:	8b 81       	ldd	r24, Y+3	; 0x03
     852:	9c 81       	ldd	r25, Y+4	; 0x04
     854:	68 16       	cp	r6, r24
     856:	79 06       	cpc	r7, r25
     858:	74 f1       	brlt	.+92     	; 0x8b6 <_ZN12Adafruit_GFX8drawLineEiiiij+0x154>
     85a:	41 14       	cp	r4, r1
     85c:	51 04       	cpc	r5, r1
     85e:	69 f0       	breq	.+26     	; 0x87a <_ZN12Adafruit_GFX8drawLineEiiiij+0x118>
     860:	d4 01       	movw	r26, r8
     862:	ed 91       	ld	r30, X+
     864:	fc 91       	ld	r31, X
     866:	04 80       	ldd	r0, Z+4	; 0x04
     868:	f5 81       	ldd	r31, Z+5	; 0x05
     86a:	e0 2d       	mov	r30, r0
     86c:	97 01       	movw	r18, r14
     86e:	4b 81       	ldd	r20, Y+3	; 0x03
     870:	5c 81       	ldd	r21, Y+4	; 0x04
     872:	b5 01       	movw	r22, r10
     874:	c4 01       	movw	r24, r8
     876:	19 95       	eicall
     878:	0c c0       	rjmp	.+24     	; 0x892 <_ZN12Adafruit_GFX8drawLineEiiiij+0x130>
     87a:	d4 01       	movw	r26, r8
     87c:	ed 91       	ld	r30, X+
     87e:	fc 91       	ld	r31, X
     880:	04 80       	ldd	r0, Z+4	; 0x04
     882:	f5 81       	ldd	r31, Z+5	; 0x05
     884:	e0 2d       	mov	r30, r0
     886:	97 01       	movw	r18, r14
     888:	a5 01       	movw	r20, r10
     88a:	6b 81       	ldd	r22, Y+3	; 0x03
     88c:	7c 81       	ldd	r23, Y+4	; 0x04
     88e:	c4 01       	movw	r24, r8
     890:	19 95       	eicall
     892:	c2 18       	sub	r12, r2
     894:	d3 08       	sbc	r13, r3
     896:	32 f4       	brpl	.+12     	; 0x8a4 <_ZN12Adafruit_GFX8drawLineEiiiij+0x142>
     898:	a0 0e       	add	r10, r16
     89a:	b1 1e       	adc	r11, r17
     89c:	e9 81       	ldd	r30, Y+1	; 0x01
     89e:	fa 81       	ldd	r31, Y+2	; 0x02
     8a0:	ce 0e       	add	r12, r30
     8a2:	df 1e       	adc	r13, r31
     8a4:	2b 81       	ldd	r18, Y+3	; 0x03
     8a6:	3c 81       	ldd	r19, Y+4	; 0x04
     8a8:	2f 5f       	subi	r18, 0xFF	; 255
     8aa:	3f 4f       	sbci	r19, 0xFF	; 255
     8ac:	3c 83       	std	Y+4, r19	; 0x04
     8ae:	2b 83       	std	Y+3, r18	; 0x03
     8b0:	62 16       	cp	r6, r18
     8b2:	73 06       	cpc	r7, r19
     8b4:	94 f6       	brge	.-92     	; 0x85a <_ZN12Adafruit_GFX8drawLineEiiiij+0xf8>
     8b6:	0f 90       	pop	r0
     8b8:	0f 90       	pop	r0
     8ba:	0f 90       	pop	r0
     8bc:	0f 90       	pop	r0
     8be:	df 91       	pop	r29
     8c0:	cf 91       	pop	r28
     8c2:	1f 91       	pop	r17
     8c4:	0f 91       	pop	r16
     8c6:	ff 90       	pop	r15
     8c8:	ef 90       	pop	r14
     8ca:	df 90       	pop	r13
     8cc:	cf 90       	pop	r12
     8ce:	bf 90       	pop	r11
     8d0:	af 90       	pop	r10
     8d2:	9f 90       	pop	r9
     8d4:	8f 90       	pop	r8
     8d6:	7f 90       	pop	r7
     8d8:	6f 90       	pop	r6
     8da:	5f 90       	pop	r5
     8dc:	4f 90       	pop	r4
     8de:	3f 90       	pop	r3
     8e0:	2f 90       	pop	r2
     8e2:	08 95       	ret

000008e4 <_ZN12Adafruit_GFX8drawRectEiiiij>:
     8e4:	6f 92       	push	r6
     8e6:	7f 92       	push	r7
     8e8:	8f 92       	push	r8
     8ea:	9f 92       	push	r9
     8ec:	af 92       	push	r10
     8ee:	bf 92       	push	r11
     8f0:	cf 92       	push	r12
     8f2:	df 92       	push	r13
     8f4:	ef 92       	push	r14
     8f6:	ff 92       	push	r15
     8f8:	0f 93       	push	r16
     8fa:	1f 93       	push	r17
     8fc:	cf 93       	push	r28
     8fe:	df 93       	push	r29
     900:	ec 01       	movw	r28, r24
     902:	5b 01       	movw	r10, r22
     904:	6a 01       	movw	r12, r20
     906:	39 01       	movw	r6, r18
     908:	48 01       	movw	r8, r16
     90a:	e8 81       	ld	r30, Y
     90c:	f9 81       	ldd	r31, Y+1	; 0x01
     90e:	02 84       	ldd	r0, Z+10	; 0x0a
     910:	f3 85       	ldd	r31, Z+11	; 0x0b
     912:	e0 2d       	mov	r30, r0
     914:	87 01       	movw	r16, r14
     916:	19 95       	eicall
     918:	e8 81       	ld	r30, Y
     91a:	f9 81       	ldd	r31, Y+1	; 0x01
     91c:	a6 01       	movw	r20, r12
     91e:	48 0d       	add	r20, r8
     920:	59 1d       	adc	r21, r9
     922:	41 50       	subi	r20, 0x01	; 1
     924:	51 09       	sbc	r21, r1
     926:	02 84       	ldd	r0, Z+10	; 0x0a
     928:	f3 85       	ldd	r31, Z+11	; 0x0b
     92a:	e0 2d       	mov	r30, r0
     92c:	93 01       	movw	r18, r6
     92e:	b5 01       	movw	r22, r10
     930:	ce 01       	movw	r24, r28
     932:	19 95       	eicall
     934:	e8 81       	ld	r30, Y
     936:	f9 81       	ldd	r31, Y+1	; 0x01
     938:	00 84       	ldd	r0, Z+8	; 0x08
     93a:	f1 85       	ldd	r31, Z+9	; 0x09
     93c:	e0 2d       	mov	r30, r0
     93e:	94 01       	movw	r18, r8
     940:	a6 01       	movw	r20, r12
     942:	b5 01       	movw	r22, r10
     944:	ce 01       	movw	r24, r28
     946:	19 95       	eicall
     948:	e8 81       	ld	r30, Y
     94a:	f9 81       	ldd	r31, Y+1	; 0x01
     94c:	a6 0c       	add	r10, r6
     94e:	b7 1c       	adc	r11, r7
     950:	b5 01       	movw	r22, r10
     952:	61 50       	subi	r22, 0x01	; 1
     954:	71 09       	sbc	r23, r1
     956:	00 84       	ldd	r0, Z+8	; 0x08
     958:	f1 85       	ldd	r31, Z+9	; 0x09
     95a:	e0 2d       	mov	r30, r0
     95c:	94 01       	movw	r18, r8
     95e:	a6 01       	movw	r20, r12
     960:	ce 01       	movw	r24, r28
     962:	19 95       	eicall
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	1f 91       	pop	r17
     96a:	0f 91       	pop	r16
     96c:	ff 90       	pop	r15
     96e:	ef 90       	pop	r14
     970:	df 90       	pop	r13
     972:	cf 90       	pop	r12
     974:	bf 90       	pop	r11
     976:	af 90       	pop	r10
     978:	9f 90       	pop	r9
     97a:	8f 90       	pop	r8
     97c:	7f 90       	pop	r7
     97e:	6f 90       	pop	r6
     980:	08 95       	ret

00000982 <_ZN12Adafruit_GFX13drawFastVLineEiiij>:
     982:	ef 92       	push	r14
     984:	ff 92       	push	r15
     986:	0f 93       	push	r16
     988:	1f 93       	push	r17
     98a:	dc 01       	movw	r26, r24
     98c:	ed 91       	ld	r30, X+
     98e:	fc 91       	ld	r31, X
     990:	24 0f       	add	r18, r20
     992:	35 1f       	adc	r19, r21
     994:	21 50       	subi	r18, 0x01	; 1
     996:	31 09       	sbc	r19, r1
     998:	06 80       	ldd	r0, Z+6	; 0x06
     99a:	f7 81       	ldd	r31, Z+7	; 0x07
     99c:	e0 2d       	mov	r30, r0
     99e:	78 01       	movw	r14, r16
     9a0:	89 01       	movw	r16, r18
     9a2:	9b 01       	movw	r18, r22
     9a4:	19 95       	eicall
     9a6:	1f 91       	pop	r17
     9a8:	0f 91       	pop	r16
     9aa:	ff 90       	pop	r15
     9ac:	ef 90       	pop	r14
     9ae:	08 95       	ret

000009b0 <_ZN12Adafruit_GFX13drawFastHLineEiiij>:
     9b0:	ef 92       	push	r14
     9b2:	ff 92       	push	r15
     9b4:	0f 93       	push	r16
     9b6:	1f 93       	push	r17
     9b8:	dc 01       	movw	r26, r24
     9ba:	ed 91       	ld	r30, X+
     9bc:	fc 91       	ld	r31, X
     9be:	26 0f       	add	r18, r22
     9c0:	37 1f       	adc	r19, r23
     9c2:	21 50       	subi	r18, 0x01	; 1
     9c4:	31 09       	sbc	r19, r1
     9c6:	06 80       	ldd	r0, Z+6	; 0x06
     9c8:	f7 81       	ldd	r31, Z+7	; 0x07
     9ca:	e0 2d       	mov	r30, r0
     9cc:	78 01       	movw	r14, r16
     9ce:	8a 01       	movw	r16, r20
     9d0:	19 95       	eicall
     9d2:	1f 91       	pop	r17
     9d4:	0f 91       	pop	r16
     9d6:	ff 90       	pop	r15
     9d8:	ef 90       	pop	r14
     9da:	08 95       	ret

000009dc <_ZN12Adafruit_GFX8fillRectEiiiij>:
     9dc:	6f 92       	push	r6
     9de:	7f 92       	push	r7
     9e0:	8f 92       	push	r8
     9e2:	9f 92       	push	r9
     9e4:	af 92       	push	r10
     9e6:	bf 92       	push	r11
     9e8:	cf 92       	push	r12
     9ea:	df 92       	push	r13
     9ec:	ef 92       	push	r14
     9ee:	ff 92       	push	r15
     9f0:	0f 93       	push	r16
     9f2:	1f 93       	push	r17
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	6c 01       	movw	r12, r24
     9fa:	eb 01       	movw	r28, r22
     9fc:	4a 01       	movw	r8, r20
     9fe:	58 01       	movw	r10, r16
     a00:	3b 01       	movw	r6, r22
     a02:	62 0e       	add	r6, r18
     a04:	73 1e       	adc	r7, r19
     a06:	66 15       	cp	r22, r6
     a08:	77 05       	cpc	r23, r7
     a0a:	84 f4       	brge	.+32     	; 0xa2c <_ZN12Adafruit_GFX8fillRectEiiiij+0x50>
     a0c:	d6 01       	movw	r26, r12
     a0e:	ed 91       	ld	r30, X+
     a10:	fc 91       	ld	r31, X
     a12:	00 84       	ldd	r0, Z+8	; 0x08
     a14:	f1 85       	ldd	r31, Z+9	; 0x09
     a16:	e0 2d       	mov	r30, r0
     a18:	87 01       	movw	r16, r14
     a1a:	95 01       	movw	r18, r10
     a1c:	a4 01       	movw	r20, r8
     a1e:	be 01       	movw	r22, r28
     a20:	c6 01       	movw	r24, r12
     a22:	19 95       	eicall
     a24:	21 96       	adiw	r28, 0x01	; 1
     a26:	c6 15       	cp	r28, r6
     a28:	d7 05       	cpc	r29, r7
     a2a:	84 f3       	brlt	.-32     	; 0xa0c <_ZN12Adafruit_GFX8fillRectEiiiij+0x30>
     a2c:	df 91       	pop	r29
     a2e:	cf 91       	pop	r28
     a30:	1f 91       	pop	r17
     a32:	0f 91       	pop	r16
     a34:	ff 90       	pop	r15
     a36:	ef 90       	pop	r14
     a38:	df 90       	pop	r13
     a3a:	cf 90       	pop	r12
     a3c:	bf 90       	pop	r11
     a3e:	af 90       	pop	r10
     a40:	9f 90       	pop	r9
     a42:	8f 90       	pop	r8
     a44:	7f 90       	pop	r7
     a46:	6f 90       	pop	r6
     a48:	08 95       	ret

00000a4a <_ZN12Adafruit_GFX10fillScreenEj>:
     a4a:	ef 92       	push	r14
     a4c:	ff 92       	push	r15
     a4e:	0f 93       	push	r16
     a50:	1f 93       	push	r17
     a52:	dc 01       	movw	r26, r24
     a54:	ed 91       	ld	r30, X+
     a56:	fc 91       	ld	r31, X
     a58:	11 97       	sbiw	r26, 0x01	; 1
     a5a:	1a 96       	adiw	r26, 0x0a	; 10
     a5c:	0d 91       	ld	r16, X+
     a5e:	1c 91       	ld	r17, X
     a60:	1b 97       	sbiw	r26, 0x0b	; 11
     a62:	18 96       	adiw	r26, 0x08	; 8
     a64:	2d 91       	ld	r18, X+
     a66:	3c 91       	ld	r19, X
     a68:	19 97       	sbiw	r26, 0x09	; 9
     a6a:	06 84       	ldd	r0, Z+14	; 0x0e
     a6c:	f7 85       	ldd	r31, Z+15	; 0x0f
     a6e:	e0 2d       	mov	r30, r0
     a70:	7b 01       	movw	r14, r22
     a72:	40 e0       	ldi	r20, 0x00	; 0
     a74:	50 e0       	ldi	r21, 0x00	; 0
     a76:	60 e0       	ldi	r22, 0x00	; 0
     a78:	70 e0       	ldi	r23, 0x00	; 0
     a7a:	19 95       	eicall
     a7c:	1f 91       	pop	r17
     a7e:	0f 91       	pop	r16
     a80:	ff 90       	pop	r15
     a82:	ef 90       	pop	r14
     a84:	08 95       	ret

00000a86 <_ZN12Adafruit_GFX13invertDisplayEb>:
     a86:	08 95       	ret

00000a88 <_ZN12Adafruit_GFXC1Eii>:
     a88:	fc 01       	movw	r30, r24
     a8a:	13 82       	std	Z+3, r1	; 0x03
     a8c:	12 82       	std	Z+2, r1	; 0x02
     a8e:	8b e0       	ldi	r24, 0x0B	; 11
     a90:	92 e0       	ldi	r25, 0x02	; 2
     a92:	91 83       	std	Z+1, r25	; 0x01
     a94:	80 83       	st	Z, r24
     a96:	75 83       	std	Z+5, r23	; 0x05
     a98:	64 83       	std	Z+4, r22	; 0x04
     a9a:	57 83       	std	Z+7, r21	; 0x07
     a9c:	46 83       	std	Z+6, r20	; 0x06
     a9e:	71 87       	std	Z+9, r23	; 0x09
     aa0:	60 87       	std	Z+8, r22	; 0x08
     aa2:	53 87       	std	Z+11, r21	; 0x0b
     aa4:	42 87       	std	Z+10, r20	; 0x0a
     aa6:	15 8a       	std	Z+21, r1	; 0x15
     aa8:	15 86       	std	Z+13, r1	; 0x0d
     aaa:	14 86       	std	Z+12, r1	; 0x0c
     aac:	17 86       	std	Z+15, r1	; 0x0f
     aae:	16 86       	std	Z+14, r1	; 0x0e
     ab0:	21 e0       	ldi	r18, 0x01	; 1
     ab2:	24 8b       	std	Z+20, r18	; 0x14
     ab4:	8f ef       	ldi	r24, 0xFF	; 255
     ab6:	9f ef       	ldi	r25, 0xFF	; 255
     ab8:	93 8b       	std	Z+19, r25	; 0x13
     aba:	82 8b       	std	Z+18, r24	; 0x12
     abc:	91 8b       	std	Z+17, r25	; 0x11
     abe:	80 8b       	std	Z+16, r24	; 0x10
     ac0:	26 8b       	std	Z+22, r18	; 0x16
     ac2:	08 95       	ret

00000ac4 <_ZN12Adafruit_GFX16fillCircleHelperEiiihij>:
     ac4:	2f 92       	push	r2
     ac6:	3f 92       	push	r3
     ac8:	4f 92       	push	r4
     aca:	5f 92       	push	r5
     acc:	6f 92       	push	r6
     ace:	7f 92       	push	r7
     ad0:	8f 92       	push	r8
     ad2:	9f 92       	push	r9
     ad4:	af 92       	push	r10
     ad6:	bf 92       	push	r11
     ad8:	cf 92       	push	r12
     ada:	df 92       	push	r13
     adc:	ef 92       	push	r14
     ade:	ff 92       	push	r15
     ae0:	0f 93       	push	r16
     ae2:	1f 93       	push	r17
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	cd b7       	in	r28, 0x3d	; 61
     aea:	de b7       	in	r29, 0x3e	; 62
     aec:	2e 97       	sbiw	r28, 0x0e	; 14
     aee:	0f b6       	in	r0, 0x3f	; 63
     af0:	f8 94       	cli
     af2:	de bf       	out	0x3e, r29	; 62
     af4:	0f be       	out	0x3f, r0	; 63
     af6:	cd bf       	out	0x3d, r28	; 61
     af8:	9a 83       	std	Y+2, r25	; 0x02
     afa:	89 83       	std	Y+1, r24	; 0x01
     afc:	5a 87       	std	Y+10, r21	; 0x0a
     afe:	49 87       	std	Y+9, r20	; 0x09
     b00:	3e 87       	std	Y+14, r19	; 0x0e
     b02:	2d 87       	std	Y+13, r18	; 0x0d
     b04:	fc 86       	std	Y+12, r15	; 0x0c
     b06:	eb 86       	std	Y+11, r14	; 0x0b
     b08:	dc 82       	std	Y+4, r13	; 0x04
     b0a:	cb 82       	std	Y+3, r12	; 0x03
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	7c 01       	movw	r14, r24
     b12:	e2 1a       	sub	r14, r18
     b14:	f3 0a       	sbc	r15, r19
     b16:	c9 01       	movw	r24, r18
     b18:	91 95       	neg	r25
     b1a:	81 95       	neg	r24
     b1c:	91 09       	sbc	r25, r1
     b1e:	1c 01       	movw	r2, r24
     b20:	22 0c       	add	r2, r2
     b22:	33 1c       	adc	r3, r3
     b24:	12 16       	cp	r1, r18
     b26:	13 06       	cpc	r1, r19
     b28:	0c f0       	brlt	.+2      	; 0xb2c <_ZN12Adafruit_GFX16fillCircleHelperEiiihij+0x68>
     b2a:	9d c0       	rjmp	.+314    	; 0xc66 <_ZN12Adafruit_GFX16fillCircleHelperEiiihij+0x1a2>
     b2c:	3a 01       	movw	r6, r20
     b2e:	21 e0       	ldi	r18, 0x01	; 1
     b30:	62 1a       	sub	r6, r18
     b32:	71 08       	sbc	r7, r1
     b34:	4b 84       	ldd	r4, Y+11	; 0x0b
     b36:	5c 84       	ldd	r5, Y+12	; 0x0c
     b38:	33 e0       	ldi	r19, 0x03	; 3
     b3a:	43 0e       	add	r4, r19
     b3c:	51 1c       	adc	r5, r1
     b3e:	c1 2c       	mov	r12, r1
     b40:	d1 2c       	mov	r13, r1
     b42:	88 24       	eor	r8, r8
     b44:	83 94       	inc	r8
     b46:	91 2c       	mov	r9, r1
     b48:	80 2f       	mov	r24, r16
     b4a:	81 70       	andi	r24, 0x01	; 1
     b4c:	8f 83       	std	Y+7, r24	; 0x07
     b4e:	02 70       	andi	r16, 0x02	; 2
     b50:	08 87       	std	Y+8, r16	; 0x08
     b52:	7e 83       	std	Y+6, r23	; 0x06
     b54:	6d 83       	std	Y+5, r22	; 0x05
     b56:	a9 80       	ldd	r10, Y+1	; 0x01
     b58:	ba 80       	ldd	r11, Y+2	; 0x02
     b5a:	ff 20       	and	r15, r15
     b5c:	54 f0       	brlt	.+20     	; 0xb72 <_ZN12Adafruit_GFX16fillCircleHelperEiiihij+0xae>
     b5e:	ed 85       	ldd	r30, Y+13	; 0x0d
     b60:	fe 85       	ldd	r31, Y+14	; 0x0e
     b62:	31 97       	sbiw	r30, 0x01	; 1
     b64:	fe 87       	std	Y+14, r31	; 0x0e
     b66:	ed 87       	std	Y+13, r30	; 0x0d
     b68:	f2 e0       	ldi	r31, 0x02	; 2
     b6a:	2f 0e       	add	r2, r31
     b6c:	31 1c       	adc	r3, r1
     b6e:	e2 0c       	add	r14, r2
     b70:	f3 1c       	adc	r15, r3
     b72:	2f ef       	ldi	r18, 0xFF	; 255
     b74:	c2 1a       	sub	r12, r18
     b76:	d2 0a       	sbc	r13, r18
     b78:	32 e0       	ldi	r19, 0x02	; 2
     b7a:	83 0e       	add	r8, r19
     b7c:	91 1c       	adc	r9, r1
     b7e:	e8 0c       	add	r14, r8
     b80:	f9 1c       	adc	r15, r9
     b82:	8f 81       	ldd	r24, Y+7	; 0x07
     b84:	88 23       	and	r24, r24
     b86:	81 f1       	breq	.+96     	; 0xbe8 <_ZN12Adafruit_GFX16fillCircleHelperEiiihij+0x124>
     b88:	d5 01       	movw	r26, r10
     b8a:	ed 91       	ld	r30, X+
     b8c:	fc 91       	ld	r31, X
     b8e:	2d 85       	ldd	r18, Y+13	; 0x0d
     b90:	3e 85       	ldd	r19, Y+14	; 0x0e
     b92:	22 0f       	add	r18, r18
     b94:	33 1f       	adc	r19, r19
     b96:	2f 5f       	subi	r18, 0xFF	; 255
     b98:	3f 4f       	sbci	r19, 0xFF	; 255
     b9a:	8b 85       	ldd	r24, Y+11	; 0x0b
     b9c:	9c 85       	ldd	r25, Y+12	; 0x0c
     b9e:	28 0f       	add	r18, r24
     ba0:	39 1f       	adc	r19, r25
     ba2:	00 84       	ldd	r0, Z+8	; 0x08
     ba4:	f1 85       	ldd	r31, Z+9	; 0x09
     ba6:	e0 2d       	mov	r30, r0
     ba8:	0b 81       	ldd	r16, Y+3	; 0x03
     baa:	1c 81       	ldd	r17, Y+4	; 0x04
     bac:	49 85       	ldd	r20, Y+9	; 0x09
     bae:	5a 85       	ldd	r21, Y+10	; 0x0a
     bb0:	ad 85       	ldd	r26, Y+13	; 0x0d
     bb2:	be 85       	ldd	r27, Y+14	; 0x0e
     bb4:	4a 1b       	sub	r20, r26
     bb6:	5b 0b       	sbc	r21, r27
     bb8:	6d 81       	ldd	r22, Y+5	; 0x05
     bba:	7e 81       	ldd	r23, Y+6	; 0x06
     bbc:	6c 0d       	add	r22, r12
     bbe:	7d 1d       	adc	r23, r13
     bc0:	c5 01       	movw	r24, r10
     bc2:	19 95       	eicall
     bc4:	d5 01       	movw	r26, r10
     bc6:	ed 91       	ld	r30, X+
     bc8:	fc 91       	ld	r31, X
     bca:	00 84       	ldd	r0, Z+8	; 0x08
     bcc:	f1 85       	ldd	r31, Z+9	; 0x09
     bce:	e0 2d       	mov	r30, r0
     bd0:	0b 81       	ldd	r16, Y+3	; 0x03
     bd2:	1c 81       	ldd	r17, Y+4	; 0x04
     bd4:	92 01       	movw	r18, r4
     bd6:	a3 01       	movw	r20, r6
     bd8:	6d 81       	ldd	r22, Y+5	; 0x05
     bda:	7e 81       	ldd	r23, Y+6	; 0x06
     bdc:	8d 85       	ldd	r24, Y+13	; 0x0d
     bde:	9e 85       	ldd	r25, Y+14	; 0x0e
     be0:	68 0f       	add	r22, r24
     be2:	79 1f       	adc	r23, r25
     be4:	c5 01       	movw	r24, r10
     be6:	19 95       	eicall
     be8:	98 85       	ldd	r25, Y+8	; 0x08
     bea:	99 23       	and	r25, r25
     bec:	81 f1       	breq	.+96     	; 0xc4e <_ZN12Adafruit_GFX16fillCircleHelperEiiihij+0x18a>
     bee:	d5 01       	movw	r26, r10
     bf0:	ed 91       	ld	r30, X+
     bf2:	fc 91       	ld	r31, X
     bf4:	2d 85       	ldd	r18, Y+13	; 0x0d
     bf6:	3e 85       	ldd	r19, Y+14	; 0x0e
     bf8:	22 0f       	add	r18, r18
     bfa:	33 1f       	adc	r19, r19
     bfc:	2f 5f       	subi	r18, 0xFF	; 255
     bfe:	3f 4f       	sbci	r19, 0xFF	; 255
     c00:	8b 85       	ldd	r24, Y+11	; 0x0b
     c02:	9c 85       	ldd	r25, Y+12	; 0x0c
     c04:	28 0f       	add	r18, r24
     c06:	39 1f       	adc	r19, r25
     c08:	00 84       	ldd	r0, Z+8	; 0x08
     c0a:	f1 85       	ldd	r31, Z+9	; 0x09
     c0c:	e0 2d       	mov	r30, r0
     c0e:	0b 81       	ldd	r16, Y+3	; 0x03
     c10:	1c 81       	ldd	r17, Y+4	; 0x04
     c12:	49 85       	ldd	r20, Y+9	; 0x09
     c14:	5a 85       	ldd	r21, Y+10	; 0x0a
     c16:	ad 85       	ldd	r26, Y+13	; 0x0d
     c18:	be 85       	ldd	r27, Y+14	; 0x0e
     c1a:	4a 1b       	sub	r20, r26
     c1c:	5b 0b       	sbc	r21, r27
     c1e:	6d 81       	ldd	r22, Y+5	; 0x05
     c20:	7e 81       	ldd	r23, Y+6	; 0x06
     c22:	6c 19       	sub	r22, r12
     c24:	7d 09       	sbc	r23, r13
     c26:	c5 01       	movw	r24, r10
     c28:	19 95       	eicall
     c2a:	d5 01       	movw	r26, r10
     c2c:	ed 91       	ld	r30, X+
     c2e:	fc 91       	ld	r31, X
     c30:	00 84       	ldd	r0, Z+8	; 0x08
     c32:	f1 85       	ldd	r31, Z+9	; 0x09
     c34:	e0 2d       	mov	r30, r0
     c36:	0b 81       	ldd	r16, Y+3	; 0x03
     c38:	1c 81       	ldd	r17, Y+4	; 0x04
     c3a:	92 01       	movw	r18, r4
     c3c:	a3 01       	movw	r20, r6
     c3e:	6d 81       	ldd	r22, Y+5	; 0x05
     c40:	7e 81       	ldd	r23, Y+6	; 0x06
     c42:	8d 85       	ldd	r24, Y+13	; 0x0d
     c44:	9e 85       	ldd	r25, Y+14	; 0x0e
     c46:	68 1b       	sub	r22, r24
     c48:	79 0b       	sbc	r23, r25
     c4a:	c5 01       	movw	r24, r10
     c4c:	19 95       	eicall
     c4e:	91 e0       	ldi	r25, 0x01	; 1
     c50:	69 1a       	sub	r6, r25
     c52:	71 08       	sbc	r7, r1
     c54:	a2 e0       	ldi	r26, 0x02	; 2
     c56:	4a 0e       	add	r4, r26
     c58:	51 1c       	adc	r5, r1
     c5a:	ed 85       	ldd	r30, Y+13	; 0x0d
     c5c:	fe 85       	ldd	r31, Y+14	; 0x0e
     c5e:	ce 16       	cp	r12, r30
     c60:	df 06       	cpc	r13, r31
     c62:	0c f4       	brge	.+2      	; 0xc66 <_ZN12Adafruit_GFX16fillCircleHelperEiiihij+0x1a2>
     c64:	7a cf       	rjmp	.-268    	; 0xb5a <_ZN12Adafruit_GFX16fillCircleHelperEiiihij+0x96>
     c66:	2e 96       	adiw	r28, 0x0e	; 14
     c68:	0f b6       	in	r0, 0x3f	; 63
     c6a:	f8 94       	cli
     c6c:	de bf       	out	0x3e, r29	; 62
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	cd bf       	out	0x3d, r28	; 61
     c72:	df 91       	pop	r29
     c74:	cf 91       	pop	r28
     c76:	1f 91       	pop	r17
     c78:	0f 91       	pop	r16
     c7a:	ff 90       	pop	r15
     c7c:	ef 90       	pop	r14
     c7e:	df 90       	pop	r13
     c80:	cf 90       	pop	r12
     c82:	bf 90       	pop	r11
     c84:	af 90       	pop	r10
     c86:	9f 90       	pop	r9
     c88:	8f 90       	pop	r8
     c8a:	7f 90       	pop	r7
     c8c:	6f 90       	pop	r6
     c8e:	5f 90       	pop	r5
     c90:	4f 90       	pop	r4
     c92:	3f 90       	pop	r3
     c94:	2f 90       	pop	r2
     c96:	08 95       	ret

00000c98 <_ZN12Adafruit_GFX10fillCircleEiiij>:
     c98:	6f 92       	push	r6
     c9a:	7f 92       	push	r7
     c9c:	8f 92       	push	r8
     c9e:	9f 92       	push	r9
     ca0:	af 92       	push	r10
     ca2:	bf 92       	push	r11
     ca4:	cf 92       	push	r12
     ca6:	df 92       	push	r13
     ca8:	ef 92       	push	r14
     caa:	ff 92       	push	r15
     cac:	0f 93       	push	r16
     cae:	1f 93       	push	r17
     cb0:	cf 93       	push	r28
     cb2:	df 93       	push	r29
     cb4:	ec 01       	movw	r28, r24
     cb6:	4b 01       	movw	r8, r22
     cb8:	3a 01       	movw	r6, r20
     cba:	59 01       	movw	r10, r18
     cbc:	68 01       	movw	r12, r16
     cbe:	e8 81       	ld	r30, Y
     cc0:	f9 81       	ldd	r31, Y+1	; 0x01
     cc2:	22 0f       	add	r18, r18
     cc4:	33 1f       	adc	r19, r19
     cc6:	2f 5f       	subi	r18, 0xFF	; 255
     cc8:	3f 4f       	sbci	r19, 0xFF	; 255
     cca:	4a 19       	sub	r20, r10
     ccc:	5b 09       	sbc	r21, r11
     cce:	00 84       	ldd	r0, Z+8	; 0x08
     cd0:	f1 85       	ldd	r31, Z+9	; 0x09
     cd2:	e0 2d       	mov	r30, r0
     cd4:	19 95       	eicall
     cd6:	e1 2c       	mov	r14, r1
     cd8:	f1 2c       	mov	r15, r1
     cda:	03 e0       	ldi	r16, 0x03	; 3
     cdc:	95 01       	movw	r18, r10
     cde:	a3 01       	movw	r20, r6
     ce0:	b4 01       	movw	r22, r8
     ce2:	ce 01       	movw	r24, r28
     ce4:	ef de       	rcall	.-546    	; 0xac4 <_ZN12Adafruit_GFX16fillCircleHelperEiiihij>
     ce6:	df 91       	pop	r29
     ce8:	cf 91       	pop	r28
     cea:	1f 91       	pop	r17
     cec:	0f 91       	pop	r16
     cee:	ff 90       	pop	r15
     cf0:	ef 90       	pop	r14
     cf2:	df 90       	pop	r13
     cf4:	cf 90       	pop	r12
     cf6:	bf 90       	pop	r11
     cf8:	af 90       	pop	r10
     cfa:	9f 90       	pop	r9
     cfc:	8f 90       	pop	r8
     cfe:	7f 90       	pop	r7
     d00:	6f 90       	pop	r6
     d02:	08 95       	ret

00000d04 <_ZN12Adafruit_GFX8drawCharEiihjjh>:
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
     d04:	2f 92       	push	r2
     d06:	3f 92       	push	r3
     d08:	4f 92       	push	r4
     d0a:	5f 92       	push	r5
     d0c:	6f 92       	push	r6
     d0e:	7f 92       	push	r7
     d10:	8f 92       	push	r8
     d12:	9f 92       	push	r9
     d14:	af 92       	push	r10
     d16:	bf 92       	push	r11
     d18:	cf 92       	push	r12
     d1a:	df 92       	push	r13
     d1c:	ef 92       	push	r14
     d1e:	ff 92       	push	r15
     d20:	0f 93       	push	r16
     d22:	1f 93       	push	r17
     d24:	cf 93       	push	r28
     d26:	df 93       	push	r29
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
     d2c:	60 97       	sbiw	r28, 0x10	; 16
     d2e:	0f b6       	in	r0, 0x3f	; 63
     d30:	f8 94       	cli
     d32:	de bf       	out	0x3e, r29	; 62
     d34:	0f be       	out	0x3f, r0	; 63
     d36:	cd bf       	out	0x3d, r28	; 61
     d38:	4c 01       	movw	r8, r24
     d3a:	1a 83       	std	Y+2, r17	; 0x02
     d3c:	09 83       	std	Y+1, r16	; 0x01
     d3e:	fd 82       	std	Y+5, r15	; 0x05
     d40:	ec 82       	std	Y+4, r14	; 0x04
     d42:	cb 82       	std	Y+3, r12	; 0x03

  if((x >= _width)            || // Clip right
     d44:	dc 01       	movw	r26, r24
     d46:	18 96       	adiw	r26, 0x08	; 8
     d48:	8d 91       	ld	r24, X+
     d4a:	9c 91       	ld	r25, X
     d4c:	19 97       	sbiw	r26, 0x09	; 9
     d4e:	68 17       	cp	r22, r24
     d50:	79 07       	cpc	r23, r25
     d52:	0c f0       	brlt	.+2      	; 0xd56 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x52>
     d54:	c6 c0       	rjmp	.+396    	; 0xee2 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1de>
     d56:	1a 96       	adiw	r26, 0x0a	; 10
     d58:	8d 91       	ld	r24, X+
     d5a:	9c 91       	ld	r25, X
     d5c:	1b 97       	sbiw	r26, 0x0b	; 11
     d5e:	48 17       	cp	r20, r24
     d60:	59 07       	cpc	r21, r25
     d62:	0c f0       	brlt	.+2      	; 0xd66 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x62>
     d64:	be c0       	rjmp	.+380    	; 0xee2 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1de>
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     d66:	6c 2c       	mov	r6, r12
     d68:	71 2c       	mov	r7, r1
     d6a:	c3 01       	movw	r24, r6
     d6c:	88 0f       	add	r24, r24
     d6e:	99 1f       	adc	r25, r25
     d70:	86 0d       	add	r24, r6
     d72:	97 1d       	adc	r25, r7
     d74:	88 0f       	add	r24, r24
     d76:	99 1f       	adc	r25, r25
     d78:	86 0f       	add	r24, r22
     d7a:	97 1f       	adc	r25, r23
     d7c:	01 97       	sbiw	r24, 0x01	; 1
// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {

  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
     d7e:	99 23       	and	r25, r25
     d80:	0c f4       	brge	.+2      	; 0xd84 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x80>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1de>
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
     d84:	c3 01       	movw	r24, r6
     d86:	88 0f       	add	r24, r24
     d88:	99 1f       	adc	r25, r25
     d8a:	88 0f       	add	r24, r24
     d8c:	99 1f       	adc	r25, r25
     d8e:	88 0f       	add	r24, r24
     d90:	99 1f       	adc	r25, r25
     d92:	84 0f       	add	r24, r20
     d94:	95 1f       	adc	r25, r21
     d96:	01 97       	sbiw	r24, 0x01	; 1
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {

  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     d98:	99 23       	and	r25, r25
     d9a:	0c f4       	brge	.+2      	; 0xd9e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x9a>
     d9c:	a2 c0       	rjmp	.+324    	; 0xee2 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1de>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	c9 01       	movw	r24, r18
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	28 0f       	add	r18, r24
     dac:	39 1f       	adc	r19, r25
     dae:	13 01       	movw	r2, r6
     db0:	7f 83       	std	Y+7, r23	; 0x07
     db2:	6e 83       	std	Y+6, r22	; 0x06
     db4:	79 87       	std	Y+9, r23	; 0x09
     db6:	68 87       	std	Y+8, r22	; 0x08
     db8:	1a 86       	std	Y+10, r1	; 0x0a
     dba:	28 5f       	subi	r18, 0xF8	; 248
     dbc:	3e 4f       	sbci	r19, 0xFE	; 254
     dbe:	f9 01       	movw	r30, r18
     dc0:	e6 1b       	sub	r30, r22
     dc2:	f7 0b       	sbc	r31, r23
     dc4:	fe 87       	std	Y+14, r31	; 0x0e
     dc6:	ed 87       	std	Y+13, r30	; 0x0d
     dc8:	4b 87       	std	Y+11, r20	; 0x0b
     dca:	5c 87       	std	Y+12, r21	; 0x0c
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
     dcc:	fa 85       	ldd	r31, Y+10	; 0x0a
     dce:	f5 30       	cpi	r31, 0x05	; 5
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xd0>
     dd2:	77 c0       	rjmp	.+238    	; 0xec2 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1be>
     dd4:	ed 85       	ldd	r30, Y+13	; 0x0d
     dd6:	fe 85       	ldd	r31, Y+14	; 0x0e
     dd8:	2e 81       	ldd	r18, Y+6	; 0x06
     dda:	3f 81       	ldd	r19, Y+7	; 0x07
     ddc:	e2 0f       	add	r30, r18
     dde:	f3 1f       	adc	r31, r19
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
     de0:	04 91       	lpm	r16, Z
     de2:	70 c0       	rjmp	.+224    	; 0xec4 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1c0>
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
     de4:	90 fe       	sbrs	r9, 0
     de6:	25 c0       	rjmp	.+74     	; 0xe32 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x12e>
        if (size == 1) // default size
     de8:	3b 81       	ldd	r19, Y+3	; 0x03
     dea:	31 30       	cpi	r19, 0x01	; 1
     dec:	81 f4       	brne	.+32     	; 0xe0e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x10a>
          drawPixel(x+i, y+j, color);
     dee:	af 85       	ldd	r26, Y+15	; 0x0f
     df0:	b8 89       	ldd	r27, Y+16	; 0x10
     df2:	ed 91       	ld	r30, X+
     df4:	fc 91       	ld	r31, X
     df6:	11 97       	sbiw	r26, 0x01	; 1
     df8:	04 80       	ldd	r0, Z+4	; 0x04
     dfa:	f5 81       	ldd	r31, Z+5	; 0x05
     dfc:	e0 2d       	mov	r30, r0
     dfe:	29 81       	ldd	r18, Y+1	; 0x01
     e00:	3a 81       	ldd	r19, Y+2	; 0x02
     e02:	a5 01       	movw	r20, r10
     e04:	6e 81       	ldd	r22, Y+6	; 0x06
     e06:	7f 81       	ldd	r23, Y+7	; 0x07
     e08:	cd 01       	movw	r24, r26
     e0a:	19 95       	eicall
     e0c:	3d c0       	rjmp	.+122    	; 0xe88 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x184>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
     e0e:	af 85       	ldd	r26, Y+15	; 0x0f
     e10:	b8 89       	ldd	r27, Y+16	; 0x10
     e12:	ed 91       	ld	r30, X+
     e14:	fc 91       	ld	r31, X
     e16:	11 97       	sbiw	r26, 0x01	; 1
     e18:	06 84       	ldd	r0, Z+14	; 0x0e
     e1a:	f7 85       	ldd	r31, Z+15	; 0x0f
     e1c:	e0 2d       	mov	r30, r0
     e1e:	e9 80       	ldd	r14, Y+1	; 0x01
     e20:	fa 80       	ldd	r15, Y+2	; 0x02
     e22:	83 01       	movw	r16, r6
     e24:	93 01       	movw	r18, r6
     e26:	a6 01       	movw	r20, r12
     e28:	68 2d       	mov	r22, r8
     e2a:	74 2d       	mov	r23, r4
     e2c:	cd 01       	movw	r24, r26
     e2e:	19 95       	eicall
     e30:	2b c0       	rjmp	.+86     	; 0xe88 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x184>
        } 
      } else if (bg != color) {
     e32:	ec 81       	ldd	r30, Y+4	; 0x04
     e34:	fd 81       	ldd	r31, Y+5	; 0x05
     e36:	29 81       	ldd	r18, Y+1	; 0x01
     e38:	3a 81       	ldd	r19, Y+2	; 0x02
     e3a:	e2 17       	cp	r30, r18
     e3c:	f3 07       	cpc	r31, r19
     e3e:	21 f1       	breq	.+72     	; 0xe88 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x184>
        if (size == 1) // default size
     e40:	3b 81       	ldd	r19, Y+3	; 0x03
     e42:	31 30       	cpi	r19, 0x01	; 1
     e44:	81 f4       	brne	.+32     	; 0xe66 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x162>
          drawPixel(x+i, y+j, bg);
     e46:	af 85       	ldd	r26, Y+15	; 0x0f
     e48:	b8 89       	ldd	r27, Y+16	; 0x10
     e4a:	ed 91       	ld	r30, X+
     e4c:	fc 91       	ld	r31, X
     e4e:	11 97       	sbiw	r26, 0x01	; 1
     e50:	04 80       	ldd	r0, Z+4	; 0x04
     e52:	f5 81       	ldd	r31, Z+5	; 0x05
     e54:	e0 2d       	mov	r30, r0
     e56:	2c 81       	ldd	r18, Y+4	; 0x04
     e58:	3d 81       	ldd	r19, Y+5	; 0x05
     e5a:	a5 01       	movw	r20, r10
     e5c:	6e 81       	ldd	r22, Y+6	; 0x06
     e5e:	7f 81       	ldd	r23, Y+7	; 0x07
     e60:	cd 01       	movw	r24, r26
     e62:	19 95       	eicall
     e64:	11 c0       	rjmp	.+34     	; 0xe88 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x184>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
     e66:	af 85       	ldd	r26, Y+15	; 0x0f
     e68:	b8 89       	ldd	r27, Y+16	; 0x10
     e6a:	ed 91       	ld	r30, X+
     e6c:	fc 91       	ld	r31, X
     e6e:	11 97       	sbiw	r26, 0x01	; 1
     e70:	06 84       	ldd	r0, Z+14	; 0x0e
     e72:	f7 85       	ldd	r31, Z+15	; 0x0f
     e74:	e0 2d       	mov	r30, r0
     e76:	ec 80       	ldd	r14, Y+4	; 0x04
     e78:	fd 80       	ldd	r15, Y+5	; 0x05
     e7a:	83 01       	movw	r16, r6
     e7c:	93 01       	movw	r18, r6
     e7e:	a6 01       	movw	r20, r12
     e80:	68 2d       	mov	r22, r8
     e82:	74 2d       	mov	r23, r4
     e84:	cd 01       	movw	r24, r26
     e86:	19 95       	eicall
        }
      }
      line >>= 1;
     e88:	96 94       	lsr	r9
     e8a:	5a 94       	dec	r5
     e8c:	c2 0c       	add	r12, r2
     e8e:	d3 1c       	adc	r13, r3
     e90:	bf ef       	ldi	r27, 0xFF	; 255
     e92:	ab 1a       	sub	r10, r27
     e94:	bb 0a       	sbc	r11, r27
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
     e96:	51 10       	cpse	r5, r1
     e98:	a5 cf       	rjmp	.-182    	; 0xde4 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xe0>
     e9a:	8f 84       	ldd	r8, Y+15	; 0x0f
     e9c:	98 88       	ldd	r9, Y+16	; 0x10
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
     e9e:	ea 85       	ldd	r30, Y+10	; 0x0a
     ea0:	ef 5f       	subi	r30, 0xFF	; 255
     ea2:	ea 87       	std	Y+10, r30	; 0x0a
     ea4:	28 85       	ldd	r18, Y+8	; 0x08
     ea6:	39 85       	ldd	r19, Y+9	; 0x09
     ea8:	22 0d       	add	r18, r2
     eaa:	33 1d       	adc	r19, r3
     eac:	39 87       	std	Y+9, r19	; 0x09
     eae:	28 87       	std	Y+8, r18	; 0x08
     eb0:	8e 81       	ldd	r24, Y+6	; 0x06
     eb2:	9f 81       	ldd	r25, Y+7	; 0x07
     eb4:	01 96       	adiw	r24, 0x01	; 1
     eb6:	9f 83       	std	Y+7, r25	; 0x07
     eb8:	8e 83       	std	Y+6, r24	; 0x06
     eba:	e6 30       	cpi	r30, 0x06	; 6
     ebc:	09 f0       	breq	.+2      	; 0xec0 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1bc>
     ebe:	86 cf       	rjmp	.-244    	; 0xdcc <_ZN12Adafruit_GFX8drawCharEiihjjh+0xc8>
     ec0:	10 c0       	rjmp	.+32     	; 0xee2 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1de>
    uint8_t line;
    if (i == 5) 
      line = 0x0;
     ec2:	00 e0       	ldi	r16, 0x00	; 0
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
     ec4:	18 85       	ldd	r17, Y+8	; 0x08
     ec6:	49 84       	ldd	r4, Y+9	; 0x09
     ec8:	cb 84       	ldd	r12, Y+11	; 0x0b
     eca:	dc 84       	ldd	r13, Y+12	; 0x0c
     ecc:	ac 2c       	mov	r10, r12
     ece:	bd 2c       	mov	r11, r13
     ed0:	68 94       	set
     ed2:	55 24       	eor	r5, r5
     ed4:	53 f8       	bld	r5, 3
     ed6:	c4 01       	movw	r24, r8
     ed8:	90 2e       	mov	r9, r16
     eda:	81 2e       	mov	r8, r17
     edc:	98 8b       	std	Y+16, r25	; 0x10
     ede:	8f 87       	std	Y+15, r24	; 0x0f
     ee0:	81 cf       	rjmp	.-254    	; 0xde4 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xe0>
        }
      }
      line >>= 1;
    }
  }
}
     ee2:	60 96       	adiw	r28, 0x10	; 16
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	de bf       	out	0x3e, r29	; 62
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	cd bf       	out	0x3d, r28	; 61
     eee:	df 91       	pop	r29
     ef0:	cf 91       	pop	r28
     ef2:	1f 91       	pop	r17
     ef4:	0f 91       	pop	r16
     ef6:	ff 90       	pop	r15
     ef8:	ef 90       	pop	r14
     efa:	df 90       	pop	r13
     efc:	cf 90       	pop	r12
     efe:	bf 90       	pop	r11
     f00:	af 90       	pop	r10
     f02:	9f 90       	pop	r9
     f04:	8f 90       	pop	r8
     f06:	7f 90       	pop	r7
     f08:	6f 90       	pop	r6
     f0a:	5f 90       	pop	r5
     f0c:	4f 90       	pop	r4
     f0e:	3f 90       	pop	r3
     f10:	2f 90       	pop	r2
     f12:	08 95       	ret

00000f14 <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
     f14:	cf 92       	push	r12
     f16:	ef 92       	push	r14
     f18:	ff 92       	push	r15
     f1a:	0f 93       	push	r16
     f1c:	1f 93       	push	r17
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	ec 01       	movw	r28, r24
  if (c == '\n') {
     f24:	6a 30       	cpi	r22, 0x0A	; 10
     f26:	69 f4       	brne	.+26     	; 0xf42 <_ZN12Adafruit_GFX5writeEh+0x2e>
    cursor_y += textsize*8;
     f28:	2c 89       	ldd	r18, Y+20	; 0x14
     f2a:	8e 85       	ldd	r24, Y+14	; 0x0e
     f2c:	9f 85       	ldd	r25, Y+15	; 0x0f
     f2e:	38 e0       	ldi	r19, 0x08	; 8
     f30:	23 9f       	mul	r18, r19
     f32:	80 0d       	add	r24, r0
     f34:	91 1d       	adc	r25, r1
     f36:	11 24       	eor	r1, r1
     f38:	9f 87       	std	Y+15, r25	; 0x0f
     f3a:	8e 87       	std	Y+14, r24	; 0x0e
    cursor_x  = 0;
     f3c:	1d 86       	std	Y+13, r1	; 0x0d
     f3e:	1c 86       	std	Y+12, r1	; 0x0c
     f40:	3c c0       	rjmp	.+120    	; 0xfba <_ZN12Adafruit_GFX5writeEh+0xa6>
  } else if (c == '\r') {
     f42:	6d 30       	cpi	r22, 0x0D	; 13
     f44:	d1 f1       	breq	.+116    	; 0xfba <_ZN12Adafruit_GFX5writeEh+0xa6>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
     f46:	ea 88       	ldd	r14, Y+18	; 0x12
     f48:	fb 88       	ldd	r15, Y+19	; 0x13
     f4a:	08 89       	ldd	r16, Y+16	; 0x10
     f4c:	19 89       	ldd	r17, Y+17	; 0x11
     f4e:	4e 85       	ldd	r20, Y+14	; 0x0e
     f50:	5f 85       	ldd	r21, Y+15	; 0x0f
     f52:	8c 85       	ldd	r24, Y+12	; 0x0c
     f54:	9d 85       	ldd	r25, Y+13	; 0x0d
     f56:	cc 88       	ldd	r12, Y+20	; 0x14
     f58:	26 2f       	mov	r18, r22
     f5a:	bc 01       	movw	r22, r24
     f5c:	ce 01       	movw	r24, r28
     f5e:	d2 de       	rcall	.-604    	; 0xd04 <_ZN12Adafruit_GFX8drawCharEiihjjh>
    cursor_x += textsize*6;
     f60:	2c 89       	ldd	r18, Y+20	; 0x14
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	c9 01       	movw	r24, r18
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	82 0f       	add	r24, r18
     f6c:	93 1f       	adc	r25, r19
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	4c 85       	ldd	r20, Y+12	; 0x0c
     f74:	5d 85       	ldd	r21, Y+13	; 0x0d
     f76:	84 0f       	add	r24, r20
     f78:	95 1f       	adc	r25, r21
     f7a:	9d 87       	std	Y+13, r25	; 0x0d
     f7c:	8c 87       	std	Y+12, r24	; 0x0c
    if (wrap && (cursor_x > (_width - textsize*6))) {
     f7e:	4e 89       	ldd	r20, Y+22	; 0x16
     f80:	44 23       	and	r20, r20
     f82:	d9 f0       	breq	.+54     	; 0xfba <_ZN12Adafruit_GFX5writeEh+0xa6>
     f84:	4a ef       	ldi	r20, 0xFA	; 250
     f86:	42 03       	mulsu	r20, r18
     f88:	b0 01       	movw	r22, r0
     f8a:	43 9f       	mul	r20, r19
     f8c:	70 0d       	add	r23, r0
     f8e:	11 24       	eor	r1, r1
     f90:	48 85       	ldd	r20, Y+8	; 0x08
     f92:	59 85       	ldd	r21, Y+9	; 0x09
     f94:	46 0f       	add	r20, r22
     f96:	57 1f       	adc	r21, r23
     f98:	48 17       	cp	r20, r24
     f9a:	59 07       	cpc	r21, r25
     f9c:	74 f4       	brge	.+28     	; 0xfba <_ZN12Adafruit_GFX5writeEh+0xa6>
      cursor_y += textsize*8;
     f9e:	22 0f       	add	r18, r18
     fa0:	33 1f       	adc	r19, r19
     fa2:	22 0f       	add	r18, r18
     fa4:	33 1f       	adc	r19, r19
     fa6:	22 0f       	add	r18, r18
     fa8:	33 1f       	adc	r19, r19
     faa:	8e 85       	ldd	r24, Y+14	; 0x0e
     fac:	9f 85       	ldd	r25, Y+15	; 0x0f
     fae:	28 0f       	add	r18, r24
     fb0:	39 1f       	adc	r19, r25
     fb2:	3f 87       	std	Y+15, r19	; 0x0f
     fb4:	2e 87       	std	Y+14, r18	; 0x0e
      cursor_x = 0;
     fb6:	1d 86       	std	Y+13, r1	; 0x0d
     fb8:	1c 86       	std	Y+12, r1	; 0x0c
    }
  }
  return 1;
}
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	1f 91       	pop	r17
     fc4:	0f 91       	pop	r16
     fc6:	ff 90       	pop	r15
     fc8:	ef 90       	pop	r14
     fca:	cf 90       	pop	r12
     fcc:	08 95       	ret

00000fce <_ZN12Adafruit_GFX9setCursorEii>:
    }
  }
}

void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
  cursor_x = x;
     fce:	fc 01       	movw	r30, r24
     fd0:	75 87       	std	Z+13, r23	; 0x0d
     fd2:	64 87       	std	Z+12, r22	; 0x0c
  cursor_y = y;
     fd4:	57 87       	std	Z+15, r21	; 0x0f
     fd6:	46 87       	std	Z+14, r20	; 0x0e
     fd8:	08 95       	ret

00000fda <_ZN12Adafruit_GFX11setTextSizeEh>:
}

void Adafruit_GFX::setTextSize(uint8_t s) {
  textsize = (s > 0) ? s : 1;
     fda:	61 11       	cpse	r22, r1
     fdc:	01 c0       	rjmp	.+2      	; 0xfe0 <_ZN12Adafruit_GFX11setTextSizeEh+0x6>
     fde:	61 e0       	ldi	r22, 0x01	; 1
     fe0:	fc 01       	movw	r30, r24
     fe2:	64 8b       	std	Z+20, r22	; 0x14
     fe4:	08 95       	ret

00000fe6 <_ZN12Adafruit_GFX12setTextColorEj>:
}

void Adafruit_GFX::setTextColor(uint16_t c) {
  // For 'transparent' background, we'll set the bg 
  // to the same as fg instead of using a flag
  textcolor = textbgcolor = c;
     fe6:	fc 01       	movw	r30, r24
     fe8:	73 8b       	std	Z+19, r23	; 0x13
     fea:	62 8b       	std	Z+18, r22	; 0x12
     fec:	71 8b       	std	Z+17, r23	; 0x11
     fee:	60 8b       	std	Z+16, r22	; 0x10
     ff0:	08 95       	ret

00000ff2 <_ZN14RGBmatrixPanel9drawPixelEiij>:
      if((i & 7) == 7) Serial.print(",\n  ");
      else             Serial.print(',');
    }
  }
  Serial.println("\n};");
}
     ff2:	8f 92       	push	r8
     ff4:	9f 92       	push	r9
     ff6:	af 92       	push	r10
     ff8:	bf 92       	push	r11
     ffa:	cf 92       	push	r12
     ffc:	df 92       	push	r13
     ffe:	ef 92       	push	r14
    1000:	ff 92       	push	r15
    1002:	0f 93       	push	r16
    1004:	1f 93       	push	r17
    1006:	cf 93       	push	r28
    1008:	df 93       	push	r29
    100a:	fc 01       	movw	r30, r24
    100c:	77 23       	and	r23, r23
    100e:	0c f4       	brge	.+2      	; 0x1012 <_ZN14RGBmatrixPanel9drawPixelEiij+0x20>
    1010:	1f c1       	rjmp	.+574    	; 0x1250 <_ZN14RGBmatrixPanel9drawPixelEiij+0x25e>
    1012:	80 85       	ldd	r24, Z+8	; 0x08
    1014:	91 85       	ldd	r25, Z+9	; 0x09
    1016:	68 17       	cp	r22, r24
    1018:	79 07       	cpc	r23, r25
    101a:	0c f0       	brlt	.+2      	; 0x101e <_ZN14RGBmatrixPanel9drawPixelEiij+0x2c>
    101c:	19 c1       	rjmp	.+562    	; 0x1250 <_ZN14RGBmatrixPanel9drawPixelEiij+0x25e>
    101e:	55 23       	and	r21, r21
    1020:	0c f4       	brge	.+2      	; 0x1024 <_ZN14RGBmatrixPanel9drawPixelEiij+0x32>
    1022:	16 c1       	rjmp	.+556    	; 0x1250 <_ZN14RGBmatrixPanel9drawPixelEiij+0x25e>
    1024:	a2 85       	ldd	r26, Z+10	; 0x0a
    1026:	b3 85       	ldd	r27, Z+11	; 0x0b
    1028:	4a 17       	cp	r20, r26
    102a:	5b 07       	cpc	r21, r27
    102c:	0c f0       	brlt	.+2      	; 0x1030 <_ZN14RGBmatrixPanel9drawPixelEiij+0x3e>
    102e:	10 c1       	rjmp	.+544    	; 0x1250 <_ZN14RGBmatrixPanel9drawPixelEiij+0x25e>
    1030:	a5 89       	ldd	r26, Z+21	; 0x15
    1032:	a2 30       	cpi	r26, 0x02	; 2
    1034:	61 f0       	breq	.+24     	; 0x104e <_ZN14RGBmatrixPanel9drawPixelEiij+0x5c>
    1036:	a3 30       	cpi	r26, 0x03	; 3
    1038:	c9 f0       	breq	.+50     	; 0x106c <_ZN14RGBmatrixPanel9drawPixelEiij+0x7a>
    103a:	a1 30       	cpi	r26, 0x01	; 1
    103c:	f1 f4       	brne	.+60     	; 0x107a <_ZN14RGBmatrixPanel9drawPixelEiij+0x88>
    103e:	a4 81       	ldd	r26, Z+4	; 0x04
    1040:	b5 81       	ldd	r27, Z+5	; 0x05
    1042:	11 97       	sbiw	r26, 0x01	; 1
    1044:	a4 1b       	sub	r26, r20
    1046:	b5 0b       	sbc	r27, r21
    1048:	ab 01       	movw	r20, r22
    104a:	bd 01       	movw	r22, r26
    104c:	16 c0       	rjmp	.+44     	; 0x107a <_ZN14RGBmatrixPanel9drawPixelEiij+0x88>
    104e:	a4 81       	ldd	r26, Z+4	; 0x04
    1050:	b5 81       	ldd	r27, Z+5	; 0x05
    1052:	11 97       	sbiw	r26, 0x01	; 1
    1054:	ed 01       	movw	r28, r26
    1056:	c6 1b       	sub	r28, r22
    1058:	d7 0b       	sbc	r29, r23
    105a:	be 01       	movw	r22, r28
    105c:	a6 81       	ldd	r26, Z+6	; 0x06
    105e:	b7 81       	ldd	r27, Z+7	; 0x07
    1060:	11 97       	sbiw	r26, 0x01	; 1
    1062:	ed 01       	movw	r28, r26
    1064:	c4 1b       	sub	r28, r20
    1066:	d5 0b       	sbc	r29, r21
    1068:	ae 01       	movw	r20, r28
    106a:	07 c0       	rjmp	.+14     	; 0x107a <_ZN14RGBmatrixPanel9drawPixelEiij+0x88>
    106c:	a6 81       	ldd	r26, Z+6	; 0x06
    106e:	b7 81       	ldd	r27, Z+7	; 0x07
    1070:	11 97       	sbiw	r26, 0x01	; 1
    1072:	a6 1b       	sub	r26, r22
    1074:	b7 0b       	sbc	r27, r23
    1076:	ba 01       	movw	r22, r20
    1078:	ad 01       	movw	r20, r26
    107a:	a3 2e       	mov	r10, r19
    107c:	a6 94       	lsr	r10
    107e:	a6 94       	lsr	r10
    1080:	a6 94       	lsr	r10
    1082:	a6 94       	lsr	r10
    1084:	da 2c       	mov	r13, r10
    1086:	49 01       	movw	r8, r18
    1088:	88 0c       	add	r8, r8
    108a:	89 2c       	mov	r8, r9
    108c:	88 1c       	adc	r8, r8
    108e:	99 08       	sbc	r9, r9
    1090:	91 94       	neg	r9
    1092:	d8 2d       	mov	r29, r8
    1094:	df 70       	andi	r29, 0x0F	; 15
    1096:	cd 2e       	mov	r12, r29
    1098:	36 95       	lsr	r19
    109a:	27 95       	ror	r18
    109c:	a2 2f       	mov	r26, r18
    109e:	af 70       	andi	r26, 0x0F	; 15
    10a0:	ba 2e       	mov	r11, r26
    10a2:	c3 8d       	ldd	r28, Z+27	; 0x1b
    10a4:	d0 e0       	ldi	r29, 0x00	; 0
    10a6:	4c 17       	cp	r20, r28
    10a8:	5d 07       	cpc	r21, r29
    10aa:	0c f0       	brlt	.+2      	; 0x10ae <_ZN14RGBmatrixPanel9drawPixelEiij+0xbc>
    10ac:	6b c0       	rjmp	.+214    	; 0x1184 <_ZN14RGBmatrixPanel9drawPixelEiij+0x192>
    10ae:	04 8d       	ldd	r16, Z+28	; 0x1c
    10b0:	10 e0       	ldi	r17, 0x00	; 0
    10b2:	00 0f       	add	r16, r16
    10b4:	11 1f       	adc	r17, r17
    10b6:	0e 0f       	add	r16, r30
    10b8:	1f 1f       	adc	r17, r31
    10ba:	e4 80       	ldd	r14, Z+4	; 0x04
    10bc:	f5 80       	ldd	r15, Z+5	; 0x05
    10be:	4e 9d       	mul	r20, r14
    10c0:	e0 01       	movw	r28, r0
    10c2:	4f 9d       	mul	r20, r15
    10c4:	d0 0d       	add	r29, r0
    10c6:	5e 9d       	mul	r21, r14
    10c8:	d0 0d       	add	r29, r0
    10ca:	11 24       	eor	r1, r1
    10cc:	ae 01       	movw	r20, r28
    10ce:	44 0f       	add	r20, r20
    10d0:	55 1f       	adc	r21, r21
    10d2:	c4 0f       	add	r28, r20
    10d4:	d5 1f       	adc	r29, r21
    10d6:	6c 0f       	add	r22, r28
    10d8:	7d 1f       	adc	r23, r29
    10da:	e8 01       	movw	r28, r16
    10dc:	4f 89       	ldd	r20, Y+23	; 0x17
    10de:	58 8d       	ldd	r21, Y+24	; 0x18
    10e0:	ea 01       	movw	r28, r20
    10e2:	c6 0f       	add	r28, r22
    10e4:	d7 1f       	adc	r29, r23
    10e6:	88 0f       	add	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	8c 0f       	add	r24, r28
    10ec:	9d 1f       	adc	r25, r29
    10ee:	dc 01       	movw	r26, r24
    10f0:	4c 91       	ld	r20, X
    10f2:	4c 7f       	andi	r20, 0xFC	; 252
    10f4:	4c 93       	st	X, r20
    10f6:	a0 fe       	sbrs	r10, 0
    10f8:	0a c0       	rjmp	.+20     	; 0x110e <_ZN14RGBmatrixPanel9drawPixelEiij+0x11c>
    10fa:	80 85       	ldd	r24, Z+8	; 0x08
    10fc:	91 85       	ldd	r25, Z+9	; 0x09
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	8c 0f       	add	r24, r28
    1104:	9d 1f       	adc	r25, r29
    1106:	dc 01       	movw	r26, r24
    1108:	4c 91       	ld	r20, X
    110a:	41 60       	ori	r20, 0x01	; 1
    110c:	4c 93       	st	X, r20
    110e:	80 fe       	sbrs	r8, 0
    1110:	09 c0       	rjmp	.+18     	; 0x1124 <_ZN14RGBmatrixPanel9drawPixelEiij+0x132>
    1112:	a0 85       	ldd	r26, Z+8	; 0x08
    1114:	b1 85       	ldd	r27, Z+9	; 0x09
    1116:	aa 0f       	add	r26, r26
    1118:	bb 1f       	adc	r27, r27
    111a:	ac 0f       	add	r26, r28
    111c:	bd 1f       	adc	r27, r29
    111e:	8c 91       	ld	r24, X
    1120:	82 60       	ori	r24, 0x02	; 2
    1122:	8c 93       	st	X, r24
    1124:	20 ff       	sbrs	r18, 0
    1126:	08 c0       	rjmp	.+16     	; 0x1138 <_ZN14RGBmatrixPanel9drawPixelEiij+0x146>
    1128:	a0 85       	ldd	r26, Z+8	; 0x08
    112a:	b1 85       	ldd	r27, Z+9	; 0x09
    112c:	ac 0f       	add	r26, r28
    112e:	bd 1f       	adc	r27, r29
    1130:	8c 91       	ld	r24, X
    1132:	81 60       	ori	r24, 0x01	; 1
    1134:	8c 93       	st	X, r24
    1136:	84 c0       	rjmp	.+264    	; 0x1240 <_ZN14RGBmatrixPanel9drawPixelEiij+0x24e>
    1138:	a0 85       	ldd	r26, Z+8	; 0x08
    113a:	b1 85       	ldd	r27, Z+9	; 0x09
    113c:	ac 0f       	add	r26, r28
    113e:	bd 1f       	adc	r27, r29
    1140:	8c 91       	ld	r24, X
    1142:	8e 7f       	andi	r24, 0xFE	; 254
    1144:	8c 93       	st	X, r24
    1146:	7c c0       	rjmp	.+248    	; 0x1240 <_ZN14RGBmatrixPanel9drawPixelEiij+0x24e>
    1148:	28 81       	ld	r18, Y
    114a:	23 7e       	andi	r18, 0xE3	; 227
    114c:	34 2f       	mov	r19, r20
    114e:	3d 21       	and	r19, r13
    1150:	11 f4       	brne	.+4      	; 0x1156 <_ZN14RGBmatrixPanel9drawPixelEiij+0x164>
    1152:	28 83       	st	Y, r18
    1154:	02 c0       	rjmp	.+4      	; 0x115a <_ZN14RGBmatrixPanel9drawPixelEiij+0x168>
    1156:	24 60       	ori	r18, 0x04	; 4
    1158:	28 83       	st	Y, r18
    115a:	24 2f       	mov	r18, r20
    115c:	2c 21       	and	r18, r12
    115e:	19 f0       	breq	.+6      	; 0x1166 <_ZN14RGBmatrixPanel9drawPixelEiij+0x174>
    1160:	28 81       	ld	r18, Y
    1162:	28 60       	ori	r18, 0x08	; 8
    1164:	28 83       	st	Y, r18
    1166:	24 2f       	mov	r18, r20
    1168:	2b 21       	and	r18, r11
    116a:	19 f0       	breq	.+6      	; 0x1172 <_ZN14RGBmatrixPanel9drawPixelEiij+0x180>
    116c:	28 81       	ld	r18, Y
    116e:	20 61       	ori	r18, 0x10	; 16
    1170:	28 83       	st	Y, r18
    1172:	24 81       	ldd	r18, Z+4	; 0x04
    1174:	35 81       	ldd	r19, Z+5	; 0x05
    1176:	c2 0f       	add	r28, r18
    1178:	d3 1f       	adc	r29, r19
    117a:	44 0f       	add	r20, r20
    117c:	01 97       	sbiw	r24, 0x01	; 1
    117e:	00 97       	sbiw	r24, 0x00	; 0
    1180:	19 f7       	brne	.-58     	; 0x1148 <_ZN14RGBmatrixPanel9drawPixelEiij+0x156>
    1182:	66 c0       	rjmp	.+204    	; 0x1250 <_ZN14RGBmatrixPanel9drawPixelEiij+0x25e>
    1184:	04 8d       	ldd	r16, Z+28	; 0x1c
    1186:	10 e0       	ldi	r17, 0x00	; 0
    1188:	00 0f       	add	r16, r16
    118a:	11 1f       	adc	r17, r17
    118c:	0e 0f       	add	r16, r30
    118e:	1f 1f       	adc	r17, r31
    1190:	4c 1b       	sub	r20, r28
    1192:	5d 0b       	sbc	r21, r29
    1194:	c4 81       	ldd	r28, Z+4	; 0x04
    1196:	d5 81       	ldd	r29, Z+5	; 0x05
    1198:	4c 9f       	mul	r20, r28
    119a:	c0 01       	movw	r24, r0
    119c:	4d 9f       	mul	r20, r29
    119e:	90 0d       	add	r25, r0
    11a0:	5c 9f       	mul	r21, r28
    11a2:	90 0d       	add	r25, r0
    11a4:	11 24       	eor	r1, r1
    11a6:	ec 01       	movw	r28, r24
    11a8:	cc 0f       	add	r28, r28
    11aa:	dd 1f       	adc	r29, r29
    11ac:	8c 0f       	add	r24, r28
    11ae:	9d 1f       	adc	r25, r29
    11b0:	68 0f       	add	r22, r24
    11b2:	79 1f       	adc	r23, r25
    11b4:	d8 01       	movw	r26, r16
    11b6:	57 96       	adiw	r26, 0x17	; 23
    11b8:	cd 91       	ld	r28, X+
    11ba:	dc 91       	ld	r29, X
    11bc:	58 97       	sbiw	r26, 0x18	; 24
    11be:	c6 0f       	add	r28, r22
    11c0:	d7 1f       	adc	r29, r23
    11c2:	88 81       	ld	r24, Y
    11c4:	8c 7f       	andi	r24, 0xFC	; 252
    11c6:	88 83       	st	Y, r24
    11c8:	a0 fe       	sbrs	r10, 0
    11ca:	09 c0       	rjmp	.+18     	; 0x11de <_ZN14RGBmatrixPanel9drawPixelEiij+0x1ec>
    11cc:	80 85       	ldd	r24, Z+8	; 0x08
    11ce:	91 85       	ldd	r25, Z+9	; 0x09
    11d0:	8c 0f       	add	r24, r28
    11d2:	9d 1f       	adc	r25, r29
    11d4:	dc 01       	movw	r26, r24
    11d6:	4c 91       	ld	r20, X
    11d8:	42 60       	ori	r20, 0x02	; 2
    11da:	4c 93       	st	X, r20
    11dc:	08 c0       	rjmp	.+16     	; 0x11ee <_ZN14RGBmatrixPanel9drawPixelEiij+0x1fc>
    11de:	80 85       	ldd	r24, Z+8	; 0x08
    11e0:	91 85       	ldd	r25, Z+9	; 0x09
    11e2:	8c 0f       	add	r24, r28
    11e4:	9d 1f       	adc	r25, r29
    11e6:	dc 01       	movw	r26, r24
    11e8:	4c 91       	ld	r20, X
    11ea:	4d 7f       	andi	r20, 0xFD	; 253
    11ec:	4c 93       	st	X, r20
    11ee:	80 fe       	sbrs	r8, 0
    11f0:	03 c0       	rjmp	.+6      	; 0x11f8 <_ZN14RGBmatrixPanel9drawPixelEiij+0x206>
    11f2:	88 81       	ld	r24, Y
    11f4:	81 60       	ori	r24, 0x01	; 1
    11f6:	88 83       	st	Y, r24
    11f8:	20 ff       	sbrs	r18, 0
    11fa:	26 c0       	rjmp	.+76     	; 0x1248 <_ZN14RGBmatrixPanel9drawPixelEiij+0x256>
    11fc:	88 81       	ld	r24, Y
    11fe:	82 60       	ori	r24, 0x02	; 2
    1200:	88 83       	st	Y, r24
    1202:	22 c0       	rjmp	.+68     	; 0x1248 <_ZN14RGBmatrixPanel9drawPixelEiij+0x256>
    1204:	28 81       	ld	r18, Y
    1206:	2f 71       	andi	r18, 0x1F	; 31
    1208:	34 2f       	mov	r19, r20
    120a:	3d 21       	and	r19, r13
    120c:	11 f4       	brne	.+4      	; 0x1212 <_ZN14RGBmatrixPanel9drawPixelEiij+0x220>
    120e:	28 83       	st	Y, r18
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <_ZN14RGBmatrixPanel9drawPixelEiij+0x224>
    1212:	20 62       	ori	r18, 0x20	; 32
    1214:	28 83       	st	Y, r18
    1216:	24 2f       	mov	r18, r20
    1218:	2c 21       	and	r18, r12
    121a:	19 f0       	breq	.+6      	; 0x1222 <_ZN14RGBmatrixPanel9drawPixelEiij+0x230>
    121c:	28 81       	ld	r18, Y
    121e:	20 64       	ori	r18, 0x40	; 64
    1220:	28 83       	st	Y, r18
    1222:	24 2f       	mov	r18, r20
    1224:	2b 21       	and	r18, r11
    1226:	19 f0       	breq	.+6      	; 0x122e <_ZN14RGBmatrixPanel9drawPixelEiij+0x23c>
    1228:	28 81       	ld	r18, Y
    122a:	20 68       	ori	r18, 0x80	; 128
    122c:	28 83       	st	Y, r18
    122e:	24 81       	ldd	r18, Z+4	; 0x04
    1230:	35 81       	ldd	r19, Z+5	; 0x05
    1232:	c2 0f       	add	r28, r18
    1234:	d3 1f       	adc	r29, r19
    1236:	44 0f       	add	r20, r20
    1238:	01 97       	sbiw	r24, 0x01	; 1
    123a:	00 97       	sbiw	r24, 0x00	; 0
    123c:	19 f7       	brne	.-58     	; 0x1204 <_ZN14RGBmatrixPanel9drawPixelEiij+0x212>
    123e:	08 c0       	rjmp	.+16     	; 0x1250 <_ZN14RGBmatrixPanel9drawPixelEiij+0x25e>
    1240:	83 e0       	ldi	r24, 0x03	; 3
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	42 e0       	ldi	r20, 0x02	; 2
    1246:	80 cf       	rjmp	.-256    	; 0x1148 <_ZN14RGBmatrixPanel9drawPixelEiij+0x156>
    1248:	83 e0       	ldi	r24, 0x03	; 3
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	42 e0       	ldi	r20, 0x02	; 2
    124e:	da cf       	rjmp	.-76     	; 0x1204 <_ZN14RGBmatrixPanel9drawPixelEiij+0x212>
    1250:	df 91       	pop	r29
    1252:	cf 91       	pop	r28
    1254:	1f 91       	pop	r17
    1256:	0f 91       	pop	r16
    1258:	ff 90       	pop	r15
    125a:	ef 90       	pop	r14
    125c:	df 90       	pop	r13
    125e:	cf 90       	pop	r12
    1260:	bf 90       	pop	r11
    1262:	af 90       	pop	r10
    1264:	9f 90       	pop	r9
    1266:	8f 90       	pop	r8
    1268:	08 95       	ret

0000126a <_ZN14RGBmatrixPanel4initEhhhhhhhbh>:
    126a:	2f 92       	push	r2
    126c:	3f 92       	push	r3
    126e:	4f 92       	push	r4
    1270:	5f 92       	push	r5
    1272:	6f 92       	push	r6
    1274:	7f 92       	push	r7
    1276:	8f 92       	push	r8
    1278:	af 92       	push	r10
    127a:	cf 92       	push	r12
    127c:	ef 92       	push	r14
    127e:	ff 92       	push	r15
    1280:	0f 93       	push	r16
    1282:	1f 93       	push	r17
    1284:	cf 93       	push	r28
    1286:	df 93       	push	r29
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
    128c:	3c 01       	movw	r6, r24
    128e:	f4 2e       	mov	r15, r20
    1290:	12 2f       	mov	r17, r18
    1292:	dc 01       	movw	r26, r24
    1294:	5b 96       	adiw	r26, 0x1b	; 27
    1296:	6c 93       	st	X, r22
    1298:	2b 88       	ldd	r2, Y+19	; 0x13
    129a:	26 9e       	mul	r2, r22
    129c:	b0 01       	movw	r22, r0
    129e:	11 24       	eor	r1, r1
    12a0:	1b 01       	movw	r2, r22
    12a2:	22 0c       	add	r2, r2
    12a4:	33 1c       	adc	r3, r3
    12a6:	26 0e       	add	r2, r22
    12a8:	37 1e       	adc	r3, r23
    12aa:	88 20       	and	r8, r8
    12ac:	21 f0       	breq	.+8      	; 0x12b6 <_ZN14RGBmatrixPanel4initEhhhhhhhbh+0x4c>
    12ae:	21 01       	movw	r4, r2
    12b0:	44 0c       	add	r4, r4
    12b2:	55 1c       	adc	r5, r5
    12b4:	01 c0       	rjmp	.+2      	; 0x12b8 <_ZN14RGBmatrixPanel4initEhhhhhhhbh+0x4e>
    12b6:	21 01       	movw	r4, r2
    12b8:	c2 01       	movw	r24, r4
    12ba:	0e 94 fd 22 	call	0x45fa	; 0x45fa <malloc>
    12be:	f3 01       	movw	r30, r6
    12c0:	90 8f       	std	Z+24, r25	; 0x18
    12c2:	87 8b       	std	Z+23, r24	; 0x17
    12c4:	00 97       	sbiw	r24, 0x00	; 0
    12c6:	09 f4       	brne	.+2      	; 0x12ca <_ZN14RGBmatrixPanel4initEhhhhhhhbh+0x60>
    12c8:	b3 c0       	rjmp	.+358    	; 0x1430 <_ZN14RGBmatrixPanel4initEhhhhhhhbh+0x1c6>
    12ca:	a2 01       	movw	r20, r4
    12cc:	60 e0       	ldi	r22, 0x00	; 0
    12ce:	70 e0       	ldi	r23, 0x00	; 0
    12d0:	0e 94 43 25 	call	0x4a86	; 0x4a86 <memset>
    12d4:	88 20       	and	r8, r8
    12d6:	41 f0       	breq	.+16     	; 0x12e8 <_ZN14RGBmatrixPanel4initEhhhhhhhbh+0x7e>
    12d8:	d3 01       	movw	r26, r6
    12da:	57 96       	adiw	r26, 0x17	; 23
    12dc:	8d 91       	ld	r24, X+
    12de:	9c 91       	ld	r25, X
    12e0:	58 97       	sbiw	r26, 0x18	; 24
    12e2:	28 0e       	add	r2, r24
    12e4:	39 1e       	adc	r3, r25
    12e6:	03 c0       	rjmp	.+6      	; 0x12ee <_ZN14RGBmatrixPanel4initEhhhhhhhbh+0x84>
    12e8:	f3 01       	movw	r30, r6
    12ea:	27 88       	ldd	r2, Z+23	; 0x17
    12ec:	30 8c       	ldd	r3, Z+24	; 0x18
    12ee:	d3 01       	movw	r26, r6
    12f0:	5a 96       	adiw	r26, 0x1a	; 26
    12f2:	3c 92       	st	X, r3
    12f4:	2e 92       	st	-X, r2
    12f6:	59 97       	sbiw	r26, 0x19	; 25
    12f8:	d4 96       	adiw	r26, 0x34	; 52
    12fa:	fc 92       	st	X, r15
    12fc:	d4 97       	sbiw	r26, 0x34	; 52
    12fe:	d5 96       	adiw	r26, 0x35	; 53
    1300:	1c 93       	st	X, r17
    1302:	d5 97       	sbiw	r26, 0x35	; 53
    1304:	d6 96       	adiw	r26, 0x36	; 54
    1306:	0c 93       	st	X, r16
    1308:	d6 97       	sbiw	r26, 0x36	; 54
    130a:	d1 96       	adiw	r26, 0x31	; 49
    130c:	ec 92       	st	X, r14
    130e:	d1 97       	sbiw	r26, 0x31	; 49
    1310:	d2 96       	adiw	r26, 0x32	; 50
    1312:	cc 92       	st	X, r12
    1314:	d2 97       	sbiw	r26, 0x32	; 50
    1316:	d3 96       	adiw	r26, 0x33	; 51
    1318:	ac 92       	st	X, r10
    131a:	ee 2d       	mov	r30, r14
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	e6 5b       	subi	r30, 0xB6	; 182
    1320:	f9 4f       	sbci	r31, 0xF9	; 249
    1322:	e4 91       	lpm	r30, Z
    1324:	d3 01       	movw	r26, r6
    1326:	9a 96       	adiw	r26, 0x2a	; 42
    1328:	ec 93       	st	X, r30
    132a:	8c 2d       	mov	r24, r12
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	fc 01       	movw	r30, r24
    1330:	e0 57       	subi	r30, 0x70	; 112
    1332:	f9 4f       	sbci	r31, 0xF9	; 249
    1334:	e4 91       	lpm	r30, Z
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	ee 0f       	add	r30, r30
    133a:	ff 1f       	adc	r31, r31
    133c:	ea 52       	subi	r30, 0x2A	; 42
    133e:	f9 4f       	sbci	r31, 0xF9	; 249
    1340:	25 91       	lpm	r18, Z+
    1342:	34 91       	lpm	r19, Z
    1344:	f3 01       	movw	r30, r6
    1346:	37 8f       	std	Z+31, r19	; 0x1f
    1348:	26 8f       	std	Z+30, r18	; 0x1e
    134a:	fc 01       	movw	r30, r24
    134c:	e6 5b       	subi	r30, 0xB6	; 182
    134e:	f9 4f       	sbci	r31, 0xF9	; 249
    1350:	84 91       	lpm	r24, Z
    1352:	d3 01       	movw	r26, r6
    1354:	9b 96       	adiw	r26, 0x2b	; 43
    1356:	8c 93       	st	X, r24
    1358:	8a 2d       	mov	r24, r10
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	fc 01       	movw	r30, r24
    135e:	e0 57       	subi	r30, 0x70	; 112
    1360:	f9 4f       	sbci	r31, 0xF9	; 249
    1362:	e4 91       	lpm	r30, Z
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	ee 0f       	add	r30, r30
    1368:	ff 1f       	adc	r31, r31
    136a:	ea 52       	subi	r30, 0x2A	; 42
    136c:	f9 4f       	sbci	r31, 0xF9	; 249
    136e:	25 91       	lpm	r18, Z+
    1370:	34 91       	lpm	r19, Z
    1372:	f3 01       	movw	r30, r6
    1374:	31 a3       	std	Z+33, r19	; 0x21
    1376:	20 a3       	std	Z+32, r18	; 0x20
    1378:	fc 01       	movw	r30, r24
    137a:	e6 5b       	subi	r30, 0xB6	; 182
    137c:	f9 4f       	sbci	r31, 0xF9	; 249
    137e:	84 91       	lpm	r24, Z
    1380:	d3 01       	movw	r26, r6
    1382:	9c 96       	adiw	r26, 0x2c	; 44
    1384:	8c 93       	st	X, r24
    1386:	8f 2d       	mov	r24, r15
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	fc 01       	movw	r30, r24
    138c:	e0 57       	subi	r30, 0x70	; 112
    138e:	f9 4f       	sbci	r31, 0xF9	; 249
    1390:	e4 91       	lpm	r30, Z
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	ee 0f       	add	r30, r30
    1396:	ff 1f       	adc	r31, r31
    1398:	ea 52       	subi	r30, 0x2A	; 42
    139a:	f9 4f       	sbci	r31, 0xF9	; 249
    139c:	25 91       	lpm	r18, Z+
    139e:	34 91       	lpm	r19, Z
    13a0:	f3 01       	movw	r30, r6
    13a2:	33 a3       	std	Z+35, r19	; 0x23
    13a4:	22 a3       	std	Z+34, r18	; 0x22
    13a6:	fc 01       	movw	r30, r24
    13a8:	e6 5b       	subi	r30, 0xB6	; 182
    13aa:	f9 4f       	sbci	r31, 0xF9	; 249
    13ac:	84 91       	lpm	r24, Z
    13ae:	d3 01       	movw	r26, r6
    13b0:	9d 96       	adiw	r26, 0x2d	; 45
    13b2:	8c 93       	st	X, r24
    13b4:	81 2f       	mov	r24, r17
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	fc 01       	movw	r30, r24
    13ba:	e0 57       	subi	r30, 0x70	; 112
    13bc:	f9 4f       	sbci	r31, 0xF9	; 249
    13be:	e4 91       	lpm	r30, Z
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	ee 0f       	add	r30, r30
    13c4:	ff 1f       	adc	r31, r31
    13c6:	ea 52       	subi	r30, 0x2A	; 42
    13c8:	f9 4f       	sbci	r31, 0xF9	; 249
    13ca:	25 91       	lpm	r18, Z+
    13cc:	34 91       	lpm	r19, Z
    13ce:	f3 01       	movw	r30, r6
    13d0:	35 a3       	std	Z+37, r19	; 0x25
    13d2:	24 a3       	std	Z+36, r18	; 0x24
    13d4:	fc 01       	movw	r30, r24
    13d6:	e6 5b       	subi	r30, 0xB6	; 182
    13d8:	f9 4f       	sbci	r31, 0xF9	; 249
    13da:	84 91       	lpm	r24, Z
    13dc:	d3 01       	movw	r26, r6
    13de:	9e 96       	adiw	r26, 0x2e	; 46
    13e0:	8c 93       	st	X, r24
    13e2:	10 e0       	ldi	r17, 0x00	; 0
    13e4:	f8 01       	movw	r30, r16
    13e6:	e0 57       	subi	r30, 0x70	; 112
    13e8:	f9 4f       	sbci	r31, 0xF9	; 249
    13ea:	e4 91       	lpm	r30, Z
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	ee 0f       	add	r30, r30
    13f0:	ff 1f       	adc	r31, r31
    13f2:	ea 52       	subi	r30, 0x2A	; 42
    13f4:	f9 4f       	sbci	r31, 0xF9	; 249
    13f6:	85 91       	lpm	r24, Z+
    13f8:	94 91       	lpm	r25, Z
    13fa:	f3 01       	movw	r30, r6
    13fc:	97 a3       	std	Z+39, r25	; 0x27
    13fe:	86 a3       	std	Z+38, r24	; 0x26
    1400:	f8 01       	movw	r30, r16
    1402:	e6 5b       	subi	r30, 0xB6	; 182
    1404:	f9 4f       	sbci	r31, 0xF9	; 249
    1406:	04 91       	lpm	r16, Z
    1408:	d3 01       	movw	r26, r6
    140a:	9f 96       	adiw	r26, 0x2f	; 47
    140c:	0c 93       	st	X, r16
    140e:	9f 97       	sbiw	r26, 0x2f	; 47
    1410:	83 e0       	ldi	r24, 0x03	; 3
    1412:	d9 96       	adiw	r26, 0x39	; 57
    1414:	8c 93       	st	X, r24
    1416:	d9 97       	sbiw	r26, 0x39	; 57
    1418:	5b 96       	adiw	r26, 0x1b	; 27
    141a:	8c 91       	ld	r24, X
    141c:	5b 97       	sbiw	r26, 0x1b	; 27
    141e:	81 50       	subi	r24, 0x01	; 1
    1420:	d8 96       	adiw	r26, 0x38	; 56
    1422:	8c 93       	st	X, r24
    1424:	d8 97       	sbiw	r26, 0x38	; 56
    1426:	5d 96       	adiw	r26, 0x1d	; 29
    1428:	1c 92       	st	X, r1
    142a:	5d 97       	sbiw	r26, 0x1d	; 29
    142c:	5c 96       	adiw	r26, 0x1c	; 28
    142e:	1c 92       	st	X, r1
    1430:	df 91       	pop	r29
    1432:	cf 91       	pop	r28
    1434:	1f 91       	pop	r17
    1436:	0f 91       	pop	r16
    1438:	ff 90       	pop	r15
    143a:	ef 90       	pop	r14
    143c:	cf 90       	pop	r12
    143e:	af 90       	pop	r10
    1440:	8f 90       	pop	r8
    1442:	7f 90       	pop	r7
    1444:	6f 90       	pop	r6
    1446:	5f 90       	pop	r5
    1448:	4f 90       	pop	r4
    144a:	3f 90       	pop	r3
    144c:	2f 90       	pop	r2
    144e:	08 95       	ret

00001450 <_ZN14RGBmatrixPanelC1Ehhhhhhhbh>:
    1450:	6f 92       	push	r6
    1452:	7f 92       	push	r7
    1454:	8f 92       	push	r8
    1456:	9f 92       	push	r9
    1458:	af 92       	push	r10
    145a:	bf 92       	push	r11
    145c:	cf 92       	push	r12
    145e:	df 92       	push	r13
    1460:	ef 92       	push	r14
    1462:	ff 92       	push	r15
    1464:	0f 93       	push	r16
    1466:	1f 93       	push	r17
    1468:	cf 93       	push	r28
    146a:	df 93       	push	r29
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
    1470:	3c 01       	movw	r6, r24
    1472:	d6 2e       	mov	r13, r22
    1474:	b4 2e       	mov	r11, r20
    1476:	92 2e       	mov	r9, r18
    1478:	10 2f       	mov	r17, r16
    147a:	fa 88       	ldd	r15, Y+18	; 0x12
    147c:	6f 2d       	mov	r22, r15
    147e:	70 e0       	ldi	r23, 0x00	; 0
    1480:	40 e2       	ldi	r20, 0x20	; 32
    1482:	50 e0       	ldi	r21, 0x00	; 0
    1484:	01 db       	rcall	.-2558   	; 0xa88 <_ZN12Adafruit_GFXC1Eii>
    1486:	83 e2       	ldi	r24, 0x23	; 35
    1488:	92 e0       	ldi	r25, 0x02	; 2
    148a:	f3 01       	movw	r30, r6
    148c:	91 83       	std	Z+1, r25	; 0x01
    148e:	80 83       	st	Z, r24
    1490:	ff 92       	push	r15
    1492:	09 2d       	mov	r16, r9
    1494:	2b 2d       	mov	r18, r11
    1496:	4d 2d       	mov	r20, r13
    1498:	60 e1       	ldi	r22, 0x10	; 16
    149a:	c3 01       	movw	r24, r6
    149c:	e6 de       	rcall	.-564    	; 0x126a <_ZN14RGBmatrixPanel4initEhhhhhhhbh>
    149e:	f3 01       	movw	r30, r6
    14a0:	17 ab       	std	Z+55, r17	; 0x37
    14a2:	01 2f       	mov	r16, r17
    14a4:	10 e0       	ldi	r17, 0x00	; 0
    14a6:	f8 01       	movw	r30, r16
    14a8:	e0 57       	subi	r30, 0x70	; 112
    14aa:	f9 4f       	sbci	r31, 0xF9	; 249
    14ac:	e4 91       	lpm	r30, Z
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	ee 0f       	add	r30, r30
    14b2:	ff 1f       	adc	r31, r31
    14b4:	ea 52       	subi	r30, 0x2A	; 42
    14b6:	f9 4f       	sbci	r31, 0xF9	; 249
    14b8:	85 91       	lpm	r24, Z+
    14ba:	94 91       	lpm	r25, Z
    14bc:	f3 01       	movw	r30, r6
    14be:	91 a7       	std	Z+41, r25	; 0x29
    14c0:	80 a7       	std	Z+40, r24	; 0x28
    14c2:	f8 01       	movw	r30, r16
    14c4:	e6 5b       	subi	r30, 0xB6	; 182
    14c6:	f9 4f       	sbci	r31, 0xF9	; 249
    14c8:	04 91       	lpm	r16, Z
    14ca:	f3 01       	movw	r30, r6
    14cc:	00 ab       	std	Z+48, r16	; 0x30
    14ce:	0f 90       	pop	r0
    14d0:	df 91       	pop	r29
    14d2:	cf 91       	pop	r28
    14d4:	1f 91       	pop	r17
    14d6:	0f 91       	pop	r16
    14d8:	ff 90       	pop	r15
    14da:	ef 90       	pop	r14
    14dc:	df 90       	pop	r13
    14de:	cf 90       	pop	r12
    14e0:	bf 90       	pop	r11
    14e2:	af 90       	pop	r10
    14e4:	9f 90       	pop	r9
    14e6:	8f 90       	pop	r8
    14e8:	7f 90       	pop	r7
    14ea:	6f 90       	pop	r6
    14ec:	08 95       	ret

000014ee <_ZN14RGBmatrixPanel8Color333Ehhh>:
    14ee:	82 2f       	mov	r24, r18
    14f0:	86 70       	andi	r24, 0x06	; 6
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	95 95       	asr	r25
    14f6:	87 95       	ror	r24
    14f8:	27 70       	andi	r18, 0x07	; 7
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	22 0f       	add	r18, r18
    14fe:	33 1f       	adc	r19, r19
    1500:	22 0f       	add	r18, r18
    1502:	33 1f       	adc	r19, r19
    1504:	82 2b       	or	r24, r18
    1506:	93 2b       	or	r25, r19
    1508:	26 2f       	mov	r18, r22
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	32 2f       	mov	r19, r18
    150e:	22 27       	eor	r18, r18
    1510:	32 95       	swap	r19
    1512:	33 0f       	add	r19, r19
    1514:	30 7e       	andi	r19, 0xE0	; 224
    1516:	82 2b       	or	r24, r18
    1518:	93 2b       	or	r25, r19
    151a:	24 2f       	mov	r18, r20
    151c:	27 70       	andi	r18, 0x07	; 7
    151e:	92 2b       	or	r25, r18
    1520:	20 e2       	ldi	r18, 0x20	; 32
    1522:	42 9f       	mul	r20, r18
    1524:	a0 01       	movw	r20, r0
    1526:	11 24       	eor	r1, r1
    1528:	55 27       	eor	r21, r21
    152a:	84 2b       	or	r24, r20
    152c:	95 2b       	or	r25, r21
    152e:	66 70       	andi	r22, 0x06	; 6
    1530:	70 e0       	ldi	r23, 0x00	; 0
    1532:	76 2f       	mov	r23, r22
    1534:	66 27       	eor	r22, r22
    1536:	77 0f       	add	r23, r23
    1538:	77 0f       	add	r23, r23
    153a:	86 2b       	or	r24, r22
    153c:	97 2b       	or	r25, r23
    153e:	08 95       	ret

00001540 <_ZN14RGBmatrixPanel13updateDisplayEv>:
// being issued to the LED matrix for the *next* bitplane and/or row
// while the *current* plane/row is being shown.  As a result, the
// counter variables change between past/present/future tense in mid-
// function...hopefully tenses are sufficiently commented.

void RGBmatrixPanel::updateDisplay(void) {
    1540:	0f 93       	push	r16
    1542:	1f 93       	push	r17
    1544:	cf 93       	push	r28
    1546:	df 93       	push	r29
    1548:	dc 01       	movw	r26, r24
  uint8_t  i, tick, tock, *ptr;
  uint16_t t, duration;

  *oeport  |= oepin;  // Disable LED output during row/plane switchover
    154a:	90 96       	adiw	r26, 0x20	; 32
    154c:	ed 91       	ld	r30, X+
    154e:	fc 91       	ld	r31, X
    1550:	91 97       	sbiw	r26, 0x21	; 33
    1552:	90 81       	ld	r25, Z
    1554:	9c 96       	adiw	r26, 0x2c	; 44
    1556:	8c 91       	ld	r24, X
    1558:	9c 97       	sbiw	r26, 0x2c	; 44
    155a:	89 2b       	or	r24, r25
    155c:	80 83       	st	Z, r24
  *latport |= latpin; // Latch data loaded during *prior* interrupt
    155e:	5e 96       	adiw	r26, 0x1e	; 30
    1560:	ed 91       	ld	r30, X+
    1562:	fc 91       	ld	r31, X
    1564:	5f 97       	sbiw	r26, 0x1f	; 31
    1566:	90 81       	ld	r25, Z
    1568:	9b 96       	adiw	r26, 0x2b	; 43
    156a:	8c 91       	ld	r24, X
    156c:	9b 97       	sbiw	r26, 0x2b	; 43
    156e:	89 2b       	or	r24, r25
    1570:	80 83       	st	Z, r24
  // This is because duration is the display time for the data loaded
  // on the PRIOR interrupt.  CALLOVERHEAD is subtracted from the
  // result because that time is implicit between the timer overflow
  // (interrupt triggered) and the initial LEDs-off line at the start
  // of this method.
  t = (nRows > 8) ? LOOPTIME : (LOOPTIME * 2);
    1572:	5b 96       	adiw	r26, 0x1b	; 27
    1574:	3c 91       	ld	r19, X
    1576:	5b 97       	sbiw	r26, 0x1b	; 27
    1578:	39 30       	cpi	r19, 0x09	; 9
    157a:	18 f0       	brcs	.+6      	; 0x1582 <_ZN14RGBmatrixPanel13updateDisplayEv+0x42>
    157c:	88 ec       	ldi	r24, 0xC8	; 200
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <_ZN14RGBmatrixPanel13updateDisplayEv+0x46>
    1582:	80 e9       	ldi	r24, 0x90	; 144
    1584:	91 e0       	ldi	r25, 0x01	; 1
  duration = ((t + CALLOVERHEAD * 2) << plane) - CALLOVERHEAD;
    1586:	d9 96       	adiw	r26, 0x39	; 57
    1588:	2c 91       	ld	r18, X
    158a:	d9 97       	sbiw	r26, 0x39	; 57
    158c:	88 58       	subi	r24, 0x88	; 136
    158e:	9f 4f       	sbci	r25, 0xFF	; 255
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <_ZN14RGBmatrixPanel13updateDisplayEv+0x56>
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	2a 95       	dec	r18
    1598:	e2 f7       	brpl	.-8      	; 0x1592 <_ZN14RGBmatrixPanel13updateDisplayEv+0x52>
    159a:	cc 97       	sbiw	r24, 0x3c	; 60
  // advancing to the next line.  While it might seem beneficial to
  // advance lines every time and interleave the planes to reduce
  // vertical scanning artifacts, in practice with this panel it causes
  // a green 'ghosting' effect on black pixels, a much worse artifact.

  if(++plane >= nPlanes) {      // Advance plane counter.  Maxed out?
    159c:	d9 96       	adiw	r26, 0x39	; 57
    159e:	2c 91       	ld	r18, X
    15a0:	d9 97       	sbiw	r26, 0x39	; 57
    15a2:	2f 5f       	subi	r18, 0xFF	; 255
    15a4:	d9 96       	adiw	r26, 0x39	; 57
    15a6:	2c 93       	st	X, r18
    15a8:	d9 97       	sbiw	r26, 0x39	; 57
    15aa:	24 30       	cpi	r18, 0x04	; 4
    15ac:	90 f1       	brcs	.+100    	; 0x1612 <_ZN14RGBmatrixPanel13updateDisplayEv+0xd2>
    plane = 0;                  // Yes, reset to plane 0, and
    15ae:	d9 96       	adiw	r26, 0x39	; 57
    15b0:	1c 92       	st	X, r1
    15b2:	d9 97       	sbiw	r26, 0x39	; 57
    if(++row >= nRows) {        // advance row counter.  Maxed out?
    15b4:	d8 96       	adiw	r26, 0x38	; 56
    15b6:	2c 91       	ld	r18, X
    15b8:	d8 97       	sbiw	r26, 0x38	; 56
    15ba:	2f 5f       	subi	r18, 0xFF	; 255
    15bc:	d8 96       	adiw	r26, 0x38	; 56
    15be:	2c 93       	st	X, r18
    15c0:	d8 97       	sbiw	r26, 0x38	; 56
    15c2:	23 17       	cp	r18, r19
    15c4:	08 f4       	brcc	.+2      	; 0x15c8 <_ZN14RGBmatrixPanel13updateDisplayEv+0x88>
    15c6:	9c c0       	rjmp	.+312    	; 0x1700 <_ZN14RGBmatrixPanel13updateDisplayEv+0x1c0>
      row     = 0;              // Yes, reset row counter, then...
    15c8:	d8 96       	adiw	r26, 0x38	; 56
    15ca:	1c 92       	st	X, r1
    15cc:	d8 97       	sbiw	r26, 0x38	; 56
      if(swapflag == true) {    // Swap front/back buffers if requested
    15ce:	5d 96       	adiw	r26, 0x1d	; 29
    15d0:	2c 91       	ld	r18, X
    15d2:	5d 97       	sbiw	r26, 0x1d	; 29
    15d4:	22 23       	and	r18, r18
    15d6:	59 f0       	breq	.+22     	; 0x15ee <_ZN14RGBmatrixPanel13updateDisplayEv+0xae>
        backindex = 1 - backindex;
    15d8:	5c 96       	adiw	r26, 0x1c	; 28
    15da:	3c 91       	ld	r19, X
    15dc:	5c 97       	sbiw	r26, 0x1c	; 28
    15de:	21 e0       	ldi	r18, 0x01	; 1
    15e0:	23 1b       	sub	r18, r19
    15e2:	5c 96       	adiw	r26, 0x1c	; 28
    15e4:	2c 93       	st	X, r18
    15e6:	5c 97       	sbiw	r26, 0x1c	; 28
        swapflag  = false;
    15e8:	5d 96       	adiw	r26, 0x1d	; 29
    15ea:	1c 92       	st	X, r1
    15ec:	5d 97       	sbiw	r26, 0x1d	; 29
      }
      buffptr = matrixbuff[1-backindex]; // Reset into front buffer
    15ee:	5c 96       	adiw	r26, 0x1c	; 28
    15f0:	2c 91       	ld	r18, X
    15f2:	5c 97       	sbiw	r26, 0x1c	; 28
    15f4:	e1 e0       	ldi	r30, 0x01	; 1
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	e2 1b       	sub	r30, r18
    15fa:	f1 09       	sbc	r31, r1
    15fc:	ee 0f       	add	r30, r30
    15fe:	ff 1f       	adc	r31, r31
    1600:	ea 0f       	add	r30, r26
    1602:	fb 1f       	adc	r31, r27
    1604:	27 89       	ldd	r18, Z+23	; 0x17
    1606:	30 8d       	ldd	r19, Z+24	; 0x18
    1608:	db 96       	adiw	r26, 0x3b	; 59
    160a:	3c 93       	st	X, r19
    160c:	2e 93       	st	-X, r18
    160e:	da 97       	sbiw	r26, 0x3a	; 58
    1610:	77 c0       	rjmp	.+238    	; 0x1700 <_ZN14RGBmatrixPanel13updateDisplayEv+0x1c0>
    }
  } else if(plane == 1) {
    1612:	d9 96       	adiw	r26, 0x39	; 57
    1614:	2c 91       	ld	r18, X
    1616:	d9 97       	sbiw	r26, 0x39	; 57
    1618:	21 30       	cpi	r18, 0x01	; 1
    161a:	09 f0       	breq	.+2      	; 0x161e <_ZN14RGBmatrixPanel13updateDisplayEv+0xde>
    161c:	71 c0       	rjmp	.+226    	; 0x1700 <_ZN14RGBmatrixPanel13updateDisplayEv+0x1c0>
    // Plane 0 was loaded on prior interrupt invocation and is about to
    // latch now, so update the row address lines before we do that:
    if(row & 0x1)   *addraport |=  addrapin;
    161e:	d8 96       	adiw	r26, 0x38	; 56
    1620:	2c 91       	ld	r18, X
    1622:	d8 97       	sbiw	r26, 0x38	; 56
    1624:	20 ff       	sbrs	r18, 0
    1626:	0b c0       	rjmp	.+22     	; 0x163e <_ZN14RGBmatrixPanel13updateDisplayEv+0xfe>
    1628:	92 96       	adiw	r26, 0x22	; 34
    162a:	ed 91       	ld	r30, X+
    162c:	fc 91       	ld	r31, X
    162e:	93 97       	sbiw	r26, 0x23	; 35
    1630:	30 81       	ld	r19, Z
    1632:	9d 96       	adiw	r26, 0x2d	; 45
    1634:	2c 91       	ld	r18, X
    1636:	9d 97       	sbiw	r26, 0x2d	; 45
    1638:	23 2b       	or	r18, r19
    163a:	20 83       	st	Z, r18
    163c:	0b c0       	rjmp	.+22     	; 0x1654 <_ZN14RGBmatrixPanel13updateDisplayEv+0x114>
    else            *addraport &= ~addrapin;
    163e:	92 96       	adiw	r26, 0x22	; 34
    1640:	ed 91       	ld	r30, X+
    1642:	fc 91       	ld	r31, X
    1644:	93 97       	sbiw	r26, 0x23	; 35
    1646:	30 81       	ld	r19, Z
    1648:	9d 96       	adiw	r26, 0x2d	; 45
    164a:	2c 91       	ld	r18, X
    164c:	9d 97       	sbiw	r26, 0x2d	; 45
    164e:	20 95       	com	r18
    1650:	23 23       	and	r18, r19
    1652:	20 83       	st	Z, r18
    if(row & 0x2)   *addrbport |=  addrbpin;
    1654:	d8 96       	adiw	r26, 0x38	; 56
    1656:	2c 91       	ld	r18, X
    1658:	d8 97       	sbiw	r26, 0x38	; 56
    165a:	21 ff       	sbrs	r18, 1
    165c:	0b c0       	rjmp	.+22     	; 0x1674 <_ZN14RGBmatrixPanel13updateDisplayEv+0x134>
    165e:	94 96       	adiw	r26, 0x24	; 36
    1660:	ed 91       	ld	r30, X+
    1662:	fc 91       	ld	r31, X
    1664:	95 97       	sbiw	r26, 0x25	; 37
    1666:	30 81       	ld	r19, Z
    1668:	9e 96       	adiw	r26, 0x2e	; 46
    166a:	2c 91       	ld	r18, X
    166c:	9e 97       	sbiw	r26, 0x2e	; 46
    166e:	23 2b       	or	r18, r19
    1670:	20 83       	st	Z, r18
    1672:	0b c0       	rjmp	.+22     	; 0x168a <_ZN14RGBmatrixPanel13updateDisplayEv+0x14a>
    else            *addrbport &= ~addrbpin;
    1674:	94 96       	adiw	r26, 0x24	; 36
    1676:	ed 91       	ld	r30, X+
    1678:	fc 91       	ld	r31, X
    167a:	95 97       	sbiw	r26, 0x25	; 37
    167c:	30 81       	ld	r19, Z
    167e:	9e 96       	adiw	r26, 0x2e	; 46
    1680:	2c 91       	ld	r18, X
    1682:	9e 97       	sbiw	r26, 0x2e	; 46
    1684:	20 95       	com	r18
    1686:	23 23       	and	r18, r19
    1688:	20 83       	st	Z, r18
    if(row & 0x4)   *addrcport |=  addrcpin;
    168a:	d8 96       	adiw	r26, 0x38	; 56
    168c:	2c 91       	ld	r18, X
    168e:	d8 97       	sbiw	r26, 0x38	; 56
    1690:	22 ff       	sbrs	r18, 2
    1692:	0b c0       	rjmp	.+22     	; 0x16aa <_ZN14RGBmatrixPanel13updateDisplayEv+0x16a>
    1694:	96 96       	adiw	r26, 0x26	; 38
    1696:	ed 91       	ld	r30, X+
    1698:	fc 91       	ld	r31, X
    169a:	97 97       	sbiw	r26, 0x27	; 39
    169c:	30 81       	ld	r19, Z
    169e:	9f 96       	adiw	r26, 0x2f	; 47
    16a0:	2c 91       	ld	r18, X
    16a2:	9f 97       	sbiw	r26, 0x2f	; 47
    16a4:	23 2b       	or	r18, r19
    16a6:	20 83       	st	Z, r18
    16a8:	0b c0       	rjmp	.+22     	; 0x16c0 <_ZN14RGBmatrixPanel13updateDisplayEv+0x180>
    else            *addrcport &= ~addrcpin;
    16aa:	96 96       	adiw	r26, 0x26	; 38
    16ac:	ed 91       	ld	r30, X+
    16ae:	fc 91       	ld	r31, X
    16b0:	97 97       	sbiw	r26, 0x27	; 39
    16b2:	30 81       	ld	r19, Z
    16b4:	9f 96       	adiw	r26, 0x2f	; 47
    16b6:	2c 91       	ld	r18, X
    16b8:	9f 97       	sbiw	r26, 0x2f	; 47
    16ba:	20 95       	com	r18
    16bc:	23 23       	and	r18, r19
    16be:	20 83       	st	Z, r18
    if(nRows > 8) {
    16c0:	5b 96       	adiw	r26, 0x1b	; 27
    16c2:	2c 91       	ld	r18, X
    16c4:	5b 97       	sbiw	r26, 0x1b	; 27
    16c6:	29 30       	cpi	r18, 0x09	; 9
    16c8:	d8 f0       	brcs	.+54     	; 0x1700 <_ZN14RGBmatrixPanel13updateDisplayEv+0x1c0>
      if(row & 0x8) *addrdport |=  addrdpin;
    16ca:	d8 96       	adiw	r26, 0x38	; 56
    16cc:	2c 91       	ld	r18, X
    16ce:	d8 97       	sbiw	r26, 0x38	; 56
    16d0:	23 ff       	sbrs	r18, 3
    16d2:	0b c0       	rjmp	.+22     	; 0x16ea <_ZN14RGBmatrixPanel13updateDisplayEv+0x1aa>
    16d4:	98 96       	adiw	r26, 0x28	; 40
    16d6:	ed 91       	ld	r30, X+
    16d8:	fc 91       	ld	r31, X
    16da:	99 97       	sbiw	r26, 0x29	; 41
    16dc:	30 81       	ld	r19, Z
    16de:	d0 96       	adiw	r26, 0x30	; 48
    16e0:	2c 91       	ld	r18, X
    16e2:	d0 97       	sbiw	r26, 0x30	; 48
    16e4:	23 2b       	or	r18, r19
    16e6:	20 83       	st	Z, r18
    16e8:	0b c0       	rjmp	.+22     	; 0x1700 <_ZN14RGBmatrixPanel13updateDisplayEv+0x1c0>
      else          *addrdport &= ~addrdpin;
    16ea:	98 96       	adiw	r26, 0x28	; 40
    16ec:	ed 91       	ld	r30, X+
    16ee:	fc 91       	ld	r31, X
    16f0:	99 97       	sbiw	r26, 0x29	; 41
    16f2:	30 81       	ld	r19, Z
    16f4:	d0 96       	adiw	r26, 0x30	; 48
    16f6:	2c 91       	ld	r18, X
    16f8:	d0 97       	sbiw	r26, 0x30	; 48
    16fa:	20 95       	com	r18
    16fc:	23 23       	and	r18, r19
    16fe:	20 83       	st	Z, r18
    }
  }

  // buffptr, being 'volatile' type, doesn't take well to optimization.
  // A local register copy can speed some things up:
  ptr = (uint8_t *)buffptr;
    1700:	da 96       	adiw	r26, 0x3a	; 58
    1702:	ed 91       	ld	r30, X+
    1704:	fc 91       	ld	r31, X
    1706:	db 97       	sbiw	r26, 0x3b	; 59

  ICR1      = duration; // Set interval for next interrupt
    1708:	90 93 87 00 	sts	0x0087, r25
    170c:	80 93 86 00 	sts	0x0086, r24
  TCNT1     = 0;        // Restart interrupt timer
    1710:	10 92 85 00 	sts	0x0085, r1
    1714:	10 92 84 00 	sts	0x0084, r1
  *oeport  &= ~oepin;   // Re-enable output
    1718:	90 96       	adiw	r26, 0x20	; 32
    171a:	cd 91       	ld	r28, X+
    171c:	dc 91       	ld	r29, X
    171e:	91 97       	sbiw	r26, 0x21	; 33
    1720:	98 81       	ld	r25, Y
    1722:	9c 96       	adiw	r26, 0x2c	; 44
    1724:	8c 91       	ld	r24, X
    1726:	9c 97       	sbiw	r26, 0x2c	; 44
    1728:	80 95       	com	r24
    172a:	89 23       	and	r24, r25
    172c:	88 83       	st	Y, r24
  *latport &= ~latpin;  // Latch down
    172e:	5e 96       	adiw	r26, 0x1e	; 30
    1730:	cd 91       	ld	r28, X+
    1732:	dc 91       	ld	r29, X
    1734:	5f 97       	sbiw	r26, 0x1f	; 31
    1736:	98 81       	ld	r25, Y
    1738:	9b 96       	adiw	r26, 0x2b	; 43
    173a:	8c 91       	ld	r24, X
    173c:	9b 97       	sbiw	r26, 0x2b	; 43
    173e:	80 95       	com	r24
    1740:	89 23       	and	r24, r25
    1742:	88 83       	st	Y, r24
  // not have to load/modify/store bits every single time.  It's a
  // somewhat rude trick that ONLY works because the interrupt
  // handler is set ISR_BLOCK, halting any other interrupts that
  // might otherwise also be twiddling the port at the same time
  // (else this would clobber them).
  tock = SCLKPORT;
    1744:	65 b1       	in	r22, 0x05	; 5
  tick = tock | sclkpin;
    1746:	9a 96       	adiw	r26, 0x2a	; 42
    1748:	7c 91       	ld	r23, X
    174a:	9a 97       	sbiw	r26, 0x2a	; 42
    174c:	76 2b       	or	r23, r22

  if(plane > 0) { // 188 ticks from TCNT1=0 (above) to end of function
    174e:	d9 96       	adiw	r26, 0x39	; 57
    1750:	8c 91       	ld	r24, X
    1752:	d9 97       	sbiw	r26, 0x39	; 57
    1754:	81 11       	cpse	r24, r1
    1756:	09 c0       	rjmp	.+18     	; 0x176a <_ZN14RGBmatrixPanel13updateDisplayEv+0x22a>
    // the slack, with all its data packed into the 2 least bits not
    // used by the other planes.  This works because the unpacking and
    // output for plane 0 is handled while plane 3 is being displayed...
    // because binary coded modulation is used (not PWM), that plane
    // has the longest display interval, so the extra work fits.
    for(i=0; i<_width; i++) {
    1758:	18 96       	adiw	r26, 0x08	; 8
    175a:	8d 91       	ld	r24, X+
    175c:	9c 91       	ld	r25, X
    175e:	19 97       	sbiw	r26, 0x09	; 9
    1760:	18 16       	cp	r1, r24
    1762:	19 06       	cpc	r1, r25
    1764:	0c f4       	brge	.+2      	; 0x1768 <_ZN14RGBmatrixPanel13updateDisplayEv+0x228>
    1766:	0e c1       	rjmp	.+540    	; 0x1984 <_ZN14RGBmatrixPanel13updateDisplayEv+0x444>
    1768:	3c c1       	rjmp	.+632    	; 0x19e2 <_ZN14RGBmatrixPanel13updateDisplayEv+0x4a2>
         [clk]  "I" (_SFR_IO_ADDR(SCLKPORT)), \
         [tick] "r" (tick),                   \
         [tock] "r" (tock));

    // Loop is unrolled for speed:
    pew pew pew pew pew pew pew pew
    176a:	01 90       	ld	r0, Z+
    176c:	02 b8       	out	0x02, r0	; 2
    176e:	75 b9       	out	0x05, r23	; 5
    1770:	65 b9       	out	0x05, r22	; 5
    1772:	01 90       	ld	r0, Z+
    1774:	02 b8       	out	0x02, r0	; 2
    1776:	75 b9       	out	0x05, r23	; 5
    1778:	65 b9       	out	0x05, r22	; 5
    177a:	01 90       	ld	r0, Z+
    177c:	02 b8       	out	0x02, r0	; 2
    177e:	75 b9       	out	0x05, r23	; 5
    1780:	65 b9       	out	0x05, r22	; 5
    1782:	01 90       	ld	r0, Z+
    1784:	02 b8       	out	0x02, r0	; 2
    1786:	75 b9       	out	0x05, r23	; 5
    1788:	65 b9       	out	0x05, r22	; 5
    178a:	01 90       	ld	r0, Z+
    178c:	02 b8       	out	0x02, r0	; 2
    178e:	75 b9       	out	0x05, r23	; 5
    1790:	65 b9       	out	0x05, r22	; 5
    1792:	01 90       	ld	r0, Z+
    1794:	02 b8       	out	0x02, r0	; 2
    1796:	75 b9       	out	0x05, r23	; 5
    1798:	65 b9       	out	0x05, r22	; 5
    179a:	01 90       	ld	r0, Z+
    179c:	02 b8       	out	0x02, r0	; 2
    179e:	75 b9       	out	0x05, r23	; 5
    17a0:	65 b9       	out	0x05, r22	; 5
    17a2:	01 90       	ld	r0, Z+
    17a4:	02 b8       	out	0x02, r0	; 2
    17a6:	75 b9       	out	0x05, r23	; 5
    17a8:	65 b9       	out	0x05, r22	; 5
    pew pew pew pew pew pew pew pew
    17aa:	01 90       	ld	r0, Z+
    17ac:	02 b8       	out	0x02, r0	; 2
    17ae:	75 b9       	out	0x05, r23	; 5
    17b0:	65 b9       	out	0x05, r22	; 5
    17b2:	01 90       	ld	r0, Z+
    17b4:	02 b8       	out	0x02, r0	; 2
    17b6:	75 b9       	out	0x05, r23	; 5
    17b8:	65 b9       	out	0x05, r22	; 5
    17ba:	01 90       	ld	r0, Z+
    17bc:	02 b8       	out	0x02, r0	; 2
    17be:	75 b9       	out	0x05, r23	; 5
    17c0:	65 b9       	out	0x05, r22	; 5
    17c2:	01 90       	ld	r0, Z+
    17c4:	02 b8       	out	0x02, r0	; 2
    17c6:	75 b9       	out	0x05, r23	; 5
    17c8:	65 b9       	out	0x05, r22	; 5
    17ca:	01 90       	ld	r0, Z+
    17cc:	02 b8       	out	0x02, r0	; 2
    17ce:	75 b9       	out	0x05, r23	; 5
    17d0:	65 b9       	out	0x05, r22	; 5
    17d2:	01 90       	ld	r0, Z+
    17d4:	02 b8       	out	0x02, r0	; 2
    17d6:	75 b9       	out	0x05, r23	; 5
    17d8:	65 b9       	out	0x05, r22	; 5
    17da:	01 90       	ld	r0, Z+
    17dc:	02 b8       	out	0x02, r0	; 2
    17de:	75 b9       	out	0x05, r23	; 5
    17e0:	65 b9       	out	0x05, r22	; 5
    17e2:	01 90       	ld	r0, Z+
    17e4:	02 b8       	out	0x02, r0	; 2
    17e6:	75 b9       	out	0x05, r23	; 5
    17e8:	65 b9       	out	0x05, r22	; 5
    pew pew pew pew pew pew pew pew
    17ea:	01 90       	ld	r0, Z+
    17ec:	02 b8       	out	0x02, r0	; 2
    17ee:	75 b9       	out	0x05, r23	; 5
    17f0:	65 b9       	out	0x05, r22	; 5
    17f2:	01 90       	ld	r0, Z+
    17f4:	02 b8       	out	0x02, r0	; 2
    17f6:	75 b9       	out	0x05, r23	; 5
    17f8:	65 b9       	out	0x05, r22	; 5
    17fa:	01 90       	ld	r0, Z+
    17fc:	02 b8       	out	0x02, r0	; 2
    17fe:	75 b9       	out	0x05, r23	; 5
    1800:	65 b9       	out	0x05, r22	; 5
    1802:	01 90       	ld	r0, Z+
    1804:	02 b8       	out	0x02, r0	; 2
    1806:	75 b9       	out	0x05, r23	; 5
    1808:	65 b9       	out	0x05, r22	; 5
    180a:	01 90       	ld	r0, Z+
    180c:	02 b8       	out	0x02, r0	; 2
    180e:	75 b9       	out	0x05, r23	; 5
    1810:	65 b9       	out	0x05, r22	; 5
    1812:	01 90       	ld	r0, Z+
    1814:	02 b8       	out	0x02, r0	; 2
    1816:	75 b9       	out	0x05, r23	; 5
    1818:	65 b9       	out	0x05, r22	; 5
    181a:	01 90       	ld	r0, Z+
    181c:	02 b8       	out	0x02, r0	; 2
    181e:	75 b9       	out	0x05, r23	; 5
    1820:	65 b9       	out	0x05, r22	; 5
    1822:	01 90       	ld	r0, Z+
    1824:	02 b8       	out	0x02, r0	; 2
    1826:	75 b9       	out	0x05, r23	; 5
    1828:	65 b9       	out	0x05, r22	; 5
    pew pew pew pew pew pew pew pew
    182a:	01 90       	ld	r0, Z+
    182c:	02 b8       	out	0x02, r0	; 2
    182e:	75 b9       	out	0x05, r23	; 5
    1830:	65 b9       	out	0x05, r22	; 5
    1832:	01 90       	ld	r0, Z+
    1834:	02 b8       	out	0x02, r0	; 2
    1836:	75 b9       	out	0x05, r23	; 5
    1838:	65 b9       	out	0x05, r22	; 5
    183a:	01 90       	ld	r0, Z+
    183c:	02 b8       	out	0x02, r0	; 2
    183e:	75 b9       	out	0x05, r23	; 5
    1840:	65 b9       	out	0x05, r22	; 5
    1842:	01 90       	ld	r0, Z+
    1844:	02 b8       	out	0x02, r0	; 2
    1846:	75 b9       	out	0x05, r23	; 5
    1848:	65 b9       	out	0x05, r22	; 5
    184a:	01 90       	ld	r0, Z+
    184c:	02 b8       	out	0x02, r0	; 2
    184e:	75 b9       	out	0x05, r23	; 5
    1850:	65 b9       	out	0x05, r22	; 5
    1852:	01 90       	ld	r0, Z+
    1854:	02 b8       	out	0x02, r0	; 2
    1856:	75 b9       	out	0x05, r23	; 5
    1858:	65 b9       	out	0x05, r22	; 5
    185a:	01 90       	ld	r0, Z+
    185c:	02 b8       	out	0x02, r0	; 2
    185e:	75 b9       	out	0x05, r23	; 5
    1860:	65 b9       	out	0x05, r22	; 5
    1862:	01 90       	ld	r0, Z+
    1864:	02 b8       	out	0x02, r0	; 2
    1866:	75 b9       	out	0x05, r23	; 5
    1868:	65 b9       	out	0x05, r22	; 5

      if (_width == 64) {
    186a:	18 96       	adiw	r26, 0x08	; 8
    186c:	8d 91       	ld	r24, X+
    186e:	9c 91       	ld	r25, X
    1870:	19 97       	sbiw	r26, 0x09	; 9
    1872:	80 34       	cpi	r24, 0x40	; 64
    1874:	91 05       	cpc	r25, r1
    1876:	09 f0       	breq	.+2      	; 0x187a <_ZN14RGBmatrixPanel13updateDisplayEv+0x33a>
    1878:	80 c0       	rjmp	.+256    	; 0x197a <_ZN14RGBmatrixPanel13updateDisplayEv+0x43a>
    pew pew pew pew pew pew pew pew
    187a:	01 90       	ld	r0, Z+
    187c:	02 b8       	out	0x02, r0	; 2
    187e:	75 b9       	out	0x05, r23	; 5
    1880:	65 b9       	out	0x05, r22	; 5
    1882:	01 90       	ld	r0, Z+
    1884:	02 b8       	out	0x02, r0	; 2
    1886:	75 b9       	out	0x05, r23	; 5
    1888:	65 b9       	out	0x05, r22	; 5
    188a:	01 90       	ld	r0, Z+
    188c:	02 b8       	out	0x02, r0	; 2
    188e:	75 b9       	out	0x05, r23	; 5
    1890:	65 b9       	out	0x05, r22	; 5
    1892:	01 90       	ld	r0, Z+
    1894:	02 b8       	out	0x02, r0	; 2
    1896:	75 b9       	out	0x05, r23	; 5
    1898:	65 b9       	out	0x05, r22	; 5
    189a:	01 90       	ld	r0, Z+
    189c:	02 b8       	out	0x02, r0	; 2
    189e:	75 b9       	out	0x05, r23	; 5
    18a0:	65 b9       	out	0x05, r22	; 5
    18a2:	01 90       	ld	r0, Z+
    18a4:	02 b8       	out	0x02, r0	; 2
    18a6:	75 b9       	out	0x05, r23	; 5
    18a8:	65 b9       	out	0x05, r22	; 5
    18aa:	01 90       	ld	r0, Z+
    18ac:	02 b8       	out	0x02, r0	; 2
    18ae:	75 b9       	out	0x05, r23	; 5
    18b0:	65 b9       	out	0x05, r22	; 5
    18b2:	01 90       	ld	r0, Z+
    18b4:	02 b8       	out	0x02, r0	; 2
    18b6:	75 b9       	out	0x05, r23	; 5
    18b8:	65 b9       	out	0x05, r22	; 5
    pew pew pew pew pew pew pew pew
    18ba:	01 90       	ld	r0, Z+
    18bc:	02 b8       	out	0x02, r0	; 2
    18be:	75 b9       	out	0x05, r23	; 5
    18c0:	65 b9       	out	0x05, r22	; 5
    18c2:	01 90       	ld	r0, Z+
    18c4:	02 b8       	out	0x02, r0	; 2
    18c6:	75 b9       	out	0x05, r23	; 5
    18c8:	65 b9       	out	0x05, r22	; 5
    18ca:	01 90       	ld	r0, Z+
    18cc:	02 b8       	out	0x02, r0	; 2
    18ce:	75 b9       	out	0x05, r23	; 5
    18d0:	65 b9       	out	0x05, r22	; 5
    18d2:	01 90       	ld	r0, Z+
    18d4:	02 b8       	out	0x02, r0	; 2
    18d6:	75 b9       	out	0x05, r23	; 5
    18d8:	65 b9       	out	0x05, r22	; 5
    18da:	01 90       	ld	r0, Z+
    18dc:	02 b8       	out	0x02, r0	; 2
    18de:	75 b9       	out	0x05, r23	; 5
    18e0:	65 b9       	out	0x05, r22	; 5
    18e2:	01 90       	ld	r0, Z+
    18e4:	02 b8       	out	0x02, r0	; 2
    18e6:	75 b9       	out	0x05, r23	; 5
    18e8:	65 b9       	out	0x05, r22	; 5
    18ea:	01 90       	ld	r0, Z+
    18ec:	02 b8       	out	0x02, r0	; 2
    18ee:	75 b9       	out	0x05, r23	; 5
    18f0:	65 b9       	out	0x05, r22	; 5
    18f2:	01 90       	ld	r0, Z+
    18f4:	02 b8       	out	0x02, r0	; 2
    18f6:	75 b9       	out	0x05, r23	; 5
    18f8:	65 b9       	out	0x05, r22	; 5
    pew pew pew pew pew pew pew pew
    18fa:	01 90       	ld	r0, Z+
    18fc:	02 b8       	out	0x02, r0	; 2
    18fe:	75 b9       	out	0x05, r23	; 5
    1900:	65 b9       	out	0x05, r22	; 5
    1902:	01 90       	ld	r0, Z+
    1904:	02 b8       	out	0x02, r0	; 2
    1906:	75 b9       	out	0x05, r23	; 5
    1908:	65 b9       	out	0x05, r22	; 5
    190a:	01 90       	ld	r0, Z+
    190c:	02 b8       	out	0x02, r0	; 2
    190e:	75 b9       	out	0x05, r23	; 5
    1910:	65 b9       	out	0x05, r22	; 5
    1912:	01 90       	ld	r0, Z+
    1914:	02 b8       	out	0x02, r0	; 2
    1916:	75 b9       	out	0x05, r23	; 5
    1918:	65 b9       	out	0x05, r22	; 5
    191a:	01 90       	ld	r0, Z+
    191c:	02 b8       	out	0x02, r0	; 2
    191e:	75 b9       	out	0x05, r23	; 5
    1920:	65 b9       	out	0x05, r22	; 5
    1922:	01 90       	ld	r0, Z+
    1924:	02 b8       	out	0x02, r0	; 2
    1926:	75 b9       	out	0x05, r23	; 5
    1928:	65 b9       	out	0x05, r22	; 5
    192a:	01 90       	ld	r0, Z+
    192c:	02 b8       	out	0x02, r0	; 2
    192e:	75 b9       	out	0x05, r23	; 5
    1930:	65 b9       	out	0x05, r22	; 5
    1932:	01 90       	ld	r0, Z+
    1934:	02 b8       	out	0x02, r0	; 2
    1936:	75 b9       	out	0x05, r23	; 5
    1938:	65 b9       	out	0x05, r22	; 5
    pew pew pew pew pew pew pew pew
    193a:	01 90       	ld	r0, Z+
    193c:	02 b8       	out	0x02, r0	; 2
    193e:	75 b9       	out	0x05, r23	; 5
    1940:	65 b9       	out	0x05, r22	; 5
    1942:	01 90       	ld	r0, Z+
    1944:	02 b8       	out	0x02, r0	; 2
    1946:	75 b9       	out	0x05, r23	; 5
    1948:	65 b9       	out	0x05, r22	; 5
    194a:	01 90       	ld	r0, Z+
    194c:	02 b8       	out	0x02, r0	; 2
    194e:	75 b9       	out	0x05, r23	; 5
    1950:	65 b9       	out	0x05, r22	; 5
    1952:	01 90       	ld	r0, Z+
    1954:	02 b8       	out	0x02, r0	; 2
    1956:	75 b9       	out	0x05, r23	; 5
    1958:	65 b9       	out	0x05, r22	; 5
    195a:	01 90       	ld	r0, Z+
    195c:	02 b8       	out	0x02, r0	; 2
    195e:	75 b9       	out	0x05, r23	; 5
    1960:	65 b9       	out	0x05, r22	; 5
    1962:	01 90       	ld	r0, Z+
    1964:	02 b8       	out	0x02, r0	; 2
    1966:	75 b9       	out	0x05, r23	; 5
    1968:	65 b9       	out	0x05, r22	; 5
    196a:	01 90       	ld	r0, Z+
    196c:	02 b8       	out	0x02, r0	; 2
    196e:	75 b9       	out	0x05, r23	; 5
    1970:	65 b9       	out	0x05, r22	; 5
    1972:	01 90       	ld	r0, Z+
    1974:	02 b8       	out	0x02, r0	; 2
    1976:	75 b9       	out	0x05, r23	; 5
    1978:	65 b9       	out	0x05, r22	; 5
      }

    buffptr = ptr; //+= 32;
    197a:	db 96       	adiw	r26, 0x3b	; 59
    197c:	fc 93       	st	X, r31
    197e:	ee 93       	st	-X, r30
    1980:	da 97       	sbiw	r26, 0x3a	; 58
    1982:	2f c0       	rjmp	.+94     	; 0x19e2 <_ZN14RGBmatrixPanel13updateDisplayEv+0x4a2>
    // the slack, with all its data packed into the 2 least bits not
    // used by the other planes.  This works because the unpacking and
    // output for plane 0 is handled while plane 3 is being displayed...
    // because binary coded modulation is used (not PWM), that plane
    // has the longest display interval, so the extra work fits.
    for(i=0; i<_width; i++) {
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	10 e0       	ldi	r17, 0x00	; 0
      DATAPORT =
        ( ptr[i]    << 6)         |
        ((ptr[i+_width] << 4) & 0x30) |
    198a:	28 0f       	add	r18, r24
    198c:	39 1f       	adc	r19, r25
    198e:	ef 01       	movw	r28, r30
    1990:	c2 0f       	add	r28, r18
    1992:	d3 1f       	adc	r29, r19
    1994:	48 81       	ld	r20, Y
    1996:	c0 e1       	ldi	r28, 0x10	; 16
    1998:	4c 9f       	mul	r20, r28
    199a:	a0 01       	movw	r20, r0
    199c:	11 24       	eor	r1, r1
        ((ptr[i+_width*2] << 2) & 0x0C);
    199e:	04 2f       	mov	r16, r20
    19a0:	00 73       	andi	r16, 0x30	; 48
    // output for plane 0 is handled while plane 3 is being displayed...
    // because binary coded modulation is used (not PWM), that plane
    // has the longest display interval, so the extra work fits.
    for(i=0; i<_width; i++) {
      DATAPORT =
        ( ptr[i]    << 6)         |
    19a2:	ef 01       	movw	r28, r30
    19a4:	c1 0f       	add	r28, r17
    19a6:	d1 1d       	adc	r29, r1
    19a8:	48 81       	ld	r20, Y
    19aa:	c0 e4       	ldi	r28, 0x40	; 64
    19ac:	4c 9f       	mul	r20, r28
    19ae:	a0 01       	movw	r20, r0
    19b0:	11 24       	eor	r1, r1
        ((ptr[i+_width] << 4) & 0x30) |
        ((ptr[i+_width*2] << 2) & 0x0C);
    19b2:	40 2b       	or	r20, r16
    19b4:	8e 0f       	add	r24, r30
    19b6:	9f 1f       	adc	r25, r31
    19b8:	ec 01       	movw	r28, r24
    19ba:	c2 0f       	add	r28, r18
    19bc:	d3 1f       	adc	r29, r19
    19be:	88 81       	ld	r24, Y
    19c0:	88 0f       	add	r24, r24
    19c2:	88 0f       	add	r24, r24
    19c4:	8c 70       	andi	r24, 0x0C	; 12
    19c6:	48 2b       	or	r20, r24
    19c8:	42 b9       	out	0x02, r20	; 2
      SCLKPORT = tick; // Clock lo
    19ca:	75 b9       	out	0x05, r23	; 5
      SCLKPORT = tock; // Clock hi
    19cc:	65 b9       	out	0x05, r22	; 5
    // the slack, with all its data packed into the 2 least bits not
    // used by the other planes.  This works because the unpacking and
    // output for plane 0 is handled while plane 3 is being displayed...
    // because binary coded modulation is used (not PWM), that plane
    // has the longest display interval, so the extra work fits.
    for(i=0; i<_width; i++) {
    19ce:	1f 5f       	subi	r17, 0xFF	; 255
    19d0:	21 2f       	mov	r18, r17
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	18 96       	adiw	r26, 0x08	; 8
    19d6:	8d 91       	ld	r24, X+
    19d8:	9c 91       	ld	r25, X
    19da:	19 97       	sbiw	r26, 0x09	; 9
    19dc:	28 17       	cp	r18, r24
    19de:	39 07       	cpc	r19, r25
    19e0:	a4 f2       	brlt	.-88     	; 0x198a <_ZN14RGBmatrixPanel13updateDisplayEv+0x44a>
        ((ptr[i+_width*2] << 2) & 0x0C);
      SCLKPORT = tick; // Clock lo
      SCLKPORT = tock; // Clock hi
    } 
  }
}
    19e2:	df 91       	pop	r29
    19e4:	cf 91       	pop	r28
    19e6:	1f 91       	pop	r17
    19e8:	0f 91       	pop	r16
    19ea:	08 95       	ret

000019ec <__vector_20>:
  Serial.println("\n};");
}

// -------------------- Interrupt handler stuff --------------------

ISR(TIMER1_OVF_vect, ISR_BLOCK) { // ISR_BLOCK important -- see notes later
    19ec:	1f 92       	push	r1
    19ee:	0f 92       	push	r0
    19f0:	0f b6       	in	r0, 0x3f	; 63
    19f2:	0f 92       	push	r0
    19f4:	11 24       	eor	r1, r1
    19f6:	0b b6       	in	r0, 0x3b	; 59
    19f8:	0f 92       	push	r0
    19fa:	2f 93       	push	r18
    19fc:	3f 93       	push	r19
    19fe:	4f 93       	push	r20
    1a00:	5f 93       	push	r21
    1a02:	6f 93       	push	r22
    1a04:	7f 93       	push	r23
    1a06:	8f 93       	push	r24
    1a08:	9f 93       	push	r25
    1a0a:	af 93       	push	r26
    1a0c:	bf 93       	push	r27
    1a0e:	ef 93       	push	r30
    1a10:	ff 93       	push	r31
  activePanel->updateDisplay();   // Call refresh func for active display
    1a12:	80 91 e2 03 	lds	r24, 0x03E2
    1a16:	90 91 e3 03 	lds	r25, 0x03E3
    1a1a:	92 dd       	rcall	.-1244   	; 0x1540 <_ZN14RGBmatrixPanel13updateDisplayEv>
  TIFR1 |= TOV1;                  // Clear Timer1 interrupt flag
    1a1c:	86 b3       	in	r24, 0x16	; 22
    1a1e:	86 bb       	out	0x16, r24	; 22
}
    1a20:	ff 91       	pop	r31
    1a22:	ef 91       	pop	r30
    1a24:	bf 91       	pop	r27
    1a26:	af 91       	pop	r26
    1a28:	9f 91       	pop	r25
    1a2a:	8f 91       	pop	r24
    1a2c:	7f 91       	pop	r23
    1a2e:	6f 91       	pop	r22
    1a30:	5f 91       	pop	r21
    1a32:	4f 91       	pop	r20
    1a34:	3f 91       	pop	r19
    1a36:	2f 91       	pop	r18
    1a38:	0f 90       	pop	r0
    1a3a:	0b be       	out	0x3b, r0	; 59
    1a3c:	0f 90       	pop	r0
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	0f 90       	pop	r0
    1a42:	1f 90       	pop	r1
    1a44:	18 95       	reti

00001a46 <_ZN14RGBmatrixPanel10fillScreenEj>:
    }
  }
}

void RGBmatrixPanel::fillScreen(uint16_t c) {
  if((c == 0x0000) || (c == 0xffff)) {
    1a46:	9b 01       	movw	r18, r22
    1a48:	21 50       	subi	r18, 0x01	; 1
    1a4a:	31 09       	sbc	r19, r1
    1a4c:	2e 3f       	cpi	r18, 0xFE	; 254
    1a4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a50:	08 f1       	brcs	.+66     	; 0x1a94 <_ZN14RGBmatrixPanel10fillScreenEj+0x4e>
    // For black or white, all bits in frame buffer will be identically
    // set or unset (regardless of weird bit packing), so it's OK to just
    // quickly memset the whole thing:
    memset(matrixbuff[backindex], c, _width * nRows * 3);
    1a52:	dc 01       	movw	r26, r24
    1a54:	5c 96       	adiw	r26, 0x1c	; 28
    1a56:	ec 91       	ld	r30, X
    1a58:	5c 97       	sbiw	r26, 0x1c	; 28
    1a5a:	5b 96       	adiw	r26, 0x1b	; 27
    1a5c:	fc 91       	ld	r31, X
    1a5e:	5b 97       	sbiw	r26, 0x1b	; 27
    1a60:	18 96       	adiw	r26, 0x08	; 8
    1a62:	4d 91       	ld	r20, X+
    1a64:	5c 91       	ld	r21, X
    1a66:	19 97       	sbiw	r26, 0x09	; 9
    1a68:	f4 9f       	mul	r31, r20
    1a6a:	90 01       	movw	r18, r0
    1a6c:	f5 9f       	mul	r31, r21
    1a6e:	30 0d       	add	r19, r0
    1a70:	11 24       	eor	r1, r1
    1a72:	a9 01       	movw	r20, r18
    1a74:	44 0f       	add	r20, r20
    1a76:	55 1f       	adc	r21, r21
    1a78:	42 0f       	add	r20, r18
    1a7a:	53 1f       	adc	r21, r19
    1a7c:	2e 2f       	mov	r18, r30
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	22 0f       	add	r18, r18
    1a82:	33 1f       	adc	r19, r19
    1a84:	fc 01       	movw	r30, r24
    1a86:	e2 0f       	add	r30, r18
    1a88:	f3 1f       	adc	r31, r19
    1a8a:	87 89       	ldd	r24, Z+23	; 0x17
    1a8c:	90 8d       	ldd	r25, Z+24	; 0x18
    1a8e:	0c 94 43 25 	jmp	0x4a86	; 0x4a86 <memset>
    1a92:	08 95       	ret
  } else {
    // Otherwise, need to handle it the long way:
    Adafruit_GFX::fillScreen(c);
    1a94:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <_ZN12Adafruit_GFX10fillScreenEj>
    1a98:	08 95       	ret

00001a9a <__cxa_pure_virtual>:
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
    1a9a:	0e 94 08 25 	call	0x4a10	; 0x4a10 <abort>

00001a9e <_ZN14HardwareSerial9availableEv>:
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1a9e:	fc 01       	movw	r30, r24
    1aa0:	81 8d       	ldd	r24, Z+25	; 0x19
    1aa2:	22 8d       	ldd	r18, Z+26	; 0x1a
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	80 5c       	subi	r24, 0xC0	; 192
    1aa8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aaa:	82 1b       	sub	r24, r18
    1aac:	91 09       	sbc	r25, r1
    1aae:	8f 73       	andi	r24, 0x3F	; 63
    1ab0:	99 27       	eor	r25, r25
    1ab2:	08 95       	ret

00001ab4 <_ZN14HardwareSerial4peekEv>:
    1ab4:	fc 01       	movw	r30, r24
    1ab6:	91 8d       	ldd	r25, Z+25	; 0x19
    1ab8:	82 8d       	ldd	r24, Z+26	; 0x1a
    1aba:	98 17       	cp	r25, r24
    1abc:	31 f0       	breq	.+12     	; 0x1aca <_ZN14HardwareSerial4peekEv+0x16>
    1abe:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ac0:	e8 0f       	add	r30, r24
    1ac2:	f1 1d       	adc	r31, r1
    1ac4:	85 8d       	ldd	r24, Z+29	; 0x1d
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	08 95       	ret
    1aca:	8f ef       	ldi	r24, 0xFF	; 255
    1acc:	9f ef       	ldi	r25, 0xFF	; 255
    1ace:	08 95       	ret

00001ad0 <_ZN14HardwareSerial4readEv>:
    1ad0:	fc 01       	movw	r30, r24
    1ad2:	91 8d       	ldd	r25, Z+25	; 0x19
    1ad4:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ad6:	98 17       	cp	r25, r24
    1ad8:	61 f0       	breq	.+24     	; 0x1af2 <_ZN14HardwareSerial4readEv+0x22>
    1ada:	82 8d       	ldd	r24, Z+26	; 0x1a
    1adc:	df 01       	movw	r26, r30
    1ade:	a8 0f       	add	r26, r24
    1ae0:	b1 1d       	adc	r27, r1
    1ae2:	5d 96       	adiw	r26, 0x1d	; 29
    1ae4:	8c 91       	ld	r24, X
    1ae6:	92 8d       	ldd	r25, Z+26	; 0x1a
    1ae8:	9f 5f       	subi	r25, 0xFF	; 255
    1aea:	9f 73       	andi	r25, 0x3F	; 63
    1aec:	92 8f       	std	Z+26, r25	; 0x1a
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	08 95       	ret
    1af2:	8f ef       	ldi	r24, 0xFF	; 255
    1af4:	9f ef       	ldi	r25, 0xFF	; 255
    1af6:	08 95       	ret

00001af8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1af8:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1afa:	84 8d       	ldd	r24, Z+28	; 0x1c
    1afc:	df 01       	movw	r26, r30
    1afe:	a8 0f       	add	r26, r24
    1b00:	b1 1d       	adc	r27, r1
    1b02:	a3 5a       	subi	r26, 0xA3	; 163
    1b04:	bf 4f       	sbci	r27, 0xFF	; 255
    1b06:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1b08:	84 8d       	ldd	r24, Z+28	; 0x1c
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	01 96       	adiw	r24, 0x01	; 1
    1b0e:	8f 73       	andi	r24, 0x3F	; 63
    1b10:	90 78       	andi	r25, 0x80	; 128
    1b12:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1b14:	a6 89       	ldd	r26, Z+22	; 0x16
    1b16:	b7 89       	ldd	r27, Z+23	; 0x17
    1b18:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    1b1a:	a0 89       	ldd	r26, Z+16	; 0x10
    1b1c:	b1 89       	ldd	r27, Z+17	; 0x11
    1b1e:	8c 91       	ld	r24, X
    1b20:	80 64       	ori	r24, 0x40	; 64
    1b22:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    1b24:	93 8d       	ldd	r25, Z+27	; 0x1b
    1b26:	84 8d       	ldd	r24, Z+28	; 0x1c
    1b28:	98 13       	cpse	r25, r24
    1b2a:	06 c0       	rjmp	.+12     	; 0x1b38 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1b2c:	02 88       	ldd	r0, Z+18	; 0x12
    1b2e:	f3 89       	ldd	r31, Z+19	; 0x13
    1b30:	e0 2d       	mov	r30, r0
    1b32:	80 81       	ld	r24, Z
    1b34:	8f 7d       	andi	r24, 0xDF	; 223
    1b36:	80 83       	st	Z, r24
    1b38:	08 95       	ret

00001b3a <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1b3a:	cf 93       	push	r28
    1b3c:	df 93       	push	r29
    1b3e:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1b40:	88 8d       	ldd	r24, Y+24	; 0x18
    1b42:	81 11       	cpse	r24, r1
    1b44:	0a c0       	rjmp	.+20     	; 0x1b5a <_ZN14HardwareSerial5flushEv+0x20>
    1b46:	1a c0       	rjmp	.+52     	; 0x1b7c <_ZN14HardwareSerial5flushEv+0x42>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	07 fc       	sbrc	r0, 7
    1b4c:	08 c0       	rjmp	.+16     	; 0x1b5e <_ZN14HardwareSerial5flushEv+0x24>
    1b4e:	80 81       	ld	r24, Z
    1b50:	85 ff       	sbrs	r24, 5
    1b52:	05 c0       	rjmp	.+10     	; 0x1b5e <_ZN14HardwareSerial5flushEv+0x24>
    1b54:	0d c0       	rjmp	.+26     	; 0x1b70 <_ZN14HardwareSerial5flushEv+0x36>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
    1b56:	ce 01       	movw	r24, r28
    1b58:	cf df       	rcall	.-98     	; 0x1af8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1b5a:	ea 89       	ldd	r30, Y+18	; 0x12
    1b5c:	fb 89       	ldd	r31, Y+19	; 0x13
    1b5e:	80 81       	ld	r24, Z
    1b60:	85 fd       	sbrc	r24, 5
    1b62:	f2 cf       	rjmp	.-28     	; 0x1b48 <_ZN14HardwareSerial5flushEv+0xe>
    1b64:	a8 89       	ldd	r26, Y+16	; 0x10
    1b66:	b9 89       	ldd	r27, Y+17	; 0x11
    1b68:	8c 91       	ld	r24, X
    1b6a:	86 ff       	sbrs	r24, 6
    1b6c:	ed cf       	rjmp	.-38     	; 0x1b48 <_ZN14HardwareSerial5flushEv+0xe>
    1b6e:	06 c0       	rjmp	.+12     	; 0x1b7c <_ZN14HardwareSerial5flushEv+0x42>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1b70:	a8 89       	ldd	r26, Y+16	; 0x10
    1b72:	b9 89       	ldd	r27, Y+17	; 0x11
    1b74:	8c 91       	ld	r24, X
    1b76:	85 ff       	sbrs	r24, 5
    1b78:	f2 cf       	rjmp	.-28     	; 0x1b5e <_ZN14HardwareSerial5flushEv+0x24>
    1b7a:	ed cf       	rjmp	.-38     	; 0x1b56 <_ZN14HardwareSerial5flushEv+0x1c>
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1b7c:	df 91       	pop	r29
    1b7e:	cf 91       	pop	r28
    1b80:	08 95       	ret

00001b82 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    1b82:	0f 93       	push	r16
    1b84:	1f 93       	push	r17
    1b86:	cf 93       	push	r28
    1b88:	df 93       	push	r29
    1b8a:	ec 01       	movw	r28, r24
    1b8c:	16 2f       	mov	r17, r22
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1b8e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1b90:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b92:	98 13       	cpse	r25, r24
    1b94:	23 c0       	rjmp	.+70     	; 0x1bdc <_ZN14HardwareSerial5writeEh+0x5a>
    1b96:	e8 89       	ldd	r30, Y+16	; 0x10
    1b98:	f9 89       	ldd	r31, Y+17	; 0x11
    1b9a:	80 81       	ld	r24, Z
    1b9c:	85 fd       	sbrc	r24, 5
    1b9e:	25 c0       	rjmp	.+74     	; 0x1bea <_ZN14HardwareSerial5writeEh+0x68>
    1ba0:	1d c0       	rjmp	.+58     	; 0x1bdc <_ZN14HardwareSerial5writeEh+0x5a>
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    if (bit_is_clear(SREG, SREG_I)) {
    1ba2:	0f b6       	in	r0, 0x3f	; 63
    1ba4:	07 fc       	sbrc	r0, 7
    1ba6:	07 c0       	rjmp	.+14     	; 0x1bb6 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1ba8:	e8 89       	ldd	r30, Y+16	; 0x10
    1baa:	f9 89       	ldd	r31, Y+17	; 0x11
    1bac:	80 81       	ld	r24, Z
    1bae:	85 ff       	sbrs	r24, 5
    1bb0:	02 c0       	rjmp	.+4      	; 0x1bb6 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1bb2:	ce 01       	movw	r24, r28
    1bb4:	a1 df       	rcall	.-190    	; 0x1af8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1bb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bb8:	09 17       	cp	r16, r25
    1bba:	99 f3       	breq	.-26     	; 0x1ba2 <_ZN14HardwareSerial5writeEh+0x20>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1bbc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bbe:	fe 01       	movw	r30, r28
    1bc0:	e8 0f       	add	r30, r24
    1bc2:	f1 1d       	adc	r31, r1
    1bc4:	e3 5a       	subi	r30, 0xA3	; 163
    1bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc8:	10 83       	st	Z, r17
  _tx_buffer_head = i;
    1bca:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    1bcc:	ea 89       	ldd	r30, Y+18	; 0x12
    1bce:	fb 89       	ldd	r31, Y+19	; 0x13
    1bd0:	80 81       	ld	r24, Z
    1bd2:	80 62       	ori	r24, 0x20	; 32
    1bd4:	80 83       	st	Z, r24
  _written = true;
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	88 8f       	std	Y+24, r24	; 0x18
  
  return 1;
    1bda:	0f c0       	rjmp	.+30     	; 0x1bfa <_ZN14HardwareSerial5writeEh+0x78>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1bdc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	01 96       	adiw	r24, 0x01	; 1
    1be2:	8f 73       	andi	r24, 0x3F	; 63
    1be4:	90 78       	andi	r25, 0x80	; 128
    1be6:	08 2f       	mov	r16, r24
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1be8:	e6 cf       	rjmp	.-52     	; 0x1bb6 <_ZN14HardwareSerial5writeEh+0x34>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    1bea:	ee 89       	ldd	r30, Y+22	; 0x16
    1bec:	ff 89       	ldd	r31, Y+23	; 0x17
    1bee:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    1bf0:	e8 89       	ldd	r30, Y+16	; 0x10
    1bf2:	f9 89       	ldd	r31, Y+17	; 0x11
    1bf4:	80 81       	ld	r24, Z
    1bf6:	80 64       	ori	r24, 0x40	; 64
    1bf8:	80 83       	st	Z, r24
	
  sbi(*_ucsrb, UDRIE0);
  _written = true;
  
  return 1;
}
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	df 91       	pop	r29
    1c00:	cf 91       	pop	r28
    1c02:	1f 91       	pop	r17
    1c04:	0f 91       	pop	r16
    1c06:	08 95       	ret

00001c08 <__vector_25>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
    1c08:	1f 92       	push	r1
    1c0a:	0f 92       	push	r0
    1c0c:	0f b6       	in	r0, 0x3f	; 63
    1c0e:	0f 92       	push	r0
    1c10:	11 24       	eor	r1, r1
    1c12:	0b b6       	in	r0, 0x3b	; 59
    1c14:	0f 92       	push	r0
    1c16:	2f 93       	push	r18
    1c18:	8f 93       	push	r24
    1c1a:	9f 93       	push	r25
    1c1c:	af 93       	push	r26
    1c1e:	bf 93       	push	r27
    1c20:	ef 93       	push	r30
    1c22:	ff 93       	push	r31
    1c24:	e0 91 f4 03 	lds	r30, 0x03F4
    1c28:	f0 91 f5 03 	lds	r31, 0x03F5
    1c2c:	80 81       	ld	r24, Z
    1c2e:	82 fd       	sbrc	r24, 2
    1c30:	17 c0       	rjmp	.+46     	; 0x1c60 <__vector_25+0x58>
    1c32:	e0 91 fa 03 	lds	r30, 0x03FA
    1c36:	f0 91 fb 03 	lds	r31, 0x03FB
    1c3a:	20 81       	ld	r18, Z
    1c3c:	80 91 fd 03 	lds	r24, 0x03FD
    1c40:	8f 5f       	subi	r24, 0xFF	; 255
    1c42:	8f 73       	andi	r24, 0x3F	; 63
    1c44:	90 91 fe 03 	lds	r25, 0x03FE
    1c48:	89 17       	cp	r24, r25
    1c4a:	79 f0       	breq	.+30     	; 0x1c6a <__vector_25+0x62>
    1c4c:	ed ef       	ldi	r30, 0xFD	; 253
    1c4e:	f3 e0       	ldi	r31, 0x03	; 3
    1c50:	a0 81       	ld	r26, Z
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	ac 51       	subi	r26, 0x1C	; 28
    1c56:	bc 4f       	sbci	r27, 0xFC	; 252
    1c58:	5d 96       	adiw	r26, 0x1d	; 29
    1c5a:	2c 93       	st	X, r18
    1c5c:	80 83       	st	Z, r24
    1c5e:	05 c0       	rjmp	.+10     	; 0x1c6a <__vector_25+0x62>
    1c60:	e0 91 fa 03 	lds	r30, 0x03FA
    1c64:	f0 91 fb 03 	lds	r31, 0x03FB
    1c68:	80 81       	ld	r24, Z
    1c6a:	ff 91       	pop	r31
    1c6c:	ef 91       	pop	r30
    1c6e:	bf 91       	pop	r27
    1c70:	af 91       	pop	r26
    1c72:	9f 91       	pop	r25
    1c74:	8f 91       	pop	r24
    1c76:	2f 91       	pop	r18
    1c78:	0f 90       	pop	r0
    1c7a:	0b be       	out	0x3b, r0	; 59
    1c7c:	0f 90       	pop	r0
    1c7e:	0f be       	out	0x3f, r0	; 63
    1c80:	0f 90       	pop	r0
    1c82:	1f 90       	pop	r1
    1c84:	18 95       	reti

00001c86 <__vector_26>:
    1c86:	1f 92       	push	r1
    1c88:	0f 92       	push	r0
    1c8a:	0f b6       	in	r0, 0x3f	; 63
    1c8c:	0f 92       	push	r0
    1c8e:	11 24       	eor	r1, r1
    1c90:	0b b6       	in	r0, 0x3b	; 59
    1c92:	0f 92       	push	r0
    1c94:	2f 93       	push	r18
    1c96:	3f 93       	push	r19
    1c98:	4f 93       	push	r20
    1c9a:	5f 93       	push	r21
    1c9c:	6f 93       	push	r22
    1c9e:	7f 93       	push	r23
    1ca0:	8f 93       	push	r24
    1ca2:	9f 93       	push	r25
    1ca4:	af 93       	push	r26
    1ca6:	bf 93       	push	r27
    1ca8:	ef 93       	push	r30
    1caa:	ff 93       	push	r31
    1cac:	84 ee       	ldi	r24, 0xE4	; 228
    1cae:	93 e0       	ldi	r25, 0x03	; 3
    1cb0:	23 df       	rcall	.-442    	; 0x1af8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1cb2:	ff 91       	pop	r31
    1cb4:	ef 91       	pop	r30
    1cb6:	bf 91       	pop	r27
    1cb8:	af 91       	pop	r26
    1cba:	9f 91       	pop	r25
    1cbc:	8f 91       	pop	r24
    1cbe:	7f 91       	pop	r23
    1cc0:	6f 91       	pop	r22
    1cc2:	5f 91       	pop	r21
    1cc4:	4f 91       	pop	r20
    1cc6:	3f 91       	pop	r19
    1cc8:	2f 91       	pop	r18
    1cca:	0f 90       	pop	r0
    1ccc:	0b be       	out	0x3b, r0	; 59
    1cce:	0f 90       	pop	r0
    1cd0:	0f be       	out	0x3f, r0	; 63
    1cd2:	0f 90       	pop	r0
    1cd4:	1f 90       	pop	r1
    1cd6:	18 95       	reti

00001cd8 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1cd8:	10 92 e7 03 	sts	0x03E7, r1
    1cdc:	10 92 e6 03 	sts	0x03E6, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1ce0:	88 ee       	ldi	r24, 0xE8	; 232
    1ce2:	93 e0       	ldi	r25, 0x03	; 3
    1ce4:	a0 e0       	ldi	r26, 0x00	; 0
    1ce6:	b0 e0       	ldi	r27, 0x00	; 0
    1ce8:	80 93 e8 03 	sts	0x03E8, r24
    1cec:	90 93 e9 03 	sts	0x03E9, r25
    1cf0:	a0 93 ea 03 	sts	0x03EA, r26
    1cf4:	b0 93 eb 03 	sts	0x03EB, r27
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1cf8:	8b e3       	ldi	r24, 0x3B	; 59
    1cfa:	92 e0       	ldi	r25, 0x02	; 2
    1cfc:	90 93 e5 03 	sts	0x03E5, r25
    1d00:	80 93 e4 03 	sts	0x03E4, r24
    1d04:	85 ec       	ldi	r24, 0xC5	; 197
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	90 93 f1 03 	sts	0x03F1, r25
    1d0c:	80 93 f0 03 	sts	0x03F0, r24
    1d10:	84 ec       	ldi	r24, 0xC4	; 196
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	90 93 f3 03 	sts	0x03F3, r25
    1d18:	80 93 f2 03 	sts	0x03F2, r24
    1d1c:	80 ec       	ldi	r24, 0xC0	; 192
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	90 93 f5 03 	sts	0x03F5, r25
    1d24:	80 93 f4 03 	sts	0x03F4, r24
    1d28:	81 ec       	ldi	r24, 0xC1	; 193
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	90 93 f7 03 	sts	0x03F7, r25
    1d30:	80 93 f6 03 	sts	0x03F6, r24
    1d34:	82 ec       	ldi	r24, 0xC2	; 194
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	90 93 f9 03 	sts	0x03F9, r25
    1d3c:	80 93 f8 03 	sts	0x03F8, r24
    1d40:	86 ec       	ldi	r24, 0xC6	; 198
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	90 93 fb 03 	sts	0x03FB, r25
    1d48:	80 93 fa 03 	sts	0x03FA, r24
    1d4c:	10 92 fd 03 	sts	0x03FD, r1
    1d50:	10 92 fe 03 	sts	0x03FE, r1
    1d54:	10 92 ff 03 	sts	0x03FF, r1
    1d58:	10 92 00 04 	sts	0x0400, r1
    1d5c:	08 95       	ret

00001d5e <__vector_36>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
}
    1d5e:	1f 92       	push	r1
    1d60:	0f 92       	push	r0
    1d62:	0f b6       	in	r0, 0x3f	; 63
    1d64:	0f 92       	push	r0
    1d66:	11 24       	eor	r1, r1
    1d68:	0b b6       	in	r0, 0x3b	; 59
    1d6a:	0f 92       	push	r0
    1d6c:	2f 93       	push	r18
    1d6e:	8f 93       	push	r24
    1d70:	9f 93       	push	r25
    1d72:	af 93       	push	r26
    1d74:	bf 93       	push	r27
    1d76:	ef 93       	push	r30
    1d78:	ff 93       	push	r31
    1d7a:	e0 91 91 04 	lds	r30, 0x0491
    1d7e:	f0 91 92 04 	lds	r31, 0x0492
    1d82:	80 81       	ld	r24, Z
    1d84:	82 fd       	sbrc	r24, 2
    1d86:	17 c0       	rjmp	.+46     	; 0x1db6 <__vector_36+0x58>
    1d88:	e0 91 97 04 	lds	r30, 0x0497
    1d8c:	f0 91 98 04 	lds	r31, 0x0498
    1d90:	20 81       	ld	r18, Z
    1d92:	80 91 9a 04 	lds	r24, 0x049A
    1d96:	8f 5f       	subi	r24, 0xFF	; 255
    1d98:	8f 73       	andi	r24, 0x3F	; 63
    1d9a:	90 91 9b 04 	lds	r25, 0x049B
    1d9e:	89 17       	cp	r24, r25
    1da0:	79 f0       	breq	.+30     	; 0x1dc0 <__vector_36+0x62>
    1da2:	ea e9       	ldi	r30, 0x9A	; 154
    1da4:	f4 e0       	ldi	r31, 0x04	; 4
    1da6:	a0 81       	ld	r26, Z
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	af 57       	subi	r26, 0x7F	; 127
    1dac:	bb 4f       	sbci	r27, 0xFB	; 251
    1dae:	5d 96       	adiw	r26, 0x1d	; 29
    1db0:	2c 93       	st	X, r18
    1db2:	80 83       	st	Z, r24
    1db4:	05 c0       	rjmp	.+10     	; 0x1dc0 <__vector_36+0x62>
    1db6:	e0 91 97 04 	lds	r30, 0x0497
    1dba:	f0 91 98 04 	lds	r31, 0x0498
    1dbe:	80 81       	ld	r24, Z
    1dc0:	ff 91       	pop	r31
    1dc2:	ef 91       	pop	r30
    1dc4:	bf 91       	pop	r27
    1dc6:	af 91       	pop	r26
    1dc8:	9f 91       	pop	r25
    1dca:	8f 91       	pop	r24
    1dcc:	2f 91       	pop	r18
    1dce:	0f 90       	pop	r0
    1dd0:	0b be       	out	0x3b, r0	; 59
    1dd2:	0f 90       	pop	r0
    1dd4:	0f be       	out	0x3f, r0	; 63
    1dd6:	0f 90       	pop	r0
    1dd8:	1f 90       	pop	r1
    1dda:	18 95       	reti

00001ddc <__vector_37>:
    1ddc:	1f 92       	push	r1
    1dde:	0f 92       	push	r0
    1de0:	0f b6       	in	r0, 0x3f	; 63
    1de2:	0f 92       	push	r0
    1de4:	11 24       	eor	r1, r1
    1de6:	0b b6       	in	r0, 0x3b	; 59
    1de8:	0f 92       	push	r0
    1dea:	2f 93       	push	r18
    1dec:	3f 93       	push	r19
    1dee:	4f 93       	push	r20
    1df0:	5f 93       	push	r21
    1df2:	6f 93       	push	r22
    1df4:	7f 93       	push	r23
    1df6:	8f 93       	push	r24
    1df8:	9f 93       	push	r25
    1dfa:	af 93       	push	r26
    1dfc:	bf 93       	push	r27
    1dfe:	ef 93       	push	r30
    1e00:	ff 93       	push	r31
    1e02:	81 e8       	ldi	r24, 0x81	; 129
    1e04:	94 e0       	ldi	r25, 0x04	; 4
    1e06:	78 de       	rcall	.-784    	; 0x1af8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1e08:	ff 91       	pop	r31
    1e0a:	ef 91       	pop	r30
    1e0c:	bf 91       	pop	r27
    1e0e:	af 91       	pop	r26
    1e10:	9f 91       	pop	r25
    1e12:	8f 91       	pop	r24
    1e14:	7f 91       	pop	r23
    1e16:	6f 91       	pop	r22
    1e18:	5f 91       	pop	r21
    1e1a:	4f 91       	pop	r20
    1e1c:	3f 91       	pop	r19
    1e1e:	2f 91       	pop	r18
    1e20:	0f 90       	pop	r0
    1e22:	0b be       	out	0x3b, r0	; 59
    1e24:	0f 90       	pop	r0
    1e26:	0f be       	out	0x3f, r0	; 63
    1e28:	0f 90       	pop	r0
    1e2a:	1f 90       	pop	r1
    1e2c:	18 95       	reti

00001e2e <_GLOBAL__sub_I___vector_36>:
    1e2e:	10 92 84 04 	sts	0x0484, r1
    1e32:	10 92 83 04 	sts	0x0483, r1
    1e36:	88 ee       	ldi	r24, 0xE8	; 232
    1e38:	93 e0       	ldi	r25, 0x03	; 3
    1e3a:	a0 e0       	ldi	r26, 0x00	; 0
    1e3c:	b0 e0       	ldi	r27, 0x00	; 0
    1e3e:	80 93 85 04 	sts	0x0485, r24
    1e42:	90 93 86 04 	sts	0x0486, r25
    1e46:	a0 93 87 04 	sts	0x0487, r26
    1e4a:	b0 93 88 04 	sts	0x0488, r27
    1e4e:	8b e3       	ldi	r24, 0x3B	; 59
    1e50:	92 e0       	ldi	r25, 0x02	; 2
    1e52:	90 93 82 04 	sts	0x0482, r25
    1e56:	80 93 81 04 	sts	0x0481, r24
    1e5a:	8d ec       	ldi	r24, 0xCD	; 205
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	90 93 8e 04 	sts	0x048E, r25
    1e62:	80 93 8d 04 	sts	0x048D, r24
    1e66:	8c ec       	ldi	r24, 0xCC	; 204
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	90 93 90 04 	sts	0x0490, r25
    1e6e:	80 93 8f 04 	sts	0x048F, r24
    1e72:	88 ec       	ldi	r24, 0xC8	; 200
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	90 93 92 04 	sts	0x0492, r25
    1e7a:	80 93 91 04 	sts	0x0491, r24
    1e7e:	89 ec       	ldi	r24, 0xC9	; 201
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	90 93 94 04 	sts	0x0494, r25
    1e86:	80 93 93 04 	sts	0x0493, r24
    1e8a:	8a ec       	ldi	r24, 0xCA	; 202
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	90 93 96 04 	sts	0x0496, r25
    1e92:	80 93 95 04 	sts	0x0495, r24
    1e96:	8e ec       	ldi	r24, 0xCE	; 206
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	90 93 98 04 	sts	0x0498, r25
    1e9e:	80 93 97 04 	sts	0x0497, r24
    1ea2:	10 92 9a 04 	sts	0x049A, r1
    1ea6:	10 92 9b 04 	sts	0x049B, r1
    1eaa:	10 92 9c 04 	sts	0x049C, r1
    1eae:	10 92 9d 04 	sts	0x049D, r1
    1eb2:	08 95       	ret

00001eb4 <__vector_51>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available() {
  return Serial2.available();
}
    1eb4:	1f 92       	push	r1
    1eb6:	0f 92       	push	r0
    1eb8:	0f b6       	in	r0, 0x3f	; 63
    1eba:	0f 92       	push	r0
    1ebc:	11 24       	eor	r1, r1
    1ebe:	0b b6       	in	r0, 0x3b	; 59
    1ec0:	0f 92       	push	r0
    1ec2:	2f 93       	push	r18
    1ec4:	8f 93       	push	r24
    1ec6:	9f 93       	push	r25
    1ec8:	af 93       	push	r26
    1eca:	bf 93       	push	r27
    1ecc:	ef 93       	push	r30
    1ece:	ff 93       	push	r31
    1ed0:	e0 91 2e 05 	lds	r30, 0x052E
    1ed4:	f0 91 2f 05 	lds	r31, 0x052F
    1ed8:	80 81       	ld	r24, Z
    1eda:	82 fd       	sbrc	r24, 2
    1edc:	17 c0       	rjmp	.+46     	; 0x1f0c <__vector_51+0x58>
    1ede:	e0 91 34 05 	lds	r30, 0x0534
    1ee2:	f0 91 35 05 	lds	r31, 0x0535
    1ee6:	20 81       	ld	r18, Z
    1ee8:	80 91 37 05 	lds	r24, 0x0537
    1eec:	8f 5f       	subi	r24, 0xFF	; 255
    1eee:	8f 73       	andi	r24, 0x3F	; 63
    1ef0:	90 91 38 05 	lds	r25, 0x0538
    1ef4:	89 17       	cp	r24, r25
    1ef6:	79 f0       	breq	.+30     	; 0x1f16 <__vector_51+0x62>
    1ef8:	e7 e3       	ldi	r30, 0x37	; 55
    1efa:	f5 e0       	ldi	r31, 0x05	; 5
    1efc:	a0 81       	ld	r26, Z
    1efe:	b0 e0       	ldi	r27, 0x00	; 0
    1f00:	a2 5e       	subi	r26, 0xE2	; 226
    1f02:	ba 4f       	sbci	r27, 0xFA	; 250
    1f04:	5d 96       	adiw	r26, 0x1d	; 29
    1f06:	2c 93       	st	X, r18
    1f08:	80 83       	st	Z, r24
    1f0a:	05 c0       	rjmp	.+10     	; 0x1f16 <__vector_51+0x62>
    1f0c:	e0 91 34 05 	lds	r30, 0x0534
    1f10:	f0 91 35 05 	lds	r31, 0x0535
    1f14:	80 81       	ld	r24, Z
    1f16:	ff 91       	pop	r31
    1f18:	ef 91       	pop	r30
    1f1a:	bf 91       	pop	r27
    1f1c:	af 91       	pop	r26
    1f1e:	9f 91       	pop	r25
    1f20:	8f 91       	pop	r24
    1f22:	2f 91       	pop	r18
    1f24:	0f 90       	pop	r0
    1f26:	0b be       	out	0x3b, r0	; 59
    1f28:	0f 90       	pop	r0
    1f2a:	0f be       	out	0x3f, r0	; 63
    1f2c:	0f 90       	pop	r0
    1f2e:	1f 90       	pop	r1
    1f30:	18 95       	reti

00001f32 <__vector_52>:
    1f32:	1f 92       	push	r1
    1f34:	0f 92       	push	r0
    1f36:	0f b6       	in	r0, 0x3f	; 63
    1f38:	0f 92       	push	r0
    1f3a:	11 24       	eor	r1, r1
    1f3c:	0b b6       	in	r0, 0x3b	; 59
    1f3e:	0f 92       	push	r0
    1f40:	2f 93       	push	r18
    1f42:	3f 93       	push	r19
    1f44:	4f 93       	push	r20
    1f46:	5f 93       	push	r21
    1f48:	6f 93       	push	r22
    1f4a:	7f 93       	push	r23
    1f4c:	8f 93       	push	r24
    1f4e:	9f 93       	push	r25
    1f50:	af 93       	push	r26
    1f52:	bf 93       	push	r27
    1f54:	ef 93       	push	r30
    1f56:	ff 93       	push	r31
    1f58:	8e e1       	ldi	r24, 0x1E	; 30
    1f5a:	95 e0       	ldi	r25, 0x05	; 5
    1f5c:	cd dd       	rcall	.-1126   	; 0x1af8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1f5e:	ff 91       	pop	r31
    1f60:	ef 91       	pop	r30
    1f62:	bf 91       	pop	r27
    1f64:	af 91       	pop	r26
    1f66:	9f 91       	pop	r25
    1f68:	8f 91       	pop	r24
    1f6a:	7f 91       	pop	r23
    1f6c:	6f 91       	pop	r22
    1f6e:	5f 91       	pop	r21
    1f70:	4f 91       	pop	r20
    1f72:	3f 91       	pop	r19
    1f74:	2f 91       	pop	r18
    1f76:	0f 90       	pop	r0
    1f78:	0b be       	out	0x3b, r0	; 59
    1f7a:	0f 90       	pop	r0
    1f7c:	0f be       	out	0x3f, r0	; 63
    1f7e:	0f 90       	pop	r0
    1f80:	1f 90       	pop	r1
    1f82:	18 95       	reti

00001f84 <_GLOBAL__sub_I___vector_51>:
    1f84:	10 92 21 05 	sts	0x0521, r1
    1f88:	10 92 20 05 	sts	0x0520, r1
    1f8c:	88 ee       	ldi	r24, 0xE8	; 232
    1f8e:	93 e0       	ldi	r25, 0x03	; 3
    1f90:	a0 e0       	ldi	r26, 0x00	; 0
    1f92:	b0 e0       	ldi	r27, 0x00	; 0
    1f94:	80 93 22 05 	sts	0x0522, r24
    1f98:	90 93 23 05 	sts	0x0523, r25
    1f9c:	a0 93 24 05 	sts	0x0524, r26
    1fa0:	b0 93 25 05 	sts	0x0525, r27
    1fa4:	8b e3       	ldi	r24, 0x3B	; 59
    1fa6:	92 e0       	ldi	r25, 0x02	; 2
    1fa8:	90 93 1f 05 	sts	0x051F, r25
    1fac:	80 93 1e 05 	sts	0x051E, r24
    1fb0:	85 ed       	ldi	r24, 0xD5	; 213
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	90 93 2b 05 	sts	0x052B, r25
    1fb8:	80 93 2a 05 	sts	0x052A, r24
    1fbc:	84 ed       	ldi	r24, 0xD4	; 212
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	90 93 2d 05 	sts	0x052D, r25
    1fc4:	80 93 2c 05 	sts	0x052C, r24
    1fc8:	80 ed       	ldi	r24, 0xD0	; 208
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	90 93 2f 05 	sts	0x052F, r25
    1fd0:	80 93 2e 05 	sts	0x052E, r24
    1fd4:	81 ed       	ldi	r24, 0xD1	; 209
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	90 93 31 05 	sts	0x0531, r25
    1fdc:	80 93 30 05 	sts	0x0530, r24
    1fe0:	82 ed       	ldi	r24, 0xD2	; 210
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	90 93 33 05 	sts	0x0533, r25
    1fe8:	80 93 32 05 	sts	0x0532, r24
    1fec:	86 ed       	ldi	r24, 0xD6	; 214
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	90 93 35 05 	sts	0x0535, r25
    1ff4:	80 93 34 05 	sts	0x0534, r24
    1ff8:	10 92 37 05 	sts	0x0537, r1
    1ffc:	10 92 38 05 	sts	0x0538, r1
    2000:	10 92 39 05 	sts	0x0539, r1
    2004:	10 92 3a 05 	sts	0x053A, r1
    2008:	08 95       	ret

0000200a <__vector_54>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial3_available() {
  return Serial3.available();
}
    200a:	1f 92       	push	r1
    200c:	0f 92       	push	r0
    200e:	0f b6       	in	r0, 0x3f	; 63
    2010:	0f 92       	push	r0
    2012:	11 24       	eor	r1, r1
    2014:	0b b6       	in	r0, 0x3b	; 59
    2016:	0f 92       	push	r0
    2018:	2f 93       	push	r18
    201a:	8f 93       	push	r24
    201c:	9f 93       	push	r25
    201e:	af 93       	push	r26
    2020:	bf 93       	push	r27
    2022:	ef 93       	push	r30
    2024:	ff 93       	push	r31
    2026:	e0 91 cb 05 	lds	r30, 0x05CB
    202a:	f0 91 cc 05 	lds	r31, 0x05CC
    202e:	80 81       	ld	r24, Z
    2030:	82 fd       	sbrc	r24, 2
    2032:	17 c0       	rjmp	.+46     	; 0x2062 <__vector_54+0x58>
    2034:	e0 91 d1 05 	lds	r30, 0x05D1
    2038:	f0 91 d2 05 	lds	r31, 0x05D2
    203c:	20 81       	ld	r18, Z
    203e:	80 91 d4 05 	lds	r24, 0x05D4
    2042:	8f 5f       	subi	r24, 0xFF	; 255
    2044:	8f 73       	andi	r24, 0x3F	; 63
    2046:	90 91 d5 05 	lds	r25, 0x05D5
    204a:	89 17       	cp	r24, r25
    204c:	79 f0       	breq	.+30     	; 0x206c <__vector_54+0x62>
    204e:	e4 ed       	ldi	r30, 0xD4	; 212
    2050:	f5 e0       	ldi	r31, 0x05	; 5
    2052:	a0 81       	ld	r26, Z
    2054:	b0 e0       	ldi	r27, 0x00	; 0
    2056:	a5 54       	subi	r26, 0x45	; 69
    2058:	ba 4f       	sbci	r27, 0xFA	; 250
    205a:	5d 96       	adiw	r26, 0x1d	; 29
    205c:	2c 93       	st	X, r18
    205e:	80 83       	st	Z, r24
    2060:	05 c0       	rjmp	.+10     	; 0x206c <__vector_54+0x62>
    2062:	e0 91 d1 05 	lds	r30, 0x05D1
    2066:	f0 91 d2 05 	lds	r31, 0x05D2
    206a:	80 81       	ld	r24, Z
    206c:	ff 91       	pop	r31
    206e:	ef 91       	pop	r30
    2070:	bf 91       	pop	r27
    2072:	af 91       	pop	r26
    2074:	9f 91       	pop	r25
    2076:	8f 91       	pop	r24
    2078:	2f 91       	pop	r18
    207a:	0f 90       	pop	r0
    207c:	0b be       	out	0x3b, r0	; 59
    207e:	0f 90       	pop	r0
    2080:	0f be       	out	0x3f, r0	; 63
    2082:	0f 90       	pop	r0
    2084:	1f 90       	pop	r1
    2086:	18 95       	reti

00002088 <__vector_55>:
    2088:	1f 92       	push	r1
    208a:	0f 92       	push	r0
    208c:	0f b6       	in	r0, 0x3f	; 63
    208e:	0f 92       	push	r0
    2090:	11 24       	eor	r1, r1
    2092:	0b b6       	in	r0, 0x3b	; 59
    2094:	0f 92       	push	r0
    2096:	2f 93       	push	r18
    2098:	3f 93       	push	r19
    209a:	4f 93       	push	r20
    209c:	5f 93       	push	r21
    209e:	6f 93       	push	r22
    20a0:	7f 93       	push	r23
    20a2:	8f 93       	push	r24
    20a4:	9f 93       	push	r25
    20a6:	af 93       	push	r26
    20a8:	bf 93       	push	r27
    20aa:	ef 93       	push	r30
    20ac:	ff 93       	push	r31
    20ae:	8b eb       	ldi	r24, 0xBB	; 187
    20b0:	95 e0       	ldi	r25, 0x05	; 5
    20b2:	22 dd       	rcall	.-1468   	; 0x1af8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    20b4:	ff 91       	pop	r31
    20b6:	ef 91       	pop	r30
    20b8:	bf 91       	pop	r27
    20ba:	af 91       	pop	r26
    20bc:	9f 91       	pop	r25
    20be:	8f 91       	pop	r24
    20c0:	7f 91       	pop	r23
    20c2:	6f 91       	pop	r22
    20c4:	5f 91       	pop	r21
    20c6:	4f 91       	pop	r20
    20c8:	3f 91       	pop	r19
    20ca:	2f 91       	pop	r18
    20cc:	0f 90       	pop	r0
    20ce:	0b be       	out	0x3b, r0	; 59
    20d0:	0f 90       	pop	r0
    20d2:	0f be       	out	0x3f, r0	; 63
    20d4:	0f 90       	pop	r0
    20d6:	1f 90       	pop	r1
    20d8:	18 95       	reti

000020da <_GLOBAL__sub_I___vector_54>:
    20da:	10 92 be 05 	sts	0x05BE, r1
    20de:	10 92 bd 05 	sts	0x05BD, r1
    20e2:	88 ee       	ldi	r24, 0xE8	; 232
    20e4:	93 e0       	ldi	r25, 0x03	; 3
    20e6:	a0 e0       	ldi	r26, 0x00	; 0
    20e8:	b0 e0       	ldi	r27, 0x00	; 0
    20ea:	80 93 bf 05 	sts	0x05BF, r24
    20ee:	90 93 c0 05 	sts	0x05C0, r25
    20f2:	a0 93 c1 05 	sts	0x05C1, r26
    20f6:	b0 93 c2 05 	sts	0x05C2, r27
    20fa:	8b e3       	ldi	r24, 0x3B	; 59
    20fc:	92 e0       	ldi	r25, 0x02	; 2
    20fe:	90 93 bc 05 	sts	0x05BC, r25
    2102:	80 93 bb 05 	sts	0x05BB, r24
    2106:	85 e3       	ldi	r24, 0x35	; 53
    2108:	91 e0       	ldi	r25, 0x01	; 1
    210a:	90 93 c8 05 	sts	0x05C8, r25
    210e:	80 93 c7 05 	sts	0x05C7, r24
    2112:	84 e3       	ldi	r24, 0x34	; 52
    2114:	91 e0       	ldi	r25, 0x01	; 1
    2116:	90 93 ca 05 	sts	0x05CA, r25
    211a:	80 93 c9 05 	sts	0x05C9, r24
    211e:	80 e3       	ldi	r24, 0x30	; 48
    2120:	91 e0       	ldi	r25, 0x01	; 1
    2122:	90 93 cc 05 	sts	0x05CC, r25
    2126:	80 93 cb 05 	sts	0x05CB, r24
    212a:	81 e3       	ldi	r24, 0x31	; 49
    212c:	91 e0       	ldi	r25, 0x01	; 1
    212e:	90 93 ce 05 	sts	0x05CE, r25
    2132:	80 93 cd 05 	sts	0x05CD, r24
    2136:	82 e3       	ldi	r24, 0x32	; 50
    2138:	91 e0       	ldi	r25, 0x01	; 1
    213a:	90 93 d0 05 	sts	0x05D0, r25
    213e:	80 93 cf 05 	sts	0x05CF, r24
    2142:	86 e3       	ldi	r24, 0x36	; 54
    2144:	91 e0       	ldi	r25, 0x01	; 1
    2146:	90 93 d2 05 	sts	0x05D2, r25
    214a:	80 93 d1 05 	sts	0x05D1, r24
    214e:	10 92 d4 05 	sts	0x05D4, r1
    2152:	10 92 d5 05 	sts	0x05D5, r1
    2156:	10 92 d6 05 	sts	0x05D6, r1
    215a:	10 92 d7 05 	sts	0x05D7, r1
    215e:	08 95       	ret

00002160 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2160:	08 95       	ret

00002162 <_ZNK9IPAddress7printToER5Print>:
}

bool IPAddress::operator==(const uint8_t* addr) const
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}
    2162:	af 92       	push	r10
    2164:	bf 92       	push	r11
    2166:	cf 92       	push	r12
    2168:	df 92       	push	r13
    216a:	ef 92       	push	r14
    216c:	ff 92       	push	r15
    216e:	0f 93       	push	r16
    2170:	1f 93       	push	r17
    2172:	cf 93       	push	r28
    2174:	df 93       	push	r29
    2176:	5c 01       	movw	r10, r24
    2178:	7b 01       	movw	r14, r22
    217a:	c0 e0       	ldi	r28, 0x00	; 0
    217c:	d0 e0       	ldi	r29, 0x00	; 0
    217e:	00 e0       	ldi	r16, 0x00	; 0
    2180:	10 e0       	ldi	r17, 0x00	; 0
    2182:	f5 01       	movw	r30, r10
    2184:	ec 0f       	add	r30, r28
    2186:	fd 1f       	adc	r31, r29
    2188:	4a e0       	ldi	r20, 0x0A	; 10
    218a:	50 e0       	ldi	r21, 0x00	; 0
    218c:	62 81       	ldd	r22, Z+2	; 0x02
    218e:	c7 01       	movw	r24, r14
    2190:	51 d1       	rcall	.+674    	; 0x2434 <_ZN5Print5printEhi>
    2192:	6c 01       	movw	r12, r24
    2194:	6e e2       	ldi	r22, 0x2E	; 46
    2196:	c7 01       	movw	r24, r14
    2198:	8a d0       	rcall	.+276    	; 0x22ae <_ZN5Print5printEc>
    219a:	8c 0d       	add	r24, r12
    219c:	9d 1d       	adc	r25, r13
    219e:	08 0f       	add	r16, r24
    21a0:	19 1f       	adc	r17, r25
    21a2:	21 96       	adiw	r28, 0x01	; 1
    21a4:	c3 30       	cpi	r28, 0x03	; 3
    21a6:	d1 05       	cpc	r29, r1
    21a8:	61 f7       	brne	.-40     	; 0x2182 <_ZNK9IPAddress7printToER5Print+0x20>
    21aa:	4a e0       	ldi	r20, 0x0A	; 10
    21ac:	50 e0       	ldi	r21, 0x00	; 0
    21ae:	f5 01       	movw	r30, r10
    21b0:	65 81       	ldd	r22, Z+5	; 0x05
    21b2:	c7 01       	movw	r24, r14
    21b4:	3f d1       	rcall	.+638    	; 0x2434 <_ZN5Print5printEhi>
    21b6:	80 0f       	add	r24, r16
    21b8:	91 1f       	adc	r25, r17
    21ba:	df 91       	pop	r29
    21bc:	cf 91       	pop	r28
    21be:	1f 91       	pop	r17
    21c0:	0f 91       	pop	r16
    21c2:	ff 90       	pop	r15
    21c4:	ef 90       	pop	r14
    21c6:	df 90       	pop	r13
    21c8:	cf 90       	pop	r12
    21ca:	bf 90       	pop	r11
    21cc:	af 90       	pop	r10
    21ce:	08 95       	ret

000021d0 <_ZN9IPAddressC1Ehhhh>:
    21d0:	0f 93       	push	r16
    21d2:	fc 01       	movw	r30, r24
    21d4:	8b e4       	ldi	r24, 0x4B	; 75
    21d6:	92 e0       	ldi	r25, 0x02	; 2
    21d8:	91 83       	std	Z+1, r25	; 0x01
    21da:	80 83       	st	Z, r24
    21dc:	62 83       	std	Z+2, r22	; 0x02
    21de:	43 83       	std	Z+3, r20	; 0x03
    21e0:	24 83       	std	Z+4, r18	; 0x04
    21e2:	05 83       	std	Z+5, r16	; 0x05
    21e4:	0f 91       	pop	r16
    21e6:	08 95       	ret

000021e8 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
    return n;
}
    21e8:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    21ea:	00 e0       	ldi	r16, 0x00	; 0
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	40 e0       	ldi	r20, 0x00	; 0
    21f0:	60 e0       	ldi	r22, 0x00	; 0
    21f2:	88 e5       	ldi	r24, 0x58	; 88
    21f4:	96 e0       	ldi	r25, 0x06	; 6
    21f6:	ec df       	rcall	.-40     	; 0x21d0 <_ZN9IPAddressC1Ehhhh>
    21f8:	0f 91       	pop	r16
    21fa:	08 95       	ret

000021fc <_Znaj>:
void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
  return malloc(size);
    21fc:	0c 94 fd 22 	jmp	0x45fa	; 0x45fa <malloc>
}
    2200:	08 95       	ret

00002202 <_ZdlPv>:

void operator delete(void * ptr) {
  free(ptr);
    2202:	0c 94 95 23 	jmp	0x472a	; 0x472a <free>
    2206:	08 95       	ret

00002208 <_ZN5Print5writeEPKhj>:
size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    2208:	cf 92       	push	r12
    220a:	df 92       	push	r13
    220c:	ef 92       	push	r14
    220e:	ff 92       	push	r15
    2210:	0f 93       	push	r16
    2212:	1f 93       	push	r17
    2214:	cf 93       	push	r28
    2216:	df 93       	push	r29
    2218:	6c 01       	movw	r12, r24
    221a:	41 15       	cp	r20, r1
    221c:	51 05       	cpc	r21, r1
    221e:	b1 f0       	breq	.+44     	; 0x224c <_ZN5Print5writeEPKhj+0x44>
    2220:	06 2f       	mov	r16, r22
    2222:	17 2f       	mov	r17, r23
    2224:	ea 01       	movw	r28, r20
    2226:	e1 2c       	mov	r14, r1
    2228:	f1 2c       	mov	r15, r1
    222a:	d8 01       	movw	r26, r16
    222c:	6d 91       	ld	r22, X+
    222e:	8d 01       	movw	r16, r26
    2230:	d6 01       	movw	r26, r12
    2232:	ed 91       	ld	r30, X+
    2234:	fc 91       	ld	r31, X
    2236:	01 90       	ld	r0, Z+
    2238:	f0 81       	ld	r31, Z
    223a:	e0 2d       	mov	r30, r0
    223c:	c6 01       	movw	r24, r12
    223e:	19 95       	eicall
    2240:	e8 0e       	add	r14, r24
    2242:	f9 1e       	adc	r15, r25
    2244:	21 97       	sbiw	r28, 0x01	; 1
    2246:	20 97       	sbiw	r28, 0x00	; 0
    2248:	81 f7       	brne	.-32     	; 0x222a <_ZN5Print5writeEPKhj+0x22>
    224a:	02 c0       	rjmp	.+4      	; 0x2250 <_ZN5Print5writeEPKhj+0x48>
    224c:	e1 2c       	mov	r14, r1
    224e:	f1 2c       	mov	r15, r1
    2250:	c7 01       	movw	r24, r14
    2252:	df 91       	pop	r29
    2254:	cf 91       	pop	r28
    2256:	1f 91       	pop	r17
    2258:	0f 91       	pop	r16
    225a:	ff 90       	pop	r15
    225c:	ef 90       	pop	r14
    225e:	df 90       	pop	r13
    2260:	cf 90       	pop	r12
    2262:	08 95       	ret

00002264 <_ZN5Print5printERK6String>:
    2264:	dc 01       	movw	r26, r24
    2266:	ed 91       	ld	r30, X+
    2268:	fc 91       	ld	r31, X
    226a:	db 01       	movw	r26, r22
    226c:	14 96       	adiw	r26, 0x04	; 4
    226e:	4d 91       	ld	r20, X+
    2270:	5c 91       	ld	r21, X
    2272:	15 97       	sbiw	r26, 0x05	; 5
    2274:	6d 91       	ld	r22, X+
    2276:	7c 91       	ld	r23, X
    2278:	02 80       	ldd	r0, Z+2	; 0x02
    227a:	f3 81       	ldd	r31, Z+3	; 0x03
    227c:	e0 2d       	mov	r30, r0
    227e:	19 95       	eicall
    2280:	08 95       	ret

00002282 <_ZN5Print5printEPKc>:
    2282:	61 15       	cp	r22, r1
    2284:	71 05       	cpc	r23, r1
    2286:	81 f0       	breq	.+32     	; 0x22a8 <_ZN5Print5printEPKc+0x26>
    2288:	fb 01       	movw	r30, r22
    228a:	01 90       	ld	r0, Z+
    228c:	00 20       	and	r0, r0
    228e:	e9 f7       	brne	.-6      	; 0x228a <_ZN5Print5printEPKc+0x8>
    2290:	31 97       	sbiw	r30, 0x01	; 1
    2292:	af 01       	movw	r20, r30
    2294:	46 1b       	sub	r20, r22
    2296:	57 0b       	sbc	r21, r23
    2298:	dc 01       	movw	r26, r24
    229a:	ed 91       	ld	r30, X+
    229c:	fc 91       	ld	r31, X
    229e:	02 80       	ldd	r0, Z+2	; 0x02
    22a0:	f3 81       	ldd	r31, Z+3	; 0x03
    22a2:	e0 2d       	mov	r30, r0
    22a4:	19 95       	eicall
    22a6:	08 95       	ret
    22a8:	80 e0       	ldi	r24, 0x00	; 0
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	08 95       	ret

000022ae <_ZN5Print5printEc>:
    22ae:	dc 01       	movw	r26, r24
    22b0:	ed 91       	ld	r30, X+
    22b2:	fc 91       	ld	r31, X
    22b4:	01 90       	ld	r0, Z+
    22b6:	f0 81       	ld	r31, Z
    22b8:	e0 2d       	mov	r30, r0
    22ba:	19 95       	eicall
    22bc:	08 95       	ret

000022be <_ZN5Print7printlnEv>:
    22be:	0f 93       	push	r16
    22c0:	1f 93       	push	r17
    22c2:	cf 93       	push	r28
    22c4:	df 93       	push	r29
    22c6:	ec 01       	movw	r28, r24
    22c8:	6d e0       	ldi	r22, 0x0D	; 13
    22ca:	f1 df       	rcall	.-30     	; 0x22ae <_ZN5Print5printEc>
    22cc:	8c 01       	movw	r16, r24
    22ce:	6a e0       	ldi	r22, 0x0A	; 10
    22d0:	ce 01       	movw	r24, r28
    22d2:	ed df       	rcall	.-38     	; 0x22ae <_ZN5Print5printEc>
    22d4:	80 0f       	add	r24, r16
    22d6:	91 1f       	adc	r25, r17
    22d8:	df 91       	pop	r29
    22da:	cf 91       	pop	r28
    22dc:	1f 91       	pop	r17
    22de:	0f 91       	pop	r16
    22e0:	08 95       	ret

000022e2 <_ZN5Print7printlnERK6String>:
    22e2:	0f 93       	push	r16
    22e4:	1f 93       	push	r17
    22e6:	cf 93       	push	r28
    22e8:	df 93       	push	r29
    22ea:	ec 01       	movw	r28, r24
    22ec:	bb df       	rcall	.-138    	; 0x2264 <_ZN5Print5printERK6String>
    22ee:	8c 01       	movw	r16, r24
    22f0:	ce 01       	movw	r24, r28
    22f2:	e5 df       	rcall	.-54     	; 0x22be <_ZN5Print7printlnEv>
    22f4:	80 0f       	add	r24, r16
    22f6:	91 1f       	adc	r25, r17
    22f8:	df 91       	pop	r29
    22fa:	cf 91       	pop	r28
    22fc:	1f 91       	pop	r17
    22fe:	0f 91       	pop	r16
    2300:	08 95       	ret

00002302 <_ZN5Print7printlnEPKc>:
    2302:	0f 93       	push	r16
    2304:	1f 93       	push	r17
    2306:	cf 93       	push	r28
    2308:	df 93       	push	r29
    230a:	ec 01       	movw	r28, r24
    230c:	ba df       	rcall	.-140    	; 0x2282 <_ZN5Print5printEPKc>
    230e:	8c 01       	movw	r16, r24
    2310:	ce 01       	movw	r24, r28
    2312:	d5 df       	rcall	.-86     	; 0x22be <_ZN5Print7printlnEv>
    2314:	80 0f       	add	r24, r16
    2316:	91 1f       	adc	r25, r17
    2318:	df 91       	pop	r29
    231a:	cf 91       	pop	r28
    231c:	1f 91       	pop	r17
    231e:	0f 91       	pop	r16
    2320:	08 95       	ret

00002322 <_ZN5Print11printNumberEmh>:
    2322:	6f 92       	push	r6
    2324:	7f 92       	push	r7
    2326:	8f 92       	push	r8
    2328:	9f 92       	push	r9
    232a:	af 92       	push	r10
    232c:	bf 92       	push	r11
    232e:	cf 92       	push	r12
    2330:	df 92       	push	r13
    2332:	ef 92       	push	r14
    2334:	ff 92       	push	r15
    2336:	0f 93       	push	r16
    2338:	1f 93       	push	r17
    233a:	cf 93       	push	r28
    233c:	df 93       	push	r29
    233e:	cd b7       	in	r28, 0x3d	; 61
    2340:	de b7       	in	r29, 0x3e	; 62
    2342:	a1 97       	sbiw	r28, 0x21	; 33
    2344:	0f b6       	in	r0, 0x3f	; 63
    2346:	f8 94       	cli
    2348:	de bf       	out	0x3e, r29	; 62
    234a:	0f be       	out	0x3f, r0	; 63
    234c:	cd bf       	out	0x3d, r28	; 61
    234e:	6c 01       	movw	r12, r24
    2350:	74 2e       	mov	r7, r20
    2352:	35 2f       	mov	r19, r21
    2354:	86 2f       	mov	r24, r22
    2356:	97 2f       	mov	r25, r23
    2358:	62 2e       	mov	r6, r18
    235a:	19 a2       	std	Y+33, r1	; 0x21
    235c:	21 e0       	ldi	r18, 0x01	; 1
    235e:	26 15       	cp	r18, r6
    2360:	20 f0       	brcs	.+8      	; 0x236a <_ZN5Print11printNumberEmh+0x48>
    2362:	0f 2e       	mov	r0, r31
    2364:	fa e0       	ldi	r31, 0x0A	; 10
    2366:	6f 2e       	mov	r6, r31
    2368:	f0 2d       	mov	r31, r0
    236a:	7e 01       	movw	r14, r28
    236c:	a1 e2       	ldi	r26, 0x21	; 33
    236e:	ea 0e       	add	r14, r26
    2370:	f1 1c       	adc	r15, r1
    2372:	86 2c       	mov	r8, r6
    2374:	91 2c       	mov	r9, r1
    2376:	a1 2c       	mov	r10, r1
    2378:	b1 2c       	mov	r11, r1
    237a:	67 2d       	mov	r22, r7
    237c:	73 2f       	mov	r23, r19
    237e:	a5 01       	movw	r20, r10
    2380:	94 01       	movw	r18, r8
    2382:	0e 94 d1 22 	call	0x45a2	; 0x45a2 <__udivmodsi4>
    2386:	e2 2f       	mov	r30, r18
    2388:	73 2f       	mov	r23, r19
    238a:	02 2f       	mov	r16, r18
    238c:	13 2f       	mov	r17, r19
    238e:	24 2f       	mov	r18, r20
    2390:	35 2f       	mov	r19, r21
    2392:	f7 2d       	mov	r31, r7
    2394:	6e 9e       	mul	r6, r30
    2396:	f0 19       	sub	r31, r0
    2398:	11 24       	eor	r1, r1
    239a:	b1 e0       	ldi	r27, 0x01	; 1
    239c:	eb 1a       	sub	r14, r27
    239e:	f1 08       	sbc	r15, r1
    23a0:	fa 30       	cpi	r31, 0x0A	; 10
    23a2:	10 f4       	brcc	.+4      	; 0x23a8 <_ZN5Print11printNumberEmh+0x86>
    23a4:	f0 5d       	subi	r31, 0xD0	; 208
    23a6:	01 c0       	rjmp	.+2      	; 0x23aa <_ZN5Print11printNumberEmh+0x88>
    23a8:	f9 5c       	subi	r31, 0xC9	; 201
    23aa:	d7 01       	movw	r26, r14
    23ac:	fc 93       	st	X, r31
    23ae:	01 2b       	or	r16, r17
    23b0:	02 2b       	or	r16, r18
    23b2:	03 2b       	or	r16, r19
    23b4:	29 f0       	breq	.+10     	; 0x23c0 <_ZN5Print11printNumberEmh+0x9e>
    23b6:	7e 2e       	mov	r7, r30
    23b8:	37 2f       	mov	r19, r23
    23ba:	84 2f       	mov	r24, r20
    23bc:	95 2f       	mov	r25, r21
    23be:	dd cf       	rjmp	.-70     	; 0x237a <_ZN5Print11printNumberEmh+0x58>
    23c0:	e1 14       	cp	r14, r1
    23c2:	f1 04       	cpc	r15, r1
    23c4:	91 f0       	breq	.+36     	; 0x23ea <_ZN5Print11printNumberEmh+0xc8>
    23c6:	f7 01       	movw	r30, r14
    23c8:	01 90       	ld	r0, Z+
    23ca:	00 20       	and	r0, r0
    23cc:	e9 f7       	brne	.-6      	; 0x23c8 <_ZN5Print11printNumberEmh+0xa6>
    23ce:	31 97       	sbiw	r30, 0x01	; 1
    23d0:	af 01       	movw	r20, r30
    23d2:	4e 19       	sub	r20, r14
    23d4:	5f 09       	sbc	r21, r15
    23d6:	d6 01       	movw	r26, r12
    23d8:	ed 91       	ld	r30, X+
    23da:	fc 91       	ld	r31, X
    23dc:	02 80       	ldd	r0, Z+2	; 0x02
    23de:	f3 81       	ldd	r31, Z+3	; 0x03
    23e0:	e0 2d       	mov	r30, r0
    23e2:	b7 01       	movw	r22, r14
    23e4:	c6 01       	movw	r24, r12
    23e6:	19 95       	eicall
    23e8:	02 c0       	rjmp	.+4      	; 0x23ee <_ZN5Print11printNumberEmh+0xcc>
    23ea:	80 e0       	ldi	r24, 0x00	; 0
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	a1 96       	adiw	r28, 0x21	; 33
    23f0:	0f b6       	in	r0, 0x3f	; 63
    23f2:	f8 94       	cli
    23f4:	de bf       	out	0x3e, r29	; 62
    23f6:	0f be       	out	0x3f, r0	; 63
    23f8:	cd bf       	out	0x3d, r28	; 61
    23fa:	df 91       	pop	r29
    23fc:	cf 91       	pop	r28
    23fe:	1f 91       	pop	r17
    2400:	0f 91       	pop	r16
    2402:	ff 90       	pop	r15
    2404:	ef 90       	pop	r14
    2406:	df 90       	pop	r13
    2408:	cf 90       	pop	r12
    240a:	bf 90       	pop	r11
    240c:	af 90       	pop	r10
    240e:	9f 90       	pop	r9
    2410:	8f 90       	pop	r8
    2412:	7f 90       	pop	r7
    2414:	6f 90       	pop	r6
    2416:	08 95       	ret

00002418 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    2418:	21 15       	cp	r18, r1
    241a:	31 05       	cpc	r19, r1
    241c:	49 f4       	brne	.+18     	; 0x2430 <_ZN5Print5printEmi+0x18>
    241e:	dc 01       	movw	r26, r24
    2420:	ed 91       	ld	r30, X+
    2422:	fc 91       	ld	r31, X
    2424:	01 90       	ld	r0, Z+
    2426:	f0 81       	ld	r31, Z
    2428:	e0 2d       	mov	r30, r0
    242a:	64 2f       	mov	r22, r20
    242c:	19 95       	eicall
    242e:	08 95       	ret
  else return printNumber(n, base);
    2430:	78 cf       	rjmp	.-272    	; 0x2322 <_ZN5Print11printNumberEmh>
}
    2432:	08 95       	ret

00002434 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    2434:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    2436:	46 2f       	mov	r20, r22
    2438:	50 e0       	ldi	r21, 0x00	; 0
    243a:	60 e0       	ldi	r22, 0x00	; 0
    243c:	70 e0       	ldi	r23, 0x00	; 0
    243e:	ec cf       	rjmp	.-40     	; 0x2418 <_ZN5Print5printEmi>
}
    2440:	08 95       	ret

00002442 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    2442:	82 30       	cpi	r24, 0x02	; 2
    2444:	a9 f0       	breq	.+42     	; 0x2470 <_Z12disableTimerh+0x2e>
    2446:	28 f4       	brcc	.+10     	; 0x2452 <_Z12disableTimerh+0x10>
    2448:	88 23       	and	r24, r24
    244a:	49 f0       	breq	.+18     	; 0x245e <_Z12disableTimerh+0x1c>
    244c:	81 30       	cpi	r24, 0x01	; 1
    244e:	51 f0       	breq	.+20     	; 0x2464 <_Z12disableTimerh+0x22>
    2450:	08 95       	ret
    2452:	84 30       	cpi	r24, 0x04	; 4
    2454:	09 f1       	breq	.+66     	; 0x2498 <_Z12disableTimerh+0x56>
    2456:	e8 f0       	brcs	.+58     	; 0x2492 <_Z12disableTimerh+0x50>
    2458:	85 30       	cpi	r24, 0x05	; 5
    245a:	09 f1       	breq	.+66     	; 0x249e <_Z12disableTimerh+0x5c>
    245c:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    245e:	10 92 6e 00 	sts	0x006E, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
    2462:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    2464:	ef e6       	ldi	r30, 0x6F	; 111
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	80 81       	ld	r24, Z
    246a:	8d 7f       	andi	r24, 0xFD	; 253
    246c:	80 83       	st	Z, r24
      break;
    246e:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    2470:	e0 e7       	ldi	r30, 0x70	; 112
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	80 81       	ld	r24, Z
    2476:	8d 7f       	andi	r24, 0xFD	; 253
    2478:	80 83       	st	Z, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
    2480:	e1 eb       	ldi	r30, 0xB1	; 177
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	80 81       	ld	r24, Z
    2486:	88 7f       	andi	r24, 0xF8	; 248
    2488:	84 60       	ori	r24, 0x04	; 4
    248a:	80 83       	st	Z, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    248c:	10 92 b3 00 	sts	0x00B3, r1
      #endif
      break;
    2490:	08 95       	ret

#if defined(TIMSK3)
    case 3:
      TIMSK3 = 0;
    2492:	10 92 71 00 	sts	0x0071, r1
      break;
    2496:	08 95       	ret
#endif

#if defined(TIMSK4)
    case 4:
      TIMSK4 = 0;
    2498:	10 92 72 00 	sts	0x0072, r1
      break;
    249c:	08 95       	ret
#endif

#if defined(TIMSK5)
    case 5:
      TIMSK5 = 0;
    249e:	10 92 73 00 	sts	0x0073, r1
    24a2:	08 95       	ret

000024a4 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
    24a4:	cf 93       	push	r28
    24a6:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    24a8:	80 91 06 02 	lds	r24, 0x0206
    24ac:	8c 13       	cpse	r24, r28
    24ae:	07 c0       	rjmp	.+14     	; 0x24be <_Z6noToneh+0x1a>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    24b0:	e3 e0       	ldi	r30, 0x03	; 3
    24b2:	f6 e0       	ldi	r31, 0x06	; 6
    24b4:	84 91       	lpm	r24, Z
      tone_pins[i] = 255;
    24b6:	9f ef       	ldi	r25, 0xFF	; 255
    24b8:	90 93 06 02 	sts	0x0206, r25
    24bc:	01 c0       	rjmp	.+2      	; 0x24c0 <_Z6noToneh+0x1c>
    24be:	8f ef       	ldi	r24, 0xFF	; 255
    }
  }
  
  disableTimer(_timer);
    24c0:	c0 df       	rcall	.-128    	; 0x2442 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
    24c2:	60 e0       	ldi	r22, 0x00	; 0
    24c4:	8c 2f       	mov	r24, r28
    24c6:	f5 d2       	rcall	.+1514   	; 0x2ab2 <digitalWrite>
}
    24c8:	cf 91       	pop	r28
    24ca:	08 95       	ret

000024cc <__vector_13>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
    24cc:	1f 92       	push	r1
    24ce:	0f 92       	push	r0
    24d0:	0f b6       	in	r0, 0x3f	; 63
    24d2:	0f 92       	push	r0
    24d4:	11 24       	eor	r1, r1
    24d6:	0b b6       	in	r0, 0x3b	; 59
    24d8:	0f 92       	push	r0
    24da:	2f 93       	push	r18
    24dc:	3f 93       	push	r19
    24de:	4f 93       	push	r20
    24e0:	5f 93       	push	r21
    24e2:	6f 93       	push	r22
    24e4:	7f 93       	push	r23
    24e6:	8f 93       	push	r24
    24e8:	9f 93       	push	r25
    24ea:	af 93       	push	r26
    24ec:	bf 93       	push	r27
    24ee:	ef 93       	push	r30
    24f0:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
    24f2:	80 91 61 06 	lds	r24, 0x0661
    24f6:	90 91 62 06 	lds	r25, 0x0662
    24fa:	a0 91 63 06 	lds	r26, 0x0663
    24fe:	b0 91 64 06 	lds	r27, 0x0664
    2502:	89 2b       	or	r24, r25
    2504:	8a 2b       	or	r24, r26
    2506:	8b 2b       	or	r24, r27
    2508:	51 f1       	breq	.+84     	; 0x255e <__vector_13+0x92>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    250a:	80 91 5e 06 	lds	r24, 0x065E
    250e:	e0 91 5f 06 	lds	r30, 0x065F
    2512:	f0 91 60 06 	lds	r31, 0x0660
    2516:	90 81       	ld	r25, Z
    2518:	89 27       	eor	r24, r25
    251a:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
    251c:	80 91 61 06 	lds	r24, 0x0661
    2520:	90 91 62 06 	lds	r25, 0x0662
    2524:	a0 91 63 06 	lds	r26, 0x0663
    2528:	b0 91 64 06 	lds	r27, 0x0664
    252c:	18 16       	cp	r1, r24
    252e:	19 06       	cpc	r1, r25
    2530:	1a 06       	cpc	r1, r26
    2532:	1b 06       	cpc	r1, r27
    2534:	bc f4       	brge	.+46     	; 0x2564 <__vector_13+0x98>
      timer2_toggle_count--;
    2536:	80 91 61 06 	lds	r24, 0x0661
    253a:	90 91 62 06 	lds	r25, 0x0662
    253e:	a0 91 63 06 	lds	r26, 0x0663
    2542:	b0 91 64 06 	lds	r27, 0x0664
    2546:	01 97       	sbiw	r24, 0x01	; 1
    2548:	a1 09       	sbc	r26, r1
    254a:	b1 09       	sbc	r27, r1
    254c:	80 93 61 06 	sts	0x0661, r24
    2550:	90 93 62 06 	sts	0x0662, r25
    2554:	a0 93 63 06 	sts	0x0663, r26
    2558:	b0 93 64 06 	sts	0x0664, r27
    255c:	03 c0       	rjmp	.+6      	; 0x2564 <__vector_13+0x98>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    255e:	80 91 06 02 	lds	r24, 0x0206
    2562:	a0 df       	rcall	.-192    	; 0x24a4 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    2564:	ff 91       	pop	r31
    2566:	ef 91       	pop	r30
    2568:	bf 91       	pop	r27
    256a:	af 91       	pop	r26
    256c:	9f 91       	pop	r25
    256e:	8f 91       	pop	r24
    2570:	7f 91       	pop	r23
    2572:	6f 91       	pop	r22
    2574:	5f 91       	pop	r21
    2576:	4f 91       	pop	r20
    2578:	3f 91       	pop	r19
    257a:	2f 91       	pop	r18
    257c:	0f 90       	pop	r0
    257e:	0b be       	out	0x3b, r0	; 59
    2580:	0f 90       	pop	r0
    2582:	0f be       	out	0x3f, r0	; 63
    2584:	0f 90       	pop	r0
    2586:	1f 90       	pop	r1
    2588:	18 95       	reti

0000258a <__vector_1>:
		intFunc[EXTERNAL_INT_4]();
}

#elif defined(EICRA) && defined(EICRB)

ISR(INT0_vect) {
    258a:	1f 92       	push	r1
    258c:	0f 92       	push	r0
    258e:	0f b6       	in	r0, 0x3f	; 63
    2590:	0f 92       	push	r0
    2592:	11 24       	eor	r1, r1
    2594:	0b b6       	in	r0, 0x3b	; 59
    2596:	0f 92       	push	r0
    2598:	2f 93       	push	r18
    259a:	3f 93       	push	r19
    259c:	4f 93       	push	r20
    259e:	5f 93       	push	r21
    25a0:	6f 93       	push	r22
    25a2:	7f 93       	push	r23
    25a4:	8f 93       	push	r24
    25a6:	9f 93       	push	r25
    25a8:	af 93       	push	r26
    25aa:	bf 93       	push	r27
    25ac:	ef 93       	push	r30
    25ae:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_2])
    25b0:	80 91 69 06 	lds	r24, 0x0669
    25b4:	90 91 6a 06 	lds	r25, 0x066A
    25b8:	89 2b       	or	r24, r25
    25ba:	29 f0       	breq	.+10     	; 0x25c6 <__vector_1+0x3c>
    intFunc[EXTERNAL_INT_2]();
    25bc:	e0 91 69 06 	lds	r30, 0x0669
    25c0:	f0 91 6a 06 	lds	r31, 0x066A
    25c4:	19 95       	eicall
}
    25c6:	ff 91       	pop	r31
    25c8:	ef 91       	pop	r30
    25ca:	bf 91       	pop	r27
    25cc:	af 91       	pop	r26
    25ce:	9f 91       	pop	r25
    25d0:	8f 91       	pop	r24
    25d2:	7f 91       	pop	r23
    25d4:	6f 91       	pop	r22
    25d6:	5f 91       	pop	r21
    25d8:	4f 91       	pop	r20
    25da:	3f 91       	pop	r19
    25dc:	2f 91       	pop	r18
    25de:	0f 90       	pop	r0
    25e0:	0b be       	out	0x3b, r0	; 59
    25e2:	0f 90       	pop	r0
    25e4:	0f be       	out	0x3f, r0	; 63
    25e6:	0f 90       	pop	r0
    25e8:	1f 90       	pop	r1
    25ea:	18 95       	reti

000025ec <__vector_2>:

ISR(INT1_vect) {
    25ec:	1f 92       	push	r1
    25ee:	0f 92       	push	r0
    25f0:	0f b6       	in	r0, 0x3f	; 63
    25f2:	0f 92       	push	r0
    25f4:	11 24       	eor	r1, r1
    25f6:	0b b6       	in	r0, 0x3b	; 59
    25f8:	0f 92       	push	r0
    25fa:	2f 93       	push	r18
    25fc:	3f 93       	push	r19
    25fe:	4f 93       	push	r20
    2600:	5f 93       	push	r21
    2602:	6f 93       	push	r22
    2604:	7f 93       	push	r23
    2606:	8f 93       	push	r24
    2608:	9f 93       	push	r25
    260a:	af 93       	push	r26
    260c:	bf 93       	push	r27
    260e:	ef 93       	push	r30
    2610:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_3])
    2612:	80 91 6b 06 	lds	r24, 0x066B
    2616:	90 91 6c 06 	lds	r25, 0x066C
    261a:	89 2b       	or	r24, r25
    261c:	29 f0       	breq	.+10     	; 0x2628 <__vector_2+0x3c>
    intFunc[EXTERNAL_INT_3]();
    261e:	e0 91 6b 06 	lds	r30, 0x066B
    2622:	f0 91 6c 06 	lds	r31, 0x066C
    2626:	19 95       	eicall
}
    2628:	ff 91       	pop	r31
    262a:	ef 91       	pop	r30
    262c:	bf 91       	pop	r27
    262e:	af 91       	pop	r26
    2630:	9f 91       	pop	r25
    2632:	8f 91       	pop	r24
    2634:	7f 91       	pop	r23
    2636:	6f 91       	pop	r22
    2638:	5f 91       	pop	r21
    263a:	4f 91       	pop	r20
    263c:	3f 91       	pop	r19
    263e:	2f 91       	pop	r18
    2640:	0f 90       	pop	r0
    2642:	0b be       	out	0x3b, r0	; 59
    2644:	0f 90       	pop	r0
    2646:	0f be       	out	0x3f, r0	; 63
    2648:	0f 90       	pop	r0
    264a:	1f 90       	pop	r1
    264c:	18 95       	reti

0000264e <__vector_3>:

ISR(INT2_vect) {
    264e:	1f 92       	push	r1
    2650:	0f 92       	push	r0
    2652:	0f b6       	in	r0, 0x3f	; 63
    2654:	0f 92       	push	r0
    2656:	11 24       	eor	r1, r1
    2658:	0b b6       	in	r0, 0x3b	; 59
    265a:	0f 92       	push	r0
    265c:	2f 93       	push	r18
    265e:	3f 93       	push	r19
    2660:	4f 93       	push	r20
    2662:	5f 93       	push	r21
    2664:	6f 93       	push	r22
    2666:	7f 93       	push	r23
    2668:	8f 93       	push	r24
    266a:	9f 93       	push	r25
    266c:	af 93       	push	r26
    266e:	bf 93       	push	r27
    2670:	ef 93       	push	r30
    2672:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_4])
    2674:	80 91 6d 06 	lds	r24, 0x066D
    2678:	90 91 6e 06 	lds	r25, 0x066E
    267c:	89 2b       	or	r24, r25
    267e:	29 f0       	breq	.+10     	; 0x268a <__vector_3+0x3c>
    intFunc[EXTERNAL_INT_4]();
    2680:	e0 91 6d 06 	lds	r30, 0x066D
    2684:	f0 91 6e 06 	lds	r31, 0x066E
    2688:	19 95       	eicall
}
    268a:	ff 91       	pop	r31
    268c:	ef 91       	pop	r30
    268e:	bf 91       	pop	r27
    2690:	af 91       	pop	r26
    2692:	9f 91       	pop	r25
    2694:	8f 91       	pop	r24
    2696:	7f 91       	pop	r23
    2698:	6f 91       	pop	r22
    269a:	5f 91       	pop	r21
    269c:	4f 91       	pop	r20
    269e:	3f 91       	pop	r19
    26a0:	2f 91       	pop	r18
    26a2:	0f 90       	pop	r0
    26a4:	0b be       	out	0x3b, r0	; 59
    26a6:	0f 90       	pop	r0
    26a8:	0f be       	out	0x3f, r0	; 63
    26aa:	0f 90       	pop	r0
    26ac:	1f 90       	pop	r1
    26ae:	18 95       	reti

000026b0 <__vector_4>:

ISR(INT3_vect) {
    26b0:	1f 92       	push	r1
    26b2:	0f 92       	push	r0
    26b4:	0f b6       	in	r0, 0x3f	; 63
    26b6:	0f 92       	push	r0
    26b8:	11 24       	eor	r1, r1
    26ba:	0b b6       	in	r0, 0x3b	; 59
    26bc:	0f 92       	push	r0
    26be:	2f 93       	push	r18
    26c0:	3f 93       	push	r19
    26c2:	4f 93       	push	r20
    26c4:	5f 93       	push	r21
    26c6:	6f 93       	push	r22
    26c8:	7f 93       	push	r23
    26ca:	8f 93       	push	r24
    26cc:	9f 93       	push	r25
    26ce:	af 93       	push	r26
    26d0:	bf 93       	push	r27
    26d2:	ef 93       	push	r30
    26d4:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_5])
    26d6:	80 91 6f 06 	lds	r24, 0x066F
    26da:	90 91 70 06 	lds	r25, 0x0670
    26de:	89 2b       	or	r24, r25
    26e0:	29 f0       	breq	.+10     	; 0x26ec <__vector_4+0x3c>
    intFunc[EXTERNAL_INT_5]();
    26e2:	e0 91 6f 06 	lds	r30, 0x066F
    26e6:	f0 91 70 06 	lds	r31, 0x0670
    26ea:	19 95       	eicall
}
    26ec:	ff 91       	pop	r31
    26ee:	ef 91       	pop	r30
    26f0:	bf 91       	pop	r27
    26f2:	af 91       	pop	r26
    26f4:	9f 91       	pop	r25
    26f6:	8f 91       	pop	r24
    26f8:	7f 91       	pop	r23
    26fa:	6f 91       	pop	r22
    26fc:	5f 91       	pop	r21
    26fe:	4f 91       	pop	r20
    2700:	3f 91       	pop	r19
    2702:	2f 91       	pop	r18
    2704:	0f 90       	pop	r0
    2706:	0b be       	out	0x3b, r0	; 59
    2708:	0f 90       	pop	r0
    270a:	0f be       	out	0x3f, r0	; 63
    270c:	0f 90       	pop	r0
    270e:	1f 90       	pop	r1
    2710:	18 95       	reti

00002712 <__vector_5>:

ISR(INT4_vect) {
    2712:	1f 92       	push	r1
    2714:	0f 92       	push	r0
    2716:	0f b6       	in	r0, 0x3f	; 63
    2718:	0f 92       	push	r0
    271a:	11 24       	eor	r1, r1
    271c:	0b b6       	in	r0, 0x3b	; 59
    271e:	0f 92       	push	r0
    2720:	2f 93       	push	r18
    2722:	3f 93       	push	r19
    2724:	4f 93       	push	r20
    2726:	5f 93       	push	r21
    2728:	6f 93       	push	r22
    272a:	7f 93       	push	r23
    272c:	8f 93       	push	r24
    272e:	9f 93       	push	r25
    2730:	af 93       	push	r26
    2732:	bf 93       	push	r27
    2734:	ef 93       	push	r30
    2736:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    2738:	80 91 65 06 	lds	r24, 0x0665
    273c:	90 91 66 06 	lds	r25, 0x0666
    2740:	89 2b       	or	r24, r25
    2742:	29 f0       	breq	.+10     	; 0x274e <__vector_5+0x3c>
    intFunc[EXTERNAL_INT_0]();
    2744:	e0 91 65 06 	lds	r30, 0x0665
    2748:	f0 91 66 06 	lds	r31, 0x0666
    274c:	19 95       	eicall
}
    274e:	ff 91       	pop	r31
    2750:	ef 91       	pop	r30
    2752:	bf 91       	pop	r27
    2754:	af 91       	pop	r26
    2756:	9f 91       	pop	r25
    2758:	8f 91       	pop	r24
    275a:	7f 91       	pop	r23
    275c:	6f 91       	pop	r22
    275e:	5f 91       	pop	r21
    2760:	4f 91       	pop	r20
    2762:	3f 91       	pop	r19
    2764:	2f 91       	pop	r18
    2766:	0f 90       	pop	r0
    2768:	0b be       	out	0x3b, r0	; 59
    276a:	0f 90       	pop	r0
    276c:	0f be       	out	0x3f, r0	; 63
    276e:	0f 90       	pop	r0
    2770:	1f 90       	pop	r1
    2772:	18 95       	reti

00002774 <__vector_6>:

ISR(INT5_vect) {
    2774:	1f 92       	push	r1
    2776:	0f 92       	push	r0
    2778:	0f b6       	in	r0, 0x3f	; 63
    277a:	0f 92       	push	r0
    277c:	11 24       	eor	r1, r1
    277e:	0b b6       	in	r0, 0x3b	; 59
    2780:	0f 92       	push	r0
    2782:	2f 93       	push	r18
    2784:	3f 93       	push	r19
    2786:	4f 93       	push	r20
    2788:	5f 93       	push	r21
    278a:	6f 93       	push	r22
    278c:	7f 93       	push	r23
    278e:	8f 93       	push	r24
    2790:	9f 93       	push	r25
    2792:	af 93       	push	r26
    2794:	bf 93       	push	r27
    2796:	ef 93       	push	r30
    2798:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    279a:	80 91 67 06 	lds	r24, 0x0667
    279e:	90 91 68 06 	lds	r25, 0x0668
    27a2:	89 2b       	or	r24, r25
    27a4:	29 f0       	breq	.+10     	; 0x27b0 <__vector_6+0x3c>
    intFunc[EXTERNAL_INT_1]();
    27a6:	e0 91 67 06 	lds	r30, 0x0667
    27aa:	f0 91 68 06 	lds	r31, 0x0668
    27ae:	19 95       	eicall
}
    27b0:	ff 91       	pop	r31
    27b2:	ef 91       	pop	r30
    27b4:	bf 91       	pop	r27
    27b6:	af 91       	pop	r26
    27b8:	9f 91       	pop	r25
    27ba:	8f 91       	pop	r24
    27bc:	7f 91       	pop	r23
    27be:	6f 91       	pop	r22
    27c0:	5f 91       	pop	r21
    27c2:	4f 91       	pop	r20
    27c4:	3f 91       	pop	r19
    27c6:	2f 91       	pop	r18
    27c8:	0f 90       	pop	r0
    27ca:	0b be       	out	0x3b, r0	; 59
    27cc:	0f 90       	pop	r0
    27ce:	0f be       	out	0x3f, r0	; 63
    27d0:	0f 90       	pop	r0
    27d2:	1f 90       	pop	r1
    27d4:	18 95       	reti

000027d6 <__vector_7>:

ISR(INT6_vect) {
    27d6:	1f 92       	push	r1
    27d8:	0f 92       	push	r0
    27da:	0f b6       	in	r0, 0x3f	; 63
    27dc:	0f 92       	push	r0
    27de:	11 24       	eor	r1, r1
    27e0:	0b b6       	in	r0, 0x3b	; 59
    27e2:	0f 92       	push	r0
    27e4:	2f 93       	push	r18
    27e6:	3f 93       	push	r19
    27e8:	4f 93       	push	r20
    27ea:	5f 93       	push	r21
    27ec:	6f 93       	push	r22
    27ee:	7f 93       	push	r23
    27f0:	8f 93       	push	r24
    27f2:	9f 93       	push	r25
    27f4:	af 93       	push	r26
    27f6:	bf 93       	push	r27
    27f8:	ef 93       	push	r30
    27fa:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_6])
    27fc:	80 91 71 06 	lds	r24, 0x0671
    2800:	90 91 72 06 	lds	r25, 0x0672
    2804:	89 2b       	or	r24, r25
    2806:	29 f0       	breq	.+10     	; 0x2812 <__vector_7+0x3c>
    intFunc[EXTERNAL_INT_6]();
    2808:	e0 91 71 06 	lds	r30, 0x0671
    280c:	f0 91 72 06 	lds	r31, 0x0672
    2810:	19 95       	eicall
}
    2812:	ff 91       	pop	r31
    2814:	ef 91       	pop	r30
    2816:	bf 91       	pop	r27
    2818:	af 91       	pop	r26
    281a:	9f 91       	pop	r25
    281c:	8f 91       	pop	r24
    281e:	7f 91       	pop	r23
    2820:	6f 91       	pop	r22
    2822:	5f 91       	pop	r21
    2824:	4f 91       	pop	r20
    2826:	3f 91       	pop	r19
    2828:	2f 91       	pop	r18
    282a:	0f 90       	pop	r0
    282c:	0b be       	out	0x3b, r0	; 59
    282e:	0f 90       	pop	r0
    2830:	0f be       	out	0x3f, r0	; 63
    2832:	0f 90       	pop	r0
    2834:	1f 90       	pop	r1
    2836:	18 95       	reti

00002838 <__vector_8>:

ISR(INT7_vect) {
    2838:	1f 92       	push	r1
    283a:	0f 92       	push	r0
    283c:	0f b6       	in	r0, 0x3f	; 63
    283e:	0f 92       	push	r0
    2840:	11 24       	eor	r1, r1
    2842:	0b b6       	in	r0, 0x3b	; 59
    2844:	0f 92       	push	r0
    2846:	2f 93       	push	r18
    2848:	3f 93       	push	r19
    284a:	4f 93       	push	r20
    284c:	5f 93       	push	r21
    284e:	6f 93       	push	r22
    2850:	7f 93       	push	r23
    2852:	8f 93       	push	r24
    2854:	9f 93       	push	r25
    2856:	af 93       	push	r26
    2858:	bf 93       	push	r27
    285a:	ef 93       	push	r30
    285c:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_7])
    285e:	80 91 73 06 	lds	r24, 0x0673
    2862:	90 91 74 06 	lds	r25, 0x0674
    2866:	89 2b       	or	r24, r25
    2868:	29 f0       	breq	.+10     	; 0x2874 <__vector_8+0x3c>
    intFunc[EXTERNAL_INT_7]();
    286a:	e0 91 73 06 	lds	r30, 0x0673
    286e:	f0 91 74 06 	lds	r31, 0x0674
    2872:	19 95       	eicall
}
    2874:	ff 91       	pop	r31
    2876:	ef 91       	pop	r30
    2878:	bf 91       	pop	r27
    287a:	af 91       	pop	r26
    287c:	9f 91       	pop	r25
    287e:	8f 91       	pop	r24
    2880:	7f 91       	pop	r23
    2882:	6f 91       	pop	r22
    2884:	5f 91       	pop	r21
    2886:	4f 91       	pop	r20
    2888:	3f 91       	pop	r19
    288a:	2f 91       	pop	r18
    288c:	0f 90       	pop	r0
    288e:	0b be       	out	0x3b, r0	; 59
    2890:	0f 90       	pop	r0
    2892:	0f be       	out	0x3f, r0	; 63
    2894:	0f 90       	pop	r0
    2896:	1f 90       	pop	r1
    2898:	18 95       	reti

0000289a <__vector_23>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    289a:	1f 92       	push	r1
    289c:	0f 92       	push	r0
    289e:	0f b6       	in	r0, 0x3f	; 63
    28a0:	0f 92       	push	r0
    28a2:	11 24       	eor	r1, r1
    28a4:	2f 93       	push	r18
    28a6:	3f 93       	push	r19
    28a8:	8f 93       	push	r24
    28aa:	9f 93       	push	r25
    28ac:	af 93       	push	r26
    28ae:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    28b0:	80 91 76 06 	lds	r24, 0x0676
    28b4:	90 91 77 06 	lds	r25, 0x0677
    28b8:	a0 91 78 06 	lds	r26, 0x0678
    28bc:	b0 91 79 06 	lds	r27, 0x0679
	unsigned char f = timer0_fract;
    28c0:	30 91 75 06 	lds	r19, 0x0675

	m += MILLIS_INC;
	f += FRACT_INC;
    28c4:	23 e0       	ldi	r18, 0x03	; 3
    28c6:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    28c8:	2d 37       	cpi	r18, 0x7D	; 125
    28ca:	20 f4       	brcc	.+8      	; 0x28d4 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    28cc:	01 96       	adiw	r24, 0x01	; 1
    28ce:	a1 1d       	adc	r26, r1
    28d0:	b1 1d       	adc	r27, r1
    28d2:	05 c0       	rjmp	.+10     	; 0x28de <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    28d4:	26 e8       	ldi	r18, 0x86	; 134
    28d6:	23 0f       	add	r18, r19
		m += 1;
    28d8:	02 96       	adiw	r24, 0x02	; 2
    28da:	a1 1d       	adc	r26, r1
    28dc:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    28de:	20 93 75 06 	sts	0x0675, r18
	timer0_millis = m;
    28e2:	80 93 76 06 	sts	0x0676, r24
    28e6:	90 93 77 06 	sts	0x0677, r25
    28ea:	a0 93 78 06 	sts	0x0678, r26
    28ee:	b0 93 79 06 	sts	0x0679, r27
	timer0_overflow_count++;
    28f2:	80 91 7a 06 	lds	r24, 0x067A
    28f6:	90 91 7b 06 	lds	r25, 0x067B
    28fa:	a0 91 7c 06 	lds	r26, 0x067C
    28fe:	b0 91 7d 06 	lds	r27, 0x067D
    2902:	01 96       	adiw	r24, 0x01	; 1
    2904:	a1 1d       	adc	r26, r1
    2906:	b1 1d       	adc	r27, r1
    2908:	80 93 7a 06 	sts	0x067A, r24
    290c:	90 93 7b 06 	sts	0x067B, r25
    2910:	a0 93 7c 06 	sts	0x067C, r26
    2914:	b0 93 7d 06 	sts	0x067D, r27
}
    2918:	bf 91       	pop	r27
    291a:	af 91       	pop	r26
    291c:	9f 91       	pop	r25
    291e:	8f 91       	pop	r24
    2920:	3f 91       	pop	r19
    2922:	2f 91       	pop	r18
    2924:	0f 90       	pop	r0
    2926:	0f be       	out	0x3f, r0	; 63
    2928:	0f 90       	pop	r0
    292a:	1f 90       	pop	r1
    292c:	18 95       	reti

0000292e <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    292e:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    2930:	f8 94       	cli
	m = timer0_millis;
    2932:	60 91 76 06 	lds	r22, 0x0676
    2936:	70 91 77 06 	lds	r23, 0x0677
    293a:	80 91 78 06 	lds	r24, 0x0678
    293e:	90 91 79 06 	lds	r25, 0x0679
	SREG = oldSREG;
    2942:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    2944:	08 95       	ret

00002946 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2946:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    2948:	f8 94       	cli
	m = timer0_overflow_count;
    294a:	80 91 7a 06 	lds	r24, 0x067A
    294e:	90 91 7b 06 	lds	r25, 0x067B
    2952:	a0 91 7c 06 	lds	r26, 0x067C
    2956:	b0 91 7d 06 	lds	r27, 0x067D
#if defined(TCNT0)
	t = TCNT0;
    295a:	26 b5       	in	r18, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    295c:	a8 9b       	sbis	0x15, 0	; 21
    295e:	05 c0       	rjmp	.+10     	; 0x296a <micros+0x24>
    2960:	2f 3f       	cpi	r18, 0xFF	; 255
    2962:	19 f0       	breq	.+6      	; 0x296a <micros+0x24>
		m++;
    2964:	01 96       	adiw	r24, 0x01	; 1
    2966:	a1 1d       	adc	r26, r1
    2968:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    296a:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    296c:	ba 2f       	mov	r27, r26
    296e:	a9 2f       	mov	r26, r25
    2970:	98 2f       	mov	r25, r24
    2972:	88 27       	eor	r24, r24
    2974:	82 0f       	add	r24, r18
    2976:	91 1d       	adc	r25, r1
    2978:	a1 1d       	adc	r26, r1
    297a:	b1 1d       	adc	r27, r1
    297c:	bc 01       	movw	r22, r24
    297e:	cd 01       	movw	r24, r26
    2980:	66 0f       	add	r22, r22
    2982:	77 1f       	adc	r23, r23
    2984:	88 1f       	adc	r24, r24
    2986:	99 1f       	adc	r25, r25
    2988:	66 0f       	add	r22, r22
    298a:	77 1f       	adc	r23, r23
    298c:	88 1f       	adc	r24, r24
    298e:	99 1f       	adc	r25, r25
}
    2990:	08 95       	ret

00002992 <delay>:

void delay(unsigned long ms)
{
    2992:	cf 92       	push	r12
    2994:	df 92       	push	r13
    2996:	ef 92       	push	r14
    2998:	ff 92       	push	r15
    299a:	cf 93       	push	r28
    299c:	df 93       	push	r29
    299e:	6b 01       	movw	r12, r22
    29a0:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
    29a2:	d1 df       	rcall	.-94     	; 0x2946 <micros>
    29a4:	eb 01       	movw	r28, r22

	while (ms > 0) {
    29a6:	c1 14       	cp	r12, r1
    29a8:	d1 04       	cpc	r13, r1
    29aa:	e1 04       	cpc	r14, r1
    29ac:	f1 04       	cpc	r15, r1
    29ae:	99 f0       	breq	.+38     	; 0x29d6 <delay+0x44>
		yield();
    29b0:	d7 db       	rcall	.-2130   	; 0x2160 <yield>
		if (((uint16_t)micros() - start) >= 1000) {
    29b2:	c9 df       	rcall	.-110    	; 0x2946 <micros>
    29b4:	6c 1b       	sub	r22, r28
    29b6:	7d 0b       	sbc	r23, r29
    29b8:	68 3e       	cpi	r22, 0xE8	; 232
    29ba:	73 40       	sbci	r23, 0x03	; 3
    29bc:	38 f0       	brcs	.+14     	; 0x29cc <delay+0x3a>
			ms--;
    29be:	81 e0       	ldi	r24, 0x01	; 1
    29c0:	c8 1a       	sub	r12, r24
    29c2:	d1 08       	sbc	r13, r1
    29c4:	e1 08       	sbc	r14, r1
    29c6:	f1 08       	sbc	r15, r1
			start += 1000;
    29c8:	c8 51       	subi	r28, 0x18	; 24
    29ca:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    29cc:	c1 14       	cp	r12, r1
    29ce:	d1 04       	cpc	r13, r1
    29d0:	e1 04       	cpc	r14, r1
    29d2:	f1 04       	cpc	r15, r1
    29d4:	69 f7       	brne	.-38     	; 0x29b0 <delay+0x1e>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    29d6:	df 91       	pop	r29
    29d8:	cf 91       	pop	r28
    29da:	ff 90       	pop	r15
    29dc:	ef 90       	pop	r14
    29de:	df 90       	pop	r13
    29e0:	cf 90       	pop	r12
    29e2:	08 95       	ret

000029e4 <turnOffPWM>:
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	fc 01       	movw	r30, r24
    29e8:	31 97       	sbiw	r30, 0x01	; 1
    29ea:	e2 31       	cpi	r30, 0x12	; 18
    29ec:	f1 05       	cpc	r31, r1
    29ee:	08 f0       	brcs	.+2      	; 0x29f2 <turnOffPWM+0xe>
    29f0:	5f c0       	rjmp	.+190    	; 0x2ab0 <turnOffPWM+0xcc>
    29f2:	ee 58       	subi	r30, 0x8E	; 142
    29f4:	ff 4f       	sbci	r31, 0xFF	; 255
    29f6:	0c 94 f3 22 	jmp	0x45e6	; 0x45e6 <__tablejump2__>
    29fa:	e0 e8       	ldi	r30, 0x80	; 128
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	80 81       	ld	r24, Z
    2a00:	8f 77       	andi	r24, 0x7F	; 127
    2a02:	80 83       	st	Z, r24
    2a04:	08 95       	ret
    2a06:	e0 e8       	ldi	r30, 0x80	; 128
    2a08:	f0 e0       	ldi	r31, 0x00	; 0
    2a0a:	80 81       	ld	r24, Z
    2a0c:	8f 7d       	andi	r24, 0xDF	; 223
    2a0e:	80 83       	st	Z, r24
    2a10:	08 95       	ret
    2a12:	e0 e8       	ldi	r30, 0x80	; 128
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	80 81       	ld	r24, Z
    2a18:	87 7f       	andi	r24, 0xF7	; 247
    2a1a:	80 83       	st	Z, r24
    2a1c:	08 95       	ret
    2a1e:	84 b5       	in	r24, 0x24	; 36
    2a20:	8f 77       	andi	r24, 0x7F	; 127
    2a22:	84 bd       	out	0x24, r24	; 36
    2a24:	08 95       	ret
    2a26:	84 b5       	in	r24, 0x24	; 36
    2a28:	8f 7d       	andi	r24, 0xDF	; 223
    2a2a:	84 bd       	out	0x24, r24	; 36
    2a2c:	08 95       	ret
    2a2e:	e0 eb       	ldi	r30, 0xB0	; 176
    2a30:	f0 e0       	ldi	r31, 0x00	; 0
    2a32:	80 81       	ld	r24, Z
    2a34:	8f 77       	andi	r24, 0x7F	; 127
    2a36:	80 83       	st	Z, r24
    2a38:	08 95       	ret
    2a3a:	e0 eb       	ldi	r30, 0xB0	; 176
    2a3c:	f0 e0       	ldi	r31, 0x00	; 0
    2a3e:	80 81       	ld	r24, Z
    2a40:	8f 7d       	andi	r24, 0xDF	; 223
    2a42:	80 83       	st	Z, r24
    2a44:	08 95       	ret
    2a46:	e0 e9       	ldi	r30, 0x90	; 144
    2a48:	f0 e0       	ldi	r31, 0x00	; 0
    2a4a:	80 81       	ld	r24, Z
    2a4c:	8f 77       	andi	r24, 0x7F	; 127
    2a4e:	80 83       	st	Z, r24
    2a50:	08 95       	ret
    2a52:	e0 e9       	ldi	r30, 0x90	; 144
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	80 81       	ld	r24, Z
    2a58:	8f 7d       	andi	r24, 0xDF	; 223
    2a5a:	80 83       	st	Z, r24
    2a5c:	08 95       	ret
    2a5e:	e0 e9       	ldi	r30, 0x90	; 144
    2a60:	f0 e0       	ldi	r31, 0x00	; 0
    2a62:	80 81       	ld	r24, Z
    2a64:	87 7f       	andi	r24, 0xF7	; 247
    2a66:	80 83       	st	Z, r24
    2a68:	08 95       	ret
    2a6a:	e0 ea       	ldi	r30, 0xA0	; 160
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	80 81       	ld	r24, Z
    2a70:	8f 77       	andi	r24, 0x7F	; 127
    2a72:	80 83       	st	Z, r24
    2a74:	08 95       	ret
    2a76:	e0 ea       	ldi	r30, 0xA0	; 160
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	80 81       	ld	r24, Z
    2a7c:	8f 7d       	andi	r24, 0xDF	; 223
    2a7e:	80 83       	st	Z, r24
    2a80:	08 95       	ret
    2a82:	e0 ea       	ldi	r30, 0xA0	; 160
    2a84:	f0 e0       	ldi	r31, 0x00	; 0
    2a86:	80 81       	ld	r24, Z
    2a88:	87 7f       	andi	r24, 0xF7	; 247
    2a8a:	80 83       	st	Z, r24
    2a8c:	08 95       	ret
    2a8e:	e0 e2       	ldi	r30, 0x20	; 32
    2a90:	f1 e0       	ldi	r31, 0x01	; 1
    2a92:	80 81       	ld	r24, Z
    2a94:	8f 77       	andi	r24, 0x7F	; 127
    2a96:	80 83       	st	Z, r24
    2a98:	08 95       	ret
    2a9a:	e0 e2       	ldi	r30, 0x20	; 32
    2a9c:	f1 e0       	ldi	r31, 0x01	; 1
    2a9e:	80 81       	ld	r24, Z
    2aa0:	8f 7d       	andi	r24, 0xDF	; 223
    2aa2:	80 83       	st	Z, r24
    2aa4:	08 95       	ret
    2aa6:	e0 e2       	ldi	r30, 0x20	; 32
    2aa8:	f1 e0       	ldi	r31, 0x01	; 1
    2aaa:	80 81       	ld	r24, Z
    2aac:	87 7f       	andi	r24, 0xF7	; 247
    2aae:	80 83       	st	Z, r24
    2ab0:	08 95       	ret

00002ab2 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2ab2:	1f 93       	push	r17
    2ab4:	cf 93       	push	r28
    2ab6:	df 93       	push	r29
    2ab8:	c6 2f       	mov	r28, r22
	uint8_t timer = digitalPinToTimer(pin);
    2aba:	28 2f       	mov	r18, r24
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	f9 01       	movw	r30, r18
    2ac0:	ec 5f       	subi	r30, 0xFC	; 252
    2ac2:	f9 4f       	sbci	r31, 0xF9	; 249
    2ac4:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2ac6:	f9 01       	movw	r30, r18
    2ac8:	e6 5b       	subi	r30, 0xB6	; 182
    2aca:	f9 4f       	sbci	r31, 0xF9	; 249
    2acc:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    2ace:	f9 01       	movw	r30, r18
    2ad0:	e0 57       	subi	r30, 0x70	; 112
    2ad2:	f9 4f       	sbci	r31, 0xF9	; 249
    2ad4:	d4 91       	lpm	r29, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2ad6:	dd 23       	and	r29, r29
    2ad8:	c1 f0       	breq	.+48     	; 0x2b0a <digitalWrite+0x58>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2ada:	81 11       	cpse	r24, r1
    2adc:	83 df       	rcall	.-250    	; 0x29e4 <turnOffPWM>

	out = portOutputRegister(port);
    2ade:	2d 2f       	mov	r18, r29
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	f9 01       	movw	r30, r18
    2ae4:	ee 0f       	add	r30, r30
    2ae6:	ff 1f       	adc	r31, r31
    2ae8:	ea 52       	subi	r30, 0x2A	; 42
    2aea:	f9 4f       	sbci	r31, 0xF9	; 249
    2aec:	a5 91       	lpm	r26, Z+
    2aee:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2af0:	8f b7       	in	r24, 0x3f	; 63
	cli();
    2af2:	f8 94       	cli

	if (val == LOW) {
    2af4:	c1 11       	cpse	r28, r1
    2af6:	05 c0       	rjmp	.+10     	; 0x2b02 <digitalWrite+0x50>
		*out &= ~bit;
    2af8:	ec 91       	ld	r30, X
    2afa:	10 95       	com	r17
    2afc:	1e 23       	and	r17, r30
    2afe:	1c 93       	st	X, r17
    2b00:	03 c0       	rjmp	.+6      	; 0x2b08 <digitalWrite+0x56>
	} else {
		*out |= bit;
    2b02:	ec 91       	ld	r30, X
    2b04:	1e 2b       	or	r17, r30
    2b06:	1c 93       	st	X, r17
	}

	SREG = oldSREG;
    2b08:	8f bf       	out	0x3f, r24	; 63
}
    2b0a:	df 91       	pop	r29
    2b0c:	cf 91       	pop	r28
    2b0e:	1f 91       	pop	r17
    2b10:	08 95       	ret

00002b12 <_ZN6StringD1Ev>:
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
	}
}
    2b12:	fc 01       	movw	r30, r24
    2b14:	80 81       	ld	r24, Z
    2b16:	91 81       	ldd	r25, Z+1	; 0x01
    2b18:	0c 94 95 23 	jmp	0x472a	; 0x472a <free>
    2b1c:	08 95       	ret

00002b1e <_ZN6String10invalidateEv>:
    2b1e:	cf 93       	push	r28
    2b20:	df 93       	push	r29
    2b22:	ec 01       	movw	r28, r24
    2b24:	88 81       	ld	r24, Y
    2b26:	99 81       	ldd	r25, Y+1	; 0x01
    2b28:	00 97       	sbiw	r24, 0x00	; 0
    2b2a:	11 f0       	breq	.+4      	; 0x2b30 <_ZN6String10invalidateEv+0x12>
    2b2c:	0e 94 95 23 	call	0x472a	; 0x472a <free>
    2b30:	19 82       	std	Y+1, r1	; 0x01
    2b32:	18 82       	st	Y, r1
    2b34:	1d 82       	std	Y+5, r1	; 0x05
    2b36:	1c 82       	std	Y+4, r1	; 0x04
    2b38:	1b 82       	std	Y+3, r1	; 0x03
    2b3a:	1a 82       	std	Y+2, r1	; 0x02
    2b3c:	df 91       	pop	r29
    2b3e:	cf 91       	pop	r28
    2b40:	08 95       	ret

00002b42 <_ZN6String12changeBufferEj>:
    2b42:	0f 93       	push	r16
    2b44:	1f 93       	push	r17
    2b46:	cf 93       	push	r28
    2b48:	df 93       	push	r29
    2b4a:	ec 01       	movw	r28, r24
    2b4c:	8b 01       	movw	r16, r22
    2b4e:	6f 5f       	subi	r22, 0xFF	; 255
    2b50:	7f 4f       	sbci	r23, 0xFF	; 255
    2b52:	88 81       	ld	r24, Y
    2b54:	99 81       	ldd	r25, Y+1	; 0x01
    2b56:	0e 94 24 24 	call	0x4848	; 0x4848 <realloc>
    2b5a:	00 97       	sbiw	r24, 0x00	; 0
    2b5c:	31 f0       	breq	.+12     	; 0x2b6a <_ZN6String12changeBufferEj+0x28>
    2b5e:	99 83       	std	Y+1, r25	; 0x01
    2b60:	88 83       	st	Y, r24
    2b62:	1b 83       	std	Y+3, r17	; 0x03
    2b64:	0a 83       	std	Y+2, r16	; 0x02
    2b66:	81 e0       	ldi	r24, 0x01	; 1
    2b68:	01 c0       	rjmp	.+2      	; 0x2b6c <_ZN6String12changeBufferEj+0x2a>
    2b6a:	80 e0       	ldi	r24, 0x00	; 0
    2b6c:	df 91       	pop	r29
    2b6e:	cf 91       	pop	r28
    2b70:	1f 91       	pop	r17
    2b72:	0f 91       	pop	r16
    2b74:	08 95       	ret

00002b76 <_ZN6String7reserveEj>:
    2b76:	cf 93       	push	r28
    2b78:	df 93       	push	r29
    2b7a:	ec 01       	movw	r28, r24
    2b7c:	88 81       	ld	r24, Y
    2b7e:	99 81       	ldd	r25, Y+1	; 0x01
    2b80:	89 2b       	or	r24, r25
    2b82:	29 f0       	breq	.+10     	; 0x2b8e <_ZN6String7reserveEj+0x18>
    2b84:	8a 81       	ldd	r24, Y+2	; 0x02
    2b86:	9b 81       	ldd	r25, Y+3	; 0x03
    2b88:	86 17       	cp	r24, r22
    2b8a:	97 07       	cpc	r25, r23
    2b8c:	68 f4       	brcc	.+26     	; 0x2ba8 <_ZN6String7reserveEj+0x32>
    2b8e:	ce 01       	movw	r24, r28
    2b90:	d8 df       	rcall	.-80     	; 0x2b42 <_ZN6String12changeBufferEj>
    2b92:	88 23       	and	r24, r24
    2b94:	61 f0       	breq	.+24     	; 0x2bae <_ZN6String7reserveEj+0x38>
    2b96:	8c 81       	ldd	r24, Y+4	; 0x04
    2b98:	9d 81       	ldd	r25, Y+5	; 0x05
    2b9a:	89 2b       	or	r24, r25
    2b9c:	39 f4       	brne	.+14     	; 0x2bac <_ZN6String7reserveEj+0x36>
    2b9e:	e8 81       	ld	r30, Y
    2ba0:	f9 81       	ldd	r31, Y+1	; 0x01
    2ba2:	10 82       	st	Z, r1
    2ba4:	81 e0       	ldi	r24, 0x01	; 1
    2ba6:	03 c0       	rjmp	.+6      	; 0x2bae <_ZN6String7reserveEj+0x38>
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	01 c0       	rjmp	.+2      	; 0x2bae <_ZN6String7reserveEj+0x38>
    2bac:	81 e0       	ldi	r24, 0x01	; 1
    2bae:	df 91       	pop	r29
    2bb0:	cf 91       	pop	r28
    2bb2:	08 95       	ret

00002bb4 <_ZN6String4copyEPKcj>:
    2bb4:	ef 92       	push	r14
    2bb6:	ff 92       	push	r15
    2bb8:	0f 93       	push	r16
    2bba:	1f 93       	push	r17
    2bbc:	cf 93       	push	r28
    2bbe:	df 93       	push	r29
    2bc0:	ec 01       	movw	r28, r24
    2bc2:	7b 01       	movw	r14, r22
    2bc4:	8a 01       	movw	r16, r20
    2bc6:	ba 01       	movw	r22, r20
    2bc8:	d6 df       	rcall	.-84     	; 0x2b76 <_ZN6String7reserveEj>
    2bca:	81 11       	cpse	r24, r1
    2bcc:	03 c0       	rjmp	.+6      	; 0x2bd4 <_ZN6String4copyEPKcj+0x20>
    2bce:	ce 01       	movw	r24, r28
    2bd0:	a6 df       	rcall	.-180    	; 0x2b1e <_ZN6String10invalidateEv>
    2bd2:	07 c0       	rjmp	.+14     	; 0x2be2 <_ZN6String4copyEPKcj+0x2e>
    2bd4:	1d 83       	std	Y+5, r17	; 0x05
    2bd6:	0c 83       	std	Y+4, r16	; 0x04
    2bd8:	b7 01       	movw	r22, r14
    2bda:	88 81       	ld	r24, Y
    2bdc:	99 81       	ldd	r25, Y+1	; 0x01
    2bde:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <strcpy>
    2be2:	ce 01       	movw	r24, r28
    2be4:	df 91       	pop	r29
    2be6:	cf 91       	pop	r28
    2be8:	1f 91       	pop	r17
    2bea:	0f 91       	pop	r16
    2bec:	ff 90       	pop	r15
    2bee:	ef 90       	pop	r14
    2bf0:	08 95       	ret

00002bf2 <_ZN6StringC1EPKc>:
    2bf2:	fc 01       	movw	r30, r24
    2bf4:	11 82       	std	Z+1, r1	; 0x01
    2bf6:	10 82       	st	Z, r1
    2bf8:	13 82       	std	Z+3, r1	; 0x03
    2bfa:	12 82       	std	Z+2, r1	; 0x02
    2bfc:	15 82       	std	Z+5, r1	; 0x05
    2bfe:	14 82       	std	Z+4, r1	; 0x04
    2c00:	61 15       	cp	r22, r1
    2c02:	71 05       	cpc	r23, r1
    2c04:	49 f0       	breq	.+18     	; 0x2c18 <_ZN6StringC1EPKc+0x26>
    2c06:	fb 01       	movw	r30, r22
    2c08:	01 90       	ld	r0, Z+
    2c0a:	00 20       	and	r0, r0
    2c0c:	e9 f7       	brne	.-6      	; 0x2c08 <_ZN6StringC1EPKc+0x16>
    2c0e:	31 97       	sbiw	r30, 0x01	; 1
    2c10:	af 01       	movw	r20, r30
    2c12:	46 1b       	sub	r20, r22
    2c14:	57 0b       	sbc	r21, r23
    2c16:	ce cf       	rjmp	.-100    	; 0x2bb4 <_ZN6String4copyEPKcj>
    2c18:	08 95       	ret

00002c1a <_ZN6StringaSERKS_>:
    2c1a:	cf 93       	push	r28
    2c1c:	df 93       	push	r29
    2c1e:	ec 01       	movw	r28, r24
    2c20:	fb 01       	movw	r30, r22
    2c22:	86 17       	cp	r24, r22
    2c24:	97 07       	cpc	r25, r23
    2c26:	51 f0       	breq	.+20     	; 0x2c3c <_ZN6StringaSERKS_+0x22>
    2c28:	60 81       	ld	r22, Z
    2c2a:	71 81       	ldd	r23, Z+1	; 0x01
    2c2c:	61 15       	cp	r22, r1
    2c2e:	71 05       	cpc	r23, r1
    2c30:	21 f0       	breq	.+8      	; 0x2c3a <_ZN6StringaSERKS_+0x20>
    2c32:	44 81       	ldd	r20, Z+4	; 0x04
    2c34:	55 81       	ldd	r21, Z+5	; 0x05
    2c36:	be df       	rcall	.-132    	; 0x2bb4 <_ZN6String4copyEPKcj>
    2c38:	01 c0       	rjmp	.+2      	; 0x2c3c <_ZN6StringaSERKS_+0x22>
    2c3a:	71 df       	rcall	.-286    	; 0x2b1e <_ZN6String10invalidateEv>
    2c3c:	ce 01       	movw	r24, r28
    2c3e:	df 91       	pop	r29
    2c40:	cf 91       	pop	r28
    2c42:	08 95       	ret

00002c44 <_ZN6StringC1ERKS_>:
    2c44:	fc 01       	movw	r30, r24
    2c46:	11 82       	std	Z+1, r1	; 0x01
    2c48:	10 82       	st	Z, r1
    2c4a:	13 82       	std	Z+3, r1	; 0x03
    2c4c:	12 82       	std	Z+2, r1	; 0x02
    2c4e:	15 82       	std	Z+5, r1	; 0x05
    2c50:	14 82       	std	Z+4, r1	; 0x04
    2c52:	e3 cf       	rjmp	.-58     	; 0x2c1a <_ZN6StringaSERKS_>
    2c54:	08 95       	ret

00002c56 <_ZN6StringaSEPKc>:
    2c56:	cf 93       	push	r28
    2c58:	df 93       	push	r29
    2c5a:	ec 01       	movw	r28, r24
    2c5c:	61 15       	cp	r22, r1
    2c5e:	71 05       	cpc	r23, r1
    2c60:	51 f0       	breq	.+20     	; 0x2c76 <_ZN6StringaSEPKc+0x20>
    2c62:	fb 01       	movw	r30, r22
    2c64:	01 90       	ld	r0, Z+
    2c66:	00 20       	and	r0, r0
    2c68:	e9 f7       	brne	.-6      	; 0x2c64 <_ZN6StringaSEPKc+0xe>
    2c6a:	31 97       	sbiw	r30, 0x01	; 1
    2c6c:	af 01       	movw	r20, r30
    2c6e:	46 1b       	sub	r20, r22
    2c70:	57 0b       	sbc	r21, r23
    2c72:	a0 df       	rcall	.-192    	; 0x2bb4 <_ZN6String4copyEPKcj>
    2c74:	01 c0       	rjmp	.+2      	; 0x2c78 <_ZN6StringaSEPKc+0x22>
    2c76:	53 df       	rcall	.-346    	; 0x2b1e <_ZN6String10invalidateEv>
    2c78:	ce 01       	movw	r24, r28
    2c7a:	df 91       	pop	r29
    2c7c:	cf 91       	pop	r28
    2c7e:	08 95       	ret

00002c80 <_ZN6StringC1Ejh>:
    2c80:	0f 93       	push	r16
    2c82:	1f 93       	push	r17
    2c84:	cf 93       	push	r28
    2c86:	df 93       	push	r29
    2c88:	cd b7       	in	r28, 0x3d	; 61
    2c8a:	de b7       	in	r29, 0x3e	; 62
    2c8c:	61 97       	sbiw	r28, 0x11	; 17
    2c8e:	0f b6       	in	r0, 0x3f	; 63
    2c90:	f8 94       	cli
    2c92:	de bf       	out	0x3e, r29	; 62
    2c94:	0f be       	out	0x3f, r0	; 63
    2c96:	cd bf       	out	0x3d, r28	; 61
    2c98:	8c 01       	movw	r16, r24
    2c9a:	cb 01       	movw	r24, r22
    2c9c:	f8 01       	movw	r30, r16
    2c9e:	11 82       	std	Z+1, r1	; 0x01
    2ca0:	10 82       	st	Z, r1
    2ca2:	13 82       	std	Z+3, r1	; 0x03
    2ca4:	12 82       	std	Z+2, r1	; 0x02
    2ca6:	15 82       	std	Z+5, r1	; 0x05
    2ca8:	14 82       	std	Z+4, r1	; 0x04
    2caa:	50 e0       	ldi	r21, 0x00	; 0
    2cac:	be 01       	movw	r22, r28
    2cae:	6f 5f       	subi	r22, 0xFF	; 255
    2cb0:	7f 4f       	sbci	r23, 0xFF	; 255
    2cb2:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <utoa>
    2cb6:	be 01       	movw	r22, r28
    2cb8:	6f 5f       	subi	r22, 0xFF	; 255
    2cba:	7f 4f       	sbci	r23, 0xFF	; 255
    2cbc:	c8 01       	movw	r24, r16
    2cbe:	cb df       	rcall	.-106    	; 0x2c56 <_ZN6StringaSEPKc>
    2cc0:	61 96       	adiw	r28, 0x11	; 17
    2cc2:	0f b6       	in	r0, 0x3f	; 63
    2cc4:	f8 94       	cli
    2cc6:	de bf       	out	0x3e, r29	; 62
    2cc8:	0f be       	out	0x3f, r0	; 63
    2cca:	cd bf       	out	0x3d, r28	; 61
    2ccc:	df 91       	pop	r29
    2cce:	cf 91       	pop	r28
    2cd0:	1f 91       	pop	r17
    2cd2:	0f 91       	pop	r16
    2cd4:	08 95       	ret

00002cd6 <_ZN6String6concatEPKcj>:
    2cd6:	ef 92       	push	r14
    2cd8:	ff 92       	push	r15
    2cda:	0f 93       	push	r16
    2cdc:	1f 93       	push	r17
    2cde:	cf 93       	push	r28
    2ce0:	df 93       	push	r29
    2ce2:	ec 01       	movw	r28, r24
    2ce4:	8b 01       	movw	r16, r22
    2ce6:	6c 81       	ldd	r22, Y+4	; 0x04
    2ce8:	7d 81       	ldd	r23, Y+5	; 0x05
    2cea:	01 15       	cp	r16, r1
    2cec:	11 05       	cpc	r17, r1
    2cee:	b9 f0       	breq	.+46     	; 0x2d1e <_ZN6String6concatEPKcj+0x48>
    2cf0:	41 15       	cp	r20, r1
    2cf2:	51 05       	cpc	r21, r1
    2cf4:	b1 f0       	breq	.+44     	; 0x2d22 <_ZN6String6concatEPKcj+0x4c>
    2cf6:	7a 01       	movw	r14, r20
    2cf8:	e6 0e       	add	r14, r22
    2cfa:	f7 1e       	adc	r15, r23
    2cfc:	b7 01       	movw	r22, r14
    2cfe:	3b df       	rcall	.-394    	; 0x2b76 <_ZN6String7reserveEj>
    2d00:	88 23       	and	r24, r24
    2d02:	81 f0       	breq	.+32     	; 0x2d24 <_ZN6String6concatEPKcj+0x4e>
    2d04:	28 81       	ld	r18, Y
    2d06:	39 81       	ldd	r19, Y+1	; 0x01
    2d08:	8c 81       	ldd	r24, Y+4	; 0x04
    2d0a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d0c:	b8 01       	movw	r22, r16
    2d0e:	82 0f       	add	r24, r18
    2d10:	93 1f       	adc	r25, r19
    2d12:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <strcpy>
    2d16:	fd 82       	std	Y+5, r15	; 0x05
    2d18:	ec 82       	std	Y+4, r14	; 0x04
    2d1a:	81 e0       	ldi	r24, 0x01	; 1
    2d1c:	03 c0       	rjmp	.+6      	; 0x2d24 <_ZN6String6concatEPKcj+0x4e>
    2d1e:	80 e0       	ldi	r24, 0x00	; 0
    2d20:	01 c0       	rjmp	.+2      	; 0x2d24 <_ZN6String6concatEPKcj+0x4e>
    2d22:	81 e0       	ldi	r24, 0x01	; 1
    2d24:	df 91       	pop	r29
    2d26:	cf 91       	pop	r28
    2d28:	1f 91       	pop	r17
    2d2a:	0f 91       	pop	r16
    2d2c:	ff 90       	pop	r15
    2d2e:	ef 90       	pop	r14
    2d30:	08 95       	ret

00002d32 <_ZN6String6concatEc>:
    2d32:	cf 93       	push	r28
    2d34:	df 93       	push	r29
    2d36:	1f 92       	push	r1
    2d38:	1f 92       	push	r1
    2d3a:	cd b7       	in	r28, 0x3d	; 61
    2d3c:	de b7       	in	r29, 0x3e	; 62
    2d3e:	69 83       	std	Y+1, r22	; 0x01
    2d40:	1a 82       	std	Y+2, r1	; 0x02
    2d42:	41 e0       	ldi	r20, 0x01	; 1
    2d44:	50 e0       	ldi	r21, 0x00	; 0
    2d46:	be 01       	movw	r22, r28
    2d48:	6f 5f       	subi	r22, 0xFF	; 255
    2d4a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d4c:	c4 df       	rcall	.-120    	; 0x2cd6 <_ZN6String6concatEPKcj>
    2d4e:	0f 90       	pop	r0
    2d50:	0f 90       	pop	r0
    2d52:	df 91       	pop	r29
    2d54:	cf 91       	pop	r28
    2d56:	08 95       	ret

00002d58 <_ZplRK15StringSumHelperRK6String>:
    2d58:	cf 93       	push	r28
    2d5a:	df 93       	push	r29
    2d5c:	ec 01       	movw	r28, r24
    2d5e:	fb 01       	movw	r30, r22
    2d60:	44 81       	ldd	r20, Z+4	; 0x04
    2d62:	55 81       	ldd	r21, Z+5	; 0x05
    2d64:	60 81       	ld	r22, Z
    2d66:	71 81       	ldd	r23, Z+1	; 0x01
    2d68:	b6 df       	rcall	.-148    	; 0x2cd6 <_ZN6String6concatEPKcj>
    2d6a:	81 11       	cpse	r24, r1
    2d6c:	02 c0       	rjmp	.+4      	; 0x2d72 <_ZplRK15StringSumHelperRK6String+0x1a>
    2d6e:	ce 01       	movw	r24, r28
    2d70:	d6 de       	rcall	.-596    	; 0x2b1e <_ZN6String10invalidateEv>
    2d72:	ce 01       	movw	r24, r28
    2d74:	df 91       	pop	r29
    2d76:	cf 91       	pop	r28
    2d78:	08 95       	ret

00002d7a <_ZplRK15StringSumHelperPKc>:
    2d7a:	cf 93       	push	r28
    2d7c:	df 93       	push	r29
    2d7e:	ec 01       	movw	r28, r24
    2d80:	61 15       	cp	r22, r1
    2d82:	71 05       	cpc	r23, r1
    2d84:	59 f0       	breq	.+22     	; 0x2d9c <_ZplRK15StringSumHelperPKc+0x22>
    2d86:	fb 01       	movw	r30, r22
    2d88:	01 90       	ld	r0, Z+
    2d8a:	00 20       	and	r0, r0
    2d8c:	e9 f7       	brne	.-6      	; 0x2d88 <_ZplRK15StringSumHelperPKc+0xe>
    2d8e:	31 97       	sbiw	r30, 0x01	; 1
    2d90:	af 01       	movw	r20, r30
    2d92:	46 1b       	sub	r20, r22
    2d94:	57 0b       	sbc	r21, r23
    2d96:	9f df       	rcall	.-194    	; 0x2cd6 <_ZN6String6concatEPKcj>
    2d98:	81 11       	cpse	r24, r1
    2d9a:	02 c0       	rjmp	.+4      	; 0x2da0 <_ZplRK15StringSumHelperPKc+0x26>
    2d9c:	ce 01       	movw	r24, r28
    2d9e:	bf de       	rcall	.-642    	; 0x2b1e <_ZN6String10invalidateEv>
    2da0:	ce 01       	movw	r24, r28
    2da2:	df 91       	pop	r29
    2da4:	cf 91       	pop	r28
    2da6:	08 95       	ret

00002da8 <_ZNK6String9compareToERKS_>:
    2da8:	dc 01       	movw	r26, r24
    2daa:	ed 91       	ld	r30, X+
    2dac:	fc 91       	ld	r31, X
    2dae:	30 97       	sbiw	r30, 0x00	; 0
    2db0:	39 f0       	breq	.+14     	; 0x2dc0 <_ZNK6String9compareToERKS_+0x18>
    2db2:	db 01       	movw	r26, r22
    2db4:	6d 91       	ld	r22, X+
    2db6:	7c 91       	ld	r23, X
    2db8:	61 15       	cp	r22, r1
    2dba:	71 05       	cpc	r23, r1
    2dbc:	e9 f4       	brne	.+58     	; 0x2df8 <_ZNK6String9compareToERKS_+0x50>
    2dbe:	12 c0       	rjmp	.+36     	; 0x2de4 <_ZNK6String9compareToERKS_+0x3c>
    2dc0:	db 01       	movw	r26, r22
    2dc2:	ed 91       	ld	r30, X+
    2dc4:	fc 91       	ld	r31, X
    2dc6:	11 97       	sbiw	r26, 0x01	; 1
    2dc8:	30 97       	sbiw	r30, 0x00	; 0
    2dca:	d1 f0       	breq	.+52     	; 0x2e00 <_ZNK6String9compareToERKS_+0x58>
    2dcc:	14 96       	adiw	r26, 0x04	; 4
    2dce:	8d 91       	ld	r24, X+
    2dd0:	9c 91       	ld	r25, X
    2dd2:	15 97       	sbiw	r26, 0x05	; 5
    2dd4:	89 2b       	or	r24, r25
    2dd6:	b9 f0       	breq	.+46     	; 0x2e06 <_ZNK6String9compareToERKS_+0x5e>
    2dd8:	80 81       	ld	r24, Z
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	91 95       	neg	r25
    2dde:	81 95       	neg	r24
    2de0:	91 09       	sbc	r25, r1
    2de2:	08 95       	ret
    2de4:	dc 01       	movw	r26, r24
    2de6:	14 96       	adiw	r26, 0x04	; 4
    2de8:	8d 91       	ld	r24, X+
    2dea:	9c 91       	ld	r25, X
    2dec:	15 97       	sbiw	r26, 0x05	; 5
    2dee:	89 2b       	or	r24, r25
    2df0:	69 f0       	breq	.+26     	; 0x2e0c <_ZNK6String9compareToERKS_+0x64>
    2df2:	80 81       	ld	r24, Z
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	08 95       	ret
    2df8:	cf 01       	movw	r24, r30
    2dfa:	0c 94 4a 25 	jmp	0x4a94	; 0x4a94 <strcmp>
    2dfe:	08 95       	ret
    2e00:	80 e0       	ldi	r24, 0x00	; 0
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	08 95       	ret
    2e06:	80 e0       	ldi	r24, 0x00	; 0
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	08 95       	ret
    2e0c:	80 e0       	ldi	r24, 0x00	; 0
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	08 95       	ret

00002e12 <_ZNK6String6equalsERKS_>:
    2e12:	fc 01       	movw	r30, r24
    2e14:	44 81       	ldd	r20, Z+4	; 0x04
    2e16:	55 81       	ldd	r21, Z+5	; 0x05
    2e18:	fb 01       	movw	r30, r22
    2e1a:	24 81       	ldd	r18, Z+4	; 0x04
    2e1c:	35 81       	ldd	r19, Z+5	; 0x05
    2e1e:	42 17       	cp	r20, r18
    2e20:	53 07       	cpc	r21, r19
    2e22:	39 f4       	brne	.+14     	; 0x2e32 <_ZNK6String6equalsERKS_+0x20>
    2e24:	c1 df       	rcall	.-126    	; 0x2da8 <_ZNK6String9compareToERKS_>
    2e26:	21 e0       	ldi	r18, 0x01	; 1
    2e28:	89 2b       	or	r24, r25
    2e2a:	09 f0       	breq	.+2      	; 0x2e2e <_ZNK6String6equalsERKS_+0x1c>
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
    2e2e:	82 2f       	mov	r24, r18
    2e30:	08 95       	ret
    2e32:	80 e0       	ldi	r24, 0x00	; 0
    2e34:	08 95       	ret

00002e36 <_ZNK6String6equalsEPKc>:
    2e36:	dc 01       	movw	r26, r24
    2e38:	14 96       	adiw	r26, 0x04	; 4
    2e3a:	2d 91       	ld	r18, X+
    2e3c:	3c 91       	ld	r19, X
    2e3e:	15 97       	sbiw	r26, 0x05	; 5
    2e40:	23 2b       	or	r18, r19
    2e42:	61 f4       	brne	.+24     	; 0x2e5c <_ZNK6String6equalsEPKc+0x26>
    2e44:	61 15       	cp	r22, r1
    2e46:	71 05       	cpc	r23, r1
    2e48:	39 f0       	breq	.+14     	; 0x2e58 <_ZNK6String6equalsEPKc+0x22>
    2e4a:	21 e0       	ldi	r18, 0x01	; 1
    2e4c:	fb 01       	movw	r30, r22
    2e4e:	80 81       	ld	r24, Z
    2e50:	88 23       	and	r24, r24
    2e52:	c9 f0       	breq	.+50     	; 0x2e86 <_ZNK6String6equalsEPKc+0x50>
    2e54:	20 e0       	ldi	r18, 0x00	; 0
    2e56:	17 c0       	rjmp	.+46     	; 0x2e86 <_ZNK6String6equalsEPKc+0x50>
    2e58:	21 e0       	ldi	r18, 0x01	; 1
    2e5a:	15 c0       	rjmp	.+42     	; 0x2e86 <_ZNK6String6equalsEPKc+0x50>
    2e5c:	61 15       	cp	r22, r1
    2e5e:	71 05       	cpc	r23, r1
    2e60:	49 f4       	brne	.+18     	; 0x2e74 <_ZNK6String6equalsEPKc+0x3e>
    2e62:	dc 01       	movw	r26, r24
    2e64:	ed 91       	ld	r30, X+
    2e66:	fc 91       	ld	r31, X
    2e68:	21 e0       	ldi	r18, 0x01	; 1
    2e6a:	80 81       	ld	r24, Z
    2e6c:	88 23       	and	r24, r24
    2e6e:	59 f0       	breq	.+22     	; 0x2e86 <_ZNK6String6equalsEPKc+0x50>
    2e70:	20 e0       	ldi	r18, 0x00	; 0
    2e72:	09 c0       	rjmp	.+18     	; 0x2e86 <_ZNK6String6equalsEPKc+0x50>
    2e74:	fc 01       	movw	r30, r24
    2e76:	80 81       	ld	r24, Z
    2e78:	91 81       	ldd	r25, Z+1	; 0x01
    2e7a:	0e 94 4a 25 	call	0x4a94	; 0x4a94 <strcmp>
    2e7e:	21 e0       	ldi	r18, 0x01	; 1
    2e80:	89 2b       	or	r24, r25
    2e82:	09 f0       	breq	.+2      	; 0x2e86 <_ZNK6String6equalsEPKc+0x50>
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	82 2f       	mov	r24, r18
    2e88:	08 95       	ret

00002e8a <_ZNK6String10startsWithERKS_j>:
    2e8a:	fc 01       	movw	r30, r24
    2e8c:	ca 01       	movw	r24, r20
    2e8e:	db 01       	movw	r26, r22
    2e90:	14 96       	adiw	r26, 0x04	; 4
    2e92:	4d 91       	ld	r20, X+
    2e94:	5c 91       	ld	r21, X
    2e96:	15 97       	sbiw	r26, 0x05	; 5
    2e98:	24 81       	ldd	r18, Z+4	; 0x04
    2e9a:	35 81       	ldd	r19, Z+5	; 0x05
    2e9c:	24 1b       	sub	r18, r20
    2e9e:	35 0b       	sbc	r19, r21
    2ea0:	28 17       	cp	r18, r24
    2ea2:	39 07       	cpc	r19, r25
    2ea4:	98 f0       	brcs	.+38     	; 0x2ecc <_ZNK6String10startsWithERKS_j+0x42>
    2ea6:	20 81       	ld	r18, Z
    2ea8:	31 81       	ldd	r19, Z+1	; 0x01
    2eaa:	21 15       	cp	r18, r1
    2eac:	31 05       	cpc	r19, r1
    2eae:	81 f0       	breq	.+32     	; 0x2ed0 <_ZNK6String10startsWithERKS_j+0x46>
    2eb0:	6d 91       	ld	r22, X+
    2eb2:	7c 91       	ld	r23, X
    2eb4:	61 15       	cp	r22, r1
    2eb6:	71 05       	cpc	r23, r1
    2eb8:	69 f0       	breq	.+26     	; 0x2ed4 <_ZNK6String10startsWithERKS_j+0x4a>
    2eba:	82 0f       	add	r24, r18
    2ebc:	93 1f       	adc	r25, r19
    2ebe:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <strncmp>
    2ec2:	21 e0       	ldi	r18, 0x01	; 1
    2ec4:	89 2b       	or	r24, r25
    2ec6:	39 f0       	breq	.+14     	; 0x2ed6 <_ZNK6String10startsWithERKS_j+0x4c>
    2ec8:	20 e0       	ldi	r18, 0x00	; 0
    2eca:	05 c0       	rjmp	.+10     	; 0x2ed6 <_ZNK6String10startsWithERKS_j+0x4c>
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	03 c0       	rjmp	.+6      	; 0x2ed6 <_ZNK6String10startsWithERKS_j+0x4c>
    2ed0:	20 e0       	ldi	r18, 0x00	; 0
    2ed2:	01 c0       	rjmp	.+2      	; 0x2ed6 <_ZNK6String10startsWithERKS_j+0x4c>
    2ed4:	20 e0       	ldi	r18, 0x00	; 0
    2ed6:	82 2f       	mov	r24, r18
    2ed8:	08 95       	ret

00002eda <_ZNK6String10startsWithERKS_>:
    2eda:	fc 01       	movw	r30, r24
    2edc:	44 81       	ldd	r20, Z+4	; 0x04
    2ede:	55 81       	ldd	r21, Z+5	; 0x05
    2ee0:	fb 01       	movw	r30, r22
    2ee2:	24 81       	ldd	r18, Z+4	; 0x04
    2ee4:	35 81       	ldd	r19, Z+5	; 0x05
    2ee6:	42 17       	cp	r20, r18
    2ee8:	53 07       	cpc	r21, r19
    2eea:	20 f0       	brcs	.+8      	; 0x2ef4 <_ZNK6String10startsWithERKS_+0x1a>
    2eec:	40 e0       	ldi	r20, 0x00	; 0
    2eee:	50 e0       	ldi	r21, 0x00	; 0
    2ef0:	cc cf       	rjmp	.-104    	; 0x2e8a <_ZNK6String10startsWithERKS_j>
    2ef2:	08 95       	ret
    2ef4:	80 e0       	ldi	r24, 0x00	; 0
    2ef6:	08 95       	ret

00002ef8 <_ZNK6String8endsWithERKS_>:
    2ef8:	fc 01       	movw	r30, r24
    2efa:	44 81       	ldd	r20, Z+4	; 0x04
    2efc:	55 81       	ldd	r21, Z+5	; 0x05
    2efe:	fb 01       	movw	r30, r22
    2f00:	24 81       	ldd	r18, Z+4	; 0x04
    2f02:	35 81       	ldd	r19, Z+5	; 0x05
    2f04:	42 17       	cp	r20, r18
    2f06:	53 07       	cpc	r21, r19
    2f08:	b0 f0       	brcs	.+44     	; 0x2f36 <_ZNK6String8endsWithERKS_+0x3e>
    2f0a:	fc 01       	movw	r30, r24
    2f0c:	80 81       	ld	r24, Z
    2f0e:	91 81       	ldd	r25, Z+1	; 0x01
    2f10:	00 97       	sbiw	r24, 0x00	; 0
    2f12:	99 f0       	breq	.+38     	; 0x2f3a <_ZNK6String8endsWithERKS_+0x42>
    2f14:	fb 01       	movw	r30, r22
    2f16:	60 81       	ld	r22, Z
    2f18:	71 81       	ldd	r23, Z+1	; 0x01
    2f1a:	61 15       	cp	r22, r1
    2f1c:	71 05       	cpc	r23, r1
    2f1e:	79 f0       	breq	.+30     	; 0x2f3e <_ZNK6String8endsWithERKS_+0x46>
    2f20:	42 1b       	sub	r20, r18
    2f22:	53 0b       	sbc	r21, r19
    2f24:	84 0f       	add	r24, r20
    2f26:	95 1f       	adc	r25, r21
    2f28:	0e 94 4a 25 	call	0x4a94	; 0x4a94 <strcmp>
    2f2c:	21 e0       	ldi	r18, 0x01	; 1
    2f2e:	89 2b       	or	r24, r25
    2f30:	39 f0       	breq	.+14     	; 0x2f40 <_ZNK6String8endsWithERKS_+0x48>
    2f32:	20 e0       	ldi	r18, 0x00	; 0
    2f34:	05 c0       	rjmp	.+10     	; 0x2f40 <_ZNK6String8endsWithERKS_+0x48>
    2f36:	20 e0       	ldi	r18, 0x00	; 0
    2f38:	03 c0       	rjmp	.+6      	; 0x2f40 <_ZNK6String8endsWithERKS_+0x48>
    2f3a:	20 e0       	ldi	r18, 0x00	; 0
    2f3c:	01 c0       	rjmp	.+2      	; 0x2f40 <_ZNK6String8endsWithERKS_+0x48>
    2f3e:	20 e0       	ldi	r18, 0x00	; 0
    2f40:	82 2f       	mov	r24, r18
    2f42:	08 95       	ret

00002f44 <_ZNK6StringixEj>:
    2f44:	fc 01       	movw	r30, r24
    2f46:	24 81       	ldd	r18, Z+4	; 0x04
    2f48:	35 81       	ldd	r19, Z+5	; 0x05
    2f4a:	62 17       	cp	r22, r18
    2f4c:	73 07       	cpc	r23, r19
    2f4e:	48 f4       	brcc	.+18     	; 0x2f62 <_ZNK6StringixEj+0x1e>
    2f50:	80 81       	ld	r24, Z
    2f52:	91 81       	ldd	r25, Z+1	; 0x01
    2f54:	00 97       	sbiw	r24, 0x00	; 0
    2f56:	39 f0       	breq	.+14     	; 0x2f66 <_ZNK6StringixEj+0x22>
    2f58:	fc 01       	movw	r30, r24
    2f5a:	e6 0f       	add	r30, r22
    2f5c:	f7 1f       	adc	r31, r23
    2f5e:	80 81       	ld	r24, Z
    2f60:	08 95       	ret
    2f62:	80 e0       	ldi	r24, 0x00	; 0
    2f64:	08 95       	ret
    2f66:	80 e0       	ldi	r24, 0x00	; 0
    2f68:	08 95       	ret

00002f6a <_ZNK6String6charAtEj>:
    2f6a:	ec cf       	rjmp	.-40     	; 0x2f44 <_ZNK6StringixEj>
    2f6c:	08 95       	ret

00002f6e <_ZNK6String8getBytesEPhjj>:
    2f6e:	0f 93       	push	r16
    2f70:	1f 93       	push	r17
    2f72:	cf 93       	push	r28
    2f74:	df 93       	push	r29
    2f76:	eb 01       	movw	r28, r22
    2f78:	41 15       	cp	r20, r1
    2f7a:	51 05       	cpc	r21, r1
    2f7c:	f9 f0       	breq	.+62     	; 0x2fbc <_ZNK6String8getBytesEPhjj+0x4e>
    2f7e:	20 97       	sbiw	r28, 0x00	; 0
    2f80:	e9 f0       	breq	.+58     	; 0x2fbc <_ZNK6String8getBytesEPhjj+0x4e>
    2f82:	fc 01       	movw	r30, r24
    2f84:	64 81       	ldd	r22, Z+4	; 0x04
    2f86:	75 81       	ldd	r23, Z+5	; 0x05
    2f88:	26 17       	cp	r18, r22
    2f8a:	37 07       	cpc	r19, r23
    2f8c:	10 f0       	brcs	.+4      	; 0x2f92 <_ZNK6String8getBytesEPhjj+0x24>
    2f8e:	18 82       	st	Y, r1
    2f90:	15 c0       	rjmp	.+42     	; 0x2fbc <_ZNK6String8getBytesEPhjj+0x4e>
    2f92:	62 1b       	sub	r22, r18
    2f94:	73 0b       	sbc	r23, r19
    2f96:	8a 01       	movw	r16, r20
    2f98:	01 50       	subi	r16, 0x01	; 1
    2f9a:	11 09       	sbc	r17, r1
    2f9c:	60 17       	cp	r22, r16
    2f9e:	71 07       	cpc	r23, r17
    2fa0:	08 f4       	brcc	.+2      	; 0x2fa4 <_ZNK6String8getBytesEPhjj+0x36>
    2fa2:	8b 01       	movw	r16, r22
    2fa4:	fc 01       	movw	r30, r24
    2fa6:	60 81       	ld	r22, Z
    2fa8:	71 81       	ldd	r23, Z+1	; 0x01
    2faa:	62 0f       	add	r22, r18
    2fac:	73 1f       	adc	r23, r19
    2fae:	a8 01       	movw	r20, r16
    2fb0:	ce 01       	movw	r24, r28
    2fb2:	0e 94 68 25 	call	0x4ad0	; 0x4ad0 <strncpy>
    2fb6:	c0 0f       	add	r28, r16
    2fb8:	d1 1f       	adc	r29, r17
    2fba:	18 82       	st	Y, r1
    2fbc:	df 91       	pop	r29
    2fbe:	cf 91       	pop	r28
    2fc0:	1f 91       	pop	r17
    2fc2:	0f 91       	pop	r16
    2fc4:	08 95       	ret

00002fc6 <_ZNK6String9substringEjj>:
    2fc6:	bf 92       	push	r11
    2fc8:	cf 92       	push	r12
    2fca:	df 92       	push	r13
    2fcc:	ef 92       	push	r14
    2fce:	ff 92       	push	r15
    2fd0:	0f 93       	push	r16
    2fd2:	1f 93       	push	r17
    2fd4:	cf 93       	push	r28
    2fd6:	df 93       	push	r29
    2fd8:	8c 01       	movw	r16, r24
    2fda:	6b 01       	movw	r12, r22
    2fdc:	ea 01       	movw	r28, r20
    2fde:	79 01       	movw	r14, r18
    2fe0:	24 17       	cp	r18, r20
    2fe2:	35 07       	cpc	r19, r21
    2fe4:	20 f4       	brcc	.+8      	; 0x2fee <_ZNK6String9substringEjj+0x28>
    2fe6:	8d 2f       	mov	r24, r29
    2fe8:	e9 01       	movw	r28, r18
    2fea:	e4 2e       	mov	r14, r20
    2fec:	f8 2e       	mov	r15, r24
    2fee:	6e e5       	ldi	r22, 0x5E	; 94
    2ff0:	72 e0       	ldi	r23, 0x02	; 2
    2ff2:	c8 01       	movw	r24, r16
    2ff4:	fe dd       	rcall	.-1028   	; 0x2bf2 <_ZN6StringC1EPKc>
    2ff6:	d6 01       	movw	r26, r12
    2ff8:	14 96       	adiw	r26, 0x04	; 4
    2ffa:	8d 91       	ld	r24, X+
    2ffc:	9c 91       	ld	r25, X
    2ffe:	15 97       	sbiw	r26, 0x05	; 5
    3000:	c8 17       	cp	r28, r24
    3002:	d9 07       	cpc	r29, r25
    3004:	c8 f4       	brcc	.+50     	; 0x3038 <_ZNK6String9substringEjj+0x72>
    3006:	8e 15       	cp	r24, r14
    3008:	9f 05       	cpc	r25, r15
    300a:	08 f4       	brcc	.+2      	; 0x300e <_ZNK6String9substringEjj+0x48>
    300c:	7c 01       	movw	r14, r24
    300e:	d6 01       	movw	r26, r12
    3010:	ed 91       	ld	r30, X+
    3012:	fc 91       	ld	r31, X
    3014:	11 97       	sbiw	r26, 0x01	; 1
    3016:	ee 0d       	add	r30, r14
    3018:	ff 1d       	adc	r31, r15
    301a:	b0 80       	ld	r11, Z
    301c:	10 82       	st	Z, r1
    301e:	6d 91       	ld	r22, X+
    3020:	7c 91       	ld	r23, X
    3022:	6c 0f       	add	r22, r28
    3024:	7d 1f       	adc	r23, r29
    3026:	c8 01       	movw	r24, r16
    3028:	16 de       	rcall	.-980    	; 0x2c56 <_ZN6StringaSEPKc>
    302a:	f6 01       	movw	r30, r12
    302c:	80 81       	ld	r24, Z
    302e:	91 81       	ldd	r25, Z+1	; 0x01
    3030:	fc 01       	movw	r30, r24
    3032:	ee 0d       	add	r30, r14
    3034:	ff 1d       	adc	r31, r15
    3036:	b0 82       	st	Z, r11
    3038:	c8 01       	movw	r24, r16
    303a:	df 91       	pop	r29
    303c:	cf 91       	pop	r28
    303e:	1f 91       	pop	r17
    3040:	0f 91       	pop	r16
    3042:	ff 90       	pop	r15
    3044:	ef 90       	pop	r14
    3046:	df 90       	pop	r13
    3048:	cf 90       	pop	r12
    304a:	bf 90       	pop	r11
    304c:	08 95       	ret

0000304e <_ZN6String6removeEjj>:
    304e:	cf 93       	push	r28
    3050:	df 93       	push	r29
    3052:	ec 01       	movw	r28, r24
    3054:	cb 01       	movw	r24, r22
    3056:	2c 81       	ldd	r18, Y+4	; 0x04
    3058:	3d 81       	ldd	r19, Y+5	; 0x05
    305a:	62 17       	cp	r22, r18
    305c:	73 07       	cpc	r23, r19
    305e:	10 f5       	brcc	.+68     	; 0x30a4 <_ZN6String6removeEjj+0x56>
    3060:	41 15       	cp	r20, r1
    3062:	51 05       	cpc	r21, r1
    3064:	f9 f0       	breq	.+62     	; 0x30a4 <_ZN6String6removeEjj+0x56>
    3066:	b9 01       	movw	r22, r18
    3068:	68 1b       	sub	r22, r24
    306a:	79 0b       	sbc	r23, r25
    306c:	46 17       	cp	r20, r22
    306e:	57 07       	cpc	r21, r23
    3070:	08 f4       	brcc	.+2      	; 0x3074 <_ZN6String6removeEjj+0x26>
    3072:	ba 01       	movw	r22, r20
    3074:	e8 81       	ld	r30, Y
    3076:	f9 81       	ldd	r31, Y+1	; 0x01
    3078:	26 1b       	sub	r18, r22
    307a:	37 0b       	sbc	r19, r23
    307c:	3d 83       	std	Y+5, r19	; 0x05
    307e:	2c 83       	std	Y+4, r18	; 0x04
    3080:	a9 01       	movw	r20, r18
    3082:	48 1b       	sub	r20, r24
    3084:	59 0b       	sbc	r21, r25
    3086:	68 0f       	add	r22, r24
    3088:	79 1f       	adc	r23, r25
    308a:	6e 0f       	add	r22, r30
    308c:	7f 1f       	adc	r23, r31
    308e:	8e 0f       	add	r24, r30
    3090:	9f 1f       	adc	r25, r31
    3092:	0e 94 68 25 	call	0x4ad0	; 0x4ad0 <strncpy>
    3096:	e8 81       	ld	r30, Y
    3098:	f9 81       	ldd	r31, Y+1	; 0x01
    309a:	8c 81       	ldd	r24, Y+4	; 0x04
    309c:	9d 81       	ldd	r25, Y+5	; 0x05
    309e:	e8 0f       	add	r30, r24
    30a0:	f9 1f       	adc	r31, r25
    30a2:	10 82       	st	Z, r1
    30a4:	df 91       	pop	r29
    30a6:	cf 91       	pop	r28
    30a8:	08 95       	ret

000030aa <_ZN6String4trimEv>:

void String::trim(void)
{
    30aa:	af 92       	push	r10
    30ac:	bf 92       	push	r11
    30ae:	cf 92       	push	r12
    30b0:	df 92       	push	r13
    30b2:	ef 92       	push	r14
    30b4:	ff 92       	push	r15
    30b6:	0f 93       	push	r16
    30b8:	1f 93       	push	r17
    30ba:	cf 93       	push	r28
    30bc:	df 93       	push	r29
    30be:	6c 01       	movw	r12, r24
	if (!buffer || len == 0) return;
    30c0:	dc 01       	movw	r26, r24
    30c2:	ad 90       	ld	r10, X+
    30c4:	bc 90       	ld	r11, X
    30c6:	11 97       	sbiw	r26, 0x01	; 1
    30c8:	a1 14       	cp	r10, r1
    30ca:	b1 04       	cpc	r11, r1
    30cc:	d9 f1       	breq	.+118    	; 0x3144 <_ZN6String4trimEv+0x9a>
    30ce:	14 96       	adiw	r26, 0x04	; 4
    30d0:	cd 91       	ld	r28, X+
    30d2:	dc 91       	ld	r29, X
    30d4:	15 97       	sbiw	r26, 0x05	; 5
    30d6:	20 97       	sbiw	r28, 0x00	; 0
    30d8:	a9 f1       	breq	.+106    	; 0x3144 <_ZN6String4trimEv+0x9a>
    30da:	75 01       	movw	r14, r10
    30dc:	87 01       	movw	r16, r14
    30de:	bf ef       	ldi	r27, 0xFF	; 255
    30e0:	eb 1a       	sub	r14, r27
    30e2:	fb 0a       	sbc	r15, r27
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    30e4:	f8 01       	movw	r30, r16
    30e6:	80 81       	ld	r24, Z
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	0e 94 32 25 	call	0x4a64	; 0x4a64 <isspace>
    30ee:	89 2b       	or	r24, r25
    30f0:	a9 f7       	brne	.-22     	; 0x30dc <_ZN6String4trimEv+0x32>
	char *end = buffer + len - 1;
    30f2:	21 97       	sbiw	r28, 0x01	; 1
    30f4:	ca 0d       	add	r28, r10
    30f6:	db 1d       	adc	r29, r11
	while (isspace(*end) && end >= begin) end--;
    30f8:	01 c0       	rjmp	.+2      	; 0x30fc <_ZN6String4trimEv+0x52>
    30fa:	21 97       	sbiw	r28, 0x01	; 1
    30fc:	88 81       	ld	r24, Y
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	0e 94 32 25 	call	0x4a64	; 0x4a64 <isspace>
    3104:	89 2b       	or	r24, r25
    3106:	19 f0       	breq	.+6      	; 0x310e <_ZN6String4trimEv+0x64>
    3108:	c0 17       	cp	r28, r16
    310a:	d1 07       	cpc	r29, r17
    310c:	b0 f7       	brcc	.-20     	; 0x30fa <_ZN6String4trimEv+0x50>
	len = end + 1 - begin;
    310e:	21 96       	adiw	r28, 0x01	; 1
    3110:	ae 01       	movw	r20, r28
    3112:	40 1b       	sub	r20, r16
    3114:	51 0b       	sbc	r21, r17
    3116:	d6 01       	movw	r26, r12
    3118:	15 96       	adiw	r26, 0x05	; 5
    311a:	5c 93       	st	X, r21
    311c:	4e 93       	st	-X, r20
    311e:	14 97       	sbiw	r26, 0x04	; 4
	if (begin > buffer) memcpy(buffer, begin, len);
    3120:	a0 16       	cp	r10, r16
    3122:	b1 06       	cpc	r11, r17
    3124:	20 f4       	brcc	.+8      	; 0x312e <_ZN6String4trimEv+0x84>
    3126:	b8 01       	movw	r22, r16
    3128:	c5 01       	movw	r24, r10
    312a:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <memcpy>
	buffer[len] = 0;
    312e:	d6 01       	movw	r26, r12
    3130:	ed 91       	ld	r30, X+
    3132:	fc 91       	ld	r31, X
    3134:	11 97       	sbiw	r26, 0x01	; 1
    3136:	14 96       	adiw	r26, 0x04	; 4
    3138:	8d 91       	ld	r24, X+
    313a:	9c 91       	ld	r25, X
    313c:	15 97       	sbiw	r26, 0x05	; 5
    313e:	e8 0f       	add	r30, r24
    3140:	f9 1f       	adc	r31, r25
    3142:	10 82       	st	Z, r1
}
    3144:	df 91       	pop	r29
    3146:	cf 91       	pop	r28
    3148:	1f 91       	pop	r17
    314a:	0f 91       	pop	r16
    314c:	ff 90       	pop	r15
    314e:	ef 90       	pop	r14
    3150:	df 90       	pop	r13
    3152:	cf 90       	pop	r12
    3154:	bf 90       	pop	r11
    3156:	af 90       	pop	r10
    3158:	08 95       	ret

0000315a <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    315a:	fc 01       	movw	r30, r24
    315c:	80 81       	ld	r24, Z
    315e:	91 81       	ldd	r25, Z+1	; 0x01
    3160:	00 97       	sbiw	r24, 0x00	; 0
    3162:	19 f0       	breq	.+6      	; 0x316a <_ZNK6String5toIntEv+0x10>
    3164:	0c 94 0c 25 	jmp	0x4a18	; 0x4a18 <atol>
    3168:	08 95       	ret
	return 0;
    316a:	60 e0       	ldi	r22, 0x00	; 0
    316c:	70 e0       	ldi	r23, 0x00	; 0
    316e:	cb 01       	movw	r24, r22
}
    3170:	08 95       	ret

00003172 <_ZN8BLEMate27BLEScanEj>:
//  stored in the _addresses array.
BLEMate2::opResult BLEMate2::connect(byte index)
{
  if (index >= _numAddresses) return INVALID_PARAM;
  else return connect(_addresses[index]);
}
    3172:	6f 92       	push	r6
    3174:	7f 92       	push	r7
    3176:	8f 92       	push	r8
    3178:	9f 92       	push	r9
    317a:	af 92       	push	r10
    317c:	bf 92       	push	r11
    317e:	cf 92       	push	r12
    3180:	df 92       	push	r13
    3182:	ef 92       	push	r14
    3184:	ff 92       	push	r15
    3186:	0f 93       	push	r16
    3188:	1f 93       	push	r17
    318a:	cf 93       	push	r28
    318c:	df 93       	push	r29
    318e:	cd b7       	in	r28, 0x3d	; 61
    3190:	de b7       	in	r29, 0x3e	; 62
    3192:	e6 97       	sbiw	r28, 0x36	; 54
    3194:	0f b6       	in	r0, 0x3f	; 63
    3196:	f8 94       	cli
    3198:	de bf       	out	0x3e, r29	; 62
    319a:	0f be       	out	0x3f, r0	; 63
    319c:	cd bf       	out	0x3d, r28	; 61
    319e:	8c 01       	movw	r16, r24
    31a0:	7b 01       	movw	r14, r22
    31a2:	6e e5       	ldi	r22, 0x5E	; 94
    31a4:	72 e0       	ldi	r23, 0x02	; 2
    31a6:	ce 01       	movw	r24, r28
    31a8:	c1 96       	adiw	r24, 0x31	; 49
    31aa:	23 dd       	rcall	.-1466   	; 0x2bf2 <_ZN6StringC1EPKc>
    31ac:	6e e5       	ldi	r22, 0x5E	; 94
    31ae:	72 e0       	ldi	r23, 0x02	; 2
    31b0:	ce 01       	movw	r24, r28
    31b2:	8b 96       	adiw	r24, 0x2b	; 43
    31b4:	1e dd       	rcall	.-1476   	; 0x2bf2 <_ZN6StringC1EPKc>
    31b6:	6c e5       	ldi	r22, 0x5C	; 92
    31b8:	72 e0       	ldi	r23, 0x02	; 2
    31ba:	ce 01       	movw	r24, r28
    31bc:	85 96       	adiw	r24, 0x25	; 37
    31be:	19 dd       	rcall	.-1486   	; 0x2bf2 <_ZN6StringC1EPKc>
    31c0:	4a e0       	ldi	r20, 0x0A	; 10
    31c2:	b7 01       	movw	r22, r14
    31c4:	ce 01       	movw	r24, r28
    31c6:	4f 96       	adiw	r24, 0x1f	; 31
    31c8:	5b dd       	rcall	.-1354   	; 0x2c80 <_ZN6StringC1Ejh>
    31ca:	be 01       	movw	r22, r28
    31cc:	61 5e       	subi	r22, 0xE1	; 225
    31ce:	7f 4f       	sbci	r23, 0xFF	; 255
    31d0:	ce 01       	movw	r24, r28
    31d2:	49 96       	adiw	r24, 0x19	; 25
    31d4:	37 dd       	rcall	.-1426   	; 0x2c44 <_ZN6StringC1ERKS_>
    31d6:	6f e5       	ldi	r22, 0x5F	; 95
    31d8:	72 e0       	ldi	r23, 0x02	; 2
    31da:	ce 01       	movw	r24, r28
    31dc:	43 96       	adiw	r24, 0x13	; 19
    31de:	09 dd       	rcall	.-1518   	; 0x2bf2 <_ZN6StringC1EPKc>
    31e0:	ae 01       	movw	r20, r28
    31e2:	47 5e       	subi	r20, 0xE7	; 231
    31e4:	5f 4f       	sbci	r21, 0xFF	; 255
    31e6:	be 01       	movw	r22, r28
    31e8:	6d 5e       	subi	r22, 0xED	; 237
    31ea:	7f 4f       	sbci	r23, 0xFF	; 255
    31ec:	c8 01       	movw	r24, r16
    31ee:	aa d3       	rcall	.+1876   	; 0x3944 <_ZN8BLEMate211stdSetParamE6StringS0_>
    31f0:	ce 01       	movw	r24, r28
    31f2:	43 96       	adiw	r24, 0x13	; 19
    31f4:	8e dc       	rcall	.-1764   	; 0x2b12 <_ZN6StringD1Ev>
    31f6:	ce 01       	movw	r24, r28
    31f8:	49 96       	adiw	r24, 0x19	; 25
    31fa:	8b dc       	rcall	.-1770   	; 0x2b12 <_ZN6StringD1Ev>
    31fc:	c1 2c       	mov	r12, r1
    31fe:	d1 2c       	mov	r13, r1
    3200:	58 01       	movw	r10, r16
    3202:	82 e0       	ldi	r24, 0x02	; 2
    3204:	a8 0e       	add	r10, r24
    3206:	b1 1c       	adc	r11, r1
    3208:	6e e5       	ldi	r22, 0x5E	; 94
    320a:	72 e0       	ldi	r23, 0x02	; 2
    320c:	c5 01       	movw	r24, r10
    320e:	8c 0d       	add	r24, r12
    3210:	9d 1d       	adc	r25, r13
    3212:	21 dd       	rcall	.-1470   	; 0x2c56 <_ZN6StringaSEPKc>
    3214:	a6 e0       	ldi	r26, 0x06	; 6
    3216:	ca 0e       	add	r12, r26
    3218:	d1 1c       	adc	r13, r1
    321a:	be e1       	ldi	r27, 0x1E	; 30
    321c:	cb 16       	cp	r12, r27
    321e:	d1 04       	cpc	r13, r1
    3220:	99 f7       	brne	.-26     	; 0x3208 <_ZN8BLEMate27BLEScanEj+0x96>
    3222:	f8 01       	movw	r30, r16
    3224:	10 a2       	std	Z+32, r1	; 0x20
    3226:	c8 01       	movw	r24, r16
    3228:	47 d2       	rcall	.+1166   	; 0x36b8 <_ZN8BLEMate210knownStartEv>
    322a:	64 e6       	ldi	r22, 0x64	; 100
    322c:	72 e0       	ldi	r23, 0x02	; 2
    322e:	d8 01       	movw	r26, r16
    3230:	91 96       	adiw	r26, 0x21	; 33
    3232:	8d 91       	ld	r24, X+
    3234:	9c 91       	ld	r25, X
    3236:	92 97       	sbiw	r26, 0x22	; 34
    3238:	24 d8       	rcall	.-4024   	; 0x2282 <_ZN5Print5printEPKc>
    323a:	f8 01       	movw	r30, r16
    323c:	81 a1       	ldd	r24, Z+33	; 0x21
    323e:	92 a1       	ldd	r25, Z+34	; 0x22
    3240:	dc 01       	movw	r26, r24
    3242:	ed 91       	ld	r30, X+
    3244:	fc 91       	ld	r31, X
    3246:	02 84       	ldd	r0, Z+10	; 0x0a
    3248:	f3 85       	ldd	r31, Z+11	; 0x0b
    324a:	e0 2d       	mov	r30, r0
    324c:	19 95       	eicall
    324e:	6f db       	rcall	.-2338   	; 0x292e <millis>
    3250:	44 e1       	ldi	r20, 0x14	; 20
    3252:	55 e0       	ldi	r21, 0x05	; 5
    3254:	e4 9e       	mul	r14, r20
    3256:	90 01       	movw	r18, r0
    3258:	e5 9e       	mul	r14, r21
    325a:	30 0d       	add	r19, r0
    325c:	f4 9e       	mul	r15, r20
    325e:	30 0d       	add	r19, r0
    3260:	11 24       	eor	r1, r1
    3262:	0f 2e       	mov	r0, r31
    3264:	fb ef       	ldi	r31, 0xFB	; 251
    3266:	df 2e       	mov	r13, r31
    3268:	f0 2d       	mov	r31, r0
    326a:	4b 01       	movw	r8, r22
    326c:	5c 01       	movw	r10, r24
    326e:	82 0e       	add	r8, r18
    3270:	93 1e       	adc	r9, r19
    3272:	a1 1c       	adc	r10, r1
    3274:	b1 1c       	adc	r11, r1
    3276:	78 01       	movw	r14, r16
    3278:	b2 e0       	ldi	r27, 0x02	; 2
    327a:	eb 0e       	add	r14, r27
    327c:	f1 1c       	adc	r15, r1
    327e:	77 24       	eor	r7, r7
    3280:	73 94       	inc	r7
    3282:	c1 2c       	mov	r12, r1
    3284:	b9 c0       	rjmp	.+370    	; 0x33f8 <_ZN8BLEMate27BLEScanEj+0x286>
    3286:	f8 01       	movw	r30, r16
    3288:	81 a1       	ldd	r24, Z+33	; 0x21
    328a:	92 a1       	ldd	r25, Z+34	; 0x22
    328c:	dc 01       	movw	r26, r24
    328e:	ed 91       	ld	r30, X+
    3290:	fc 91       	ld	r31, X
    3292:	04 80       	ldd	r0, Z+4	; 0x04
    3294:	f5 81       	ldd	r31, Z+5	; 0x05
    3296:	e0 2d       	mov	r30, r0
    3298:	19 95       	eicall
    329a:	18 16       	cp	r1, r24
    329c:	19 06       	cpc	r1, r25
    329e:	74 f4       	brge	.+28     	; 0x32bc <_ZN8BLEMate27BLEScanEj+0x14a>
    32a0:	f8 01       	movw	r30, r16
    32a2:	81 a1       	ldd	r24, Z+33	; 0x21
    32a4:	92 a1       	ldd	r25, Z+34	; 0x22
    32a6:	dc 01       	movw	r26, r24
    32a8:	ed 91       	ld	r30, X+
    32aa:	fc 91       	ld	r31, X
    32ac:	06 80       	ldd	r0, Z+6	; 0x06
    32ae:	f7 81       	ldd	r31, Z+7	; 0x07
    32b0:	e0 2d       	mov	r30, r0
    32b2:	19 95       	eicall
    32b4:	68 2f       	mov	r22, r24
    32b6:	ce 01       	movw	r24, r28
    32b8:	c1 96       	adiw	r24, 0x31	; 49
    32ba:	3b dd       	rcall	.-1418   	; 0x2d32 <_ZN6String6concatEc>
    32bc:	be 01       	movw	r22, r28
    32be:	6b 5d       	subi	r22, 0xDB	; 219
    32c0:	7f 4f       	sbci	r23, 0xFF	; 255
    32c2:	ce 01       	movw	r24, r28
    32c4:	c1 96       	adiw	r24, 0x31	; 49
    32c6:	18 de       	rcall	.-976    	; 0x2ef8 <_ZNK6String8endsWithERKS_>
    32c8:	88 23       	and	r24, r24
    32ca:	09 f4       	brne	.+2      	; 0x32ce <_ZN8BLEMate27BLEScanEj+0x15c>
    32cc:	95 c0       	rjmp	.+298    	; 0x33f8 <_ZN8BLEMate27BLEScanEj+0x286>
    32ce:	6c e6       	ldi	r22, 0x6C	; 108
    32d0:	72 e0       	ldi	r23, 0x02	; 2
    32d2:	ce 01       	movw	r24, r28
    32d4:	0d 96       	adiw	r24, 0x0d	; 13
    32d6:	8d dc       	rcall	.-1766   	; 0x2bf2 <_ZN6StringC1EPKc>
    32d8:	be 01       	movw	r22, r28
    32da:	63 5f       	subi	r22, 0xF3	; 243
    32dc:	7f 4f       	sbci	r23, 0xFF	; 255
    32de:	ce 01       	movw	r24, r28
    32e0:	c1 96       	adiw	r24, 0x31	; 49
    32e2:	fb dd       	rcall	.-1034   	; 0x2eda <_ZNK6String10startsWithERKS_>
    32e4:	68 2e       	mov	r6, r24
    32e6:	ce 01       	movw	r24, r28
    32e8:	0d 96       	adiw	r24, 0x0d	; 13
    32ea:	13 dc       	rcall	.-2010   	; 0x2b12 <_ZN6StringD1Ev>
    32ec:	61 10       	cpse	r6, r1
    32ee:	8d c0       	rjmp	.+282    	; 0x340a <_ZN8BLEMate27BLEScanEj+0x298>
    32f0:	6f e6       	ldi	r22, 0x6F	; 111
    32f2:	72 e0       	ldi	r23, 0x02	; 2
    32f4:	ce 01       	movw	r24, r28
    32f6:	07 96       	adiw	r24, 0x07	; 7
    32f8:	7c dc       	rcall	.-1800   	; 0x2bf2 <_ZN6StringC1EPKc>
    32fa:	be 01       	movw	r22, r28
    32fc:	69 5f       	subi	r22, 0xF9	; 249
    32fe:	7f 4f       	sbci	r23, 0xFF	; 255
    3300:	ce 01       	movw	r24, r28
    3302:	c1 96       	adiw	r24, 0x31	; 49
    3304:	ea dd       	rcall	.-1068   	; 0x2eda <_ZNK6String10startsWithERKS_>
    3306:	68 2e       	mov	r6, r24
    3308:	ce 01       	movw	r24, r28
    330a:	07 96       	adiw	r24, 0x07	; 7
    330c:	02 dc       	rcall	.-2044   	; 0x2b12 <_ZN6StringD1Ev>
    330e:	66 20       	and	r6, r6
    3310:	09 f4       	brne	.+2      	; 0x3314 <_ZN8BLEMate27BLEScanEj+0x1a2>
    3312:	6d c0       	rjmp	.+218    	; 0x33ee <_ZN8BLEMate27BLEScanEj+0x27c>
    3314:	22 e1       	ldi	r18, 0x12	; 18
    3316:	30 e0       	ldi	r19, 0x00	; 0
    3318:	46 e0       	ldi	r20, 0x06	; 6
    331a:	50 e0       	ldi	r21, 0x00	; 0
    331c:	be 01       	movw	r22, r28
    331e:	6f 5c       	subi	r22, 0xCF	; 207
    3320:	7f 4f       	sbci	r23, 0xFF	; 255
    3322:	ce 01       	movw	r24, r28
    3324:	01 96       	adiw	r24, 0x01	; 1
    3326:	4f de       	rcall	.-866    	; 0x2fc6 <_ZNK6String9substringEjj>
    3328:	be 01       	movw	r22, r28
    332a:	6f 5f       	subi	r22, 0xFF	; 255
    332c:	7f 4f       	sbci	r23, 0xFF	; 255
    332e:	ce 01       	movw	r24, r28
    3330:	8b 96       	adiw	r24, 0x2b	; 43
    3332:	73 dc       	rcall	.-1818   	; 0x2c1a <_ZN6StringaSERKS_>
    3334:	ce 01       	movw	r24, r28
    3336:	01 96       	adiw	r24, 0x01	; 1
    3338:	ec db       	rcall	.-2088   	; 0x2b12 <_ZN6StringD1Ev>
    333a:	6e e5       	ldi	r22, 0x5E	; 94
    333c:	72 e0       	ldi	r23, 0x02	; 2
    333e:	ce 01       	movw	r24, r28
    3340:	c1 96       	adiw	r24, 0x31	; 49
    3342:	89 dc       	rcall	.-1774   	; 0x2c56 <_ZN6StringaSEPKc>
    3344:	f8 01       	movw	r30, r16
    3346:	80 a1       	ldd	r24, Z+32	; 0x20
    3348:	88 23       	and	r24, r24
    334a:	11 f0       	breq	.+4      	; 0x3350 <_ZN8BLEMate27BLEScanEj+0x1de>
    334c:	6c 2c       	mov	r6, r12
    334e:	0e c0       	rjmp	.+28     	; 0x336c <_ZN8BLEMate27BLEScanEj+0x1fa>
    3350:	be 01       	movw	r22, r28
    3352:	65 5d       	subi	r22, 0xD5	; 213
    3354:	7f 4f       	sbci	r23, 0xFF	; 255
    3356:	c7 01       	movw	r24, r14
    3358:	60 dc       	rcall	.-1856   	; 0x2c1a <_ZN6StringaSERKS_>
    335a:	d8 01       	movw	r26, r16
    335c:	90 96       	adiw	r26, 0x20	; 32
    335e:	8c 91       	ld	r24, X
    3360:	90 97       	sbiw	r26, 0x20	; 32
    3362:	8f 5f       	subi	r24, 0xFF	; 255
    3364:	90 96       	adiw	r26, 0x20	; 32
    3366:	8c 93       	st	X, r24
    3368:	d7 2c       	mov	r13, r7
    336a:	46 c0       	rjmp	.+140    	; 0x33f8 <_ZN8BLEMate27BLEScanEj+0x286>
    336c:	86 2d       	mov	r24, r6
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	bc 01       	movw	r22, r24
    3372:	66 0f       	add	r22, r22
    3374:	77 1f       	adc	r23, r23
    3376:	86 0f       	add	r24, r22
    3378:	97 1f       	adc	r25, r23
    337a:	bc 01       	movw	r22, r24
    337c:	66 0f       	add	r22, r22
    337e:	77 1f       	adc	r23, r23
    3380:	6e 5f       	subi	r22, 0xFE	; 254
    3382:	7f 4f       	sbci	r23, 0xFF	; 255
    3384:	60 0f       	add	r22, r16
    3386:	71 1f       	adc	r23, r17
    3388:	ce 01       	movw	r24, r28
    338a:	8b 96       	adiw	r24, 0x2b	; 43
    338c:	42 dd       	rcall	.-1404   	; 0x2e12 <_ZNK6String6equalsERKS_>
    338e:	88 23       	and	r24, r24
    3390:	31 f0       	breq	.+12     	; 0x339e <_ZN8BLEMate27BLEScanEj+0x22c>
    3392:	62 e7       	ldi	r22, 0x72	; 114
    3394:	72 e0       	ldi	r23, 0x02	; 2
    3396:	ce 01       	movw	r24, r28
    3398:	8b 96       	adiw	r24, 0x2b	; 43
    339a:	5d dc       	rcall	.-1862   	; 0x2c56 <_ZN6StringaSEPKc>
    339c:	05 c0       	rjmp	.+10     	; 0x33a8 <_ZN8BLEMate27BLEScanEj+0x236>
    339e:	63 94       	inc	r6
    33a0:	f8 01       	movw	r30, r16
    33a2:	80 a1       	ldd	r24, Z+32	; 0x20
    33a4:	68 16       	cp	r6, r24
    33a6:	10 f3       	brcs	.-60     	; 0x336c <_ZN8BLEMate27BLEScanEj+0x1fa>
    33a8:	62 e7       	ldi	r22, 0x72	; 114
    33aa:	72 e0       	ldi	r23, 0x02	; 2
    33ac:	ce 01       	movw	r24, r28
    33ae:	8b 96       	adiw	r24, 0x2b	; 43
    33b0:	42 dd       	rcall	.-1404   	; 0x2e36 <_ZNK6String6equalsEPKc>
    33b2:	81 11       	cpse	r24, r1
    33b4:	17 c0       	rjmp	.+46     	; 0x33e4 <_ZN8BLEMate27BLEScanEj+0x272>
    33b6:	d8 01       	movw	r26, r16
    33b8:	90 96       	adiw	r26, 0x20	; 32
    33ba:	8c 91       	ld	r24, X
    33bc:	90 97       	sbiw	r26, 0x20	; 32
    33be:	91 e0       	ldi	r25, 0x01	; 1
    33c0:	98 0f       	add	r25, r24
    33c2:	90 96       	adiw	r26, 0x20	; 32
    33c4:	9c 93       	st	X, r25
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	9c 01       	movw	r18, r24
    33ca:	22 0f       	add	r18, r18
    33cc:	33 1f       	adc	r19, r19
    33ce:	82 0f       	add	r24, r18
    33d0:	93 1f       	adc	r25, r19
    33d2:	88 0f       	add	r24, r24
    33d4:	99 1f       	adc	r25, r25
    33d6:	02 96       	adiw	r24, 0x02	; 2
    33d8:	be 01       	movw	r22, r28
    33da:	65 5d       	subi	r22, 0xD5	; 213
    33dc:	7f 4f       	sbci	r23, 0xFF	; 255
    33de:	80 0f       	add	r24, r16
    33e0:	91 1f       	adc	r25, r17
    33e2:	1b dc       	rcall	.-1994   	; 0x2c1a <_ZN6StringaSERKS_>
    33e4:	f8 01       	movw	r30, r16
    33e6:	80 a1       	ldd	r24, Z+32	; 0x20
    33e8:	85 30       	cpi	r24, 0x05	; 5
    33ea:	31 f4       	brne	.+12     	; 0x33f8 <_ZN8BLEMate27BLEScanEj+0x286>
    33ec:	10 c0       	rjmp	.+32     	; 0x340e <_ZN8BLEMate27BLEScanEj+0x29c>
    33ee:	6e e5       	ldi	r22, 0x5E	; 94
    33f0:	72 e0       	ldi	r23, 0x02	; 2
    33f2:	ce 01       	movw	r24, r28
    33f4:	c1 96       	adiw	r24, 0x31	; 49
    33f6:	2f dc       	rcall	.-1954   	; 0x2c56 <_ZN6StringaSEPKc>
    33f8:	9a da       	rcall	.-2764   	; 0x292e <millis>
    33fa:	68 15       	cp	r22, r8
    33fc:	79 05       	cpc	r23, r9
    33fe:	8a 05       	cpc	r24, r10
    3400:	9b 05       	cpc	r25, r11
    3402:	08 f4       	brcc	.+2      	; 0x3406 <_ZN8BLEMate27BLEScanEj+0x294>
    3404:	40 cf       	rjmp	.-384    	; 0x3286 <_ZN8BLEMate27BLEScanEj+0x114>
    3406:	1d 2d       	mov	r17, r13
    3408:	03 c0       	rjmp	.+6      	; 0x3410 <_ZN8BLEMate27BLEScanEj+0x29e>
    340a:	1f ef       	ldi	r17, 0xFF	; 255
    340c:	01 c0       	rjmp	.+2      	; 0x3410 <_ZN8BLEMate27BLEScanEj+0x29e>
    340e:	11 e0       	ldi	r17, 0x01	; 1
    3410:	ce 01       	movw	r24, r28
    3412:	4f 96       	adiw	r24, 0x1f	; 31
    3414:	7e db       	rcall	.-2308   	; 0x2b12 <_ZN6StringD1Ev>
    3416:	ce 01       	movw	r24, r28
    3418:	85 96       	adiw	r24, 0x25	; 37
    341a:	7b db       	rcall	.-2314   	; 0x2b12 <_ZN6StringD1Ev>
    341c:	ce 01       	movw	r24, r28
    341e:	8b 96       	adiw	r24, 0x2b	; 43
    3420:	78 db       	rcall	.-2320   	; 0x2b12 <_ZN6StringD1Ev>
    3422:	ce 01       	movw	r24, r28
    3424:	c1 96       	adiw	r24, 0x31	; 49
    3426:	75 db       	rcall	.-2326   	; 0x2b12 <_ZN6StringD1Ev>
    3428:	81 2f       	mov	r24, r17
    342a:	e6 96       	adiw	r28, 0x36	; 54
    342c:	0f b6       	in	r0, 0x3f	; 63
    342e:	f8 94       	cli
    3430:	de bf       	out	0x3e, r29	; 62
    3432:	0f be       	out	0x3f, r0	; 63
    3434:	cd bf       	out	0x3d, r28	; 61
    3436:	df 91       	pop	r29
    3438:	cf 91       	pop	r28
    343a:	1f 91       	pop	r17
    343c:	0f 91       	pop	r16
    343e:	ff 90       	pop	r15
    3440:	ef 90       	pop	r14
    3442:	df 90       	pop	r13
    3444:	cf 90       	pop	r12
    3446:	bf 90       	pop	r11
    3448:	af 90       	pop	r10
    344a:	9f 90       	pop	r9
    344c:	8f 90       	pop	r8
    344e:	7f 90       	pop	r7
    3450:	6f 90       	pop	r6
    3452:	08 95       	ret

00003454 <_ZN8BLEMate27connectE6String>:
    3454:	bf 92       	push	r11
    3456:	cf 92       	push	r12
    3458:	df 92       	push	r13
    345a:	ef 92       	push	r14
    345c:	ff 92       	push	r15
    345e:	0f 93       	push	r16
    3460:	1f 93       	push	r17
    3462:	cf 93       	push	r28
    3464:	df 93       	push	r29
    3466:	cd b7       	in	r28, 0x3d	; 61
    3468:	de b7       	in	r29, 0x3e	; 62
    346a:	68 97       	sbiw	r28, 0x18	; 24
    346c:	0f b6       	in	r0, 0x3f	; 63
    346e:	f8 94       	cli
    3470:	de bf       	out	0x3e, r29	; 62
    3472:	0f be       	out	0x3f, r0	; 63
    3474:	cd bf       	out	0x3d, r28	; 61
    3476:	8c 01       	movw	r16, r24
    3478:	7b 01       	movw	r14, r22
    347a:	db 01       	movw	r26, r22
    347c:	14 96       	adiw	r26, 0x04	; 4
    347e:	8d 91       	ld	r24, X+
    3480:	9c 91       	ld	r25, X
    3482:	15 97       	sbiw	r26, 0x05	; 5
    3484:	0c 97       	sbiw	r24, 0x0c	; 12
    3486:	09 f0       	breq	.+2      	; 0x348a <_ZN8BLEMate27connectE6String+0x36>
    3488:	a1 c0       	rjmp	.+322    	; 0x35cc <_ZN8BLEMate27connectE6String+0x178>
    348a:	6e e5       	ldi	r22, 0x5E	; 94
    348c:	72 e0       	ldi	r23, 0x02	; 2
    348e:	ce 01       	movw	r24, r28
    3490:	43 96       	adiw	r24, 0x13	; 19
    3492:	af db       	rcall	.-2210   	; 0x2bf2 <_ZN6StringC1EPKc>
    3494:	6c e5       	ldi	r22, 0x5C	; 92
    3496:	72 e0       	ldi	r23, 0x02	; 2
    3498:	ce 01       	movw	r24, r28
    349a:	0d 96       	adiw	r24, 0x0d	; 13
    349c:	aa db       	rcall	.-2220   	; 0x2bf2 <_ZN6StringC1EPKc>
    349e:	c8 01       	movw	r24, r16
    34a0:	0b d1       	rcall	.+534    	; 0x36b8 <_ZN8BLEMate210knownStartEv>
    34a2:	64 e6       	ldi	r22, 0x64	; 100
    34a4:	72 e0       	ldi	r23, 0x02	; 2
    34a6:	f8 01       	movw	r30, r16
    34a8:	81 a1       	ldd	r24, Z+33	; 0x21
    34aa:	92 a1       	ldd	r25, Z+34	; 0x22
    34ac:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN5Print5printEPKc>
    34b0:	64 e7       	ldi	r22, 0x74	; 116
    34b2:	72 e0       	ldi	r23, 0x02	; 2
    34b4:	d8 01       	movw	r26, r16
    34b6:	91 96       	adiw	r26, 0x21	; 33
    34b8:	8d 91       	ld	r24, X+
    34ba:	9c 91       	ld	r25, X
    34bc:	92 97       	sbiw	r26, 0x22	; 34
    34be:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN5Print5printEPKc>
    34c2:	b7 01       	movw	r22, r14
    34c4:	f8 01       	movw	r30, r16
    34c6:	81 a1       	ldd	r24, Z+33	; 0x21
    34c8:	92 a1       	ldd	r25, Z+34	; 0x22
    34ca:	0e 94 32 11 	call	0x2264	; 0x2264 <_ZN5Print5printERK6String>
    34ce:	69 e7       	ldi	r22, 0x79	; 121
    34d0:	72 e0       	ldi	r23, 0x02	; 2
    34d2:	d8 01       	movw	r26, r16
    34d4:	91 96       	adiw	r26, 0x21	; 33
    34d6:	8d 91       	ld	r24, X+
    34d8:	9c 91       	ld	r25, X
    34da:	92 97       	sbiw	r26, 0x22	; 34
    34dc:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN5Print5printEPKc>
    34e0:	f8 01       	movw	r30, r16
    34e2:	81 a1       	ldd	r24, Z+33	; 0x21
    34e4:	92 a1       	ldd	r25, Z+34	; 0x22
    34e6:	dc 01       	movw	r26, r24
    34e8:	ed 91       	ld	r30, X+
    34ea:	fc 91       	ld	r31, X
    34ec:	02 84       	ldd	r0, Z+10	; 0x0a
    34ee:	f3 85       	ldd	r31, Z+11	; 0x0b
    34f0:	e0 2d       	mov	r30, r0
    34f2:	19 95       	eicall
    34f4:	1c da       	rcall	.-3016   	; 0x292e <millis>
    34f6:	6b 01       	movw	r12, r22
    34f8:	7c 01       	movw	r14, r24
    34fa:	6e e5       	ldi	r22, 0x5E	; 94
    34fc:	72 e0       	ldi	r23, 0x02	; 2
    34fe:	ce 01       	movw	r24, r28
    3500:	43 96       	adiw	r24, 0x13	; 19
    3502:	a9 db       	rcall	.-2222   	; 0x2c56 <_ZN6StringaSEPKc>
    3504:	b8 e8       	ldi	r27, 0x88	; 136
    3506:	cb 0e       	add	r12, r27
    3508:	b3 e1       	ldi	r27, 0x13	; 19
    350a:	db 1e       	adc	r13, r27
    350c:	e1 1c       	adc	r14, r1
    350e:	f1 1c       	adc	r15, r1
    3510:	4a c0       	rjmp	.+148    	; 0x35a6 <_ZN8BLEMate27connectE6String+0x152>
    3512:	f8 01       	movw	r30, r16
    3514:	81 a1       	ldd	r24, Z+33	; 0x21
    3516:	92 a1       	ldd	r25, Z+34	; 0x22
    3518:	dc 01       	movw	r26, r24
    351a:	ed 91       	ld	r30, X+
    351c:	fc 91       	ld	r31, X
    351e:	04 80       	ldd	r0, Z+4	; 0x04
    3520:	f5 81       	ldd	r31, Z+5	; 0x05
    3522:	e0 2d       	mov	r30, r0
    3524:	19 95       	eicall
    3526:	18 16       	cp	r1, r24
    3528:	19 06       	cpc	r1, r25
    352a:	74 f4       	brge	.+28     	; 0x3548 <_ZN8BLEMate27connectE6String+0xf4>
    352c:	f8 01       	movw	r30, r16
    352e:	81 a1       	ldd	r24, Z+33	; 0x21
    3530:	92 a1       	ldd	r25, Z+34	; 0x22
    3532:	dc 01       	movw	r26, r24
    3534:	ed 91       	ld	r30, X+
    3536:	fc 91       	ld	r31, X
    3538:	06 80       	ldd	r0, Z+6	; 0x06
    353a:	f7 81       	ldd	r31, Z+7	; 0x07
    353c:	e0 2d       	mov	r30, r0
    353e:	19 95       	eicall
    3540:	68 2f       	mov	r22, r24
    3542:	ce 01       	movw	r24, r28
    3544:	43 96       	adiw	r24, 0x13	; 19
    3546:	f5 db       	rcall	.-2070   	; 0x2d32 <_ZN6String6concatEc>
    3548:	be 01       	movw	r22, r28
    354a:	63 5f       	subi	r22, 0xF3	; 243
    354c:	7f 4f       	sbci	r23, 0xFF	; 255
    354e:	ce 01       	movw	r24, r28
    3550:	43 96       	adiw	r24, 0x13	; 19
    3552:	d2 dc       	rcall	.-1628   	; 0x2ef8 <_ZNK6String8endsWithERKS_>
    3554:	88 23       	and	r24, r24
    3556:	39 f1       	breq	.+78     	; 0x35a6 <_ZN8BLEMate27connectE6String+0x152>
    3558:	6d e7       	ldi	r22, 0x7D	; 125
    355a:	72 e0       	ldi	r23, 0x02	; 2
    355c:	ce 01       	movw	r24, r28
    355e:	07 96       	adiw	r24, 0x07	; 7
    3560:	48 db       	rcall	.-2416   	; 0x2bf2 <_ZN6StringC1EPKc>
    3562:	be 01       	movw	r22, r28
    3564:	69 5f       	subi	r22, 0xF9	; 249
    3566:	7f 4f       	sbci	r23, 0xFF	; 255
    3568:	ce 01       	movw	r24, r28
    356a:	43 96       	adiw	r24, 0x13	; 19
    356c:	b6 dc       	rcall	.-1684   	; 0x2eda <_ZNK6String10startsWithERKS_>
    356e:	b8 2e       	mov	r11, r24
    3570:	ce 01       	movw	r24, r28
    3572:	07 96       	adiw	r24, 0x07	; 7
    3574:	ce da       	rcall	.-2660   	; 0x2b12 <_ZN6StringD1Ev>
    3576:	b1 10       	cpse	r11, r1
    3578:	1f c0       	rjmp	.+62     	; 0x35b8 <_ZN8BLEMate27connectE6String+0x164>
    357a:	61 e8       	ldi	r22, 0x81	; 129
    357c:	72 e0       	ldi	r23, 0x02	; 2
    357e:	ce 01       	movw	r24, r28
    3580:	01 96       	adiw	r24, 0x01	; 1
    3582:	37 db       	rcall	.-2450   	; 0x2bf2 <_ZN6StringC1EPKc>
    3584:	be 01       	movw	r22, r28
    3586:	6f 5f       	subi	r22, 0xFF	; 255
    3588:	7f 4f       	sbci	r23, 0xFF	; 255
    358a:	ce 01       	movw	r24, r28
    358c:	43 96       	adiw	r24, 0x13	; 19
    358e:	a5 dc       	rcall	.-1718   	; 0x2eda <_ZNK6String10startsWithERKS_>
    3590:	b8 2e       	mov	r11, r24
    3592:	ce 01       	movw	r24, r28
    3594:	01 96       	adiw	r24, 0x01	; 1
    3596:	bd da       	rcall	.-2694   	; 0x2b12 <_ZN6StringD1Ev>
    3598:	b1 10       	cpse	r11, r1
    359a:	10 c0       	rjmp	.+32     	; 0x35bc <_ZN8BLEMate27connectE6String+0x168>
    359c:	6e e5       	ldi	r22, 0x5E	; 94
    359e:	72 e0       	ldi	r23, 0x02	; 2
    35a0:	ce 01       	movw	r24, r28
    35a2:	43 96       	adiw	r24, 0x13	; 19
    35a4:	58 db       	rcall	.-2384   	; 0x2c56 <_ZN6StringaSEPKc>
    35a6:	c3 d9       	rcall	.-3194   	; 0x292e <millis>
    35a8:	6c 15       	cp	r22, r12
    35aa:	7d 05       	cpc	r23, r13
    35ac:	8e 05       	cpc	r24, r14
    35ae:	9f 05       	cpc	r25, r15
    35b0:	08 f4       	brcc	.+2      	; 0x35b4 <_ZN8BLEMate27connectE6String+0x160>
    35b2:	af cf       	rjmp	.-162    	; 0x3512 <_ZN8BLEMate27connectE6String+0xbe>
    35b4:	1e ef       	ldi	r17, 0xFE	; 254
    35b6:	03 c0       	rjmp	.+6      	; 0x35be <_ZN8BLEMate27connectE6String+0x16a>
    35b8:	1f ef       	ldi	r17, 0xFF	; 255
    35ba:	01 c0       	rjmp	.+2      	; 0x35be <_ZN8BLEMate27connectE6String+0x16a>
    35bc:	11 e0       	ldi	r17, 0x01	; 1
    35be:	ce 01       	movw	r24, r28
    35c0:	0d 96       	adiw	r24, 0x0d	; 13
    35c2:	a7 da       	rcall	.-2738   	; 0x2b12 <_ZN6StringD1Ev>
    35c4:	ce 01       	movw	r24, r28
    35c6:	43 96       	adiw	r24, 0x13	; 19
    35c8:	a4 da       	rcall	.-2744   	; 0x2b12 <_ZN6StringD1Ev>
    35ca:	01 c0       	rjmp	.+2      	; 0x35ce <_ZN8BLEMate27connectE6String+0x17a>
    35cc:	1d ef       	ldi	r17, 0xFD	; 253
    35ce:	81 2f       	mov	r24, r17
    35d0:	68 96       	adiw	r28, 0x18	; 24
    35d2:	0f b6       	in	r0, 0x3f	; 63
    35d4:	f8 94       	cli
    35d6:	de bf       	out	0x3e, r29	; 62
    35d8:	0f be       	out	0x3f, r0	; 63
    35da:	cd bf       	out	0x3d, r28	; 61
    35dc:	df 91       	pop	r29
    35de:	cf 91       	pop	r28
    35e0:	1f 91       	pop	r17
    35e2:	0f 91       	pop	r16
    35e4:	ff 90       	pop	r15
    35e6:	ef 90       	pop	r14
    35e8:	df 90       	pop	r13
    35ea:	cf 90       	pop	r12
    35ec:	bf 90       	pop	r11
    35ee:	08 95       	ret

000035f0 <_ZN8BLEMate210getAddressEhR6String>:

// Gets an address from the array of stored addresses. The return value allows
//  the user to check on whether there was in fact a valid address at the
//  requested index.
BLEMate2::opResult BLEMate2::getAddress(byte index, String &address)
{
    35f0:	0f 93       	push	r16
    35f2:	1f 93       	push	r17
    35f4:	cf 93       	push	r28
    35f6:	df 93       	push	r29
    35f8:	00 d0       	rcall	.+0      	; 0x35fa <_ZN8BLEMate210getAddressEhR6String+0xa>
    35fa:	00 d0       	rcall	.+0      	; 0x35fc <_ZN8BLEMate210getAddressEhR6String+0xc>
    35fc:	cd b7       	in	r28, 0x3d	; 61
    35fe:	de b7       	in	r29, 0x3e	; 62
    3600:	fc 01       	movw	r30, r24
    3602:	8a 01       	movw	r16, r20
  if (index+1 > _numAddresses)
    3604:	26 2f       	mov	r18, r22
    3606:	30 e0       	ldi	r19, 0x00	; 0
    3608:	a9 01       	movw	r20, r18
    360a:	4f 5f       	subi	r20, 0xFF	; 255
    360c:	5f 4f       	sbci	r21, 0xFF	; 255
    360e:	80 a1       	ldd	r24, Z+32	; 0x20
    3610:	90 e0       	ldi	r25, 0x00	; 0
    3612:	84 17       	cp	r24, r20
    3614:	95 07       	cpc	r25, r21
    3616:	7c f4       	brge	.+30     	; 0x3636 <_ZN8BLEMate210getAddressEhR6String+0x46>
  {
    String tempString = "";
    3618:	6e e5       	ldi	r22, 0x5E	; 94
    361a:	72 e0       	ldi	r23, 0x02	; 2
    361c:	ce 01       	movw	r24, r28
    361e:	01 96       	adiw	r24, 0x01	; 1
    3620:	e8 da       	rcall	.-2608   	; 0x2bf2 <_ZN6StringC1EPKc>
    address = tempString;
    3622:	be 01       	movw	r22, r28
    3624:	6f 5f       	subi	r22, 0xFF	; 255
    3626:	7f 4f       	sbci	r23, 0xFF	; 255
    3628:	c8 01       	movw	r24, r16
    362a:	f7 da       	rcall	.-2578   	; 0x2c1a <_ZN6StringaSERKS_>
    return INVALID_PARAM;
    362c:	ce 01       	movw	r24, r28
    362e:	01 96       	adiw	r24, 0x01	; 1
    3630:	70 da       	rcall	.-2848   	; 0x2b12 <_ZN6StringD1Ev>
    3632:	8d ef       	ldi	r24, 0xFD	; 253
    3634:	0f c0       	rjmp	.+30     	; 0x3654 <_ZN8BLEMate210getAddressEhR6String+0x64>
  }
  else address = _addresses[index];
    3636:	b9 01       	movw	r22, r18
    3638:	66 0f       	add	r22, r22
    363a:	77 1f       	adc	r23, r23
    363c:	26 0f       	add	r18, r22
    363e:	37 1f       	adc	r19, r23
    3640:	b9 01       	movw	r22, r18
    3642:	66 0f       	add	r22, r22
    3644:	77 1f       	adc	r23, r23
    3646:	6e 5f       	subi	r22, 0xFE	; 254
    3648:	7f 4f       	sbci	r23, 0xFF	; 255
    364a:	6e 0f       	add	r22, r30
    364c:	7f 1f       	adc	r23, r31
    364e:	c8 01       	movw	r24, r16
    3650:	e4 da       	rcall	.-2616   	; 0x2c1a <_ZN6StringaSERKS_>
  return SUCCESS;
    3652:	81 e0       	ldi	r24, 0x01	; 1
}
    3654:	26 96       	adiw	r28, 0x06	; 6
    3656:	0f b6       	in	r0, 0x3f	; 63
    3658:	f8 94       	cli
    365a:	de bf       	out	0x3e, r29	; 62
    365c:	0f be       	out	0x3f, r0	; 63
    365e:	cd bf       	out	0x3d, r28	; 61
    3660:	df 91       	pop	r29
    3662:	cf 91       	pop	r28
    3664:	1f 91       	pop	r17
    3666:	0f 91       	pop	r16
    3668:	08 95       	ret

0000366a <_ZN8BLEMate212numAddressesEv>:

// Gets the number of addresses we've found.
byte BLEMate2::numAddresses()
{
  return _numAddresses;
}
    366a:	fc 01       	movw	r30, r24
    366c:	80 a1       	ldd	r24, Z+32	; 0x20
    366e:	08 95       	ret

00003670 <_ZN8BLEMate2C1EP6Stream>:
      }
      buffer = "";
    }    
  }
  return TIMEOUT_ERROR;
}
    3670:	cf 92       	push	r12
    3672:	df 92       	push	r13
    3674:	ef 92       	push	r14
    3676:	ff 92       	push	r15
    3678:	0f 93       	push	r16
    367a:	1f 93       	push	r17
    367c:	cf 93       	push	r28
    367e:	df 93       	push	r29
    3680:	7c 01       	movw	r14, r24
    3682:	6b 01       	movw	r12, r22
    3684:	ec 01       	movw	r28, r24
    3686:	22 96       	adiw	r28, 0x02	; 2
    3688:	8c 01       	movw	r16, r24
    368a:	00 5e       	subi	r16, 0xE0	; 224
    368c:	1f 4f       	sbci	r17, 0xFF	; 255
    368e:	6e e5       	ldi	r22, 0x5E	; 94
    3690:	72 e0       	ldi	r23, 0x02	; 2
    3692:	ce 01       	movw	r24, r28
    3694:	ae da       	rcall	.-2724   	; 0x2bf2 <_ZN6StringC1EPKc>
    3696:	26 96       	adiw	r28, 0x06	; 6
    3698:	c0 17       	cp	r28, r16
    369a:	d1 07       	cpc	r29, r17
    369c:	c1 f7       	brne	.-16     	; 0x368e <_ZN8BLEMate2C1EP6Stream+0x1e>
    369e:	f7 01       	movw	r30, r14
    36a0:	d2 a2       	std	Z+34, r13	; 0x22
    36a2:	c1 a2       	std	Z+33, r12	; 0x21
    36a4:	10 a2       	std	Z+32, r1	; 0x20
    36a6:	df 91       	pop	r29
    36a8:	cf 91       	pop	r28
    36aa:	1f 91       	pop	r17
    36ac:	0f 91       	pop	r16
    36ae:	ff 90       	pop	r15
    36b0:	ef 90       	pop	r14
    36b2:	df 90       	pop	r13
    36b4:	cf 90       	pop	r12
    36b6:	08 95       	ret

000036b8 <_ZN8BLEMate210knownStartEv>:
    36b8:	8f 92       	push	r8
    36ba:	9f 92       	push	r9
    36bc:	af 92       	push	r10
    36be:	bf 92       	push	r11
    36c0:	cf 92       	push	r12
    36c2:	df 92       	push	r13
    36c4:	ef 92       	push	r14
    36c6:	ff 92       	push	r15
    36c8:	0f 93       	push	r16
    36ca:	1f 93       	push	r17
    36cc:	cf 93       	push	r28
    36ce:	df 93       	push	r29
    36d0:	cd b7       	in	r28, 0x3d	; 61
    36d2:	de b7       	in	r29, 0x3e	; 62
    36d4:	62 97       	sbiw	r28, 0x12	; 18
    36d6:	0f b6       	in	r0, 0x3f	; 63
    36d8:	f8 94       	cli
    36da:	de bf       	out	0x3e, r29	; 62
    36dc:	0f be       	out	0x3f, r0	; 63
    36de:	cd bf       	out	0x3d, r28	; 61
    36e0:	8c 01       	movw	r16, r24
    36e2:	6c e5       	ldi	r22, 0x5C	; 92
    36e4:	72 e0       	ldi	r23, 0x02	; 2
    36e6:	ce 01       	movw	r24, r28
    36e8:	0d 96       	adiw	r24, 0x0d	; 13
    36ea:	83 da       	rcall	.-2810   	; 0x2bf2 <_ZN6StringC1EPKc>
    36ec:	6e e5       	ldi	r22, 0x5E	; 94
    36ee:	72 e0       	ldi	r23, 0x02	; 2
    36f0:	ce 01       	movw	r24, r28
    36f2:	07 96       	adiw	r24, 0x07	; 7
    36f4:	7e da       	rcall	.-2820   	; 0x2bf2 <_ZN6StringC1EPKc>
    36f6:	6d e5       	ldi	r22, 0x5D	; 93
    36f8:	72 e0       	ldi	r23, 0x02	; 2
    36fa:	d8 01       	movw	r26, r16
    36fc:	91 96       	adiw	r26, 0x21	; 33
    36fe:	8d 91       	ld	r24, X+
    3700:	9c 91       	ld	r25, X
    3702:	92 97       	sbiw	r26, 0x22	; 34
    3704:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN5Print5printEPKc>
    3708:	f8 01       	movw	r30, r16
    370a:	81 a1       	ldd	r24, Z+33	; 0x21
    370c:	92 a1       	ldd	r25, Z+34	; 0x22
    370e:	dc 01       	movw	r26, r24
    3710:	ed 91       	ld	r30, X+
    3712:	fc 91       	ld	r31, X
    3714:	02 84       	ldd	r0, Z+10	; 0x0a
    3716:	f3 85       	ldd	r31, Z+11	; 0x0b
    3718:	e0 2d       	mov	r30, r0
    371a:	19 95       	eicall
    371c:	08 d9       	rcall	.-3568   	; 0x292e <millis>
    371e:	6b 01       	movw	r12, r22
    3720:	7c 01       	movw	r14, r24
    3722:	2c c0       	rjmp	.+88     	; 0x377c <_ZN8BLEMate210knownStartEv+0xc4>
    3724:	f8 01       	movw	r30, r16
    3726:	81 a1       	ldd	r24, Z+33	; 0x21
    3728:	92 a1       	ldd	r25, Z+34	; 0x22
    372a:	dc 01       	movw	r26, r24
    372c:	ed 91       	ld	r30, X+
    372e:	fc 91       	ld	r31, X
    3730:	04 80       	ldd	r0, Z+4	; 0x04
    3732:	f5 81       	ldd	r31, Z+5	; 0x05
    3734:	e0 2d       	mov	r30, r0
    3736:	19 95       	eicall
    3738:	18 16       	cp	r1, r24
    373a:	19 06       	cpc	r1, r25
    373c:	8c f4       	brge	.+34     	; 0x3760 <_ZN8BLEMate210knownStartEv+0xa8>
    373e:	f8 01       	movw	r30, r16
    3740:	81 a1       	ldd	r24, Z+33	; 0x21
    3742:	92 a1       	ldd	r25, Z+34	; 0x22
    3744:	dc 01       	movw	r26, r24
    3746:	ed 91       	ld	r30, X+
    3748:	fc 91       	ld	r31, X
    374a:	06 80       	ldd	r0, Z+6	; 0x06
    374c:	f7 81       	ldd	r31, Z+7	; 0x07
    374e:	e0 2d       	mov	r30, r0
    3750:	19 95       	eicall
    3752:	68 2f       	mov	r22, r24
    3754:	ce 01       	movw	r24, r28
    3756:	07 96       	adiw	r24, 0x07	; 7
    3758:	ec da       	rcall	.-2600   	; 0x2d32 <_ZN6String6concatEc>
    375a:	e9 d8       	rcall	.-3630   	; 0x292e <millis>
    375c:	6b 01       	movw	r12, r22
    375e:	7c 01       	movw	r14, r24
    3760:	e6 d8       	rcall	.-3636   	; 0x292e <millis>
    3762:	46 01       	movw	r8, r12
    3764:	57 01       	movw	r10, r14
    3766:	b8 ee       	ldi	r27, 0xE8	; 232
    3768:	8b 0e       	add	r8, r27
    376a:	b3 e0       	ldi	r27, 0x03	; 3
    376c:	9b 1e       	adc	r9, r27
    376e:	a1 1c       	adc	r10, r1
    3770:	b1 1c       	adc	r11, r1
    3772:	86 16       	cp	r8, r22
    3774:	97 06       	cpc	r9, r23
    3776:	a8 06       	cpc	r10, r24
    3778:	b9 06       	cpc	r11, r25
    377a:	c0 f0       	brcs	.+48     	; 0x37ac <_ZN8BLEMate210knownStartEv+0xf4>
    377c:	be 01       	movw	r22, r28
    377e:	63 5f       	subi	r22, 0xF3	; 243
    3780:	7f 4f       	sbci	r23, 0xFF	; 255
    3782:	ce 01       	movw	r24, r28
    3784:	07 96       	adiw	r24, 0x07	; 7
    3786:	b8 db       	rcall	.-2192   	; 0x2ef8 <_ZNK6String8endsWithERKS_>
    3788:	81 30       	cpi	r24, 0x01	; 1
    378a:	61 f6       	brne	.-104    	; 0x3724 <_ZN8BLEMate210knownStartEv+0x6c>
    378c:	6d e7       	ldi	r22, 0x7D	; 125
    378e:	72 e0       	ldi	r23, 0x02	; 2
    3790:	ce 01       	movw	r24, r28
    3792:	01 96       	adiw	r24, 0x01	; 1
    3794:	2e da       	rcall	.-2980   	; 0x2bf2 <_ZN6StringC1EPKc>
    3796:	be 01       	movw	r22, r28
    3798:	6f 5f       	subi	r22, 0xFF	; 255
    379a:	7f 4f       	sbci	r23, 0xFF	; 255
    379c:	ce 01       	movw	r24, r28
    379e:	07 96       	adiw	r24, 0x07	; 7
    37a0:	9c db       	rcall	.-2248   	; 0x2eda <_ZNK6String10startsWithERKS_>
    37a2:	ce 01       	movw	r24, r28
    37a4:	01 96       	adiw	r24, 0x01	; 1
    37a6:	b5 d9       	rcall	.-3222   	; 0x2b12 <_ZN6StringD1Ev>
    37a8:	11 e0       	ldi	r17, 0x01	; 1
    37aa:	01 c0       	rjmp	.+2      	; 0x37ae <_ZN8BLEMate210knownStartEv+0xf6>
    37ac:	1e ef       	ldi	r17, 0xFE	; 254
    37ae:	ce 01       	movw	r24, r28
    37b0:	07 96       	adiw	r24, 0x07	; 7
    37b2:	af d9       	rcall	.-3234   	; 0x2b12 <_ZN6StringD1Ev>
    37b4:	ce 01       	movw	r24, r28
    37b6:	0d 96       	adiw	r24, 0x0d	; 13
    37b8:	ac d9       	rcall	.-3240   	; 0x2b12 <_ZN6StringD1Ev>
    37ba:	81 2f       	mov	r24, r17
    37bc:	62 96       	adiw	r28, 0x12	; 18
    37be:	0f b6       	in	r0, 0x3f	; 63
    37c0:	f8 94       	cli
    37c2:	de bf       	out	0x3e, r29	; 62
    37c4:	0f be       	out	0x3f, r0	; 63
    37c6:	cd bf       	out	0x3d, r28	; 61
    37c8:	df 91       	pop	r29
    37ca:	cf 91       	pop	r28
    37cc:	1f 91       	pop	r17
    37ce:	0f 91       	pop	r16
    37d0:	ff 90       	pop	r15
    37d2:	ef 90       	pop	r14
    37d4:	df 90       	pop	r13
    37d6:	cf 90       	pop	r12
    37d8:	bf 90       	pop	r11
    37da:	af 90       	pop	r10
    37dc:	9f 90       	pop	r9
    37de:	8f 90       	pop	r8
    37e0:	08 95       	ret

000037e2 <_ZN8BLEMate26stdCmdE6String>:
    37e2:	bf 92       	push	r11
    37e4:	cf 92       	push	r12
    37e6:	df 92       	push	r13
    37e8:	ef 92       	push	r14
    37ea:	ff 92       	push	r15
    37ec:	0f 93       	push	r16
    37ee:	1f 93       	push	r17
    37f0:	cf 93       	push	r28
    37f2:	df 93       	push	r29
    37f4:	cd b7       	in	r28, 0x3d	; 61
    37f6:	de b7       	in	r29, 0x3e	; 62
    37f8:	68 97       	sbiw	r28, 0x18	; 24
    37fa:	0f b6       	in	r0, 0x3f	; 63
    37fc:	f8 94       	cli
    37fe:	de bf       	out	0x3e, r29	; 62
    3800:	0f be       	out	0x3f, r0	; 63
    3802:	cd bf       	out	0x3d, r28	; 61
    3804:	8c 01       	movw	r16, r24
    3806:	7b 01       	movw	r14, r22
    3808:	6e e5       	ldi	r22, 0x5E	; 94
    380a:	72 e0       	ldi	r23, 0x02	; 2
    380c:	ce 01       	movw	r24, r28
    380e:	43 96       	adiw	r24, 0x13	; 19
    3810:	f0 d9       	rcall	.-3104   	; 0x2bf2 <_ZN6StringC1EPKc>
    3812:	6c e5       	ldi	r22, 0x5C	; 92
    3814:	72 e0       	ldi	r23, 0x02	; 2
    3816:	ce 01       	movw	r24, r28
    3818:	0d 96       	adiw	r24, 0x0d	; 13
    381a:	eb d9       	rcall	.-3114   	; 0x2bf2 <_ZN6StringC1EPKc>
    381c:	c8 01       	movw	r24, r16
    381e:	4c df       	rcall	.-360    	; 0x36b8 <_ZN8BLEMate210knownStartEv>
    3820:	b7 01       	movw	r22, r14
    3822:	d8 01       	movw	r26, r16
    3824:	91 96       	adiw	r26, 0x21	; 33
    3826:	8d 91       	ld	r24, X+
    3828:	9c 91       	ld	r25, X
    382a:	92 97       	sbiw	r26, 0x22	; 34
    382c:	0e 94 32 11 	call	0x2264	; 0x2264 <_ZN5Print5printERK6String>
    3830:	6d e5       	ldi	r22, 0x5D	; 93
    3832:	72 e0       	ldi	r23, 0x02	; 2
    3834:	f8 01       	movw	r30, r16
    3836:	81 a1       	ldd	r24, Z+33	; 0x21
    3838:	92 a1       	ldd	r25, Z+34	; 0x22
    383a:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN5Print5printEPKc>
    383e:	d8 01       	movw	r26, r16
    3840:	91 96       	adiw	r26, 0x21	; 33
    3842:	8d 91       	ld	r24, X+
    3844:	9c 91       	ld	r25, X
    3846:	92 97       	sbiw	r26, 0x22	; 34
    3848:	dc 01       	movw	r26, r24
    384a:	ed 91       	ld	r30, X+
    384c:	fc 91       	ld	r31, X
    384e:	02 84       	ldd	r0, Z+10	; 0x0a
    3850:	f3 85       	ldd	r31, Z+11	; 0x0b
    3852:	e0 2d       	mov	r30, r0
    3854:	19 95       	eicall
    3856:	6b d8       	rcall	.-3882   	; 0x292e <millis>
    3858:	6b 01       	movw	r12, r22
    385a:	7c 01       	movw	r14, r24
    385c:	b8 eb       	ldi	r27, 0xB8	; 184
    385e:	cb 0e       	add	r12, r27
    3860:	bb e0       	ldi	r27, 0x0B	; 11
    3862:	db 1e       	adc	r13, r27
    3864:	e1 1c       	adc	r14, r1
    3866:	f1 1c       	adc	r15, r1
    3868:	4a c0       	rjmp	.+148    	; 0x38fe <_ZN8BLEMate26stdCmdE6String+0x11c>
    386a:	f8 01       	movw	r30, r16
    386c:	81 a1       	ldd	r24, Z+33	; 0x21
    386e:	92 a1       	ldd	r25, Z+34	; 0x22
    3870:	dc 01       	movw	r26, r24
    3872:	ed 91       	ld	r30, X+
    3874:	fc 91       	ld	r31, X
    3876:	04 80       	ldd	r0, Z+4	; 0x04
    3878:	f5 81       	ldd	r31, Z+5	; 0x05
    387a:	e0 2d       	mov	r30, r0
    387c:	19 95       	eicall
    387e:	18 16       	cp	r1, r24
    3880:	19 06       	cpc	r1, r25
    3882:	74 f4       	brge	.+28     	; 0x38a0 <_ZN8BLEMate26stdCmdE6String+0xbe>
    3884:	f8 01       	movw	r30, r16
    3886:	81 a1       	ldd	r24, Z+33	; 0x21
    3888:	92 a1       	ldd	r25, Z+34	; 0x22
    388a:	dc 01       	movw	r26, r24
    388c:	ed 91       	ld	r30, X+
    388e:	fc 91       	ld	r31, X
    3890:	06 80       	ldd	r0, Z+6	; 0x06
    3892:	f7 81       	ldd	r31, Z+7	; 0x07
    3894:	e0 2d       	mov	r30, r0
    3896:	19 95       	eicall
    3898:	68 2f       	mov	r22, r24
    389a:	ce 01       	movw	r24, r28
    389c:	43 96       	adiw	r24, 0x13	; 19
    389e:	49 da       	rcall	.-2926   	; 0x2d32 <_ZN6String6concatEc>
    38a0:	be 01       	movw	r22, r28
    38a2:	63 5f       	subi	r22, 0xF3	; 243
    38a4:	7f 4f       	sbci	r23, 0xFF	; 255
    38a6:	ce 01       	movw	r24, r28
    38a8:	43 96       	adiw	r24, 0x13	; 19
    38aa:	26 db       	rcall	.-2484   	; 0x2ef8 <_ZNK6String8endsWithERKS_>
    38ac:	88 23       	and	r24, r24
    38ae:	39 f1       	breq	.+78     	; 0x38fe <_ZN8BLEMate26stdCmdE6String+0x11c>
    38b0:	6c e6       	ldi	r22, 0x6C	; 108
    38b2:	72 e0       	ldi	r23, 0x02	; 2
    38b4:	ce 01       	movw	r24, r28
    38b6:	07 96       	adiw	r24, 0x07	; 7
    38b8:	9c d9       	rcall	.-3272   	; 0x2bf2 <_ZN6StringC1EPKc>
    38ba:	be 01       	movw	r22, r28
    38bc:	69 5f       	subi	r22, 0xF9	; 249
    38be:	7f 4f       	sbci	r23, 0xFF	; 255
    38c0:	ce 01       	movw	r24, r28
    38c2:	43 96       	adiw	r24, 0x13	; 19
    38c4:	0a db       	rcall	.-2540   	; 0x2eda <_ZNK6String10startsWithERKS_>
    38c6:	b8 2e       	mov	r11, r24
    38c8:	ce 01       	movw	r24, r28
    38ca:	07 96       	adiw	r24, 0x07	; 7
    38cc:	22 d9       	rcall	.-3516   	; 0x2b12 <_ZN6StringD1Ev>
    38ce:	b1 10       	cpse	r11, r1
    38d0:	1f c0       	rjmp	.+62     	; 0x3910 <_ZN8BLEMate26stdCmdE6String+0x12e>
    38d2:	61 ea       	ldi	r22, 0xA1	; 161
    38d4:	72 e0       	ldi	r23, 0x02	; 2
    38d6:	ce 01       	movw	r24, r28
    38d8:	01 96       	adiw	r24, 0x01	; 1
    38da:	8b d9       	rcall	.-3306   	; 0x2bf2 <_ZN6StringC1EPKc>
    38dc:	be 01       	movw	r22, r28
    38de:	6f 5f       	subi	r22, 0xFF	; 255
    38e0:	7f 4f       	sbci	r23, 0xFF	; 255
    38e2:	ce 01       	movw	r24, r28
    38e4:	43 96       	adiw	r24, 0x13	; 19
    38e6:	f9 da       	rcall	.-2574   	; 0x2eda <_ZNK6String10startsWithERKS_>
    38e8:	b8 2e       	mov	r11, r24
    38ea:	ce 01       	movw	r24, r28
    38ec:	01 96       	adiw	r24, 0x01	; 1
    38ee:	11 d9       	rcall	.-3550   	; 0x2b12 <_ZN6StringD1Ev>
    38f0:	b1 10       	cpse	r11, r1
    38f2:	10 c0       	rjmp	.+32     	; 0x3914 <_ZN8BLEMate26stdCmdE6String+0x132>
    38f4:	6e e5       	ldi	r22, 0x5E	; 94
    38f6:	72 e0       	ldi	r23, 0x02	; 2
    38f8:	ce 01       	movw	r24, r28
    38fa:	43 96       	adiw	r24, 0x13	; 19
    38fc:	ac d9       	rcall	.-3240   	; 0x2c56 <_ZN6StringaSEPKc>
    38fe:	17 d8       	rcall	.-4050   	; 0x292e <millis>
    3900:	6c 15       	cp	r22, r12
    3902:	7d 05       	cpc	r23, r13
    3904:	8e 05       	cpc	r24, r14
    3906:	9f 05       	cpc	r25, r15
    3908:	08 f4       	brcc	.+2      	; 0x390c <_ZN8BLEMate26stdCmdE6String+0x12a>
    390a:	af cf       	rjmp	.-162    	; 0x386a <_ZN8BLEMate26stdCmdE6String+0x88>
    390c:	1e ef       	ldi	r17, 0xFE	; 254
    390e:	03 c0       	rjmp	.+6      	; 0x3916 <_ZN8BLEMate26stdCmdE6String+0x134>
    3910:	1f ef       	ldi	r17, 0xFF	; 255
    3912:	01 c0       	rjmp	.+2      	; 0x3916 <_ZN8BLEMate26stdCmdE6String+0x134>
    3914:	11 e0       	ldi	r17, 0x01	; 1
    3916:	ce 01       	movw	r24, r28
    3918:	0d 96       	adiw	r24, 0x0d	; 13
    391a:	fb d8       	rcall	.-3594   	; 0x2b12 <_ZN6StringD1Ev>
    391c:	ce 01       	movw	r24, r28
    391e:	43 96       	adiw	r24, 0x13	; 19
    3920:	f8 d8       	rcall	.-3600   	; 0x2b12 <_ZN6StringD1Ev>
    3922:	81 2f       	mov	r24, r17
    3924:	68 96       	adiw	r28, 0x18	; 24
    3926:	0f b6       	in	r0, 0x3f	; 63
    3928:	f8 94       	cli
    392a:	de bf       	out	0x3e, r29	; 62
    392c:	0f be       	out	0x3f, r0	; 63
    392e:	cd bf       	out	0x3d, r28	; 61
    3930:	df 91       	pop	r29
    3932:	cf 91       	pop	r28
    3934:	1f 91       	pop	r17
    3936:	0f 91       	pop	r16
    3938:	ff 90       	pop	r15
    393a:	ef 90       	pop	r14
    393c:	df 90       	pop	r13
    393e:	cf 90       	pop	r12
    3940:	bf 90       	pop	r11
    3942:	08 95       	ret

00003944 <_ZN8BLEMate211stdSetParamE6StringS0_>:
    3944:	bf 92       	push	r11
    3946:	cf 92       	push	r12
    3948:	df 92       	push	r13
    394a:	ef 92       	push	r14
    394c:	ff 92       	push	r15
    394e:	0f 93       	push	r16
    3950:	1f 93       	push	r17
    3952:	cf 93       	push	r28
    3954:	df 93       	push	r29
    3956:	cd b7       	in	r28, 0x3d	; 61
    3958:	de b7       	in	r29, 0x3e	; 62
    395a:	68 97       	sbiw	r28, 0x18	; 24
    395c:	0f b6       	in	r0, 0x3f	; 63
    395e:	f8 94       	cli
    3960:	de bf       	out	0x3e, r29	; 62
    3962:	0f be       	out	0x3f, r0	; 63
    3964:	cd bf       	out	0x3d, r28	; 61
    3966:	8c 01       	movw	r16, r24
    3968:	6b 01       	movw	r12, r22
    396a:	7a 01       	movw	r14, r20
    396c:	6e e5       	ldi	r22, 0x5E	; 94
    396e:	72 e0       	ldi	r23, 0x02	; 2
    3970:	ce 01       	movw	r24, r28
    3972:	43 96       	adiw	r24, 0x13	; 19
    3974:	3e d9       	rcall	.-3460   	; 0x2bf2 <_ZN6StringC1EPKc>
    3976:	6c e5       	ldi	r22, 0x5C	; 92
    3978:	72 e0       	ldi	r23, 0x02	; 2
    397a:	ce 01       	movw	r24, r28
    397c:	0d 96       	adiw	r24, 0x0d	; 13
    397e:	39 d9       	rcall	.-3470   	; 0x2bf2 <_ZN6StringC1EPKc>
    3980:	c8 01       	movw	r24, r16
    3982:	9a de       	rcall	.-716    	; 0x36b8 <_ZN8BLEMate210knownStartEv>
    3984:	6c ea       	ldi	r22, 0xAC	; 172
    3986:	72 e0       	ldi	r23, 0x02	; 2
    3988:	d8 01       	movw	r26, r16
    398a:	91 96       	adiw	r26, 0x21	; 33
    398c:	8d 91       	ld	r24, X+
    398e:	9c 91       	ld	r25, X
    3990:	92 97       	sbiw	r26, 0x22	; 34
    3992:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN5Print5printEPKc>
    3996:	b6 01       	movw	r22, r12
    3998:	f8 01       	movw	r30, r16
    399a:	81 a1       	ldd	r24, Z+33	; 0x21
    399c:	92 a1       	ldd	r25, Z+34	; 0x22
    399e:	0e 94 32 11 	call	0x2264	; 0x2264 <_ZN5Print5printERK6String>
    39a2:	6f ed       	ldi	r22, 0xDF	; 223
    39a4:	73 e0       	ldi	r23, 0x03	; 3
    39a6:	d8 01       	movw	r26, r16
    39a8:	91 96       	adiw	r26, 0x21	; 33
    39aa:	8d 91       	ld	r24, X+
    39ac:	9c 91       	ld	r25, X
    39ae:	92 97       	sbiw	r26, 0x22	; 34
    39b0:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN5Print5printEPKc>
    39b4:	b7 01       	movw	r22, r14
    39b6:	f8 01       	movw	r30, r16
    39b8:	81 a1       	ldd	r24, Z+33	; 0x21
    39ba:	92 a1       	ldd	r25, Z+34	; 0x22
    39bc:	0e 94 32 11 	call	0x2264	; 0x2264 <_ZN5Print5printERK6String>
    39c0:	6d e5       	ldi	r22, 0x5D	; 93
    39c2:	72 e0       	ldi	r23, 0x02	; 2
    39c4:	d8 01       	movw	r26, r16
    39c6:	91 96       	adiw	r26, 0x21	; 33
    39c8:	8d 91       	ld	r24, X+
    39ca:	9c 91       	ld	r25, X
    39cc:	92 97       	sbiw	r26, 0x22	; 34
    39ce:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN5Print5printEPKc>
    39d2:	f8 01       	movw	r30, r16
    39d4:	81 a1       	ldd	r24, Z+33	; 0x21
    39d6:	92 a1       	ldd	r25, Z+34	; 0x22
    39d8:	dc 01       	movw	r26, r24
    39da:	ed 91       	ld	r30, X+
    39dc:	fc 91       	ld	r31, X
    39de:	02 84       	ldd	r0, Z+10	; 0x0a
    39e0:	f3 85       	ldd	r31, Z+11	; 0x0b
    39e2:	e0 2d       	mov	r30, r0
    39e4:	19 95       	eicall
    39e6:	0e 94 97 14 	call	0x292e	; 0x292e <millis>
    39ea:	6b 01       	movw	r12, r22
    39ec:	7c 01       	movw	r14, r24
    39ee:	b0 ed       	ldi	r27, 0xD0	; 208
    39f0:	cb 0e       	add	r12, r27
    39f2:	b7 e0       	ldi	r27, 0x07	; 7
    39f4:	db 1e       	adc	r13, r27
    39f6:	e1 1c       	adc	r14, r1
    39f8:	f1 1c       	adc	r15, r1
    39fa:	4a c0       	rjmp	.+148    	; 0x3a90 <_ZN8BLEMate211stdSetParamE6StringS0_+0x14c>
    39fc:	f8 01       	movw	r30, r16
    39fe:	81 a1       	ldd	r24, Z+33	; 0x21
    3a00:	92 a1       	ldd	r25, Z+34	; 0x22
    3a02:	dc 01       	movw	r26, r24
    3a04:	ed 91       	ld	r30, X+
    3a06:	fc 91       	ld	r31, X
    3a08:	04 80       	ldd	r0, Z+4	; 0x04
    3a0a:	f5 81       	ldd	r31, Z+5	; 0x05
    3a0c:	e0 2d       	mov	r30, r0
    3a0e:	19 95       	eicall
    3a10:	18 16       	cp	r1, r24
    3a12:	19 06       	cpc	r1, r25
    3a14:	74 f4       	brge	.+28     	; 0x3a32 <_ZN8BLEMate211stdSetParamE6StringS0_+0xee>
    3a16:	f8 01       	movw	r30, r16
    3a18:	81 a1       	ldd	r24, Z+33	; 0x21
    3a1a:	92 a1       	ldd	r25, Z+34	; 0x22
    3a1c:	dc 01       	movw	r26, r24
    3a1e:	ed 91       	ld	r30, X+
    3a20:	fc 91       	ld	r31, X
    3a22:	06 80       	ldd	r0, Z+6	; 0x06
    3a24:	f7 81       	ldd	r31, Z+7	; 0x07
    3a26:	e0 2d       	mov	r30, r0
    3a28:	19 95       	eicall
    3a2a:	68 2f       	mov	r22, r24
    3a2c:	ce 01       	movw	r24, r28
    3a2e:	43 96       	adiw	r24, 0x13	; 19
    3a30:	80 d9       	rcall	.-3328   	; 0x2d32 <_ZN6String6concatEc>
    3a32:	be 01       	movw	r22, r28
    3a34:	63 5f       	subi	r22, 0xF3	; 243
    3a36:	7f 4f       	sbci	r23, 0xFF	; 255
    3a38:	ce 01       	movw	r24, r28
    3a3a:	43 96       	adiw	r24, 0x13	; 19
    3a3c:	5d da       	rcall	.-2886   	; 0x2ef8 <_ZNK6String8endsWithERKS_>
    3a3e:	88 23       	and	r24, r24
    3a40:	39 f1       	breq	.+78     	; 0x3a90 <_ZN8BLEMate211stdSetParamE6StringS0_+0x14c>
    3a42:	6c e6       	ldi	r22, 0x6C	; 108
    3a44:	72 e0       	ldi	r23, 0x02	; 2
    3a46:	ce 01       	movw	r24, r28
    3a48:	07 96       	adiw	r24, 0x07	; 7
    3a4a:	d3 d8       	rcall	.-3674   	; 0x2bf2 <_ZN6StringC1EPKc>
    3a4c:	be 01       	movw	r22, r28
    3a4e:	69 5f       	subi	r22, 0xF9	; 249
    3a50:	7f 4f       	sbci	r23, 0xFF	; 255
    3a52:	ce 01       	movw	r24, r28
    3a54:	43 96       	adiw	r24, 0x13	; 19
    3a56:	41 da       	rcall	.-2942   	; 0x2eda <_ZNK6String10startsWithERKS_>
    3a58:	b8 2e       	mov	r11, r24
    3a5a:	ce 01       	movw	r24, r28
    3a5c:	07 96       	adiw	r24, 0x07	; 7
    3a5e:	59 d8       	rcall	.-3918   	; 0x2b12 <_ZN6StringD1Ev>
    3a60:	b1 10       	cpse	r11, r1
    3a62:	20 c0       	rjmp	.+64     	; 0x3aa4 <_ZN8BLEMate211stdSetParamE6StringS0_+0x160>
    3a64:	61 ea       	ldi	r22, 0xA1	; 161
    3a66:	72 e0       	ldi	r23, 0x02	; 2
    3a68:	ce 01       	movw	r24, r28
    3a6a:	01 96       	adiw	r24, 0x01	; 1
    3a6c:	c2 d8       	rcall	.-3708   	; 0x2bf2 <_ZN6StringC1EPKc>
    3a6e:	be 01       	movw	r22, r28
    3a70:	6f 5f       	subi	r22, 0xFF	; 255
    3a72:	7f 4f       	sbci	r23, 0xFF	; 255
    3a74:	ce 01       	movw	r24, r28
    3a76:	43 96       	adiw	r24, 0x13	; 19
    3a78:	30 da       	rcall	.-2976   	; 0x2eda <_ZNK6String10startsWithERKS_>
    3a7a:	b8 2e       	mov	r11, r24
    3a7c:	ce 01       	movw	r24, r28
    3a7e:	01 96       	adiw	r24, 0x01	; 1
    3a80:	48 d8       	rcall	.-3952   	; 0x2b12 <_ZN6StringD1Ev>
    3a82:	b1 10       	cpse	r11, r1
    3a84:	11 c0       	rjmp	.+34     	; 0x3aa8 <_ZN8BLEMate211stdSetParamE6StringS0_+0x164>
    3a86:	6e e5       	ldi	r22, 0x5E	; 94
    3a88:	72 e0       	ldi	r23, 0x02	; 2
    3a8a:	ce 01       	movw	r24, r28
    3a8c:	43 96       	adiw	r24, 0x13	; 19
    3a8e:	e3 d8       	rcall	.-3642   	; 0x2c56 <_ZN6StringaSEPKc>
    3a90:	0e 94 97 14 	call	0x292e	; 0x292e <millis>
    3a94:	6c 15       	cp	r22, r12
    3a96:	7d 05       	cpc	r23, r13
    3a98:	8e 05       	cpc	r24, r14
    3a9a:	9f 05       	cpc	r25, r15
    3a9c:	08 f4       	brcc	.+2      	; 0x3aa0 <_ZN8BLEMate211stdSetParamE6StringS0_+0x15c>
    3a9e:	ae cf       	rjmp	.-164    	; 0x39fc <_ZN8BLEMate211stdSetParamE6StringS0_+0xb8>
    3aa0:	1e ef       	ldi	r17, 0xFE	; 254
    3aa2:	03 c0       	rjmp	.+6      	; 0x3aaa <_ZN8BLEMate211stdSetParamE6StringS0_+0x166>
    3aa4:	1f ef       	ldi	r17, 0xFF	; 255
    3aa6:	01 c0       	rjmp	.+2      	; 0x3aaa <_ZN8BLEMate211stdSetParamE6StringS0_+0x166>
    3aa8:	11 e0       	ldi	r17, 0x01	; 1
    3aaa:	ce 01       	movw	r24, r28
    3aac:	0d 96       	adiw	r24, 0x0d	; 13
    3aae:	31 d8       	rcall	.-3998   	; 0x2b12 <_ZN6StringD1Ev>
    3ab0:	ce 01       	movw	r24, r28
    3ab2:	43 96       	adiw	r24, 0x13	; 19
    3ab4:	2e d8       	rcall	.-4004   	; 0x2b12 <_ZN6StringD1Ev>
    3ab6:	81 2f       	mov	r24, r17
    3ab8:	68 96       	adiw	r28, 0x18	; 24
    3aba:	0f b6       	in	r0, 0x3f	; 63
    3abc:	f8 94       	cli
    3abe:	de bf       	out	0x3e, r29	; 62
    3ac0:	0f be       	out	0x3f, r0	; 63
    3ac2:	cd bf       	out	0x3d, r28	; 61
    3ac4:	df 91       	pop	r29
    3ac6:	cf 91       	pop	r28
    3ac8:	1f 91       	pop	r17
    3aca:	0f 91       	pop	r16
    3acc:	ff 90       	pop	r15
    3ace:	ef 90       	pop	r14
    3ad0:	df 90       	pop	r13
    3ad2:	cf 90       	pop	r12
    3ad4:	bf 90       	pop	r11
    3ad6:	08 95       	ret

00003ad8 <_ZN8BLEMate29amCentralERb>:
//  device; that's important information, so we should be able to query
//  the module regarding that. We're not going to store that info, however, 
//  since the whole point is to get it "from the horse's mouth" rather than
//  trusting that our software is in sync with the state of the module.
BLEMate2::opResult BLEMate2::amCentral(boolean &inCentralMode)
{
    3ad8:	8f 92       	push	r8
    3ada:	9f 92       	push	r9
    3adc:	af 92       	push	r10
    3ade:	bf 92       	push	r11
    3ae0:	cf 92       	push	r12
    3ae2:	df 92       	push	r13
    3ae4:	ef 92       	push	r14
    3ae6:	ff 92       	push	r15
    3ae8:	0f 93       	push	r16
    3aea:	1f 93       	push	r17
    3aec:	cf 93       	push	r28
    3aee:	df 93       	push	r29
    3af0:	cd b7       	in	r28, 0x3d	; 61
    3af2:	de b7       	in	r29, 0x3e	; 62
    3af4:	6e 97       	sbiw	r28, 0x1e	; 30
    3af6:	0f b6       	in	r0, 0x3f	; 63
    3af8:	f8 94       	cli
    3afa:	de bf       	out	0x3e, r29	; 62
    3afc:	0f be       	out	0x3f, r0	; 63
    3afe:	cd bf       	out	0x3d, r28	; 61
    3b00:	8c 01       	movw	r16, r24
    3b02:	7b 01       	movw	r14, r22
  String buffer;
    3b04:	6e e5       	ldi	r22, 0x5E	; 94
    3b06:	72 e0       	ldi	r23, 0x02	; 2
    3b08:	ce 01       	movw	r24, r28
    3b0a:	49 96       	adiw	r24, 0x19	; 25
    3b0c:	72 d8       	rcall	.-3868   	; 0x2bf2 <_ZN6StringC1EPKc>
  String EOL = String("\n\r");
    3b0e:	6c e5       	ldi	r22, 0x5C	; 92
    3b10:	72 e0       	ldi	r23, 0x02	; 2
    3b12:	ce 01       	movw	r24, r28
    3b14:	43 96       	adiw	r24, 0x13	; 19
    3b16:	6d d8       	rcall	.-3878   	; 0x2bf2 <_ZN6StringC1EPKc>
  
  knownStart(); // Clear the serial buffer in the module and the Arduino.
    3b18:	c8 01       	movw	r24, r16
    3b1a:	ce dd       	rcall	.-1124   	; 0x36b8 <_ZN8BLEMate210knownStartEv>
  
  _serialPort->print("STS\r");
    3b1c:	60 ee       	ldi	r22, 0xE0	; 224
    3b1e:	72 e0       	ldi	r23, 0x02	; 2
    3b20:	d8 01       	movw	r26, r16
    3b22:	91 96       	adiw	r26, 0x21	; 33
    3b24:	8d 91       	ld	r24, X+
    3b26:	9c 91       	ld	r25, X
    3b28:	92 97       	sbiw	r26, 0x22	; 34
    3b2a:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN5Print5printEPKc>
  _serialPort->flush();
    3b2e:	f8 01       	movw	r30, r16
    3b30:	81 a1       	ldd	r24, Z+33	; 0x21
    3b32:	92 a1       	ldd	r25, Z+34	; 0x22
    3b34:	dc 01       	movw	r26, r24
    3b36:	ed 91       	ld	r30, X+
    3b38:	fc 91       	ld	r31, X
    3b3a:	02 84       	ldd	r0, Z+10	; 0x0a
    3b3c:	f3 85       	ldd	r31, Z+11	; 0x0b
    3b3e:	e0 2d       	mov	r30, r0
    3b40:	19 95       	eicall
  
  // We're going to use the internal timer to track the elapsed time since we
  //  issued the command. Bog-standard Arduino stuff.
  unsigned long startTime = millis();
    3b42:	0e 94 97 14 	call	0x292e	; 0x292e <millis>
    
  // This is our timeout loop. We'll give the module 3 seconds.
  while ((startTime + 3000) > millis())
    3b46:	4b 01       	movw	r8, r22
    3b48:	5c 01       	movw	r10, r24
    3b4a:	b8 eb       	ldi	r27, 0xB8	; 184
    3b4c:	8b 0e       	add	r8, r27
    3b4e:	bb e0       	ldi	r27, 0x0B	; 11
    3b50:	9b 1e       	adc	r9, r27
    3b52:	a1 1c       	adc	r10, r1
    3b54:	b1 1c       	adc	r11, r1
      }
      else if (buffer.startsWith("STS")) 
      {
        if (buffer.charAt(4) == 'C')
        {
          inCentralMode = true;
    3b56:	dd 24       	eor	r13, r13
    3b58:	d3 94       	inc	r13
  // We're going to use the internal timer to track the elapsed time since we
  //  issued the command. Bog-standard Arduino stuff.
  unsigned long startTime = millis();
    
  // This is our timeout loop. We'll give the module 3 seconds.
  while ((startTime + 3000) > millis())
    3b5a:	6c c0       	rjmp	.+216    	; 0x3c34 <_ZN8BLEMate29amCentralERb+0x15c>
  {
    // Grow the current buffered data, until we receive the EOL string.    
    if (_serialPort->available() > 0) 
    3b5c:	f8 01       	movw	r30, r16
    3b5e:	81 a1       	ldd	r24, Z+33	; 0x21
    3b60:	92 a1       	ldd	r25, Z+34	; 0x22
    3b62:	dc 01       	movw	r26, r24
    3b64:	ed 91       	ld	r30, X+
    3b66:	fc 91       	ld	r31, X
    3b68:	04 80       	ldd	r0, Z+4	; 0x04
    3b6a:	f5 81       	ldd	r31, Z+5	; 0x05
    3b6c:	e0 2d       	mov	r30, r0
    3b6e:	19 95       	eicall
    3b70:	18 16       	cp	r1, r24
    3b72:	19 06       	cpc	r1, r25
    3b74:	74 f4       	brge	.+28     	; 0x3b92 <_ZN8BLEMate29amCentralERb+0xba>
    {
      buffer.concat(char(_serialPort->read()));
    3b76:	f8 01       	movw	r30, r16
    3b78:	81 a1       	ldd	r24, Z+33	; 0x21
    3b7a:	92 a1       	ldd	r25, Z+34	; 0x22
    3b7c:	dc 01       	movw	r26, r24
    3b7e:	ed 91       	ld	r30, X+
    3b80:	fc 91       	ld	r31, X
    3b82:	06 80       	ldd	r0, Z+6	; 0x06
    3b84:	f7 81       	ldd	r31, Z+7	; 0x07
    3b86:	e0 2d       	mov	r30, r0
    3b88:	19 95       	eicall
    3b8a:	68 2f       	mov	r22, r24
    3b8c:	ce 01       	movw	r24, r28
    3b8e:	49 96       	adiw	r24, 0x19	; 25
    3b90:	d0 d8       	rcall	.-3680   	; 0x2d32 <_ZN6String6concatEc>
    }
    if (buffer.endsWith(EOL))
    3b92:	be 01       	movw	r22, r28
    3b94:	6d 5e       	subi	r22, 0xED	; 237
    3b96:	7f 4f       	sbci	r23, 0xFF	; 255
    3b98:	ce 01       	movw	r24, r28
    3b9a:	49 96       	adiw	r24, 0x19	; 25
    3b9c:	ad d9       	rcall	.-3238   	; 0x2ef8 <_ZNK6String8endsWithERKS_>
    3b9e:	88 23       	and	r24, r24
    3ba0:	09 f4       	brne	.+2      	; 0x3ba4 <_ZN8BLEMate29amCentralERb+0xcc>
    3ba2:	48 c0       	rjmp	.+144    	; 0x3c34 <_ZN8BLEMate29amCentralERb+0x15c>
    {
      if (buffer.startsWith("ER")) 
    3ba4:	6c e6       	ldi	r22, 0x6C	; 108
    3ba6:	72 e0       	ldi	r23, 0x02	; 2
    3ba8:	ce 01       	movw	r24, r28
    3baa:	0d 96       	adiw	r24, 0x0d	; 13
    3bac:	22 d8       	rcall	.-4028   	; 0x2bf2 <_ZN6StringC1EPKc>
    3bae:	be 01       	movw	r22, r28
    3bb0:	63 5f       	subi	r22, 0xF3	; 243
    3bb2:	7f 4f       	sbci	r23, 0xFF	; 255
    3bb4:	ce 01       	movw	r24, r28
    3bb6:	49 96       	adiw	r24, 0x19	; 25
    3bb8:	90 d9       	rcall	.-3296   	; 0x2eda <_ZNK6String10startsWithERKS_>
    3bba:	c8 2e       	mov	r12, r24
    3bbc:	ce 01       	movw	r24, r28
    3bbe:	0d 96       	adiw	r24, 0x0d	; 13
    3bc0:	0e 94 89 15 	call	0x2b12	; 0x2b12 <_ZN6StringD1Ev>
    3bc4:	c1 10       	cpse	r12, r1
    3bc6:	40 c0       	rjmp	.+128    	; 0x3c48 <_ZN8BLEMate29amCentralERb+0x170>
      {
        return MODULE_ERROR;
      }
      else if (buffer.startsWith("OK")) 
    3bc8:	61 ea       	ldi	r22, 0xA1	; 161
    3bca:	72 e0       	ldi	r23, 0x02	; 2
    3bcc:	ce 01       	movw	r24, r28
    3bce:	07 96       	adiw	r24, 0x07	; 7
    3bd0:	10 d8       	rcall	.-4064   	; 0x2bf2 <_ZN6StringC1EPKc>
    3bd2:	be 01       	movw	r22, r28
    3bd4:	69 5f       	subi	r22, 0xF9	; 249
    3bd6:	7f 4f       	sbci	r23, 0xFF	; 255
    3bd8:	ce 01       	movw	r24, r28
    3bda:	49 96       	adiw	r24, 0x19	; 25
    3bdc:	7e d9       	rcall	.-3332   	; 0x2eda <_ZNK6String10startsWithERKS_>
    3bde:	c8 2e       	mov	r12, r24
    3be0:	ce 01       	movw	r24, r28
    3be2:	07 96       	adiw	r24, 0x07	; 7
    3be4:	0e 94 89 15 	call	0x2b12	; 0x2b12 <_ZN6StringD1Ev>
    3be8:	c1 10       	cpse	r12, r1
    3bea:	30 c0       	rjmp	.+96     	; 0x3c4c <_ZN8BLEMate29amCentralERb+0x174>
      {
        return SUCCESS;
      }
      else if (buffer.startsWith("STS")) 
    3bec:	65 ee       	ldi	r22, 0xE5	; 229
    3bee:	72 e0       	ldi	r23, 0x02	; 2
    3bf0:	ce 01       	movw	r24, r28
    3bf2:	01 96       	adiw	r24, 0x01	; 1
    3bf4:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <_ZN6StringC1EPKc>
    3bf8:	be 01       	movw	r22, r28
    3bfa:	6f 5f       	subi	r22, 0xFF	; 255
    3bfc:	7f 4f       	sbci	r23, 0xFF	; 255
    3bfe:	ce 01       	movw	r24, r28
    3c00:	49 96       	adiw	r24, 0x19	; 25
    3c02:	6b d9       	rcall	.-3370   	; 0x2eda <_ZNK6String10startsWithERKS_>
    3c04:	c8 2e       	mov	r12, r24
    3c06:	ce 01       	movw	r24, r28
    3c08:	01 96       	adiw	r24, 0x01	; 1
    3c0a:	0e 94 89 15 	call	0x2b12	; 0x2b12 <_ZN6StringD1Ev>
    3c0e:	cc 20       	and	r12, r12
    3c10:	61 f0       	breq	.+24     	; 0x3c2a <_ZN8BLEMate29amCentralERb+0x152>
      {
        if (buffer.charAt(4) == 'C')
    3c12:	64 e0       	ldi	r22, 0x04	; 4
    3c14:	70 e0       	ldi	r23, 0x00	; 0
    3c16:	ce 01       	movw	r24, r28
    3c18:	49 96       	adiw	r24, 0x19	; 25
    3c1a:	a7 d9       	rcall	.-3250   	; 0x2f6a <_ZNK6String6charAtEj>
    3c1c:	83 34       	cpi	r24, 0x43	; 67
    3c1e:	19 f4       	brne	.+6      	; 0x3c26 <_ZN8BLEMate29amCentralERb+0x14e>
        {
          inCentralMode = true;
    3c20:	f7 01       	movw	r30, r14
    3c22:	d0 82       	st	Z, r13
    3c24:	02 c0       	rjmp	.+4      	; 0x3c2a <_ZN8BLEMate29amCentralERb+0x152>
        }
        else
        {
          inCentralMode = false;
    3c26:	d7 01       	movw	r26, r14
    3c28:	1c 92       	st	X, r1
        }
      } 
      buffer = "";
    3c2a:	6e e5       	ldi	r22, 0x5E	; 94
    3c2c:	72 e0       	ldi	r23, 0x02	; 2
    3c2e:	ce 01       	movw	r24, r28
    3c30:	49 96       	adiw	r24, 0x19	; 25
    3c32:	11 d8       	rcall	.-4062   	; 0x2c56 <_ZN6StringaSEPKc>
  // We're going to use the internal timer to track the elapsed time since we
  //  issued the command. Bog-standard Arduino stuff.
  unsigned long startTime = millis();
    
  // This is our timeout loop. We'll give the module 3 seconds.
  while ((startTime + 3000) > millis())
    3c34:	0e 94 97 14 	call	0x292e	; 0x292e <millis>
    3c38:	68 15       	cp	r22, r8
    3c3a:	79 05       	cpc	r23, r9
    3c3c:	8a 05       	cpc	r24, r10
    3c3e:	9b 05       	cpc	r25, r11
    3c40:	08 f4       	brcc	.+2      	; 0x3c44 <_ZN8BLEMate29amCentralERb+0x16c>
    3c42:	8c cf       	rjmp	.-232    	; 0x3b5c <_ZN8BLEMate29amCentralERb+0x84>
        }
      } 
      buffer = "";
    }    
  }
  return TIMEOUT_ERROR;
    3c44:	1e ef       	ldi	r17, 0xFE	; 254
    3c46:	03 c0       	rjmp	.+6      	; 0x3c4e <_ZN8BLEMate29amCentralERb+0x176>
    }
    if (buffer.endsWith(EOL))
    {
      if (buffer.startsWith("ER")) 
      {
        return MODULE_ERROR;
    3c48:	1f ef       	ldi	r17, 0xFF	; 255
    3c4a:	01 c0       	rjmp	.+2      	; 0x3c4e <_ZN8BLEMate29amCentralERb+0x176>
      }
      else if (buffer.startsWith("OK")) 
      {
        return SUCCESS;
    3c4c:	11 e0       	ldi	r17, 0x01	; 1
//  since the whole point is to get it "from the horse's mouth" rather than
//  trusting that our software is in sync with the state of the module.
BLEMate2::opResult BLEMate2::amCentral(boolean &inCentralMode)
{
  String buffer;
  String EOL = String("\n\r");
    3c4e:	ce 01       	movw	r24, r28
    3c50:	43 96       	adiw	r24, 0x13	; 19
    3c52:	0e 94 89 15 	call	0x2b12	; 0x2b12 <_ZN6StringD1Ev>
        }
      } 
      buffer = "";
    }    
  }
  return TIMEOUT_ERROR;
    3c56:	ce 01       	movw	r24, r28
    3c58:	49 96       	adiw	r24, 0x19	; 25
    3c5a:	0e 94 89 15 	call	0x2b12	; 0x2b12 <_ZN6StringD1Ev>
}
    3c5e:	81 2f       	mov	r24, r17
    3c60:	6e 96       	adiw	r28, 0x1e	; 30
    3c62:	0f b6       	in	r0, 0x3f	; 63
    3c64:	f8 94       	cli
    3c66:	de bf       	out	0x3e, r29	; 62
    3c68:	0f be       	out	0x3f, r0	; 63
    3c6a:	cd bf       	out	0x3d, r28	; 61
    3c6c:	df 91       	pop	r29
    3c6e:	cf 91       	pop	r28
    3c70:	1f 91       	pop	r17
    3c72:	0f 91       	pop	r16
    3c74:	ff 90       	pop	r15
    3c76:	ef 90       	pop	r14
    3c78:	df 90       	pop	r13
    3c7a:	cf 90       	pop	r12
    3c7c:	bf 90       	pop	r11
    3c7e:	af 90       	pop	r10
    3c80:	9f 90       	pop	r9
    3c82:	8f 90       	pop	r8
    3c84:	08 95       	ret

00003c86 <_ZN8BLEMate28sendDataEPch>:
  return result;
}

// Now, byte array.
BLEMate2::opResult BLEMate2::sendData(char *dataBuffer, byte dataLen)
{
    3c86:	8f 92       	push	r8
    3c88:	9f 92       	push	r9
    3c8a:	af 92       	push	r10
    3c8c:	bf 92       	push	r11
    3c8e:	cf 92       	push	r12
    3c90:	df 92       	push	r13
    3c92:	ef 92       	push	r14
    3c94:	ff 92       	push	r15
    3c96:	0f 93       	push	r16
    3c98:	1f 93       	push	r17
    3c9a:	cf 93       	push	r28
    3c9c:	df 93       	push	r29
    3c9e:	cd b7       	in	r28, 0x3d	; 61
    3ca0:	de b7       	in	r29, 0x3e	; 62
    3ca2:	69 97       	sbiw	r28, 0x19	; 25
    3ca4:	0f b6       	in	r0, 0x3f	; 63
    3ca6:	f8 94       	cli
    3ca8:	de bf       	out	0x3e, r29	; 62
    3caa:	0f be       	out	0x3f, r0	; 63
    3cac:	cd bf       	out	0x3d, r28	; 61
    3cae:	7c 01       	movw	r14, r24
    3cb0:	8b 01       	movw	r16, r22
    3cb2:	84 2e       	mov	r8, r20
  String EOL = String("\n\r");
    3cb4:	6c e5       	ldi	r22, 0x5C	; 92
    3cb6:	72 e0       	ldi	r23, 0x02	; 2
    3cb8:	ce 01       	movw	r24, r28
    3cba:	43 96       	adiw	r24, 0x13	; 19
    3cbc:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <_ZN6StringC1EPKc>
  //  I don't want to burden the user with that, unduly, so I'm going to chop
  //  up their data and send it out in smaller blocks.
   
  // Thus, the first quetion is: am I in central mode, or not?
  boolean inCentralMode;
  amCentral(inCentralMode);
    3cc0:	be 01       	movw	r22, r28
    3cc2:	67 5e       	subi	r22, 0xE7	; 231
    3cc4:	7f 4f       	sbci	r23, 0xFF	; 255
    3cc6:	c7 01       	movw	r24, r14
    3cc8:	07 df       	rcall	.-498    	; 0x3ad8 <_ZN8BLEMate29amCentralERb>
  // What we're now going to do is to build a String object with our buffer
  //  contents and then hit send on that buffer when it reaches a the length
  //  limited by the mode.

  byte outBufLenLimit = 20;
  if (!inCentralMode)
    3cca:	89 8d       	ldd	r24, Y+25	; 0x19
    3ccc:	88 23       	and	r24, r24
    3cce:	29 f0       	breq	.+10     	; 0x3cda <_ZN8BLEMate28sendDataEPch+0x54>

  // What we're now going to do is to build a String object with our buffer
  //  contents and then hit send on that buffer when it reaches a the length
  //  limited by the mode.

  byte outBufLenLimit = 20;
    3cd0:	0f 2e       	mov	r0, r31
    3cd2:	f4 e1       	ldi	r31, 0x14	; 20
    3cd4:	af 2e       	mov	r10, r31
    3cd6:	f0 2d       	mov	r31, r0
    3cd8:	04 c0       	rjmp	.+8      	; 0x3ce2 <_ZN8BLEMate28sendDataEPch+0x5c>
  if (!inCentralMode)
  {
    outBufLenLimit = 125;
    3cda:	0f 2e       	mov	r0, r31
    3cdc:	fd e7       	ldi	r31, 0x7D	; 125
    3cde:	af 2e       	mov	r10, r31
    3ce0:	f0 2d       	mov	r31, r0
  byte inBufPtr = 0;
  byte outBufLen = 0;
  byte dataLeft = dataLen;

  opResult result = SUCCESS;
  while (inBufPtr < dataLen)
    3ce2:	88 20       	and	r8, r8
    3ce4:	09 f4       	brne	.+2      	; 0x3ce8 <_ZN8BLEMate28sendDataEPch+0x62>
    3ce6:	50 c0       	rjmp	.+160    	; 0x3d88 <_ZN8BLEMate28sendDataEPch+0x102>
    3ce8:	98 2c       	mov	r9, r8
    3cea:	d1 2c       	mov	r13, r1
    3cec:	9a 14       	cp	r9, r10
    3cee:	08 f4       	brcc	.+2      	; 0x3cf2 <_ZN8BLEMate28sendDataEPch+0x6c>
    3cf0:	a9 2c       	mov	r10, r9
  {
    if (dataLeft < outBufLenLimit)
    {
      outBufLenLimit = dataLeft;
    }
    dataLeft -= outBufLenLimit;
    3cf2:	9a 18       	sub	r9, r10
    String outBuf;
    3cf4:	6e e5       	ldi	r22, 0x5E	; 94
    3cf6:	72 e0       	ldi	r23, 0x02	; 2
    3cf8:	ce 01       	movw	r24, r28
    3cfa:	0d 96       	adiw	r24, 0x0d	; 13
    3cfc:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <_ZN6StringC1EPKc>
    while (outBufLen < outBufLenLimit)
    3d00:	aa 20       	and	r10, r10
    3d02:	81 f0       	breq	.+32     	; 0x3d24 <_ZN8BLEMate28sendDataEPch+0x9e>
    3d04:	ba 2c       	mov	r11, r10
    3d06:	bd 0c       	add	r11, r13
    {
      outBuf.concat(dataBuffer[inBufPtr++]);
    3d08:	cc 24       	eor	r12, r12
    3d0a:	c3 94       	inc	r12
    3d0c:	cd 0c       	add	r12, r13
    3d0e:	f8 01       	movw	r30, r16
    3d10:	ed 0d       	add	r30, r13
    3d12:	f1 1d       	adc	r31, r1
    3d14:	60 81       	ld	r22, Z
    3d16:	ce 01       	movw	r24, r28
    3d18:	0d 96       	adiw	r24, 0x0d	; 13
    3d1a:	0b d8       	rcall	.-4074   	; 0x2d32 <_ZN6String6concatEc>
    {
      outBufLenLimit = dataLeft;
    }
    dataLeft -= outBufLenLimit;
    String outBuf;
    while (outBufLen < outBufLenLimit)
    3d1c:	cb 14       	cp	r12, r11
    3d1e:	19 f0       	breq	.+6      	; 0x3d26 <_ZN8BLEMate28sendDataEPch+0xa0>
    {
      outBuf.concat(dataBuffer[inBufPtr++]);
    3d20:	dc 2c       	mov	r13, r12
    3d22:	f2 cf       	rjmp	.-28     	; 0x3d08 <_ZN8BLEMate28sendDataEPch+0x82>
    {
      outBufLenLimit = dataLeft;
    }
    dataLeft -= outBufLenLimit;
    String outBuf;
    while (outBufLen < outBufLenLimit)
    3d24:	bd 2c       	mov	r11, r13

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    3d26:	69 ee       	ldi	r22, 0xE9	; 233
    3d28:	72 e0       	ldi	r23, 0x02	; 2
    3d2a:	ce 01       	movw	r24, r28
    3d2c:	07 96       	adiw	r24, 0x07	; 7
    3d2e:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <_ZN6StringC1EPKc>
    {
      outBuf.concat(dataBuffer[inBufPtr++]);
      outBufLen++;
    }
    outBuf = "SND " + outBuf + "\r";
    3d32:	be 01       	movw	r22, r28
    3d34:	63 5f       	subi	r22, 0xF3	; 243
    3d36:	7f 4f       	sbci	r23, 0xFF	; 255
    3d38:	ce 01       	movw	r24, r28
    3d3a:	07 96       	adiw	r24, 0x07	; 7
    3d3c:	0d d8       	rcall	.-4070   	; 0x2d58 <_ZplRK15StringSumHelperRK6String>
    3d3e:	6d e5       	ldi	r22, 0x5D	; 93
    3d40:	72 e0       	ldi	r23, 0x02	; 2
    3d42:	1b d8       	rcall	.-4042   	; 0x2d7a <_ZplRK15StringSumHelperPKc>
    3d44:	bc 01       	movw	r22, r24
    3d46:	ce 01       	movw	r24, r28
    3d48:	0d 96       	adiw	r24, 0x0d	; 13
    3d4a:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <_ZN6StringaSERKS_>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    3d4e:	ce 01       	movw	r24, r28
    3d50:	07 96       	adiw	r24, 0x07	; 7
    3d52:	0e 94 89 15 	call	0x2b12	; 0x2b12 <_ZN6StringD1Ev>
    result = stdCmd(outBuf);
    3d56:	be 01       	movw	r22, r28
    3d58:	63 5f       	subi	r22, 0xF3	; 243
    3d5a:	7f 4f       	sbci	r23, 0xFF	; 255
    3d5c:	ce 01       	movw	r24, r28
    3d5e:	01 96       	adiw	r24, 0x01	; 1
    3d60:	0e 94 22 16 	call	0x2c44	; 0x2c44 <_ZN6StringC1ERKS_>
    3d64:	be 01       	movw	r22, r28
    3d66:	6f 5f       	subi	r22, 0xFF	; 255
    3d68:	7f 4f       	sbci	r23, 0xFF	; 255
    3d6a:	c7 01       	movw	r24, r14
    3d6c:	3a dd       	rcall	.-1420   	; 0x37e2 <_ZN8BLEMate26stdCmdE6String>
    3d6e:	d8 2e       	mov	r13, r24
    3d70:	ce 01       	movw	r24, r28
    3d72:	01 96       	adiw	r24, 0x01	; 1
    3d74:	0e 94 89 15 	call	0x2b12	; 0x2b12 <_ZN6StringD1Ev>
    outBufLen = 0;
  }
    3d78:	ce 01       	movw	r24, r28
    3d7a:	0d 96       	adiw	r24, 0x0d	; 13
    3d7c:	0e 94 89 15 	call	0x2b12	; 0x2b12 <_ZN6StringD1Ev>
  byte inBufPtr = 0;
  byte outBufLen = 0;
  byte dataLeft = dataLen;

  opResult result = SUCCESS;
  while (inBufPtr < dataLen)
    3d80:	b8 14       	cp	r11, r8
    3d82:	20 f4       	brcc	.+8      	; 0x3d8c <_ZN8BLEMate28sendDataEPch+0x106>
    3d84:	db 2c       	mov	r13, r11
    3d86:	b2 cf       	rjmp	.-156    	; 0x3cec <_ZN8BLEMate28sendDataEPch+0x66>
    3d88:	dd 24       	eor	r13, r13
    3d8a:	d3 94       	inc	r13
    }
    outBuf = "SND " + outBuf + "\r";
    result = stdCmd(outBuf);
    outBufLen = 0;
  }
  return result;
    3d8c:	ce 01       	movw	r24, r28
    3d8e:	43 96       	adiw	r24, 0x13	; 19
    3d90:	0e 94 89 15 	call	0x2b12	; 0x2b12 <_ZN6StringD1Ev>
}
    3d94:	8d 2d       	mov	r24, r13
    3d96:	69 96       	adiw	r28, 0x19	; 25
    3d98:	0f b6       	in	r0, 0x3f	; 63
    3d9a:	f8 94       	cli
    3d9c:	de bf       	out	0x3e, r29	; 62
    3d9e:	0f be       	out	0x3f, r0	; 63
    3da0:	cd bf       	out	0x3d, r28	; 61
    3da2:	df 91       	pop	r29
    3da4:	cf 91       	pop	r28
    3da6:	1f 91       	pop	r17
    3da8:	0f 91       	pop	r16
    3daa:	ff 90       	pop	r15
    3dac:	ef 90       	pop	r14
    3dae:	df 90       	pop	r13
    3db0:	cf 90       	pop	r12
    3db2:	bf 90       	pop	r11
    3db4:	af 90       	pop	r10
    3db6:	9f 90       	pop	r9
    3db8:	8f 90       	pop	r8
    3dba:	08 95       	ret

00003dbc <_ZN8BLEMate28sendDataER6String>:
  String newBuffer = dataBuffer;
  return sendData(newBuffer);
}

BLEMate2::opResult BLEMate2::sendData(String &dataBuffer)
{
    3dbc:	cf 92       	push	r12
    3dbe:	df 92       	push	r13
    3dc0:	ef 92       	push	r14
    3dc2:	ff 92       	push	r15
    3dc4:	0f 93       	push	r16
    3dc6:	1f 93       	push	r17
    3dc8:	cf 93       	push	r28
    3dca:	df 93       	push	r29
    3dcc:	6c 01       	movw	r12, r24
    3dce:	7b 01       	movw	r14, r22
  // First, we'll need to figure out the length of the string.
  int bufLength = dataBuffer.length()+1;
    3dd0:	fb 01       	movw	r30, r22
    3dd2:	04 81       	ldd	r16, Z+4	; 0x04
    3dd4:	15 81       	ldd	r17, Z+5	; 0x05
    3dd6:	0f 5f       	subi	r16, 0xFF	; 255
    3dd8:	1f 4f       	sbci	r17, 0xFF	; 255

  // Now dynamically allocate an array of the appropriate size.
  char *charArray = new char [bufLength];
    3dda:	c8 01       	movw	r24, r16
    3ddc:	0e 94 fe 10 	call	0x21fc	; 0x21fc <_Znaj>
    3de0:	ec 01       	movw	r28, r24
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
    3de2:	20 e0       	ldi	r18, 0x00	; 0
    3de4:	30 e0       	ldi	r19, 0x00	; 0
    3de6:	a8 01       	movw	r20, r16
    3de8:	bc 01       	movw	r22, r24
    3dea:	c7 01       	movw	r24, r14
    3dec:	c0 d8       	rcall	.-3712   	; 0x2f6e <_ZNK6String8getBytesEPhjj>

  // Copy over the data.
  dataBuffer.toCharArray(charArray, bufLength);

  // Call the byte array function
  opResult result = sendData(charArray, bufLength);
    3dee:	40 2f       	mov	r20, r16
    3df0:	be 01       	movw	r22, r28
    3df2:	c6 01       	movw	r24, r12
    3df4:	48 df       	rcall	.-368    	; 0x3c86 <_ZN8BLEMate28sendDataEPch>
    3df6:	18 2f       	mov	r17, r24

  // de-allocate the memory.
  delete charArray;
    3df8:	ce 01       	movw	r24, r28
    3dfa:	0e 94 01 11 	call	0x2202	; 0x2202 <_ZdlPv>

  return result;
}
    3dfe:	81 2f       	mov	r24, r17
    3e00:	df 91       	pop	r29
    3e02:	cf 91       	pop	r28
    3e04:	1f 91       	pop	r17
    3e06:	0f 91       	pop	r16
    3e08:	ff 90       	pop	r15
    3e0a:	ef 90       	pop	r14
    3e0c:	df 90       	pop	r13
    3e0e:	cf 90       	pop	r12
    3e10:	08 95       	ret

00003e12 <_ZN8BLEMate28sendDataEPKc>:
//  3. User wants to send an array of characters.
// From a data standpoint, 1 and 2 are just subsets of three, so we'll
//  write most of the functionality into 3 and call it from 2, and call
//  2 from 1.
BLEMate2::opResult BLEMate2::sendData(const char *dataBuffer)
{
    3e12:	0f 93       	push	r16
    3e14:	1f 93       	push	r17
    3e16:	cf 93       	push	r28
    3e18:	df 93       	push	r29
    3e1a:	00 d0       	rcall	.+0      	; 0x3e1c <_ZN8BLEMate28sendDataEPKc+0xa>
    3e1c:	00 d0       	rcall	.+0      	; 0x3e1e <_ZN8BLEMate28sendDataEPKc+0xc>
    3e1e:	cd b7       	in	r28, 0x3d	; 61
    3e20:	de b7       	in	r29, 0x3e	; 62
    3e22:	8c 01       	movw	r16, r24
  String newBuffer = dataBuffer;
    3e24:	ce 01       	movw	r24, r28
    3e26:	01 96       	adiw	r24, 0x01	; 1
    3e28:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <_ZN6StringC1EPKc>
  return sendData(newBuffer);
    3e2c:	be 01       	movw	r22, r28
    3e2e:	6f 5f       	subi	r22, 0xFF	; 255
    3e30:	7f 4f       	sbci	r23, 0xFF	; 255
    3e32:	c8 01       	movw	r24, r16
    3e34:	c3 df       	rcall	.-122    	; 0x3dbc <_ZN8BLEMate28sendDataER6String>
    3e36:	18 2f       	mov	r17, r24
    3e38:	ce 01       	movw	r24, r28
    3e3a:	01 96       	adiw	r24, 0x01	; 1
    3e3c:	0e 94 89 15 	call	0x2b12	; 0x2b12 <_ZN6StringD1Ev>
}
    3e40:	81 2f       	mov	r24, r17
    3e42:	26 96       	adiw	r28, 0x06	; 6
    3e44:	0f b6       	in	r0, 0x3f	; 63
    3e46:	f8 94       	cli
    3e48:	de bf       	out	0x3e, r29	; 62
    3e4a:	0f be       	out	0x3f, r0	; 63
    3e4c:	cd bf       	out	0x3d, r28	; 61
    3e4e:	df 91       	pop	r29
    3e50:	cf 91       	pop	r28
    3e52:	1f 91       	pop	r17
    3e54:	0f 91       	pop	r16
    3e56:	08 95       	ret

00003e58 <_Z10drawMatrixi>:

    // The module is now configured to connect to another external device.
}

void drawMatrix(int msgNum)
{
    3e58:	ef 92       	push	r14
    3e5a:	ff 92       	push	r15
    3e5c:	0f 93       	push	r16
    3e5e:	1f 93       	push	r17
    3e60:	cf 93       	push	r28
    3e62:	df 93       	push	r29
    switch (msgNum) {
    3e64:	81 30       	cpi	r24, 0x01	; 1
    3e66:	91 05       	cpc	r25, r1
    3e68:	09 f4       	brne	.+2      	; 0x3e6c <_Z10drawMatrixi+0x14>
    3e6a:	b5 c0       	rjmp	.+362    	; 0x3fd6 <_Z10drawMatrixi+0x17e>
    3e6c:	82 30       	cpi	r24, 0x02	; 2
    3e6e:	91 05       	cpc	r25, r1
    3e70:	09 f4       	brne	.+2      	; 0x3e74 <_Z10drawMatrixi+0x1c>
    3e72:	36 c1       	rjmp	.+620    	; 0x40e0 <_Z10drawMatrixi+0x288>
    3e74:	89 2b       	or	r24, r25
    3e76:	09 f0       	breq	.+2      	; 0x3e7a <_Z10drawMatrixi+0x22>
    3e78:	b8 c1       	rjmp	.+880    	; 0x41ea <_Z10drawMatrixi+0x392>
        case 0:
        //go straight
        for (i = 0; i < 3; i++) {
    3e7a:	10 92 7f 06 	sts	0x067F, r1
    3e7e:	10 92 7e 06 	sts	0x067E, r1
            matrix.setCursor(7, 0);
    3e82:	40 e0       	ldi	r20, 0x00	; 0
    3e84:	50 e0       	ldi	r21, 0x00	; 0
    3e86:	67 e0       	ldi	r22, 0x07	; 7
    3e88:	70 e0       	ldi	r23, 0x00	; 0
    3e8a:	83 ea       	ldi	r24, 0xA3	; 163
    3e8c:	96 e0       	ldi	r25, 0x06	; 6
    3e8e:	0e 94 e7 07 	call	0xfce	; 0xfce <_ZN12Adafruit_GFX9setCursorEii>
            matrix.setTextSize(1);
    3e92:	61 e0       	ldi	r22, 0x01	; 1
    3e94:	83 ea       	ldi	r24, 0xA3	; 163
    3e96:	96 e0       	ldi	r25, 0x06	; 6
    3e98:	0e 94 ed 07 	call	0xfda	; 0xfda <_ZN12Adafruit_GFX11setTextSizeEh>
            matrix.setTextColor(matrix.Color333(7, 7, 7));
    3e9c:	27 e0       	ldi	r18, 0x07	; 7
    3e9e:	47 e0       	ldi	r20, 0x07	; 7
    3ea0:	67 e0       	ldi	r22, 0x07	; 7
    3ea2:	83 ea       	ldi	r24, 0xA3	; 163
    3ea4:	96 e0       	ldi	r25, 0x06	; 6
    3ea6:	0e 94 77 0a 	call	0x14ee	; 0x14ee <_ZN14RGBmatrixPanel8Color333Ehhh>
    3eaa:	bc 01       	movw	r22, r24
    3eac:	83 ea       	ldi	r24, 0xA3	; 163
    3eae:	96 e0       	ldi	r25, 0x06	; 6
    3eb0:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <_ZN12Adafruit_GFX12setTextColorEj>
            
            matrix.print("P");
    3eb4:	6c e5       	ldi	r22, 0x5C	; 92
    3eb6:	73 e0       	ldi	r23, 0x03	; 3
    3eb8:	83 ea       	ldi	r24, 0xA3	; 163
    3eba:	96 e0       	ldi	r25, 0x06	; 6
    3ebc:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN5Print5printEPKc>
            matrix.print("L");
    3ec0:	6e e5       	ldi	r22, 0x5E	; 94
    3ec2:	73 e0       	ldi	r23, 0x03	; 3
    3ec4:	83 ea       	ldi	r24, 0xA3	; 163
    3ec6:	96 e0       	ldi	r25, 0x06	; 6
    3ec8:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN5Print5printEPKc>
            matrix.print("Z");
    3ecc:	60 e6       	ldi	r22, 0x60	; 96
    3ece:	73 e0       	ldi	r23, 0x03	; 3
    3ed0:	83 ea       	ldi	r24, 0xA3	; 163
    3ed2:	96 e0       	ldi	r25, 0x06	; 6
    3ed4:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN5Print5printEPKc>
            
            matrix.setCursor(1, 9);
    3ed8:	49 e0       	ldi	r20, 0x09	; 9
    3eda:	50 e0       	ldi	r21, 0x00	; 0
    3edc:	61 e0       	ldi	r22, 0x01	; 1
    3ede:	70 e0       	ldi	r23, 0x00	; 0
    3ee0:	83 ea       	ldi	r24, 0xA3	; 163
    3ee2:	96 e0       	ldi	r25, 0x06	; 6
    3ee4:	0e 94 e7 07 	call	0xfce	; 0xfce <_ZN12Adafruit_GFX9setCursorEii>
            matrix.print("D");
    3ee8:	6a ed       	ldi	r22, 0xDA	; 218
    3eea:	73 e0       	ldi	r23, 0x03	; 3
    3eec:	83 ea       	ldi	r24, 0xA3	; 163
    3eee:	96 e0       	ldi	r25, 0x06	; 6
    3ef0:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN5Print5printEPKc>
            matrix.print("O");
    3ef4:	62 e6       	ldi	r22, 0x62	; 98
    3ef6:	73 e0       	ldi	r23, 0x03	; 3
    3ef8:	83 ea       	ldi	r24, 0xA3	; 163
    3efa:	96 e0       	ldi	r25, 0x06	; 6
    3efc:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN5Print5printEPKc>
            matrix.print("N");
    3f00:	6c e8       	ldi	r22, 0x8C	; 140
    3f02:	72 e0       	ldi	r23, 0x02	; 2
    3f04:	83 ea       	ldi	r24, 0xA3	; 163
    3f06:	96 e0       	ldi	r25, 0x06	; 6
    3f08:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN5Print5printEPKc>
            matrix.print("'");
    3f0c:	64 e6       	ldi	r22, 0x64	; 100
    3f0e:	73 e0       	ldi	r23, 0x03	; 3
    3f10:	83 ea       	ldi	r24, 0xA3	; 163
    3f12:	96 e0       	ldi	r25, 0x06	; 6
    3f14:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN5Print5printEPKc>
            matrix.print("T");
    3f18:	62 e6       	ldi	r22, 0x62	; 98
    3f1a:	72 e0       	ldi	r23, 0x02	; 2
    3f1c:	83 ea       	ldi	r24, 0xA3	; 163
    3f1e:	96 e0       	ldi	r25, 0x06	; 6
    3f20:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN5Print5printEPKc>
            
            matrix.setCursor(1, 18);
    3f24:	42 e1       	ldi	r20, 0x12	; 18
    3f26:	50 e0       	ldi	r21, 0x00	; 0
    3f28:	61 e0       	ldi	r22, 0x01	; 1
    3f2a:	70 e0       	ldi	r23, 0x00	; 0
    3f2c:	83 ea       	ldi	r24, 0xA3	; 163
    3f2e:	96 e0       	ldi	r25, 0x06	; 6
    3f30:	0e 94 e7 07 	call	0xfce	; 0xfce <_ZN12Adafruit_GFX9setCursorEii>
            matrix.print("H");
    3f34:	6e ee       	ldi	r22, 0xEE	; 238
    3f36:	72 e0       	ldi	r23, 0x02	; 2
    3f38:	83 ea       	ldi	r24, 0xA3	; 163
    3f3a:	96 e0       	ldi	r25, 0x06	; 6
    3f3c:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN5Print5printEPKc>
            matrix.print("I");
    3f40:	60 ef       	ldi	r22, 0xF0	; 240
    3f42:	72 e0       	ldi	r23, 0x02	; 2
    3f44:	83 ea       	ldi	r24, 0xA3	; 163
    3f46:	96 e0       	ldi	r25, 0x06	; 6
    3f48:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN5Print5printEPKc>
            matrix.print("T");
    3f4c:	62 e6       	ldi	r22, 0x62	; 98
    3f4e:	72 e0       	ldi	r23, 0x02	; 2
    3f50:	83 ea       	ldi	r24, 0xA3	; 163
    3f52:	96 e0       	ldi	r25, 0x06	; 6
    3f54:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN5Print5printEPKc>
            matrix.print("M");
    3f58:	66 e6       	ldi	r22, 0x66	; 102
    3f5a:	73 e0       	ldi	r23, 0x03	; 3
    3f5c:	83 ea       	ldi	r24, 0xA3	; 163
    3f5e:	96 e0       	ldi	r25, 0x06	; 6
    3f60:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN5Print5printEPKc>
            matrix.print("E");
    3f64:	6e eb       	ldi	r22, 0xBE	; 190
    3f66:	72 e0       	ldi	r23, 0x02	; 2
    3f68:	83 ea       	ldi	r24, 0xA3	; 163
    3f6a:	96 e0       	ldi	r25, 0x06	; 6
    3f6c:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN5Print5printEPKc>
            
            delay(1000);
    3f70:	68 ee       	ldi	r22, 0xE8	; 232
    3f72:	73 e0       	ldi	r23, 0x03	; 3
    3f74:	80 e0       	ldi	r24, 0x00	; 0
    3f76:	90 e0       	ldi	r25, 0x00	; 0
    3f78:	0e 94 c9 14 	call	0x2992	; 0x2992 <delay>
            
            matrix.fillRect(0, 0, 31, 31, matrix.Color333(0, 0, 0));
    3f7c:	e0 91 a3 06 	lds	r30, 0x06A3
    3f80:	f0 91 a4 06 	lds	r31, 0x06A4
    3f84:	c6 85       	ldd	r28, Z+14	; 0x0e
    3f86:	d7 85       	ldd	r29, Z+15	; 0x0f
    3f88:	20 e0       	ldi	r18, 0x00	; 0
    3f8a:	40 e0       	ldi	r20, 0x00	; 0
    3f8c:	60 e0       	ldi	r22, 0x00	; 0
    3f8e:	83 ea       	ldi	r24, 0xA3	; 163
    3f90:	96 e0       	ldi	r25, 0x06	; 6
    3f92:	0e 94 77 0a 	call	0x14ee	; 0x14ee <_ZN14RGBmatrixPanel8Color333Ehhh>
    3f96:	7c 01       	movw	r14, r24
    3f98:	0f e1       	ldi	r16, 0x1F	; 31
    3f9a:	10 e0       	ldi	r17, 0x00	; 0
    3f9c:	2f e1       	ldi	r18, 0x1F	; 31
    3f9e:	30 e0       	ldi	r19, 0x00	; 0
    3fa0:	40 e0       	ldi	r20, 0x00	; 0
    3fa2:	50 e0       	ldi	r21, 0x00	; 0
    3fa4:	60 e0       	ldi	r22, 0x00	; 0
    3fa6:	70 e0       	ldi	r23, 0x00	; 0
    3fa8:	83 ea       	ldi	r24, 0xA3	; 163
    3faa:	96 e0       	ldi	r25, 0x06	; 6
    3fac:	fe 01       	movw	r30, r28
    3fae:	19 95       	eicall
            delay(500);
    3fb0:	64 ef       	ldi	r22, 0xF4	; 244
    3fb2:	71 e0       	ldi	r23, 0x01	; 1
    3fb4:	80 e0       	ldi	r24, 0x00	; 0
    3fb6:	90 e0       	ldi	r25, 0x00	; 0
    3fb8:	0e 94 c9 14 	call	0x2992	; 0x2992 <delay>
void drawMatrix(int msgNum)
{
    switch (msgNum) {
        case 0:
        //go straight
        for (i = 0; i < 3; i++) {
    3fbc:	80 91 7e 06 	lds	r24, 0x067E
    3fc0:	90 91 7f 06 	lds	r25, 0x067F
    3fc4:	01 96       	adiw	r24, 0x01	; 1
    3fc6:	90 93 7f 06 	sts	0x067F, r25
    3fca:	80 93 7e 06 	sts	0x067E, r24
    3fce:	03 97       	sbiw	r24, 0x03	; 3
    3fd0:	0c f4       	brge	.+2      	; 0x3fd4 <_Z10drawMatrixi+0x17c>
    3fd2:	57 cf       	rjmp	.-338    	; 0x3e82 <_Z10drawMatrixi+0x2a>
    3fd4:	83 c1       	rjmp	.+774    	; 0x42dc <_Z10drawMatrixi+0x484>
        case 1:
        //turn left

        //draw a left arrow
        //horiz line
        for (i = 0; i < 3; i++) {
    3fd6:	10 92 7f 06 	sts	0x067F, r1
    3fda:	10 92 7e 06 	sts	0x067E, r1
            matrix.drawLine(27, 15, 5, 15, matrix.Color333(4, 7, 5));
    3fde:	e0 91 a3 06 	lds	r30, 0x06A3
    3fe2:	f0 91 a4 06 	lds	r31, 0x06A4
    3fe6:	c6 81       	ldd	r28, Z+6	; 0x06
    3fe8:	d7 81       	ldd	r29, Z+7	; 0x07
    3fea:	25 e0       	ldi	r18, 0x05	; 5
    3fec:	47 e0       	ldi	r20, 0x07	; 7
    3fee:	64 e0       	ldi	r22, 0x04	; 4
    3ff0:	83 ea       	ldi	r24, 0xA3	; 163
    3ff2:	96 e0       	ldi	r25, 0x06	; 6
    3ff4:	0e 94 77 0a 	call	0x14ee	; 0x14ee <_ZN14RGBmatrixPanel8Color333Ehhh>
    3ff8:	7c 01       	movw	r14, r24
    3ffa:	0f e0       	ldi	r16, 0x0F	; 15
    3ffc:	10 e0       	ldi	r17, 0x00	; 0
    3ffe:	25 e0       	ldi	r18, 0x05	; 5
    4000:	30 e0       	ldi	r19, 0x00	; 0
    4002:	4f e0       	ldi	r20, 0x0F	; 15
    4004:	50 e0       	ldi	r21, 0x00	; 0
    4006:	6b e1       	ldi	r22, 0x1B	; 27
    4008:	70 e0       	ldi	r23, 0x00	; 0
    400a:	83 ea       	ldi	r24, 0xA3	; 163
    400c:	96 e0       	ldi	r25, 0x06	; 6
    400e:	fe 01       	movw	r30, r28
    4010:	19 95       	eicall
            matrix.drawLine(16, 4, 6, 14, matrix.Color333(4, 7, 5));
    4012:	e0 91 a3 06 	lds	r30, 0x06A3
    4016:	f0 91 a4 06 	lds	r31, 0x06A4
    401a:	c6 81       	ldd	r28, Z+6	; 0x06
    401c:	d7 81       	ldd	r29, Z+7	; 0x07
    401e:	25 e0       	ldi	r18, 0x05	; 5
    4020:	47 e0       	ldi	r20, 0x07	; 7
    4022:	64 e0       	ldi	r22, 0x04	; 4
    4024:	83 ea       	ldi	r24, 0xA3	; 163
    4026:	96 e0       	ldi	r25, 0x06	; 6
    4028:	0e 94 77 0a 	call	0x14ee	; 0x14ee <_ZN14RGBmatrixPanel8Color333Ehhh>
    402c:	7c 01       	movw	r14, r24
    402e:	0e e0       	ldi	r16, 0x0E	; 14
    4030:	10 e0       	ldi	r17, 0x00	; 0
    4032:	26 e0       	ldi	r18, 0x06	; 6
    4034:	30 e0       	ldi	r19, 0x00	; 0
    4036:	44 e0       	ldi	r20, 0x04	; 4
    4038:	50 e0       	ldi	r21, 0x00	; 0
    403a:	60 e1       	ldi	r22, 0x10	; 16
    403c:	70 e0       	ldi	r23, 0x00	; 0
    403e:	83 ea       	ldi	r24, 0xA3	; 163
    4040:	96 e0       	ldi	r25, 0x06	; 6
    4042:	fe 01       	movw	r30, r28
    4044:	19 95       	eicall
            matrix.drawLine(16, 26, 6, 16, matrix.Color333(4, 7, 5));
    4046:	e0 91 a3 06 	lds	r30, 0x06A3
    404a:	f0 91 a4 06 	lds	r31, 0x06A4
    404e:	c6 81       	ldd	r28, Z+6	; 0x06
    4050:	d7 81       	ldd	r29, Z+7	; 0x07
    4052:	25 e0       	ldi	r18, 0x05	; 5
    4054:	47 e0       	ldi	r20, 0x07	; 7
    4056:	64 e0       	ldi	r22, 0x04	; 4
    4058:	83 ea       	ldi	r24, 0xA3	; 163
    405a:	96 e0       	ldi	r25, 0x06	; 6
    405c:	0e 94 77 0a 	call	0x14ee	; 0x14ee <_ZN14RGBmatrixPanel8Color333Ehhh>
    4060:	7c 01       	movw	r14, r24
    4062:	00 e1       	ldi	r16, 0x10	; 16
    4064:	10 e0       	ldi	r17, 0x00	; 0
    4066:	26 e0       	ldi	r18, 0x06	; 6
    4068:	30 e0       	ldi	r19, 0x00	; 0
    406a:	4a e1       	ldi	r20, 0x1A	; 26
    406c:	50 e0       	ldi	r21, 0x00	; 0
    406e:	60 e1       	ldi	r22, 0x10	; 16
    4070:	70 e0       	ldi	r23, 0x00	; 0
    4072:	83 ea       	ldi	r24, 0xA3	; 163
    4074:	96 e0       	ldi	r25, 0x06	; 6
    4076:	fe 01       	movw	r30, r28
    4078:	19 95       	eicall
            delay(500);
    407a:	64 ef       	ldi	r22, 0xF4	; 244
    407c:	71 e0       	ldi	r23, 0x01	; 1
    407e:	80 e0       	ldi	r24, 0x00	; 0
    4080:	90 e0       	ldi	r25, 0x00	; 0
    4082:	0e 94 c9 14 	call	0x2992	; 0x2992 <delay>
            
            matrix.fillRect(0, 0, 31, 31, matrix.Color333(0, 0, 0));
    4086:	e0 91 a3 06 	lds	r30, 0x06A3
    408a:	f0 91 a4 06 	lds	r31, 0x06A4
    408e:	c6 85       	ldd	r28, Z+14	; 0x0e
    4090:	d7 85       	ldd	r29, Z+15	; 0x0f
    4092:	20 e0       	ldi	r18, 0x00	; 0
    4094:	40 e0       	ldi	r20, 0x00	; 0
    4096:	60 e0       	ldi	r22, 0x00	; 0
    4098:	83 ea       	ldi	r24, 0xA3	; 163
    409a:	96 e0       	ldi	r25, 0x06	; 6
    409c:	0e 94 77 0a 	call	0x14ee	; 0x14ee <_ZN14RGBmatrixPanel8Color333Ehhh>
    40a0:	7c 01       	movw	r14, r24
    40a2:	0f e1       	ldi	r16, 0x1F	; 31
    40a4:	10 e0       	ldi	r17, 0x00	; 0
    40a6:	2f e1       	ldi	r18, 0x1F	; 31
    40a8:	30 e0       	ldi	r19, 0x00	; 0
    40aa:	40 e0       	ldi	r20, 0x00	; 0
    40ac:	50 e0       	ldi	r21, 0x00	; 0
    40ae:	60 e0       	ldi	r22, 0x00	; 0
    40b0:	70 e0       	ldi	r23, 0x00	; 0
    40b2:	83 ea       	ldi	r24, 0xA3	; 163
    40b4:	96 e0       	ldi	r25, 0x06	; 6
    40b6:	fe 01       	movw	r30, r28
    40b8:	19 95       	eicall
            delay(500);
    40ba:	64 ef       	ldi	r22, 0xF4	; 244
    40bc:	71 e0       	ldi	r23, 0x01	; 1
    40be:	80 e0       	ldi	r24, 0x00	; 0
    40c0:	90 e0       	ldi	r25, 0x00	; 0
    40c2:	0e 94 c9 14 	call	0x2992	; 0x2992 <delay>
        case 1:
        //turn left

        //draw a left arrow
        //horiz line
        for (i = 0; i < 3; i++) {
    40c6:	80 91 7e 06 	lds	r24, 0x067E
    40ca:	90 91 7f 06 	lds	r25, 0x067F
    40ce:	01 96       	adiw	r24, 0x01	; 1
    40d0:	90 93 7f 06 	sts	0x067F, r25
    40d4:	80 93 7e 06 	sts	0x067E, r24
    40d8:	03 97       	sbiw	r24, 0x03	; 3
    40da:	0c f4       	brge	.+2      	; 0x40de <_Z10drawMatrixi+0x286>
    40dc:	80 cf       	rjmp	.-256    	; 0x3fde <_Z10drawMatrixi+0x186>
    40de:	fe c0       	rjmp	.+508    	; 0x42dc <_Z10drawMatrixi+0x484>
        break;
        case 2:
        //turn right
        //draw a right arrow
        //horiz line
        for (i = 0; i < 3; i++) {
    40e0:	10 92 7f 06 	sts	0x067F, r1
    40e4:	10 92 7e 06 	sts	0x067E, r1
            matrix.drawLine(5, 15, 27, 15, matrix.Color333(4, 7, 5));
    40e8:	e0 91 a3 06 	lds	r30, 0x06A3
    40ec:	f0 91 a4 06 	lds	r31, 0x06A4
    40f0:	c6 81       	ldd	r28, Z+6	; 0x06
    40f2:	d7 81       	ldd	r29, Z+7	; 0x07
    40f4:	25 e0       	ldi	r18, 0x05	; 5
    40f6:	47 e0       	ldi	r20, 0x07	; 7
    40f8:	64 e0       	ldi	r22, 0x04	; 4
    40fa:	83 ea       	ldi	r24, 0xA3	; 163
    40fc:	96 e0       	ldi	r25, 0x06	; 6
    40fe:	0e 94 77 0a 	call	0x14ee	; 0x14ee <_ZN14RGBmatrixPanel8Color333Ehhh>
    4102:	7c 01       	movw	r14, r24
    4104:	0f e0       	ldi	r16, 0x0F	; 15
    4106:	10 e0       	ldi	r17, 0x00	; 0
    4108:	2b e1       	ldi	r18, 0x1B	; 27
    410a:	30 e0       	ldi	r19, 0x00	; 0
    410c:	4f e0       	ldi	r20, 0x0F	; 15
    410e:	50 e0       	ldi	r21, 0x00	; 0
    4110:	65 e0       	ldi	r22, 0x05	; 5
    4112:	70 e0       	ldi	r23, 0x00	; 0
    4114:	83 ea       	ldi	r24, 0xA3	; 163
    4116:	96 e0       	ldi	r25, 0x06	; 6
    4118:	fe 01       	movw	r30, r28
    411a:	19 95       	eicall
            matrix.drawLine(16, 4, 26, 14, matrix.Color333(4, 7, 5));
    411c:	e0 91 a3 06 	lds	r30, 0x06A3
    4120:	f0 91 a4 06 	lds	r31, 0x06A4
    4124:	c6 81       	ldd	r28, Z+6	; 0x06
    4126:	d7 81       	ldd	r29, Z+7	; 0x07
    4128:	25 e0       	ldi	r18, 0x05	; 5
    412a:	47 e0       	ldi	r20, 0x07	; 7
    412c:	64 e0       	ldi	r22, 0x04	; 4
    412e:	83 ea       	ldi	r24, 0xA3	; 163
    4130:	96 e0       	ldi	r25, 0x06	; 6
    4132:	0e 94 77 0a 	call	0x14ee	; 0x14ee <_ZN14RGBmatrixPanel8Color333Ehhh>
    4136:	7c 01       	movw	r14, r24
    4138:	0e e0       	ldi	r16, 0x0E	; 14
    413a:	10 e0       	ldi	r17, 0x00	; 0
    413c:	2a e1       	ldi	r18, 0x1A	; 26
    413e:	30 e0       	ldi	r19, 0x00	; 0
    4140:	44 e0       	ldi	r20, 0x04	; 4
    4142:	50 e0       	ldi	r21, 0x00	; 0
    4144:	60 e1       	ldi	r22, 0x10	; 16
    4146:	70 e0       	ldi	r23, 0x00	; 0
    4148:	83 ea       	ldi	r24, 0xA3	; 163
    414a:	96 e0       	ldi	r25, 0x06	; 6
    414c:	fe 01       	movw	r30, r28
    414e:	19 95       	eicall
            matrix.drawLine(16, 26, 26, 16, matrix.Color333(4, 7, 5));
    4150:	e0 91 a3 06 	lds	r30, 0x06A3
    4154:	f0 91 a4 06 	lds	r31, 0x06A4
    4158:	c6 81       	ldd	r28, Z+6	; 0x06
    415a:	d7 81       	ldd	r29, Z+7	; 0x07
    415c:	25 e0       	ldi	r18, 0x05	; 5
    415e:	47 e0       	ldi	r20, 0x07	; 7
    4160:	64 e0       	ldi	r22, 0x04	; 4
    4162:	83 ea       	ldi	r24, 0xA3	; 163
    4164:	96 e0       	ldi	r25, 0x06	; 6
    4166:	0e 94 77 0a 	call	0x14ee	; 0x14ee <_ZN14RGBmatrixPanel8Color333Ehhh>
    416a:	7c 01       	movw	r14, r24
    416c:	00 e1       	ldi	r16, 0x10	; 16
    416e:	10 e0       	ldi	r17, 0x00	; 0
    4170:	2a e1       	ldi	r18, 0x1A	; 26
    4172:	30 e0       	ldi	r19, 0x00	; 0
    4174:	4a e1       	ldi	r20, 0x1A	; 26
    4176:	50 e0       	ldi	r21, 0x00	; 0
    4178:	60 e1       	ldi	r22, 0x10	; 16
    417a:	70 e0       	ldi	r23, 0x00	; 0
    417c:	83 ea       	ldi	r24, 0xA3	; 163
    417e:	96 e0       	ldi	r25, 0x06	; 6
    4180:	fe 01       	movw	r30, r28
    4182:	19 95       	eicall
            delay(500);
    4184:	64 ef       	ldi	r22, 0xF4	; 244
    4186:	71 e0       	ldi	r23, 0x01	; 1
    4188:	80 e0       	ldi	r24, 0x00	; 0
    418a:	90 e0       	ldi	r25, 0x00	; 0
    418c:	0e 94 c9 14 	call	0x2992	; 0x2992 <delay>
            
            matrix.fillRect(0, 0, 31, 31, matrix.Color333(0, 0, 0));
    4190:	e0 91 a3 06 	lds	r30, 0x06A3
    4194:	f0 91 a4 06 	lds	r31, 0x06A4
    4198:	c6 85       	ldd	r28, Z+14	; 0x0e
    419a:	d7 85       	ldd	r29, Z+15	; 0x0f
    419c:	20 e0       	ldi	r18, 0x00	; 0
    419e:	40 e0       	ldi	r20, 0x00	; 0
    41a0:	60 e0       	ldi	r22, 0x00	; 0
    41a2:	83 ea       	ldi	r24, 0xA3	; 163
    41a4:	96 e0       	ldi	r25, 0x06	; 6
    41a6:	0e 94 77 0a 	call	0x14ee	; 0x14ee <_ZN14RGBmatrixPanel8Color333Ehhh>
    41aa:	7c 01       	movw	r14, r24
    41ac:	0f e1       	ldi	r16, 0x1F	; 31
    41ae:	10 e0       	ldi	r17, 0x00	; 0
    41b0:	2f e1       	ldi	r18, 0x1F	; 31
    41b2:	30 e0       	ldi	r19, 0x00	; 0
    41b4:	40 e0       	ldi	r20, 0x00	; 0
    41b6:	50 e0       	ldi	r21, 0x00	; 0
    41b8:	60 e0       	ldi	r22, 0x00	; 0
    41ba:	70 e0       	ldi	r23, 0x00	; 0
    41bc:	83 ea       	ldi	r24, 0xA3	; 163
    41be:	96 e0       	ldi	r25, 0x06	; 6
    41c0:	fe 01       	movw	r30, r28
    41c2:	19 95       	eicall
            delay(500);
    41c4:	64 ef       	ldi	r22, 0xF4	; 244
    41c6:	71 e0       	ldi	r23, 0x01	; 1
    41c8:	80 e0       	ldi	r24, 0x00	; 0
    41ca:	90 e0       	ldi	r25, 0x00	; 0
    41cc:	0e 94 c9 14 	call	0x2992	; 0x2992 <delay>
        break;
        case 2:
        //turn right
        //draw a right arrow
        //horiz line
        for (i = 0; i < 3; i++) {
    41d0:	80 91 7e 06 	lds	r24, 0x067E
    41d4:	90 91 7f 06 	lds	r25, 0x067F
    41d8:	01 96       	adiw	r24, 0x01	; 1
    41da:	90 93 7f 06 	sts	0x067F, r25
    41de:	80 93 7e 06 	sts	0x067E, r24
    41e2:	03 97       	sbiw	r24, 0x03	; 3
    41e4:	0c f4       	brge	.+2      	; 0x41e8 <_Z10drawMatrixi+0x390>
    41e6:	80 cf       	rjmp	.-256    	; 0x40e8 <_Z10drawMatrixi+0x290>
    41e8:	79 c0       	rjmp	.+242    	; 0x42dc <_Z10drawMatrixi+0x484>
        }

        break;
        
        default:
        for (i = 0; i < 3; i++) {
    41ea:	10 92 7f 06 	sts	0x067F, r1
    41ee:	10 92 7e 06 	sts	0x067E, r1
            //draw a stop sign
            matrix.fillCircle(15, 15, 15, matrix.Color333(7, 0, 0));
    41f2:	20 e0       	ldi	r18, 0x00	; 0
    41f4:	40 e0       	ldi	r20, 0x00	; 0
    41f6:	67 e0       	ldi	r22, 0x07	; 7
    41f8:	83 ea       	ldi	r24, 0xA3	; 163
    41fa:	96 e0       	ldi	r25, 0x06	; 6
    41fc:	0e 94 77 0a 	call	0x14ee	; 0x14ee <_ZN14RGBmatrixPanel8Color333Ehhh>
    4200:	8c 01       	movw	r16, r24
    4202:	2f e0       	ldi	r18, 0x0F	; 15
    4204:	30 e0       	ldi	r19, 0x00	; 0
    4206:	4f e0       	ldi	r20, 0x0F	; 15
    4208:	50 e0       	ldi	r21, 0x00	; 0
    420a:	6f e0       	ldi	r22, 0x0F	; 15
    420c:	70 e0       	ldi	r23, 0x00	; 0
    420e:	83 ea       	ldi	r24, 0xA3	; 163
    4210:	96 e0       	ldi	r25, 0x06	; 6
    4212:	0e 94 4c 06 	call	0xc98	; 0xc98 <_ZN12Adafruit_GFX10fillCircleEiiij>
            
            //STOP text
            matrix.setCursor(4, 12);
    4216:	4c e0       	ldi	r20, 0x0C	; 12
    4218:	50 e0       	ldi	r21, 0x00	; 0
    421a:	64 e0       	ldi	r22, 0x04	; 4
    421c:	70 e0       	ldi	r23, 0x00	; 0
    421e:	83 ea       	ldi	r24, 0xA3	; 163
    4220:	96 e0       	ldi	r25, 0x06	; 6
    4222:	0e 94 e7 07 	call	0xfce	; 0xfce <_ZN12Adafruit_GFX9setCursorEii>
            matrix.setTextSize(1);
    4226:	61 e0       	ldi	r22, 0x01	; 1
    4228:	83 ea       	ldi	r24, 0xA3	; 163
    422a:	96 e0       	ldi	r25, 0x06	; 6
    422c:	0e 94 ed 07 	call	0xfda	; 0xfda <_ZN12Adafruit_GFX11setTextSizeEh>
            matrix.setTextColor(matrix.Color333(0, 0, 0));
    4230:	20 e0       	ldi	r18, 0x00	; 0
    4232:	40 e0       	ldi	r20, 0x00	; 0
    4234:	60 e0       	ldi	r22, 0x00	; 0
    4236:	83 ea       	ldi	r24, 0xA3	; 163
    4238:	96 e0       	ldi	r25, 0x06	; 6
    423a:	0e 94 77 0a 	call	0x14ee	; 0x14ee <_ZN14RGBmatrixPanel8Color333Ehhh>
    423e:	bc 01       	movw	r22, r24
    4240:	83 ea       	ldi	r24, 0xA3	; 163
    4242:	96 e0       	ldi	r25, 0x06	; 6
    4244:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <_ZN12Adafruit_GFX12setTextColorEj>
            
            matrix.print("S");
    4248:	67 ee       	ldi	r22, 0xE7	; 231
    424a:	72 e0       	ldi	r23, 0x02	; 2
    424c:	83 ea       	ldi	r24, 0xA3	; 163
    424e:	96 e0       	ldi	r25, 0x06	; 6
    4250:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN5Print5printEPKc>
            matrix.print("T");
    4254:	62 e6       	ldi	r22, 0x62	; 98
    4256:	72 e0       	ldi	r23, 0x02	; 2
    4258:	83 ea       	ldi	r24, 0xA3	; 163
    425a:	96 e0       	ldi	r25, 0x06	; 6
    425c:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN5Print5printEPKc>
            matrix.print("O");
    4260:	62 e6       	ldi	r22, 0x62	; 98
    4262:	73 e0       	ldi	r23, 0x03	; 3
    4264:	83 ea       	ldi	r24, 0xA3	; 163
    4266:	96 e0       	ldi	r25, 0x06	; 6
    4268:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN5Print5printEPKc>
            matrix.print("P");
    426c:	6c e5       	ldi	r22, 0x5C	; 92
    426e:	73 e0       	ldi	r23, 0x03	; 3
    4270:	83 ea       	ldi	r24, 0xA3	; 163
    4272:	96 e0       	ldi	r25, 0x06	; 6
    4274:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN5Print5printEPKc>
            delay(3000);
    4278:	68 eb       	ldi	r22, 0xB8	; 184
    427a:	7b e0       	ldi	r23, 0x0B	; 11
    427c:	80 e0       	ldi	r24, 0x00	; 0
    427e:	90 e0       	ldi	r25, 0x00	; 0
    4280:	0e 94 c9 14 	call	0x2992	; 0x2992 <delay>
            
            matrix.fillRect(0, 0, 31, 31, matrix.Color333(0, 0, 0));
    4284:	e0 91 a3 06 	lds	r30, 0x06A3
    4288:	f0 91 a4 06 	lds	r31, 0x06A4
    428c:	c6 85       	ldd	r28, Z+14	; 0x0e
    428e:	d7 85       	ldd	r29, Z+15	; 0x0f
    4290:	20 e0       	ldi	r18, 0x00	; 0
    4292:	40 e0       	ldi	r20, 0x00	; 0
    4294:	60 e0       	ldi	r22, 0x00	; 0
    4296:	83 ea       	ldi	r24, 0xA3	; 163
    4298:	96 e0       	ldi	r25, 0x06	; 6
    429a:	0e 94 77 0a 	call	0x14ee	; 0x14ee <_ZN14RGBmatrixPanel8Color333Ehhh>
    429e:	7c 01       	movw	r14, r24
    42a0:	0f e1       	ldi	r16, 0x1F	; 31
    42a2:	10 e0       	ldi	r17, 0x00	; 0
    42a4:	2f e1       	ldi	r18, 0x1F	; 31
    42a6:	30 e0       	ldi	r19, 0x00	; 0
    42a8:	40 e0       	ldi	r20, 0x00	; 0
    42aa:	50 e0       	ldi	r21, 0x00	; 0
    42ac:	60 e0       	ldi	r22, 0x00	; 0
    42ae:	70 e0       	ldi	r23, 0x00	; 0
    42b0:	83 ea       	ldi	r24, 0xA3	; 163
    42b2:	96 e0       	ldi	r25, 0x06	; 6
    42b4:	fe 01       	movw	r30, r28
    42b6:	19 95       	eicall
            delay(500);
    42b8:	64 ef       	ldi	r22, 0xF4	; 244
    42ba:	71 e0       	ldi	r23, 0x01	; 1
    42bc:	80 e0       	ldi	r24, 0x00	; 0
    42be:	90 e0       	ldi	r25, 0x00	; 0
    42c0:	0e 94 c9 14 	call	0x2992	; 0x2992 <delay>
        }

        break;
        
        default:
        for (i = 0; i < 3; i++) {
    42c4:	80 91 7e 06 	lds	r24, 0x067E
    42c8:	90 91 7f 06 	lds	r25, 0x067F
    42cc:	01 96       	adiw	r24, 0x01	; 1
    42ce:	90 93 7f 06 	sts	0x067F, r25
    42d2:	80 93 7e 06 	sts	0x067E, r24
    42d6:	03 97       	sbiw	r24, 0x03	; 3
    42d8:	0c f4       	brge	.+2      	; 0x42dc <_Z10drawMatrixi+0x484>
    42da:	8b cf       	rjmp	.-234    	; 0x41f2 <_Z10drawMatrixi+0x39a>
            delay(500);
            
        }
        break;
    }
}
    42dc:	df 91       	pop	r29
    42de:	cf 91       	pop	r28
    42e0:	1f 91       	pop	r17
    42e2:	0f 91       	pop	r16
    42e4:	ff 90       	pop	r15
    42e6:	ef 90       	pop	r14
    42e8:	08 95       	ret

000042ea <_GLOBAL__sub_I_main>:
    42ea:	8f 92       	push	r8
    42ec:	af 92       	push	r10
    42ee:	cf 92       	push	r12
    42f0:	ef 92       	push	r14
    42f2:	0f 93       	push	r16
// Private functions
void initMatrix();
void initBluetooth();
void drawMatrix(int msgNum);

static String fullBuffer = "";
    42f4:	6e e5       	ldi	r22, 0x5E	; 94
    42f6:	72 e0       	ldi	r23, 0x02	; 2
    42f8:	8b ee       	ldi	r24, 0xEB	; 235
    42fa:	96 e0       	ldi	r25, 0x06	; 6
    42fc:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <_ZN6StringC1EPKc>
static String inputBuffer;
    4300:	6e e5       	ldi	r22, 0x5E	; 94
    4302:	72 e0       	ldi	r23, 0x02	; 2
    4304:	85 ee       	ldi	r24, 0xE5	; 229
    4306:	96 e0       	ldi	r25, 0x06	; 6
    4308:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <_ZN6StringC1EPKc>
static String sendBuffer;
    430c:	6e e5       	ldi	r22, 0x5E	; 94
    430e:	72 e0       	ldi	r23, 0x02	; 2
    4310:	8f ed       	ldi	r24, 0xDF	; 223
    4312:	96 e0       	ldi	r25, 0x06	; 6
    4314:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <_ZN6StringC1EPKc>
        doCentralExample();
    }
    return 0;
}

RGBmatrixPanel matrix(A, B, C, D, CLK, LAT, OE, false);
    4318:	80 e2       	ldi	r24, 0x20	; 32
    431a:	8f 93       	push	r24
    431c:	81 2c       	mov	r8, r1
    431e:	0f 2e       	mov	r0, r31
    4320:	f9 e0       	ldi	r31, 0x09	; 9
    4322:	af 2e       	mov	r10, r31
    4324:	f0 2d       	mov	r31, r0
    4326:	0f 2e       	mov	r0, r31
    4328:	fc e0       	ldi	r31, 0x0C	; 12
    432a:	cf 2e       	mov	r12, r31
    432c:	f0 2d       	mov	r31, r0
    432e:	0f 2e       	mov	r0, r31
    4330:	fb e0       	ldi	r31, 0x0B	; 11
    4332:	ef 2e       	mov	r14, r31
    4334:	f0 2d       	mov	r31, r0
    4336:	09 e3       	ldi	r16, 0x39	; 57
    4338:	28 e3       	ldi	r18, 0x38	; 56
    433a:	47 e3       	ldi	r20, 0x37	; 55
    433c:	66 e3       	ldi	r22, 0x36	; 54
    433e:	83 ea       	ldi	r24, 0xA3	; 163
    4340:	96 e0       	ldi	r25, 0x06	; 6
    4342:	0e 94 28 0a 	call	0x1450	; 0x1450 <_ZN14RGBmatrixPanelC1Ehhhhhhhbh>

BLEMate2 BTModu(&Serial1);
    4346:	61 e8       	ldi	r22, 0x81	; 129
    4348:	74 e0       	ldi	r23, 0x04	; 4
    434a:	80 e8       	ldi	r24, 0x80	; 128
    434c:	96 e0       	ldi	r25, 0x06	; 6
    434e:	90 d9       	rcall	.-3296   	; 0x3670 <_ZN8BLEMate2C1EP6Stream>
    4350:	0f 90       	pop	r0
            delay(500);
            
        }
        break;
    }
}
    4352:	0f 91       	pop	r16
    4354:	ef 90       	pop	r14
    4356:	cf 90       	pop	r12
    4358:	af 90       	pop	r10
    435a:	8f 90       	pop	r8
    435c:	08 95       	ret

0000435e <_GLOBAL__sub_D_main>:
    435e:	cf 93       	push	r28
    4360:	df 93       	push	r29
#ifndef BLEMate2_h
#define BLEMate2_h

#include "../Arduino/Arduino.h"

class BLEMate2
    4362:	82 e8       	ldi	r24, 0x82	; 130
    4364:	96 e0       	ldi	r25, 0x06	; 6
    4366:	89 2b       	or	r24, r25
    4368:	51 f0       	breq	.+20     	; 0x437e <_GLOBAL__sub_D_main+0x20>
    436a:	c0 ea       	ldi	r28, 0xA0	; 160
    436c:	d6 e0       	ldi	r29, 0x06	; 6
    436e:	26 97       	sbiw	r28, 0x06	; 6
    4370:	ce 01       	movw	r24, r28
    4372:	0e 94 89 15 	call	0x2b12	; 0x2b12 <_ZN6StringD1Ev>
    4376:	86 e0       	ldi	r24, 0x06	; 6
    4378:	c2 38       	cpi	r28, 0x82	; 130
    437a:	d8 07       	cpc	r29, r24
    437c:	c1 f7       	brne	.-16     	; 0x436e <_GLOBAL__sub_D_main+0x10>
void initBluetooth();
void drawMatrix(int msgNum);

static String fullBuffer = "";
static String inputBuffer;
static String sendBuffer;
    437e:	8f ed       	ldi	r24, 0xDF	; 223
    4380:	96 e0       	ldi	r25, 0x06	; 6
    4382:	0e 94 89 15 	call	0x2b12	; 0x2b12 <_ZN6StringD1Ev>
void initMatrix();
void initBluetooth();
void drawMatrix(int msgNum);

static String fullBuffer = "";
static String inputBuffer;
    4386:	85 ee       	ldi	r24, 0xE5	; 229
    4388:	96 e0       	ldi	r25, 0x06	; 6
    438a:	0e 94 89 15 	call	0x2b12	; 0x2b12 <_ZN6StringD1Ev>
// Private functions
void initMatrix();
void initBluetooth();
void drawMatrix(int msgNum);

static String fullBuffer = "";
    438e:	8b ee       	ldi	r24, 0xEB	; 235
    4390:	96 e0       	ldi	r25, 0x06	; 6
    4392:	0e 94 89 15 	call	0x2b12	; 0x2b12 <_ZN6StringD1Ev>
            delay(500);
            
        }
        break;
    }
}
    4396:	df 91       	pop	r29
    4398:	cf 91       	pop	r28
    439a:	08 95       	ret

0000439c <_Z16doCentralExamplev>:
    initBluetooth();
}


void doCentralExample()
{
    439c:	cf 93       	push	r28
    439e:	df 93       	push	r29
    43a0:	cd b7       	in	r28, 0x3d	; 61
    43a2:	de b7       	in	r29, 0x3e	; 62
    43a4:	a4 97       	sbiw	r28, 0x24	; 36
    43a6:	0f b6       	in	r0, 0x3f	; 63
    43a8:	f8 94       	cli
    43aa:	de bf       	out	0x3e, r29	; 62
    43ac:	0f be       	out	0x3f, r0	; 63
    43ae:	cd bf       	out	0x3d, r28	; 61
    BLEMate2::opResult result = BLEMate2::MODULE_ERROR;
    // This while loop will continue to scan the world for addresses until it
    //  finds some. Why? Why not?
    while(1)
    {
        result = BTModu.BLEScan(2);
    43b0:	62 e0       	ldi	r22, 0x02	; 2
    43b2:	70 e0       	ldi	r23, 0x00	; 0
    43b4:	80 e8       	ldi	r24, 0x80	; 128
    43b6:	96 e0       	ldi	r25, 0x06	; 6
    43b8:	0e 94 b9 18 	call	0x3172	; 0x3172 <_ZN8BLEMate27BLEScanEj>
        if (result == BLEMate2::SUCCESS)
    43bc:	81 30       	cpi	r24, 0x01	; 1
    43be:	39 f5       	brne	.+78     	; 0x440e <_Z16doCentralExamplev+0x72>
        {
            Serial.println("Success!");
    43c0:	68 e6       	ldi	r22, 0x68	; 104
    43c2:	73 e0       	ldi	r23, 0x03	; 3
    43c4:	84 ee       	ldi	r24, 0xE4	; 228
    43c6:	93 e0       	ldi	r25, 0x03	; 3
    43c8:	0e 94 81 11 	call	0x2302	; 0x2302 <_ZN5Print7printlnEPKc>
        {
            Serial.println("Module error! Everybody panic!");
        }
    }

    byte numAddressesFound = BTModu.numAddresses();
    43cc:	80 e8       	ldi	r24, 0x80	; 128
    43ce:	96 e0       	ldi	r25, 0x06	; 6
    43d0:	4c d9       	rcall	.-3432   	; 0x366a <_ZN8BLEMate212numAddressesEv>
    43d2:	f8 2e       	mov	r15, r24

    // BC118Address is where we'll store the index of the first BC118 device we
    //  find. We'll know it because the address will start with "20FABB". By
    //  starting at 10, we know when we've found something b/c it'll be 4 or less.
    byte BC118Address = 0;
    String address;
    43d4:	6e e5       	ldi	r22, 0x5E	; 94
    43d6:	72 e0       	ldi	r23, 0x02	; 2
    43d8:	ce 01       	movw	r24, r28
    43da:	4f 96       	adiw	r24, 0x1f	; 31
    43dc:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <_ZN6StringC1EPKc>

    Serial.print("We found ");
    43e0:	61 e7       	ldi	r22, 0x71	; 113
    43e2:	73 e0       	ldi	r23, 0x03	; 3
    43e4:	84 ee       	ldi	r24, 0xE4	; 228
    43e6:	93 e0       	ldi	r25, 0x03	; 3
    43e8:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN5Print5printEPKc>
    Serial.print(numAddressesFound);
    43ec:	4a e0       	ldi	r20, 0x0A	; 10
    43ee:	50 e0       	ldi	r21, 0x00	; 0
    43f0:	6f 2d       	mov	r22, r15
    43f2:	84 ee       	ldi	r24, 0xE4	; 228
    43f4:	93 e0       	ldi	r25, 0x03	; 3
    43f6:	0e 94 1a 12 	call	0x2434	; 0x2434 <_ZN5Print5printEhi>
    Serial.println(" BLE devices!");
    43fa:	6b e7       	ldi	r22, 0x7B	; 123
    43fc:	73 e0       	ldi	r23, 0x03	; 3
    43fe:	84 ee       	ldi	r24, 0xE4	; 228
    4400:	93 e0       	ldi	r25, 0x03	; 3
    4402:	0e 94 81 11 	call	0x2302	; 0x2302 <_ZN5Print7printlnEPKc>
    // We're going to iterate over numAddressesFound, print each address, and
    //  check to see if each one belongs to a BC118. The first BC118 we find,
    //  we'll connect to, but only after we report our address list.
    for (byte i = 0; i < numAddressesFound; i++)
    4406:	f1 10       	cpse	r15, r1
    4408:	14 c0       	rjmp	.+40     	; 0x4432 <_Z16doCentralExamplev+0x96>
    byte numAddressesFound = BTModu.numAddresses();

    // BC118Address is where we'll store the index of the first BC118 device we
    //  find. We'll know it because the address will start with "20FABB". By
    //  starting at 10, we know when we've found something b/c it'll be 4 or less.
    byte BC118Address = 0;
    440a:	00 e0       	ldi	r16, 0x00	; 0
    440c:	48 c0       	rjmp	.+144    	; 0x449e <_Z16doCentralExamplev+0x102>
        if (result == BLEMate2::SUCCESS)
        {
            Serial.println("Success!");
            break;
        }
        else if (result == BLEMate2::REMOTE_ERROR)
    440e:	8b 3f       	cpi	r24, 0xFB	; 251
    4410:	39 f4       	brne	.+14     	; 0x4420 <_Z16doCentralExamplev+0x84>
        {
            Serial.println("Remote error!");
    4412:	69 e8       	ldi	r22, 0x89	; 137
    4414:	73 e0       	ldi	r23, 0x03	; 3
    4416:	84 ee       	ldi	r24, 0xE4	; 228
    4418:	93 e0       	ldi	r25, 0x03	; 3
    441a:	0e 94 81 11 	call	0x2302	; 0x2302 <_ZN5Print7printlnEPKc>
    441e:	c8 cf       	rjmp	.-112    	; 0x43b0 <_Z16doCentralExamplev+0x14>
        }
        else if (result == BLEMate2::MODULE_ERROR)
    4420:	8f 3f       	cpi	r24, 0xFF	; 255
    4422:	31 f6       	brne	.-116    	; 0x43b0 <_Z16doCentralExamplev+0x14>
        {
            Serial.println("Module error! Everybody panic!");
    4424:	67 e9       	ldi	r22, 0x97	; 151
    4426:	73 e0       	ldi	r23, 0x03	; 3
    4428:	84 ee       	ldi	r24, 0xE4	; 228
    442a:	93 e0       	ldi	r25, 0x03	; 3
    442c:	0e 94 81 11 	call	0x2302	; 0x2302 <_ZN5Print7printlnEPKc>
    4430:	bf cf       	rjmp	.-130    	; 0x43b0 <_Z16doCentralExamplev+0x14>
    Serial.print(numAddressesFound);
    Serial.println(" BLE devices!");
    // We're going to iterate over numAddressesFound, print each address, and
    //  check to see if each one belongs to a BC118. The first BC118 we find,
    //  we'll connect to, but only after we report our address list.
    for (byte i = 0; i < numAddressesFound; i++)
    4432:	10 e0       	ldi	r17, 0x00	; 0
    byte numAddressesFound = BTModu.numAddresses();

    // BC118Address is where we'll store the index of the first BC118 device we
    //  find. We'll know it because the address will start with "20FABB". By
    //  starting at 10, we know when we've found something b/c it'll be 4 or less.
    byte BC118Address = 0;
    4434:	00 e0       	ldi	r16, 0x00	; 0
    // We're going to iterate over numAddressesFound, print each address, and
    //  check to see if each one belongs to a BC118. The first BC118 we find,
    //  we'll connect to, but only after we report our address list.
    for (byte i = 0; i < numAddressesFound; i++)
    {
        BTModu.getAddress(i, address);
    4436:	ae 01       	movw	r20, r28
    4438:	41 5e       	subi	r20, 0xE1	; 225
    443a:	5f 4f       	sbci	r21, 0xFF	; 255
    443c:	61 2f       	mov	r22, r17
    443e:	80 e8       	ldi	r24, 0x80	; 128
    4440:	96 e0       	ldi	r25, 0x06	; 6
    4442:	d6 d8       	rcall	.-3668   	; 0x35f0 <_ZN8BLEMate210getAddressEhR6String>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    4444:	66 eb       	ldi	r22, 0xB6	; 182
    4446:	73 e0       	ldi	r23, 0x03	; 3
    4448:	ce 01       	movw	r24, r28
    444a:	49 96       	adiw	r24, 0x19	; 25
    444c:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <_ZN6StringC1EPKc>
        Serial.println("Found address: " + address);
    4450:	be 01       	movw	r22, r28
    4452:	61 5e       	subi	r22, 0xE1	; 225
    4454:	7f 4f       	sbci	r23, 0xFF	; 255
    4456:	ce 01       	movw	r24, r28
    4458:	49 96       	adiw	r24, 0x19	; 25
    445a:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <_ZplRK15StringSumHelperRK6String>
    445e:	bc 01       	movw	r22, r24
    4460:	84 ee       	ldi	r24, 0xE4	; 228
    4462:	93 e0       	ldi	r25, 0x03	; 3
    4464:	0e 94 71 11 	call	0x22e2	; 0x22e2 <_ZN5Print7printlnERK6String>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    4468:	ce 01       	movw	r24, r28
    446a:	49 96       	adiw	r24, 0x19	; 25
    446c:	0e 94 89 15 	call	0x2b12	; 0x2b12 <_ZN6StringD1Ev>
        if (address.startsWith("20FABB"))
    4470:	66 ec       	ldi	r22, 0xC6	; 198
    4472:	73 e0       	ldi	r23, 0x03	; 3
    4474:	ce 01       	movw	r24, r28
    4476:	43 96       	adiw	r24, 0x13	; 19
    4478:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <_ZN6StringC1EPKc>
    447c:	be 01       	movw	r22, r28
    447e:	6d 5e       	subi	r22, 0xED	; 237
    4480:	7f 4f       	sbci	r23, 0xFF	; 255
    4482:	ce 01       	movw	r24, r28
    4484:	4f 96       	adiw	r24, 0x1f	; 31
    4486:	0e 94 6d 17 	call	0x2eda	; 0x2eda <_ZNK6String10startsWithERKS_>
    448a:	e8 2e       	mov	r14, r24
    448c:	ce 01       	movw	r24, r28
    448e:	43 96       	adiw	r24, 0x13	; 19
    4490:	0e 94 89 15 	call	0x2b12	; 0x2b12 <_ZN6StringD1Ev>
    4494:	e1 10       	cpse	r14, r1
    4496:	01 2f       	mov	r16, r17
    Serial.print(numAddressesFound);
    Serial.println(" BLE devices!");
    // We're going to iterate over numAddressesFound, print each address, and
    //  check to see if each one belongs to a BC118. The first BC118 we find,
    //  we'll connect to, but only after we report our address list.
    for (byte i = 0; i < numAddressesFound; i++)
    4498:	1f 5f       	subi	r17, 0xFF	; 255
    449a:	1f 11       	cpse	r17, r15
    449c:	cc cf       	rjmp	.-104    	; 0x4436 <_Z16doCentralExamplev+0x9a>
        if (address.startsWith("20FABB"))
        {
            BC118Address = i;
        }
    }
    BTModu.getAddress(BC118Address, address);
    449e:	ae 01       	movw	r20, r28
    44a0:	41 5e       	subi	r20, 0xE1	; 225
    44a2:	5f 4f       	sbci	r21, 0xFF	; 255
    44a4:	60 2f       	mov	r22, r16
    44a6:	80 e8       	ldi	r24, 0x80	; 128
    44a8:	96 e0       	ldi	r25, 0x06	; 6
    44aa:	a2 d8       	rcall	.-3772   	; 0x35f0 <_ZN8BLEMate210getAddressEhR6String>
    BTModu.connect(address);
    44ac:	be 01       	movw	r22, r28
    44ae:	61 5e       	subi	r22, 0xE1	; 225
    44b0:	7f 4f       	sbci	r23, 0xFF	; 255
    44b2:	ce 01       	movw	r24, r28
    44b4:	0d 96       	adiw	r24, 0x0d	; 13
    44b6:	0e 94 22 16 	call	0x2c44	; 0x2c44 <_ZN6StringC1ERKS_>
    44ba:	be 01       	movw	r22, r28
    44bc:	63 5f       	subi	r22, 0xF3	; 243
    44be:	7f 4f       	sbci	r23, 0xFF	; 255
    44c0:	80 e8       	ldi	r24, 0x80	; 128
    44c2:	96 e0       	ldi	r25, 0x06	; 6
    44c4:	0e 94 2a 1a 	call	0x3454	; 0x3454 <_ZN8BLEMate27connectE6String>
    44c8:	ce 01       	movw	r24, r28
    44ca:	0d 96       	adiw	r24, 0x0d	; 13
    44cc:	0e 94 89 15 	call	0x2b12	; 0x2b12 <_ZN6StringD1Ev>
    BTModu.sendData("18549Team16LED");
    44d0:	6d ec       	ldi	r22, 0xCD	; 205
    44d2:	73 e0       	ldi	r23, 0x03	; 3
    44d4:	80 e8       	ldi	r24, 0x80	; 128
    44d6:	96 e0       	ldi	r25, 0x06	; 6
    44d8:	9c dc       	rcall	.-1736   	; 0x3e12 <_ZN8BLEMate28sendDataEPKc>
    BTModu.sendData("18549Team16LED");
    44da:	6d ec       	ldi	r22, 0xCD	; 205
    44dc:	73 e0       	ldi	r23, 0x03	; 3
    44de:	80 e8       	ldi	r24, 0x80	; 128
    44e0:	96 e0       	ldi	r25, 0x06	; 6
    44e2:	97 dc       	rcall	.-1746   	; 0x3e12 <_ZN8BLEMate28sendDataEPKc>
    44e4:	0f c0       	rjmp	.+30     	; 0x4504 <_Z16doCentralExamplev+0x168>
    //  something. If no, discard it.
    while(1){

        while (Serial1.available() > 0)
        {
            inputBuffer.concat((char)Serial1.read());
    44e6:	81 e8       	ldi	r24, 0x81	; 129
    44e8:	94 e0       	ldi	r25, 0x04	; 4
    44ea:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <_ZN14HardwareSerial4readEv>
    44ee:	68 2f       	mov	r22, r24
    44f0:	85 ee       	ldi	r24, 0xE5	; 229
    44f2:	96 e0       	ldi	r25, 0x06	; 6
    44f4:	0e 94 99 16 	call	0x2d32	; 0x2d32 <_ZN6String6concatEc>
            delay(10);
    44f8:	6a e0       	ldi	r22, 0x0A	; 10
    44fa:	70 e0       	ldi	r23, 0x00	; 0
    44fc:	80 e0       	ldi	r24, 0x00	; 0
    44fe:	90 e0       	ldi	r25, 0x00	; 0
    4500:	0e 94 c9 14 	call	0x2992	; 0x2992 <delay>
    // The state machine for capturing that can be pretty easy: when we've read
    //  in \n\r, check to see if the string began with "RCV=". If yes, do
    //  something. If no, discard it.
    while(1){

        while (Serial1.available() > 0)
    4504:	81 e8       	ldi	r24, 0x81	; 129
    4506:	94 e0       	ldi	r25, 0x04	; 4
    4508:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_ZN14HardwareSerial9availableEv>
    450c:	18 16       	cp	r1, r24
    450e:	19 06       	cpc	r1, r25
    4510:	54 f3       	brlt	.-44     	; 0x44e6 <_Z16doCentralExamplev+0x14a>
        {
            inputBuffer.concat((char)Serial1.read());
            delay(10);
        }
        Serial.println(inputBuffer);
    4512:	65 ee       	ldi	r22, 0xE5	; 229
    4514:	76 e0       	ldi	r23, 0x06	; 6
    4516:	84 ee       	ldi	r24, 0xE4	; 228
    4518:	93 e0       	ldi	r25, 0x03	; 3
    451a:	0e 94 71 11 	call	0x22e2	; 0x22e2 <_ZN5Print7printlnERK6String>
        
        // We'll probably see a lot of lines that end with \n\r- that's the default
        //  line ending for all the connect info messages, for instance. We can
        //  ignore all of them that don't start with "RCV=". Remember to clear your
        //  String object after you find \n\r!!!
        if (inputBuffer.endsWith("\n\r"))
    451e:	6c e5       	ldi	r22, 0x5C	; 92
    4520:	72 e0       	ldi	r23, 0x02	; 2
    4522:	ce 01       	movw	r24, r28
    4524:	07 96       	adiw	r24, 0x07	; 7
    4526:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <_ZN6StringC1EPKc>
    452a:	be 01       	movw	r22, r28
    452c:	69 5f       	subi	r22, 0xF9	; 249
    452e:	7f 4f       	sbci	r23, 0xFF	; 255
    4530:	85 ee       	ldi	r24, 0xE5	; 229
    4532:	96 e0       	ldi	r25, 0x06	; 6
    4534:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <_ZNK6String8endsWithERKS_>
    4538:	18 2f       	mov	r17, r24
    453a:	ce 01       	movw	r24, r28
    453c:	07 96       	adiw	r24, 0x07	; 7
    453e:	0e 94 89 15 	call	0x2b12	; 0x2b12 <_ZN6StringD1Ev>
    4542:	11 23       	and	r17, r17
    4544:	31 f1       	breq	.+76     	; 0x4592 <_Z16doCentralExamplev+0x1f6>
        {
            if (inputBuffer.startsWith("RCV="))
    4546:	6c ed       	ldi	r22, 0xDC	; 220
    4548:	73 e0       	ldi	r23, 0x03	; 3
    454a:	ce 01       	movw	r24, r28
    454c:	01 96       	adiw	r24, 0x01	; 1
    454e:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <_ZN6StringC1EPKc>
    4552:	be 01       	movw	r22, r28
    4554:	6f 5f       	subi	r22, 0xFF	; 255
    4556:	7f 4f       	sbci	r23, 0xFF	; 255
    4558:	85 ee       	ldi	r24, 0xE5	; 229
    455a:	96 e0       	ldi	r25, 0x06	; 6
    455c:	0e 94 6d 17 	call	0x2eda	; 0x2eda <_ZNK6String10startsWithERKS_>
    4560:	18 2f       	mov	r17, r24
    4562:	ce 01       	movw	r24, r28
    4564:	01 96       	adiw	r24, 0x01	; 1
    4566:	0e 94 89 15 	call	0x2b12	; 0x2b12 <_ZN6StringD1Ev>
    456a:	11 23       	and	r17, r17
    456c:	91 f0       	breq	.+36     	; 0x4592 <_Z16doCentralExamplev+0x1f6>
            {
                inputBuffer.trim(); // Remove \n\r from end.
    456e:	85 ee       	ldi	r24, 0xE5	; 229
    4570:	96 e0       	ldi	r25, 0x06	; 6
    4572:	0e 94 55 18 	call	0x30aa	; 0x30aa <_ZN6String4trimEv>
                inputBuffer.remove(0,4); // Remove RCV= from front.
    4576:	44 e0       	ldi	r20, 0x04	; 4
    4578:	50 e0       	ldi	r21, 0x00	; 0
    457a:	60 e0       	ldi	r22, 0x00	; 0
    457c:	70 e0       	ldi	r23, 0x00	; 0
    457e:	85 ee       	ldi	r24, 0xE5	; 229
    4580:	96 e0       	ldi	r25, 0x06	; 6
    4582:	0e 94 27 18 	call	0x304e	; 0x304e <_ZN6String6removeEjj>
                drawMatrix(inputBuffer.toInt());
    4586:	85 ee       	ldi	r24, 0xE5	; 229
    4588:	96 e0       	ldi	r25, 0x06	; 6
    458a:	0e 94 ad 18 	call	0x315a	; 0x315a <_ZNK6String5toIntEv>
    458e:	cb 01       	movw	r24, r22
    4590:	63 dc       	rcall	.-1850   	; 0x3e58 <_Z10drawMatrixi>
            }
        }
        inputBuffer = "";
    4592:	6e e5       	ldi	r22, 0x5E	; 94
    4594:	72 e0       	ldi	r23, 0x02	; 2
    4596:	85 ee       	ldi	r24, 0xE5	; 229
    4598:	96 e0       	ldi	r25, 0x06	; 6
    459a:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <_ZN6StringaSEPKc>
    459e:	b2 cf       	rjmp	.-156    	; 0x4504 <_Z16doCentralExamplev+0x168>

000045a0 <main>:
int main(void)
{
    while(1)
    {
        //static String fullBuffer = "";
        doCentralExample();
    45a0:	fd de       	rcall	.-518    	; 0x439c <_Z16doCentralExamplev>

000045a2 <__udivmodsi4>:
    45a2:	a1 e2       	ldi	r26, 0x21	; 33
    45a4:	1a 2e       	mov	r1, r26
    45a6:	aa 1b       	sub	r26, r26
    45a8:	bb 1b       	sub	r27, r27
    45aa:	fd 01       	movw	r30, r26
    45ac:	0d c0       	rjmp	.+26     	; 0x45c8 <__udivmodsi4_ep>

000045ae <__udivmodsi4_loop>:
    45ae:	aa 1f       	adc	r26, r26
    45b0:	bb 1f       	adc	r27, r27
    45b2:	ee 1f       	adc	r30, r30
    45b4:	ff 1f       	adc	r31, r31
    45b6:	a2 17       	cp	r26, r18
    45b8:	b3 07       	cpc	r27, r19
    45ba:	e4 07       	cpc	r30, r20
    45bc:	f5 07       	cpc	r31, r21
    45be:	20 f0       	brcs	.+8      	; 0x45c8 <__udivmodsi4_ep>
    45c0:	a2 1b       	sub	r26, r18
    45c2:	b3 0b       	sbc	r27, r19
    45c4:	e4 0b       	sbc	r30, r20
    45c6:	f5 0b       	sbc	r31, r21

000045c8 <__udivmodsi4_ep>:
    45c8:	66 1f       	adc	r22, r22
    45ca:	77 1f       	adc	r23, r23
    45cc:	88 1f       	adc	r24, r24
    45ce:	99 1f       	adc	r25, r25
    45d0:	1a 94       	dec	r1
    45d2:	69 f7       	brne	.-38     	; 0x45ae <__udivmodsi4_loop>
    45d4:	60 95       	com	r22
    45d6:	70 95       	com	r23
    45d8:	80 95       	com	r24
    45da:	90 95       	com	r25
    45dc:	9b 01       	movw	r18, r22
    45de:	ac 01       	movw	r20, r24
    45e0:	bd 01       	movw	r22, r26
    45e2:	cf 01       	movw	r24, r30
    45e4:	08 95       	ret

000045e6 <__tablejump2__>:
    45e6:	ee 0f       	add	r30, r30
    45e8:	ff 1f       	adc	r31, r31

000045ea <__tablejump__>:
    45ea:	05 90       	lpm	r0, Z+
    45ec:	f4 91       	lpm	r31, Z
    45ee:	e0 2d       	mov	r30, r0
    45f0:	19 94       	eijmp

000045f2 <__tablejump_elpm__>:
    45f2:	07 90       	elpm	r0, Z+
    45f4:	f6 91       	elpm	r31, Z
    45f6:	e0 2d       	mov	r30, r0
    45f8:	19 94       	eijmp

000045fa <malloc>:
    45fa:	cf 93       	push	r28
    45fc:	df 93       	push	r29
    45fe:	82 30       	cpi	r24, 0x02	; 2
    4600:	91 05       	cpc	r25, r1
    4602:	10 f4       	brcc	.+4      	; 0x4608 <malloc+0xe>
    4604:	82 e0       	ldi	r24, 0x02	; 2
    4606:	90 e0       	ldi	r25, 0x00	; 0
    4608:	e0 91 f3 06 	lds	r30, 0x06F3
    460c:	f0 91 f4 06 	lds	r31, 0x06F4
    4610:	20 e0       	ldi	r18, 0x00	; 0
    4612:	30 e0       	ldi	r19, 0x00	; 0
    4614:	a0 e0       	ldi	r26, 0x00	; 0
    4616:	b0 e0       	ldi	r27, 0x00	; 0
    4618:	30 97       	sbiw	r30, 0x00	; 0
    461a:	39 f1       	breq	.+78     	; 0x466a <malloc+0x70>
    461c:	40 81       	ld	r20, Z
    461e:	51 81       	ldd	r21, Z+1	; 0x01
    4620:	48 17       	cp	r20, r24
    4622:	59 07       	cpc	r21, r25
    4624:	b8 f0       	brcs	.+46     	; 0x4654 <malloc+0x5a>
    4626:	48 17       	cp	r20, r24
    4628:	59 07       	cpc	r21, r25
    462a:	71 f4       	brne	.+28     	; 0x4648 <malloc+0x4e>
    462c:	82 81       	ldd	r24, Z+2	; 0x02
    462e:	93 81       	ldd	r25, Z+3	; 0x03
    4630:	10 97       	sbiw	r26, 0x00	; 0
    4632:	29 f0       	breq	.+10     	; 0x463e <malloc+0x44>
    4634:	13 96       	adiw	r26, 0x03	; 3
    4636:	9c 93       	st	X, r25
    4638:	8e 93       	st	-X, r24
    463a:	12 97       	sbiw	r26, 0x02	; 2
    463c:	2c c0       	rjmp	.+88     	; 0x4696 <malloc+0x9c>
    463e:	90 93 f4 06 	sts	0x06F4, r25
    4642:	80 93 f3 06 	sts	0x06F3, r24
    4646:	27 c0       	rjmp	.+78     	; 0x4696 <malloc+0x9c>
    4648:	21 15       	cp	r18, r1
    464a:	31 05       	cpc	r19, r1
    464c:	31 f0       	breq	.+12     	; 0x465a <malloc+0x60>
    464e:	42 17       	cp	r20, r18
    4650:	53 07       	cpc	r21, r19
    4652:	18 f0       	brcs	.+6      	; 0x465a <malloc+0x60>
    4654:	a9 01       	movw	r20, r18
    4656:	db 01       	movw	r26, r22
    4658:	01 c0       	rjmp	.+2      	; 0x465c <malloc+0x62>
    465a:	ef 01       	movw	r28, r30
    465c:	9a 01       	movw	r18, r20
    465e:	bd 01       	movw	r22, r26
    4660:	df 01       	movw	r26, r30
    4662:	02 80       	ldd	r0, Z+2	; 0x02
    4664:	f3 81       	ldd	r31, Z+3	; 0x03
    4666:	e0 2d       	mov	r30, r0
    4668:	d7 cf       	rjmp	.-82     	; 0x4618 <malloc+0x1e>
    466a:	21 15       	cp	r18, r1
    466c:	31 05       	cpc	r19, r1
    466e:	f9 f0       	breq	.+62     	; 0x46ae <malloc+0xb4>
    4670:	28 1b       	sub	r18, r24
    4672:	39 0b       	sbc	r19, r25
    4674:	24 30       	cpi	r18, 0x04	; 4
    4676:	31 05       	cpc	r19, r1
    4678:	80 f4       	brcc	.+32     	; 0x469a <malloc+0xa0>
    467a:	8a 81       	ldd	r24, Y+2	; 0x02
    467c:	9b 81       	ldd	r25, Y+3	; 0x03
    467e:	61 15       	cp	r22, r1
    4680:	71 05       	cpc	r23, r1
    4682:	21 f0       	breq	.+8      	; 0x468c <malloc+0x92>
    4684:	fb 01       	movw	r30, r22
    4686:	93 83       	std	Z+3, r25	; 0x03
    4688:	82 83       	std	Z+2, r24	; 0x02
    468a:	04 c0       	rjmp	.+8      	; 0x4694 <malloc+0x9a>
    468c:	90 93 f4 06 	sts	0x06F4, r25
    4690:	80 93 f3 06 	sts	0x06F3, r24
    4694:	fe 01       	movw	r30, r28
    4696:	32 96       	adiw	r30, 0x02	; 2
    4698:	44 c0       	rjmp	.+136    	; 0x4722 <malloc+0x128>
    469a:	fe 01       	movw	r30, r28
    469c:	e2 0f       	add	r30, r18
    469e:	f3 1f       	adc	r31, r19
    46a0:	81 93       	st	Z+, r24
    46a2:	91 93       	st	Z+, r25
    46a4:	22 50       	subi	r18, 0x02	; 2
    46a6:	31 09       	sbc	r19, r1
    46a8:	39 83       	std	Y+1, r19	; 0x01
    46aa:	28 83       	st	Y, r18
    46ac:	3a c0       	rjmp	.+116    	; 0x4722 <malloc+0x128>
    46ae:	20 91 f1 06 	lds	r18, 0x06F1
    46b2:	30 91 f2 06 	lds	r19, 0x06F2
    46b6:	23 2b       	or	r18, r19
    46b8:	41 f4       	brne	.+16     	; 0x46ca <malloc+0xd0>
    46ba:	20 91 02 02 	lds	r18, 0x0202
    46be:	30 91 03 02 	lds	r19, 0x0203
    46c2:	30 93 f2 06 	sts	0x06F2, r19
    46c6:	20 93 f1 06 	sts	0x06F1, r18
    46ca:	20 91 00 02 	lds	r18, 0x0200
    46ce:	30 91 01 02 	lds	r19, 0x0201
    46d2:	21 15       	cp	r18, r1
    46d4:	31 05       	cpc	r19, r1
    46d6:	41 f4       	brne	.+16     	; 0x46e8 <malloc+0xee>
    46d8:	2d b7       	in	r18, 0x3d	; 61
    46da:	3e b7       	in	r19, 0x3e	; 62
    46dc:	40 91 04 02 	lds	r20, 0x0204
    46e0:	50 91 05 02 	lds	r21, 0x0205
    46e4:	24 1b       	sub	r18, r20
    46e6:	35 0b       	sbc	r19, r21
    46e8:	e0 91 f1 06 	lds	r30, 0x06F1
    46ec:	f0 91 f2 06 	lds	r31, 0x06F2
    46f0:	e2 17       	cp	r30, r18
    46f2:	f3 07       	cpc	r31, r19
    46f4:	a0 f4       	brcc	.+40     	; 0x471e <malloc+0x124>
    46f6:	2e 1b       	sub	r18, r30
    46f8:	3f 0b       	sbc	r19, r31
    46fa:	28 17       	cp	r18, r24
    46fc:	39 07       	cpc	r19, r25
    46fe:	78 f0       	brcs	.+30     	; 0x471e <malloc+0x124>
    4700:	ac 01       	movw	r20, r24
    4702:	4e 5f       	subi	r20, 0xFE	; 254
    4704:	5f 4f       	sbci	r21, 0xFF	; 255
    4706:	24 17       	cp	r18, r20
    4708:	35 07       	cpc	r19, r21
    470a:	48 f0       	brcs	.+18     	; 0x471e <malloc+0x124>
    470c:	4e 0f       	add	r20, r30
    470e:	5f 1f       	adc	r21, r31
    4710:	50 93 f2 06 	sts	0x06F2, r21
    4714:	40 93 f1 06 	sts	0x06F1, r20
    4718:	81 93       	st	Z+, r24
    471a:	91 93       	st	Z+, r25
    471c:	02 c0       	rjmp	.+4      	; 0x4722 <malloc+0x128>
    471e:	e0 e0       	ldi	r30, 0x00	; 0
    4720:	f0 e0       	ldi	r31, 0x00	; 0
    4722:	cf 01       	movw	r24, r30
    4724:	df 91       	pop	r29
    4726:	cf 91       	pop	r28
    4728:	08 95       	ret

0000472a <free>:
    472a:	cf 93       	push	r28
    472c:	df 93       	push	r29
    472e:	00 97       	sbiw	r24, 0x00	; 0
    4730:	09 f4       	brne	.+2      	; 0x4734 <free+0xa>
    4732:	87 c0       	rjmp	.+270    	; 0x4842 <free+0x118>
    4734:	fc 01       	movw	r30, r24
    4736:	32 97       	sbiw	r30, 0x02	; 2
    4738:	13 82       	std	Z+3, r1	; 0x03
    473a:	12 82       	std	Z+2, r1	; 0x02
    473c:	c0 91 f3 06 	lds	r28, 0x06F3
    4740:	d0 91 f4 06 	lds	r29, 0x06F4
    4744:	20 97       	sbiw	r28, 0x00	; 0
    4746:	81 f4       	brne	.+32     	; 0x4768 <free+0x3e>
    4748:	20 81       	ld	r18, Z
    474a:	31 81       	ldd	r19, Z+1	; 0x01
    474c:	28 0f       	add	r18, r24
    474e:	39 1f       	adc	r19, r25
    4750:	80 91 f1 06 	lds	r24, 0x06F1
    4754:	90 91 f2 06 	lds	r25, 0x06F2
    4758:	82 17       	cp	r24, r18
    475a:	93 07       	cpc	r25, r19
    475c:	79 f5       	brne	.+94     	; 0x47bc <free+0x92>
    475e:	f0 93 f2 06 	sts	0x06F2, r31
    4762:	e0 93 f1 06 	sts	0x06F1, r30
    4766:	6d c0       	rjmp	.+218    	; 0x4842 <free+0x118>
    4768:	de 01       	movw	r26, r28
    476a:	20 e0       	ldi	r18, 0x00	; 0
    476c:	30 e0       	ldi	r19, 0x00	; 0
    476e:	ae 17       	cp	r26, r30
    4770:	bf 07       	cpc	r27, r31
    4772:	50 f4       	brcc	.+20     	; 0x4788 <free+0x5e>
    4774:	12 96       	adiw	r26, 0x02	; 2
    4776:	4d 91       	ld	r20, X+
    4778:	5c 91       	ld	r21, X
    477a:	13 97       	sbiw	r26, 0x03	; 3
    477c:	9d 01       	movw	r18, r26
    477e:	41 15       	cp	r20, r1
    4780:	51 05       	cpc	r21, r1
    4782:	09 f1       	breq	.+66     	; 0x47c6 <free+0x9c>
    4784:	da 01       	movw	r26, r20
    4786:	f3 cf       	rjmp	.-26     	; 0x476e <free+0x44>
    4788:	b3 83       	std	Z+3, r27	; 0x03
    478a:	a2 83       	std	Z+2, r26	; 0x02
    478c:	40 81       	ld	r20, Z
    478e:	51 81       	ldd	r21, Z+1	; 0x01
    4790:	84 0f       	add	r24, r20
    4792:	95 1f       	adc	r25, r21
    4794:	8a 17       	cp	r24, r26
    4796:	9b 07       	cpc	r25, r27
    4798:	71 f4       	brne	.+28     	; 0x47b6 <free+0x8c>
    479a:	8d 91       	ld	r24, X+
    479c:	9c 91       	ld	r25, X
    479e:	11 97       	sbiw	r26, 0x01	; 1
    47a0:	84 0f       	add	r24, r20
    47a2:	95 1f       	adc	r25, r21
    47a4:	02 96       	adiw	r24, 0x02	; 2
    47a6:	91 83       	std	Z+1, r25	; 0x01
    47a8:	80 83       	st	Z, r24
    47aa:	12 96       	adiw	r26, 0x02	; 2
    47ac:	8d 91       	ld	r24, X+
    47ae:	9c 91       	ld	r25, X
    47b0:	13 97       	sbiw	r26, 0x03	; 3
    47b2:	93 83       	std	Z+3, r25	; 0x03
    47b4:	82 83       	std	Z+2, r24	; 0x02
    47b6:	21 15       	cp	r18, r1
    47b8:	31 05       	cpc	r19, r1
    47ba:	29 f4       	brne	.+10     	; 0x47c6 <free+0x9c>
    47bc:	f0 93 f4 06 	sts	0x06F4, r31
    47c0:	e0 93 f3 06 	sts	0x06F3, r30
    47c4:	3e c0       	rjmp	.+124    	; 0x4842 <free+0x118>
    47c6:	d9 01       	movw	r26, r18
    47c8:	13 96       	adiw	r26, 0x03	; 3
    47ca:	fc 93       	st	X, r31
    47cc:	ee 93       	st	-X, r30
    47ce:	12 97       	sbiw	r26, 0x02	; 2
    47d0:	4d 91       	ld	r20, X+
    47d2:	5d 91       	ld	r21, X+
    47d4:	a4 0f       	add	r26, r20
    47d6:	b5 1f       	adc	r27, r21
    47d8:	ea 17       	cp	r30, r26
    47da:	fb 07       	cpc	r31, r27
    47dc:	79 f4       	brne	.+30     	; 0x47fc <free+0xd2>
    47de:	80 81       	ld	r24, Z
    47e0:	91 81       	ldd	r25, Z+1	; 0x01
    47e2:	84 0f       	add	r24, r20
    47e4:	95 1f       	adc	r25, r21
    47e6:	02 96       	adiw	r24, 0x02	; 2
    47e8:	d9 01       	movw	r26, r18
    47ea:	11 96       	adiw	r26, 0x01	; 1
    47ec:	9c 93       	st	X, r25
    47ee:	8e 93       	st	-X, r24
    47f0:	82 81       	ldd	r24, Z+2	; 0x02
    47f2:	93 81       	ldd	r25, Z+3	; 0x03
    47f4:	13 96       	adiw	r26, 0x03	; 3
    47f6:	9c 93       	st	X, r25
    47f8:	8e 93       	st	-X, r24
    47fa:	12 97       	sbiw	r26, 0x02	; 2
    47fc:	e0 e0       	ldi	r30, 0x00	; 0
    47fe:	f0 e0       	ldi	r31, 0x00	; 0
    4800:	8a 81       	ldd	r24, Y+2	; 0x02
    4802:	9b 81       	ldd	r25, Y+3	; 0x03
    4804:	00 97       	sbiw	r24, 0x00	; 0
    4806:	19 f0       	breq	.+6      	; 0x480e <free+0xe4>
    4808:	fe 01       	movw	r30, r28
    480a:	ec 01       	movw	r28, r24
    480c:	f9 cf       	rjmp	.-14     	; 0x4800 <free+0xd6>
    480e:	ce 01       	movw	r24, r28
    4810:	02 96       	adiw	r24, 0x02	; 2
    4812:	28 81       	ld	r18, Y
    4814:	39 81       	ldd	r19, Y+1	; 0x01
    4816:	82 0f       	add	r24, r18
    4818:	93 1f       	adc	r25, r19
    481a:	20 91 f1 06 	lds	r18, 0x06F1
    481e:	30 91 f2 06 	lds	r19, 0x06F2
    4822:	28 17       	cp	r18, r24
    4824:	39 07       	cpc	r19, r25
    4826:	69 f4       	brne	.+26     	; 0x4842 <free+0x118>
    4828:	30 97       	sbiw	r30, 0x00	; 0
    482a:	29 f4       	brne	.+10     	; 0x4836 <free+0x10c>
    482c:	10 92 f4 06 	sts	0x06F4, r1
    4830:	10 92 f3 06 	sts	0x06F3, r1
    4834:	02 c0       	rjmp	.+4      	; 0x483a <free+0x110>
    4836:	13 82       	std	Z+3, r1	; 0x03
    4838:	12 82       	std	Z+2, r1	; 0x02
    483a:	d0 93 f2 06 	sts	0x06F2, r29
    483e:	c0 93 f1 06 	sts	0x06F1, r28
    4842:	df 91       	pop	r29
    4844:	cf 91       	pop	r28
    4846:	08 95       	ret

00004848 <realloc>:
    4848:	6f 92       	push	r6
    484a:	7f 92       	push	r7
    484c:	8f 92       	push	r8
    484e:	9f 92       	push	r9
    4850:	af 92       	push	r10
    4852:	bf 92       	push	r11
    4854:	cf 92       	push	r12
    4856:	df 92       	push	r13
    4858:	ef 92       	push	r14
    485a:	ff 92       	push	r15
    485c:	0f 93       	push	r16
    485e:	1f 93       	push	r17
    4860:	cf 93       	push	r28
    4862:	df 93       	push	r29
    4864:	ec 01       	movw	r28, r24
    4866:	cb 01       	movw	r24, r22
    4868:	20 97       	sbiw	r28, 0x00	; 0
    486a:	79 f4       	brne	.+30     	; 0x488a <realloc+0x42>
    486c:	df 91       	pop	r29
    486e:	cf 91       	pop	r28
    4870:	1f 91       	pop	r17
    4872:	0f 91       	pop	r16
    4874:	ff 90       	pop	r15
    4876:	ef 90       	pop	r14
    4878:	df 90       	pop	r13
    487a:	cf 90       	pop	r12
    487c:	bf 90       	pop	r11
    487e:	af 90       	pop	r10
    4880:	9f 90       	pop	r9
    4882:	8f 90       	pop	r8
    4884:	7f 90       	pop	r7
    4886:	6f 90       	pop	r6
    4888:	b8 ce       	rjmp	.-656    	; 0x45fa <malloc>
    488a:	fe 01       	movw	r30, r28
    488c:	e6 0f       	add	r30, r22
    488e:	f7 1f       	adc	r31, r23
    4890:	9e 01       	movw	r18, r28
    4892:	22 50       	subi	r18, 0x02	; 2
    4894:	31 09       	sbc	r19, r1
    4896:	e2 17       	cp	r30, r18
    4898:	f3 07       	cpc	r31, r19
    489a:	08 f4       	brcc	.+2      	; 0x489e <realloc+0x56>
    489c:	a8 c0       	rjmp	.+336    	; 0x49ee <realloc+0x1a6>
    489e:	d9 01       	movw	r26, r18
    48a0:	0d 91       	ld	r16, X+
    48a2:	1c 91       	ld	r17, X
    48a4:	11 97       	sbiw	r26, 0x01	; 1
    48a6:	06 17       	cp	r16, r22
    48a8:	17 07       	cpc	r17, r23
    48aa:	b0 f0       	brcs	.+44     	; 0x48d8 <realloc+0x90>
    48ac:	05 30       	cpi	r16, 0x05	; 5
    48ae:	11 05       	cpc	r17, r1
    48b0:	08 f4       	brcc	.+2      	; 0x48b4 <realloc+0x6c>
    48b2:	9b c0       	rjmp	.+310    	; 0x49ea <realloc+0x1a2>
    48b4:	a8 01       	movw	r20, r16
    48b6:	44 50       	subi	r20, 0x04	; 4
    48b8:	51 09       	sbc	r21, r1
    48ba:	46 17       	cp	r20, r22
    48bc:	57 07       	cpc	r21, r23
    48be:	08 f4       	brcc	.+2      	; 0x48c2 <realloc+0x7a>
    48c0:	94 c0       	rjmp	.+296    	; 0x49ea <realloc+0x1a2>
    48c2:	02 50       	subi	r16, 0x02	; 2
    48c4:	11 09       	sbc	r17, r1
    48c6:	06 1b       	sub	r16, r22
    48c8:	17 0b       	sbc	r17, r23
    48ca:	01 93       	st	Z+, r16
    48cc:	11 93       	st	Z+, r17
    48ce:	6d 93       	st	X+, r22
    48d0:	7c 93       	st	X, r23
    48d2:	cf 01       	movw	r24, r30
    48d4:	2a df       	rcall	.-428    	; 0x472a <free>
    48d6:	89 c0       	rjmp	.+274    	; 0x49ea <realloc+0x1a2>
    48d8:	5b 01       	movw	r10, r22
    48da:	a0 1a       	sub	r10, r16
    48dc:	b1 0a       	sbc	r11, r17
    48de:	4e 01       	movw	r8, r28
    48e0:	80 0e       	add	r8, r16
    48e2:	91 1e       	adc	r9, r17
    48e4:	a0 91 f3 06 	lds	r26, 0x06F3
    48e8:	b0 91 f4 06 	lds	r27, 0x06F4
    48ec:	61 2c       	mov	r6, r1
    48ee:	71 2c       	mov	r7, r1
    48f0:	60 e0       	ldi	r22, 0x00	; 0
    48f2:	70 e0       	ldi	r23, 0x00	; 0
    48f4:	10 97       	sbiw	r26, 0x00	; 0
    48f6:	09 f4       	brne	.+2      	; 0x48fa <realloc+0xb2>
    48f8:	49 c0       	rjmp	.+146    	; 0x498c <realloc+0x144>
    48fa:	a8 15       	cp	r26, r8
    48fc:	b9 05       	cpc	r27, r9
    48fe:	c9 f5       	brne	.+114    	; 0x4972 <realloc+0x12a>
    4900:	ed 90       	ld	r14, X+
    4902:	fc 90       	ld	r15, X
    4904:	11 97       	sbiw	r26, 0x01	; 1
    4906:	67 01       	movw	r12, r14
    4908:	42 e0       	ldi	r20, 0x02	; 2
    490a:	c4 0e       	add	r12, r20
    490c:	d1 1c       	adc	r13, r1
    490e:	ca 14       	cp	r12, r10
    4910:	db 04       	cpc	r13, r11
    4912:	78 f1       	brcs	.+94     	; 0x4972 <realloc+0x12a>
    4914:	47 01       	movw	r8, r14
    4916:	8a 18       	sub	r8, r10
    4918:	9b 08       	sbc	r9, r11
    491a:	64 01       	movw	r12, r8
    491c:	42 e0       	ldi	r20, 0x02	; 2
    491e:	c4 0e       	add	r12, r20
    4920:	d1 1c       	adc	r13, r1
    4922:	12 96       	adiw	r26, 0x02	; 2
    4924:	bc 90       	ld	r11, X
    4926:	12 97       	sbiw	r26, 0x02	; 2
    4928:	13 96       	adiw	r26, 0x03	; 3
    492a:	ac 91       	ld	r26, X
    492c:	b5 e0       	ldi	r27, 0x05	; 5
    492e:	cb 16       	cp	r12, r27
    4930:	d1 04       	cpc	r13, r1
    4932:	40 f0       	brcs	.+16     	; 0x4944 <realloc+0xfc>
    4934:	b2 82       	std	Z+2, r11	; 0x02
    4936:	a3 83       	std	Z+3, r26	; 0x03
    4938:	91 82       	std	Z+1, r9	; 0x01
    493a:	80 82       	st	Z, r8
    493c:	d9 01       	movw	r26, r18
    493e:	8d 93       	st	X+, r24
    4940:	9c 93       	st	X, r25
    4942:	09 c0       	rjmp	.+18     	; 0x4956 <realloc+0x10e>
    4944:	0e 5f       	subi	r16, 0xFE	; 254
    4946:	1f 4f       	sbci	r17, 0xFF	; 255
    4948:	0e 0d       	add	r16, r14
    494a:	1f 1d       	adc	r17, r15
    494c:	f9 01       	movw	r30, r18
    494e:	11 83       	std	Z+1, r17	; 0x01
    4950:	00 83       	st	Z, r16
    4952:	eb 2d       	mov	r30, r11
    4954:	fa 2f       	mov	r31, r26
    4956:	61 15       	cp	r22, r1
    4958:	71 05       	cpc	r23, r1
    495a:	31 f0       	breq	.+12     	; 0x4968 <realloc+0x120>
    495c:	db 01       	movw	r26, r22
    495e:	13 96       	adiw	r26, 0x03	; 3
    4960:	fc 93       	st	X, r31
    4962:	ee 93       	st	-X, r30
    4964:	12 97       	sbiw	r26, 0x02	; 2
    4966:	41 c0       	rjmp	.+130    	; 0x49ea <realloc+0x1a2>
    4968:	f0 93 f4 06 	sts	0x06F4, r31
    496c:	e0 93 f3 06 	sts	0x06F3, r30
    4970:	3c c0       	rjmp	.+120    	; 0x49ea <realloc+0x1a2>
    4972:	6d 91       	ld	r22, X+
    4974:	7c 91       	ld	r23, X
    4976:	11 97       	sbiw	r26, 0x01	; 1
    4978:	66 16       	cp	r6, r22
    497a:	77 06       	cpc	r7, r23
    497c:	08 f4       	brcc	.+2      	; 0x4980 <realloc+0x138>
    497e:	3b 01       	movw	r6, r22
    4980:	bd 01       	movw	r22, r26
    4982:	12 96       	adiw	r26, 0x02	; 2
    4984:	0d 90       	ld	r0, X+
    4986:	bc 91       	ld	r27, X
    4988:	a0 2d       	mov	r26, r0
    498a:	b4 cf       	rjmp	.-152    	; 0x48f4 <realloc+0xac>
    498c:	60 91 f1 06 	lds	r22, 0x06F1
    4990:	70 91 f2 06 	lds	r23, 0x06F2
    4994:	68 15       	cp	r22, r8
    4996:	79 05       	cpc	r23, r9
    4998:	e9 f4       	brne	.+58     	; 0x49d4 <realloc+0x18c>
    499a:	68 16       	cp	r6, r24
    499c:	79 06       	cpc	r7, r25
    499e:	d0 f4       	brcc	.+52     	; 0x49d4 <realloc+0x18c>
    49a0:	40 91 00 02 	lds	r20, 0x0200
    49a4:	50 91 01 02 	lds	r21, 0x0201
    49a8:	41 15       	cp	r20, r1
    49aa:	51 05       	cpc	r21, r1
    49ac:	41 f4       	brne	.+16     	; 0x49be <realloc+0x176>
    49ae:	4d b7       	in	r20, 0x3d	; 61
    49b0:	5e b7       	in	r21, 0x3e	; 62
    49b2:	60 91 04 02 	lds	r22, 0x0204
    49b6:	70 91 05 02 	lds	r23, 0x0205
    49ba:	46 1b       	sub	r20, r22
    49bc:	57 0b       	sbc	r21, r23
    49be:	e4 17       	cp	r30, r20
    49c0:	f5 07       	cpc	r31, r21
    49c2:	a8 f4       	brcc	.+42     	; 0x49ee <realloc+0x1a6>
    49c4:	f0 93 f2 06 	sts	0x06F2, r31
    49c8:	e0 93 f1 06 	sts	0x06F1, r30
    49cc:	f9 01       	movw	r30, r18
    49ce:	91 83       	std	Z+1, r25	; 0x01
    49d0:	80 83       	st	Z, r24
    49d2:	0b c0       	rjmp	.+22     	; 0x49ea <realloc+0x1a2>
    49d4:	12 de       	rcall	.-988    	; 0x45fa <malloc>
    49d6:	7c 01       	movw	r14, r24
    49d8:	00 97       	sbiw	r24, 0x00	; 0
    49da:	49 f0       	breq	.+18     	; 0x49ee <realloc+0x1a6>
    49dc:	a8 01       	movw	r20, r16
    49de:	be 01       	movw	r22, r28
    49e0:	49 d0       	rcall	.+146    	; 0x4a74 <memcpy>
    49e2:	ce 01       	movw	r24, r28
    49e4:	a2 de       	rcall	.-700    	; 0x472a <free>
    49e6:	c7 01       	movw	r24, r14
    49e8:	04 c0       	rjmp	.+8      	; 0x49f2 <realloc+0x1aa>
    49ea:	ce 01       	movw	r24, r28
    49ec:	02 c0       	rjmp	.+4      	; 0x49f2 <realloc+0x1aa>
    49ee:	80 e0       	ldi	r24, 0x00	; 0
    49f0:	90 e0       	ldi	r25, 0x00	; 0
    49f2:	df 91       	pop	r29
    49f4:	cf 91       	pop	r28
    49f6:	1f 91       	pop	r17
    49f8:	0f 91       	pop	r16
    49fa:	ff 90       	pop	r15
    49fc:	ef 90       	pop	r14
    49fe:	df 90       	pop	r13
    4a00:	cf 90       	pop	r12
    4a02:	bf 90       	pop	r11
    4a04:	af 90       	pop	r10
    4a06:	9f 90       	pop	r9
    4a08:	8f 90       	pop	r8
    4a0a:	7f 90       	pop	r7
    4a0c:	6f 90       	pop	r6
    4a0e:	08 95       	ret

00004a10 <abort>:
    4a10:	81 e0       	ldi	r24, 0x01	; 1
    4a12:	90 e0       	ldi	r25, 0x00	; 0
    4a14:	f8 94       	cli
    4a16:	b6 c0       	rjmp	.+364    	; 0x4b84 <__do_global_dtors>

00004a18 <atol>:
    4a18:	1f 93       	push	r17
    4a1a:	fc 01       	movw	r30, r24
    4a1c:	99 27       	eor	r25, r25
    4a1e:	88 27       	eor	r24, r24
    4a20:	bc 01       	movw	r22, r24
    4a22:	e8 94       	clt
    4a24:	11 91       	ld	r17, Z+
    4a26:	10 32       	cpi	r17, 0x20	; 32
    4a28:	e9 f3       	breq	.-6      	; 0x4a24 <atol+0xc>
    4a2a:	19 30       	cpi	r17, 0x09	; 9
    4a2c:	10 f0       	brcs	.+4      	; 0x4a32 <atol+0x1a>
    4a2e:	1e 30       	cpi	r17, 0x0E	; 14
    4a30:	c8 f3       	brcs	.-14     	; 0x4a24 <atol+0xc>
    4a32:	1b 32       	cpi	r17, 0x2B	; 43
    4a34:	49 f0       	breq	.+18     	; 0x4a48 <atol+0x30>
    4a36:	1d 32       	cpi	r17, 0x2D	; 45
    4a38:	41 f4       	brne	.+16     	; 0x4a4a <atol+0x32>
    4a3a:	68 94       	set
    4a3c:	05 c0       	rjmp	.+10     	; 0x4a48 <atol+0x30>
    4a3e:	57 d0       	rcall	.+174    	; 0x4aee <__mulsi_const_10>
    4a40:	61 0f       	add	r22, r17
    4a42:	71 1d       	adc	r23, r1
    4a44:	81 1d       	adc	r24, r1
    4a46:	91 1d       	adc	r25, r1
    4a48:	11 91       	ld	r17, Z+
    4a4a:	10 53       	subi	r17, 0x30	; 48
    4a4c:	1a 30       	cpi	r17, 0x0A	; 10
    4a4e:	b8 f3       	brcs	.-18     	; 0x4a3e <atol+0x26>
    4a50:	3e f4       	brtc	.+14     	; 0x4a60 <atol+0x48>
    4a52:	90 95       	com	r25
    4a54:	80 95       	com	r24
    4a56:	70 95       	com	r23
    4a58:	61 95       	neg	r22
    4a5a:	7f 4f       	sbci	r23, 0xFF	; 255
    4a5c:	8f 4f       	sbci	r24, 0xFF	; 255
    4a5e:	9f 4f       	sbci	r25, 0xFF	; 255
    4a60:	1f 91       	pop	r17
    4a62:	08 95       	ret

00004a64 <isspace>:
    4a64:	91 11       	cpse	r25, r1
    4a66:	7b c0       	rjmp	.+246    	; 0x4b5e <__ctype_isfalse>
    4a68:	80 32       	cpi	r24, 0x20	; 32
    4a6a:	19 f0       	breq	.+6      	; 0x4a72 <isspace+0xe>
    4a6c:	89 50       	subi	r24, 0x09	; 9
    4a6e:	85 50       	subi	r24, 0x05	; 5
    4a70:	d0 f7       	brcc	.-12     	; 0x4a66 <isspace+0x2>
    4a72:	08 95       	ret

00004a74 <memcpy>:
    4a74:	fb 01       	movw	r30, r22
    4a76:	dc 01       	movw	r26, r24
    4a78:	02 c0       	rjmp	.+4      	; 0x4a7e <memcpy+0xa>
    4a7a:	01 90       	ld	r0, Z+
    4a7c:	0d 92       	st	X+, r0
    4a7e:	41 50       	subi	r20, 0x01	; 1
    4a80:	50 40       	sbci	r21, 0x00	; 0
    4a82:	d8 f7       	brcc	.-10     	; 0x4a7a <memcpy+0x6>
    4a84:	08 95       	ret

00004a86 <memset>:
    4a86:	dc 01       	movw	r26, r24
    4a88:	01 c0       	rjmp	.+2      	; 0x4a8c <memset+0x6>
    4a8a:	6d 93       	st	X+, r22
    4a8c:	41 50       	subi	r20, 0x01	; 1
    4a8e:	50 40       	sbci	r21, 0x00	; 0
    4a90:	e0 f7       	brcc	.-8      	; 0x4a8a <memset+0x4>
    4a92:	08 95       	ret

00004a94 <strcmp>:
    4a94:	fb 01       	movw	r30, r22
    4a96:	dc 01       	movw	r26, r24
    4a98:	8d 91       	ld	r24, X+
    4a9a:	01 90       	ld	r0, Z+
    4a9c:	80 19       	sub	r24, r0
    4a9e:	01 10       	cpse	r0, r1
    4aa0:	d9 f3       	breq	.-10     	; 0x4a98 <strcmp+0x4>
    4aa2:	99 0b       	sbc	r25, r25
    4aa4:	08 95       	ret

00004aa6 <strcpy>:
    4aa6:	fb 01       	movw	r30, r22
    4aa8:	dc 01       	movw	r26, r24
    4aaa:	01 90       	ld	r0, Z+
    4aac:	0d 92       	st	X+, r0
    4aae:	00 20       	and	r0, r0
    4ab0:	e1 f7       	brne	.-8      	; 0x4aaa <strcpy+0x4>
    4ab2:	08 95       	ret

00004ab4 <strncmp>:
    4ab4:	fb 01       	movw	r30, r22
    4ab6:	dc 01       	movw	r26, r24
    4ab8:	41 50       	subi	r20, 0x01	; 1
    4aba:	50 40       	sbci	r21, 0x00	; 0
    4abc:	30 f0       	brcs	.+12     	; 0x4aca <strncmp+0x16>
    4abe:	8d 91       	ld	r24, X+
    4ac0:	01 90       	ld	r0, Z+
    4ac2:	80 19       	sub	r24, r0
    4ac4:	19 f4       	brne	.+6      	; 0x4acc <strncmp+0x18>
    4ac6:	00 20       	and	r0, r0
    4ac8:	b9 f7       	brne	.-18     	; 0x4ab8 <strncmp+0x4>
    4aca:	88 1b       	sub	r24, r24
    4acc:	99 0b       	sbc	r25, r25
    4ace:	08 95       	ret

00004ad0 <strncpy>:
    4ad0:	fb 01       	movw	r30, r22
    4ad2:	dc 01       	movw	r26, r24
    4ad4:	41 50       	subi	r20, 0x01	; 1
    4ad6:	50 40       	sbci	r21, 0x00	; 0
    4ad8:	48 f0       	brcs	.+18     	; 0x4aec <strncpy+0x1c>
    4ada:	01 90       	ld	r0, Z+
    4adc:	0d 92       	st	X+, r0
    4ade:	00 20       	and	r0, r0
    4ae0:	c9 f7       	brne	.-14     	; 0x4ad4 <strncpy+0x4>
    4ae2:	01 c0       	rjmp	.+2      	; 0x4ae6 <strncpy+0x16>
    4ae4:	1d 92       	st	X+, r1
    4ae6:	41 50       	subi	r20, 0x01	; 1
    4ae8:	50 40       	sbci	r21, 0x00	; 0
    4aea:	e0 f7       	brcc	.-8      	; 0x4ae4 <strncpy+0x14>
    4aec:	08 95       	ret

00004aee <__mulsi_const_10>:
    4aee:	59 2f       	mov	r21, r25
    4af0:	48 2f       	mov	r20, r24
    4af2:	37 2f       	mov	r19, r23
    4af4:	26 2f       	mov	r18, r22
    4af6:	66 0f       	add	r22, r22
    4af8:	77 1f       	adc	r23, r23
    4afa:	88 1f       	adc	r24, r24
    4afc:	99 1f       	adc	r25, r25
    4afe:	66 0f       	add	r22, r22
    4b00:	77 1f       	adc	r23, r23
    4b02:	88 1f       	adc	r24, r24
    4b04:	99 1f       	adc	r25, r25
    4b06:	62 0f       	add	r22, r18
    4b08:	73 1f       	adc	r23, r19
    4b0a:	84 1f       	adc	r24, r20
    4b0c:	95 1f       	adc	r25, r21
    4b0e:	66 0f       	add	r22, r22
    4b10:	77 1f       	adc	r23, r23
    4b12:	88 1f       	adc	r24, r24
    4b14:	99 1f       	adc	r25, r25
    4b16:	08 95       	ret

00004b18 <utoa>:
    4b18:	45 32       	cpi	r20, 0x25	; 37
    4b1a:	51 05       	cpc	r21, r1
    4b1c:	18 f4       	brcc	.+6      	; 0x4b24 <utoa+0xc>
    4b1e:	42 30       	cpi	r20, 0x02	; 2
    4b20:	08 f0       	brcs	.+2      	; 0x4b24 <utoa+0xc>
    4b22:	04 c0       	rjmp	.+8      	; 0x4b2c <__utoa_ncheck>
    4b24:	fb 01       	movw	r30, r22
    4b26:	10 82       	st	Z, r1
    4b28:	cb 01       	movw	r24, r22
    4b2a:	08 95       	ret

00004b2c <__utoa_ncheck>:
    4b2c:	bb 27       	eor	r27, r27

00004b2e <__utoa_common>:
    4b2e:	fb 01       	movw	r30, r22
    4b30:	55 27       	eor	r21, r21
    4b32:	aa 27       	eor	r26, r26
    4b34:	88 0f       	add	r24, r24
    4b36:	99 1f       	adc	r25, r25
    4b38:	aa 1f       	adc	r26, r26
    4b3a:	a4 17       	cp	r26, r20
    4b3c:	10 f0       	brcs	.+4      	; 0x4b42 <__utoa_common+0x14>
    4b3e:	a4 1b       	sub	r26, r20
    4b40:	83 95       	inc	r24
    4b42:	50 51       	subi	r21, 0x10	; 16
    4b44:	b9 f7       	brne	.-18     	; 0x4b34 <__utoa_common+0x6>
    4b46:	a0 5d       	subi	r26, 0xD0	; 208
    4b48:	aa 33       	cpi	r26, 0x3A	; 58
    4b4a:	08 f0       	brcs	.+2      	; 0x4b4e <__utoa_common+0x20>
    4b4c:	a9 5d       	subi	r26, 0xD9	; 217
    4b4e:	a1 93       	st	Z+, r26
    4b50:	00 97       	sbiw	r24, 0x00	; 0
    4b52:	79 f7       	brne	.-34     	; 0x4b32 <__utoa_common+0x4>
    4b54:	b1 11       	cpse	r27, r1
    4b56:	b1 93       	st	Z+, r27
    4b58:	11 92       	st	Z+, r1
    4b5a:	cb 01       	movw	r24, r22
    4b5c:	03 c0       	rjmp	.+6      	; 0x4b64 <strrev>

00004b5e <__ctype_isfalse>:
    4b5e:	99 27       	eor	r25, r25
    4b60:	88 27       	eor	r24, r24

00004b62 <__ctype_istrue>:
    4b62:	08 95       	ret

00004b64 <strrev>:
    4b64:	dc 01       	movw	r26, r24
    4b66:	fc 01       	movw	r30, r24
    4b68:	67 2f       	mov	r22, r23
    4b6a:	71 91       	ld	r23, Z+
    4b6c:	77 23       	and	r23, r23
    4b6e:	e1 f7       	brne	.-8      	; 0x4b68 <strrev+0x4>
    4b70:	32 97       	sbiw	r30, 0x02	; 2
    4b72:	04 c0       	rjmp	.+8      	; 0x4b7c <strrev+0x18>
    4b74:	7c 91       	ld	r23, X
    4b76:	6d 93       	st	X+, r22
    4b78:	70 83       	st	Z, r23
    4b7a:	62 91       	ld	r22, -Z
    4b7c:	ae 17       	cp	r26, r30
    4b7e:	bf 07       	cpc	r27, r31
    4b80:	c8 f3       	brcs	.-14     	; 0x4b74 <strrev+0x10>
    4b82:	08 95       	ret

00004b84 <__do_global_dtors>:
    4b84:	16 e0       	ldi	r17, 0x06	; 6
    4b86:	cc ef       	ldi	r28, 0xFC	; 252
    4b88:	d6 e0       	ldi	r29, 0x06	; 6
    4b8a:	00 e0       	ldi	r16, 0x00	; 0
    4b8c:	05 c0       	rjmp	.+10     	; 0x4b98 <__do_global_dtors+0x14>
    4b8e:	22 97       	sbiw	r28, 0x02	; 2
    4b90:	01 09       	sbc	r16, r1
    4b92:	fe 01       	movw	r30, r28
    4b94:	0b bf       	out	0x3b, r16	; 59
    4b96:	2d dd       	rcall	.-1446   	; 0x45f2 <__tablejump_elpm__>
    4b98:	ce 3f       	cpi	r28, 0xFE	; 254
    4b9a:	d1 07       	cpc	r29, r17
    4b9c:	80 e0       	ldi	r24, 0x00	; 0
    4b9e:	08 07       	cpc	r16, r24
    4ba0:	b1 f7       	brne	.-20     	; 0x4b8e <__do_global_dtors+0xa>
    4ba2:	f8 94       	cli

00004ba4 <__stop_program>:
    4ba4:	ff cf       	rjmp	.-2      	; 0x4ba4 <__stop_program>
