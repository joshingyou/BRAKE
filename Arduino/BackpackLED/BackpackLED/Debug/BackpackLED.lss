
BackpackLED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000260  00800200  000049b6  00004a4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000049b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000031c  00800460  00800460  00004caa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004caa  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000980  00000000  00000000  00004cda  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0001aea9  00000000  00000000  0000565a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000035fd  00000000  00000000  00020503  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00005ef8  00000000  00000000  00023b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000028dc  00000000  00000000  000299f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000341d  00000000  00000000  0002c2d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000f2f5  00000000  00000000  0002f6f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000998  00000000  00000000  0003e9e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	8b c3       	rjmp	.+1814   	; 0x718 <__dtors_end>
       2:	00 00       	nop
       4:	0c 94 f7 13 	jmp	0x27ee	; 0x27ee <__vector_1>
       8:	0c 94 28 14 	jmp	0x2850	; 0x2850 <__vector_2>
       c:	0c 94 59 14 	jmp	0x28b2	; 0x28b2 <__vector_3>
      10:	0c 94 8a 14 	jmp	0x2914	; 0x2914 <__vector_4>
      14:	0c 94 bb 14 	jmp	0x2976	; 0x2976 <__vector_5>
      18:	0c 94 ec 14 	jmp	0x29d8	; 0x29d8 <__vector_6>
      1c:	0c 94 1d 15 	jmp	0x2a3a	; 0x2a3a <__vector_7>
      20:	0c 94 4e 15 	jmp	0x2a9c	; 0x2a9c <__vector_8>
      24:	aa c3       	rjmp	.+1876   	; 0x77a <__bad_interrupt>
      26:	00 00       	nop
      28:	a8 c3       	rjmp	.+1872   	; 0x77a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a6 c3       	rjmp	.+1868   	; 0x77a <__bad_interrupt>
      2e:	00 00       	nop
      30:	a4 c3       	rjmp	.+1864   	; 0x77a <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 98 13 	jmp	0x2730	; 0x2730 <__vector_13>
      38:	a0 c3       	rjmp	.+1856   	; 0x77a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9e c3       	rjmp	.+1852   	; 0x77a <__bad_interrupt>
      3e:	00 00       	nop
      40:	9c c3       	rjmp	.+1848   	; 0x77a <__bad_interrupt>
      42:	00 00       	nop
      44:	9a c3       	rjmp	.+1844   	; 0x77a <__bad_interrupt>
      46:	00 00       	nop
      48:	98 c3       	rjmp	.+1840   	; 0x77a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	96 c3       	rjmp	.+1836   	; 0x77a <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 7d 0d 	jmp	0x1afa	; 0x1afa <__vector_20>
      54:	92 c3       	rjmp	.+1828   	; 0x77a <__bad_interrupt>
      56:	00 00       	nop
      58:	90 c3       	rjmp	.+1824   	; 0x77a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 7f 15 	jmp	0x2afe	; 0x2afe <__vector_23>
      60:	8c c3       	rjmp	.+1816   	; 0x77a <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <__vector_25>
      68:	0c 94 61 0f 	jmp	0x1ec2	; 0x1ec2 <__vector_26>
      6c:	86 c3       	rjmp	.+1804   	; 0x77a <__bad_interrupt>
      6e:	00 00       	nop
      70:	84 c3       	rjmp	.+1800   	; 0x77a <__bad_interrupt>
      72:	00 00       	nop
      74:	82 c3       	rjmp	.+1796   	; 0x77a <__bad_interrupt>
      76:	00 00       	nop
      78:	80 c3       	rjmp	.+1792   	; 0x77a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7e c3       	rjmp	.+1788   	; 0x77a <__bad_interrupt>
      7e:	00 00       	nop
      80:	7c c3       	rjmp	.+1784   	; 0x77a <__bad_interrupt>
      82:	00 00       	nop
      84:	7a c3       	rjmp	.+1780   	; 0x77a <__bad_interrupt>
      86:	00 00       	nop
      88:	78 c3       	rjmp	.+1776   	; 0x77a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	76 c3       	rjmp	.+1772   	; 0x77a <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 d6 0f 	jmp	0x1fac	; 0x1fac <__vector_36>
      94:	0c 94 15 10 	jmp	0x202a	; 0x202a <__vector_37>
      98:	70 c3       	rjmp	.+1760   	; 0x77a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6e c3       	rjmp	.+1756   	; 0x77a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	6c c3       	rjmp	.+1752   	; 0x77a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	6a c3       	rjmp	.+1748   	; 0x77a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	68 c3       	rjmp	.+1744   	; 0x77a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	66 c3       	rjmp	.+1740   	; 0x77a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	64 c3       	rjmp	.+1736   	; 0x77a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	62 c3       	rjmp	.+1732   	; 0x77a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	60 c3       	rjmp	.+1728   	; 0x77a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	5e c3       	rjmp	.+1724   	; 0x77a <__bad_interrupt>
      be:	00 00       	nop
      c0:	5c c3       	rjmp	.+1720   	; 0x77a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	5a c3       	rjmp	.+1716   	; 0x77a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	58 c3       	rjmp	.+1712   	; 0x77a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <__vector_51>
      d0:	0c 94 c9 10 	jmp	0x2192	; 0x2192 <__vector_52>
      d4:	52 c3       	rjmp	.+1700   	; 0x77a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 3e 11 	jmp	0x227c	; 0x227c <__vector_54>
      dc:	0c 94 7d 11 	jmp	0x22fa	; 0x22fa <__vector_55>
      e0:	4c c3       	rjmp	.+1688   	; 0x77a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	a3 16       	cp	r10, r19
      e6:	a7 16       	cp	r10, r23
      e8:	91 16       	cp	r9, r17
      ea:	97 16       	cp	r9, r23
      ec:	9d 16       	cp	r9, r29
      ee:	ec 16       	cp	r14, r28
      f0:	ab 16       	cp	r10, r27
      f2:	b1 16       	cp	r11, r17
      f4:	b7 16       	cp	r11, r23
      f6:	bd 16       	cp	r11, r29
      f8:	c3 16       	cp	r12, r19
      fa:	c9 16       	cp	r12, r25
      fc:	cf 16       	cp	r12, r31
      fe:	d5 16       	cp	r13, r21
     100:	ec 16       	cp	r14, r28
     102:	db 16       	cp	r13, r27
     104:	e1 16       	cp	r14, r17
     106:	e7 16       	cp	r14, r23

00000108 <__trampolines_end>:
     108:	00 00       	nop
     10a:	00 00       	nop
     10c:	00 3e       	cpi	r16, 0xE0	; 224
     10e:	5b 4f       	sbci	r21, 0xFB	; 251
     110:	5b 3e       	cpi	r21, 0xEB	; 235
     112:	3e 6b       	ori	r19, 0xBE	; 190
     114:	4f 6b       	ori	r20, 0xBF	; 191
     116:	3e 1c       	adc	r3, r14
     118:	3e 7c       	andi	r19, 0xCE	; 206
     11a:	3e 1c       	adc	r3, r14
     11c:	18 3c       	cpi	r17, 0xC8	; 200
     11e:	7e 3c       	cpi	r23, 0xCE	; 206
     120:	18 1c       	adc	r1, r8
     122:	57 7d       	andi	r21, 0xD7	; 215
     124:	57 1c       	adc	r5, r7
     126:	1c 5e       	subi	r17, 0xEC	; 236
     128:	7f 5e       	subi	r23, 0xEF	; 239
     12a:	1c 00       	.word	0x001c	; ????
     12c:	18 3c       	cpi	r17, 0xC8	; 200
     12e:	18 00       	.word	0x0018	; ????
     130:	ff e7       	ldi	r31, 0x7F	; 127
     132:	c3 e7       	ldi	r28, 0x73	; 115
     134:	ff 00       	.word	0x00ff	; ????
     136:	18 24       	eor	r1, r8
     138:	18 00       	.word	0x0018	; ????
     13a:	ff e7       	ldi	r31, 0x7F	; 127
     13c:	db e7       	ldi	r29, 0x7B	; 123
     13e:	ff 30       	cpi	r31, 0x0F	; 15
     140:	48 3a       	cpi	r20, 0xA8	; 168
     142:	06 0e       	add	r0, r22
     144:	26 29       	or	r18, r6
     146:	79 29       	or	r23, r9
     148:	26 40       	sbci	r18, 0x06	; 6
     14a:	7f 05       	cpc	r23, r15
     14c:	05 07       	cpc	r16, r21
     14e:	40 7f       	andi	r20, 0xF0	; 240
     150:	05 25       	eor	r16, r5
     152:	3f 5a       	subi	r19, 0xAF	; 175
     154:	3c e7       	ldi	r19, 0x7C	; 124
     156:	3c 5a       	subi	r19, 0xAC	; 172
     158:	7f 3e       	cpi	r23, 0xEF	; 239
     15a:	1c 1c       	adc	r1, r12
     15c:	08 08       	sbc	r0, r8
     15e:	1c 1c       	adc	r1, r12
     160:	3e 7f       	andi	r19, 0xFE	; 254
     162:	14 22       	and	r1, r20
     164:	7f 22       	and	r7, r31
     166:	14 5f       	subi	r17, 0xF4	; 244
     168:	5f 00       	.word	0x005f	; ????
     16a:	5f 5f       	subi	r21, 0xFF	; 255
     16c:	06 09       	sbc	r16, r6
     16e:	7f 01       	movw	r14, r30
     170:	7f 00       	.word	0x007f	; ????
     172:	66 89       	ldd	r22, Z+22	; 0x16
     174:	95 6a       	ori	r25, 0xA5	; 165
     176:	60 60       	ori	r22, 0x00	; 0
     178:	60 60       	ori	r22, 0x00	; 0
     17a:	60 94       	com	r6
     17c:	a2 ff       	sbrs	r26, 2
     17e:	a2 94       	swap	r10
     180:	08 04       	cpc	r0, r8
     182:	7e 04       	cpc	r7, r14
     184:	08 10       	cpse	r0, r8
     186:	20 7e       	andi	r18, 0xE0	; 224
     188:	20 10       	cpse	r2, r0
     18a:	08 08       	sbc	r0, r8
     18c:	2a 1c       	adc	r2, r10
     18e:	08 08       	sbc	r0, r8
     190:	1c 2a       	or	r1, r28
     192:	08 08       	sbc	r0, r8
     194:	1e 10       	cpse	r1, r14
     196:	10 10       	cpse	r1, r0
     198:	10 0c       	add	r1, r0
     19a:	1e 0c       	add	r1, r14
     19c:	1e 0c       	add	r1, r14
     19e:	30 38       	cpi	r19, 0x80	; 128
     1a0:	3e 38       	cpi	r19, 0x8E	; 142
     1a2:	30 06       	cpc	r3, r16
     1a4:	0e 3e       	cpi	r16, 0xEE	; 238
     1a6:	0e 06       	cpc	r0, r30
     1a8:	00 00       	nop
     1aa:	00 00       	nop
     1ac:	00 00       	nop
     1ae:	00 5f       	subi	r16, 0xF0	; 240
     1b0:	00 00       	nop
     1b2:	00 07       	cpc	r16, r16
     1b4:	00 07       	cpc	r16, r16
     1b6:	00 14       	cp	r0, r0
     1b8:	7f 14       	cp	r7, r15
     1ba:	7f 14       	cp	r7, r15
     1bc:	24 2a       	or	r2, r20
     1be:	7f 2a       	or	r7, r31
     1c0:	12 23       	and	r17, r18
     1c2:	13 08       	sbc	r1, r3
     1c4:	64 62       	ori	r22, 0x24	; 36
     1c6:	36 49       	sbci	r19, 0x96	; 150
     1c8:	56 20       	and	r5, r6
     1ca:	50 00       	.word	0x0050	; ????
     1cc:	08 07       	cpc	r16, r24
     1ce:	03 00       	.word	0x0003	; ????
     1d0:	00 1c       	adc	r0, r0
     1d2:	22 41       	sbci	r18, 0x12	; 18
     1d4:	00 00       	nop
     1d6:	41 22       	and	r4, r17
     1d8:	1c 00       	.word	0x001c	; ????
     1da:	2a 1c       	adc	r2, r10
     1dc:	7f 1c       	adc	r7, r15
     1de:	2a 08       	sbc	r2, r10
     1e0:	08 3e       	cpi	r16, 0xE8	; 232
     1e2:	08 08       	sbc	r0, r8
     1e4:	00 80       	ld	r0, Z
     1e6:	70 30       	cpi	r23, 0x00	; 0
     1e8:	00 08       	sbc	r0, r0
     1ea:	08 08       	sbc	r0, r8
     1ec:	08 08       	sbc	r0, r8
     1ee:	00 00       	nop
     1f0:	60 60       	ori	r22, 0x00	; 0
     1f2:	00 20       	and	r0, r0
     1f4:	10 08       	sbc	r1, r0
     1f6:	04 02       	muls	r16, r20
     1f8:	3e 51       	subi	r19, 0x1E	; 30
     1fa:	49 45       	sbci	r20, 0x59	; 89
     1fc:	3e 00       	.word	0x003e	; ????
     1fe:	42 7f       	andi	r20, 0xF2	; 242
     200:	40 00       	.word	0x0040	; ????
     202:	72 49       	sbci	r23, 0x92	; 146
     204:	49 49       	sbci	r20, 0x99	; 153
     206:	46 21       	and	r20, r6
     208:	41 49       	sbci	r20, 0x91	; 145
     20a:	4d 33       	cpi	r20, 0x3D	; 61
     20c:	18 14       	cp	r1, r8
     20e:	12 7f       	andi	r17, 0xF2	; 242
     210:	10 27       	eor	r17, r16
     212:	45 45       	sbci	r20, 0x55	; 85
     214:	45 39       	cpi	r20, 0x95	; 149
     216:	3c 4a       	sbci	r19, 0xAC	; 172
     218:	49 49       	sbci	r20, 0x99	; 153
     21a:	31 41       	sbci	r19, 0x11	; 17
     21c:	21 11       	cpse	r18, r1
     21e:	09 07       	cpc	r16, r25
     220:	36 49       	sbci	r19, 0x96	; 150
     222:	49 49       	sbci	r20, 0x99	; 153
     224:	36 46       	sbci	r19, 0x66	; 102
     226:	49 49       	sbci	r20, 0x99	; 153
     228:	29 1e       	adc	r2, r25
     22a:	00 00       	nop
     22c:	14 00       	.word	0x0014	; ????
     22e:	00 00       	nop
     230:	40 34       	cpi	r20, 0x40	; 64
     232:	00 00       	nop
     234:	00 08       	sbc	r0, r0
     236:	14 22       	and	r1, r20
     238:	41 14       	cp	r4, r1
     23a:	14 14       	cp	r1, r4
     23c:	14 14       	cp	r1, r4
     23e:	00 41       	sbci	r16, 0x10	; 16
     240:	22 14       	cp	r2, r2
     242:	08 02       	muls	r16, r24
     244:	01 59       	subi	r16, 0x91	; 145
     246:	09 06       	cpc	r0, r25
     248:	3e 41       	sbci	r19, 0x1E	; 30
     24a:	5d 59       	subi	r21, 0x9D	; 157
     24c:	4e 7c       	andi	r20, 0xCE	; 206
     24e:	12 11       	cpse	r17, r2
     250:	12 7c       	andi	r17, 0xC2	; 194
     252:	7f 49       	sbci	r23, 0x9F	; 159
     254:	49 49       	sbci	r20, 0x99	; 153
     256:	36 3e       	cpi	r19, 0xE6	; 230
     258:	41 41       	sbci	r20, 0x11	; 17
     25a:	41 22       	and	r4, r17
     25c:	7f 41       	sbci	r23, 0x1F	; 31
     25e:	41 41       	sbci	r20, 0x11	; 17
     260:	3e 7f       	andi	r19, 0xFE	; 254
     262:	49 49       	sbci	r20, 0x99	; 153
     264:	49 41       	sbci	r20, 0x19	; 25
     266:	7f 09       	sbc	r23, r15
     268:	09 09       	sbc	r16, r9
     26a:	01 3e       	cpi	r16, 0xE1	; 225
     26c:	41 41       	sbci	r20, 0x11	; 17
     26e:	51 73       	andi	r21, 0x31	; 49
     270:	7f 08       	sbc	r7, r15
     272:	08 08       	sbc	r0, r8
     274:	7f 00       	.word	0x007f	; ????
     276:	41 7f       	andi	r20, 0xF1	; 241
     278:	41 00       	.word	0x0041	; ????
     27a:	20 40       	sbci	r18, 0x00	; 0
     27c:	41 3f       	cpi	r20, 0xF1	; 241
     27e:	01 7f       	andi	r16, 0xF1	; 241
     280:	08 14       	cp	r0, r8
     282:	22 41       	sbci	r18, 0x12	; 18
     284:	7f 40       	sbci	r23, 0x0F	; 15
     286:	40 40       	sbci	r20, 0x00	; 0
     288:	40 7f       	andi	r20, 0xF0	; 240
     28a:	02 1c       	adc	r0, r2
     28c:	02 7f       	andi	r16, 0xF2	; 242
     28e:	7f 04       	cpc	r7, r15
     290:	08 10       	cpse	r0, r8
     292:	7f 3e       	cpi	r23, 0xEF	; 239
     294:	41 41       	sbci	r20, 0x11	; 17
     296:	41 3e       	cpi	r20, 0xE1	; 225
     298:	7f 09       	sbc	r23, r15
     29a:	09 09       	sbc	r16, r9
     29c:	06 3e       	cpi	r16, 0xE6	; 230
     29e:	41 51       	subi	r20, 0x11	; 17
     2a0:	21 5e       	subi	r18, 0xE1	; 225
     2a2:	7f 09       	sbc	r23, r15
     2a4:	19 29       	or	r17, r9
     2a6:	46 26       	eor	r4, r22
     2a8:	49 49       	sbci	r20, 0x99	; 153
     2aa:	49 32       	cpi	r20, 0x29	; 41
     2ac:	03 01       	movw	r0, r6
     2ae:	7f 01       	movw	r14, r30
     2b0:	03 3f       	cpi	r16, 0xF3	; 243
     2b2:	40 40       	sbci	r20, 0x00	; 0
     2b4:	40 3f       	cpi	r20, 0xF0	; 240
     2b6:	1f 20       	and	r1, r15
     2b8:	40 20       	and	r4, r0
     2ba:	1f 3f       	cpi	r17, 0xFF	; 255
     2bc:	40 38       	cpi	r20, 0x80	; 128
     2be:	40 3f       	cpi	r20, 0xF0	; 240
     2c0:	63 14       	cp	r6, r3
     2c2:	08 14       	cp	r0, r8
     2c4:	63 03       	mulsu	r22, r19
     2c6:	04 78       	andi	r16, 0x84	; 132
     2c8:	04 03       	mulsu	r16, r20
     2ca:	61 59       	subi	r22, 0x91	; 145
     2cc:	49 4d       	sbci	r20, 0xD9	; 217
     2ce:	43 00       	.word	0x0043	; ????
     2d0:	7f 41       	sbci	r23, 0x1F	; 31
     2d2:	41 41       	sbci	r20, 0x11	; 17
     2d4:	02 04       	cpc	r0, r2
     2d6:	08 10       	cpse	r0, r8
     2d8:	20 00       	.word	0x0020	; ????
     2da:	41 41       	sbci	r20, 0x11	; 17
     2dc:	41 7f       	andi	r20, 0xF1	; 241
     2de:	04 02       	muls	r16, r20
     2e0:	01 02       	muls	r16, r17
     2e2:	04 40       	sbci	r16, 0x04	; 4
     2e4:	40 40       	sbci	r20, 0x00	; 0
     2e6:	40 40       	sbci	r20, 0x00	; 0
     2e8:	00 03       	mulsu	r16, r16
     2ea:	07 08       	sbc	r0, r7
     2ec:	00 20       	and	r0, r0
     2ee:	54 54       	subi	r21, 0x44	; 68
     2f0:	78 40       	sbci	r23, 0x08	; 8
     2f2:	7f 28       	or	r7, r15
     2f4:	44 44       	sbci	r20, 0x44	; 68
     2f6:	38 38       	cpi	r19, 0x88	; 136
     2f8:	44 44       	sbci	r20, 0x44	; 68
     2fa:	44 28       	or	r4, r4
     2fc:	38 44       	sbci	r19, 0x48	; 72
     2fe:	44 28       	or	r4, r4
     300:	7f 38       	cpi	r23, 0x8F	; 143
     302:	54 54       	subi	r21, 0x44	; 68
     304:	54 18       	sub	r5, r4
     306:	00 08       	sbc	r0, r0
     308:	7e 09       	sbc	r23, r14
     30a:	02 18       	sub	r0, r2
     30c:	a4 a4       	ldd	r10, Z+44	; 0x2c
     30e:	9c 78       	andi	r25, 0x8C	; 140
     310:	7f 08       	sbc	r7, r15
     312:	04 04       	cpc	r0, r4
     314:	78 00       	.word	0x0078	; ????
     316:	44 7d       	andi	r20, 0xD4	; 212
     318:	40 00       	.word	0x0040	; ????
     31a:	20 40       	sbci	r18, 0x00	; 0
     31c:	40 3d       	cpi	r20, 0xD0	; 208
     31e:	00 7f       	andi	r16, 0xF0	; 240
     320:	10 28       	or	r1, r0
     322:	44 00       	.word	0x0044	; ????
     324:	00 41       	sbci	r16, 0x10	; 16
     326:	7f 40       	sbci	r23, 0x0F	; 15
     328:	00 7c       	andi	r16, 0xC0	; 192
     32a:	04 78       	andi	r16, 0x84	; 132
     32c:	04 78       	andi	r16, 0x84	; 132
     32e:	7c 08       	sbc	r7, r12
     330:	04 04       	cpc	r0, r4
     332:	78 38       	cpi	r23, 0x88	; 136
     334:	44 44       	sbci	r20, 0x44	; 68
     336:	44 38       	cpi	r20, 0x84	; 132
     338:	fc 18       	sub	r15, r12
     33a:	24 24       	eor	r2, r4
     33c:	18 18       	sub	r1, r8
     33e:	24 24       	eor	r2, r4
     340:	18 fc       	.word	0xfc18	; ????
     342:	7c 08       	sbc	r7, r12
     344:	04 04       	cpc	r0, r4
     346:	08 48       	sbci	r16, 0x88	; 136
     348:	54 54       	subi	r21, 0x44	; 68
     34a:	54 24       	eor	r5, r4
     34c:	04 04       	cpc	r0, r4
     34e:	3f 44       	sbci	r19, 0x4F	; 79
     350:	24 3c       	cpi	r18, 0xC4	; 196
     352:	40 40       	sbci	r20, 0x00	; 0
     354:	20 7c       	andi	r18, 0xC0	; 192
     356:	1c 20       	and	r1, r12
     358:	40 20       	and	r4, r0
     35a:	1c 3c       	cpi	r17, 0xCC	; 204
     35c:	40 30       	cpi	r20, 0x00	; 0
     35e:	40 3c       	cpi	r20, 0xC0	; 192
     360:	44 28       	or	r4, r4
     362:	10 28       	or	r1, r0
     364:	44 4c       	sbci	r20, 0xC4	; 196
     366:	90 90 90 7c 	lds	r9, 0x7C90
     36a:	44 64       	ori	r20, 0x44	; 68
     36c:	54 4c       	sbci	r21, 0xC4	; 196
     36e:	44 00       	.word	0x0044	; ????
     370:	08 36       	cpi	r16, 0x68	; 104
     372:	41 00       	.word	0x0041	; ????
     374:	00 00       	nop
     376:	77 00       	.word	0x0077	; ????
     378:	00 00       	nop
     37a:	41 36       	cpi	r20, 0x61	; 97
     37c:	08 00       	.word	0x0008	; ????
     37e:	02 01       	movw	r0, r4
     380:	02 04       	cpc	r0, r2
     382:	02 3c       	cpi	r16, 0xC2	; 194
     384:	26 23       	and	r18, r22
     386:	26 3c       	cpi	r18, 0xC6	; 198
     388:	1e a1       	ldd	r17, Y+38	; 0x26
     38a:	a1 61       	ori	r26, 0x11	; 17
     38c:	12 3a       	cpi	r17, 0xA2	; 162
     38e:	40 40       	sbci	r20, 0x00	; 0
     390:	20 7a       	andi	r18, 0xA0	; 160
     392:	38 54       	subi	r19, 0x48	; 72
     394:	54 55       	subi	r21, 0x54	; 84
     396:	59 21       	and	r21, r9
     398:	55 55       	subi	r21, 0x55	; 85
     39a:	79 41       	sbci	r23, 0x19	; 25
     39c:	22 54       	subi	r18, 0x42	; 66
     39e:	54 78       	andi	r21, 0x84	; 132
     3a0:	42 21       	and	r20, r2
     3a2:	55 54       	subi	r21, 0x45	; 69
     3a4:	78 40       	sbci	r23, 0x08	; 8
     3a6:	20 54       	subi	r18, 0x40	; 64
     3a8:	55 79       	andi	r21, 0x95	; 149
     3aa:	40 0c       	add	r4, r0
     3ac:	1e 52       	subi	r17, 0x2E	; 46
     3ae:	72 12       	cpse	r7, r18
     3b0:	39 55       	subi	r19, 0x59	; 89
     3b2:	55 55       	subi	r21, 0x55	; 85
     3b4:	59 39       	cpi	r21, 0x99	; 153
     3b6:	54 54       	subi	r21, 0x44	; 68
     3b8:	54 59       	subi	r21, 0x94	; 148
     3ba:	39 55       	subi	r19, 0x59	; 89
     3bc:	54 54       	subi	r21, 0x44	; 68
     3be:	58 00       	.word	0x0058	; ????
     3c0:	00 45       	sbci	r16, 0x50	; 80
     3c2:	7c 41       	sbci	r23, 0x1C	; 28
     3c4:	00 02       	muls	r16, r16
     3c6:	45 7d       	andi	r20, 0xD5	; 213
     3c8:	42 00       	.word	0x0042	; ????
     3ca:	01 45       	sbci	r16, 0x51	; 81
     3cc:	7c 40       	sbci	r23, 0x0C	; 12
     3ce:	7d 12       	cpse	r7, r29
     3d0:	11 12       	cpse	r1, r17
     3d2:	7d f0       	brhs	.+30     	; 0x3f2 <__trampolines_end+0x2ea>
     3d4:	28 25       	eor	r18, r8
     3d6:	28 f0       	brcs	.+10     	; 0x3e2 <__trampolines_end+0x2da>
     3d8:	7c 54       	subi	r23, 0x4C	; 76
     3da:	55 45       	sbci	r21, 0x55	; 85
     3dc:	00 20       	and	r0, r0
     3de:	54 54       	subi	r21, 0x44	; 68
     3e0:	7c 54       	subi	r23, 0x4C	; 76
     3e2:	7c 0a       	sbc	r7, r28
     3e4:	09 7f       	andi	r16, 0xF9	; 249
     3e6:	49 32       	cpi	r20, 0x29	; 41
     3e8:	49 49       	sbci	r20, 0x99	; 153
     3ea:	49 32       	cpi	r20, 0x29	; 41
     3ec:	3a 44       	sbci	r19, 0x4A	; 74
     3ee:	44 44       	sbci	r20, 0x44	; 68
     3f0:	3a 32       	cpi	r19, 0x2A	; 42
     3f2:	4a 48       	sbci	r20, 0x8A	; 138
     3f4:	48 30       	cpi	r20, 0x08	; 8
     3f6:	3a 41       	sbci	r19, 0x1A	; 26
     3f8:	41 21       	and	r20, r1
     3fa:	7a 3a       	cpi	r23, 0xAA	; 170
     3fc:	42 40       	sbci	r20, 0x02	; 2
     3fe:	20 78       	andi	r18, 0x80	; 128
     400:	00 9d       	mul	r16, r0
     402:	a0 a0       	ldd	r10, Z+32	; 0x20
     404:	7d 3d       	cpi	r23, 0xDD	; 221
     406:	42 42       	sbci	r20, 0x22	; 34
     408:	42 3d       	cpi	r20, 0xD2	; 210
     40a:	3d 40       	sbci	r19, 0x0D	; 13
     40c:	40 40       	sbci	r20, 0x00	; 0
     40e:	3d 3c       	cpi	r19, 0xCD	; 205
     410:	24 ff       	sbrs	r18, 4
     412:	24 24       	eor	r2, r4
     414:	48 7e       	andi	r20, 0xE8	; 232
     416:	49 43       	sbci	r20, 0x39	; 57
     418:	66 2b       	or	r22, r22
     41a:	2f fc       	.word	0xfc2f	; ????
     41c:	2f 2b       	or	r18, r31
     41e:	ff 09       	sbc	r31, r15
     420:	29 f6       	brne	.-118    	; 0x3ac <__trampolines_end+0x2a4>
     422:	20 c0       	rjmp	.+64     	; 0x464 <__trampolines_end+0x35c>
     424:	88 7e       	andi	r24, 0xE8	; 232
     426:	09 03       	fmul	r16, r17
     428:	20 54       	subi	r18, 0x40	; 64
     42a:	54 79       	andi	r21, 0x94	; 148
     42c:	41 00       	.word	0x0041	; ????
     42e:	00 44       	sbci	r16, 0x40	; 64
     430:	7d 41       	sbci	r23, 0x1D	; 29
     432:	30 48       	sbci	r19, 0x80	; 128
     434:	48 4a       	sbci	r20, 0xA8	; 168
     436:	32 38       	cpi	r19, 0x82	; 130
     438:	40 40       	sbci	r20, 0x00	; 0
     43a:	22 7a       	andi	r18, 0xA2	; 162
     43c:	00 7a       	andi	r16, 0xA0	; 160
     43e:	0a 0a       	sbc	r0, r26
     440:	72 7d       	andi	r23, 0xD2	; 210
     442:	0d 19       	sub	r16, r13
     444:	31 7d       	andi	r19, 0xD1	; 209
     446:	26 29       	or	r18, r6
     448:	29 2f       	mov	r18, r25
     44a:	28 26       	eor	r2, r24
     44c:	29 29       	or	r18, r9
     44e:	29 26       	eor	r2, r25
     450:	30 48       	sbci	r19, 0x80	; 128
     452:	4d 40       	sbci	r20, 0x0D	; 13
     454:	20 38       	cpi	r18, 0x80	; 128
     456:	08 08       	sbc	r0, r8
     458:	08 08       	sbc	r0, r8
     45a:	08 08       	sbc	r0, r8
     45c:	08 08       	sbc	r0, r8
     45e:	38 2f       	mov	r19, r24
     460:	10 c8       	rjmp	.-4064   	; 0xfffff482 <__eeprom_end+0xff7ef482>
     462:	ac ba       	out	0x1c, r10	; 28
     464:	2f 10       	cpse	r2, r15
     466:	28 34       	cpi	r18, 0x48	; 72
     468:	fa 00       	.word	0x00fa	; ????
     46a:	00 7b       	andi	r16, 0xB0	; 176
     46c:	00 00       	nop
     46e:	08 14       	cp	r0, r8
     470:	2a 14       	cp	r2, r10
     472:	22 22       	and	r2, r18
     474:	14 2a       	or	r1, r20
     476:	14 08       	sbc	r1, r4
     478:	aa 00       	.word	0x00aa	; ????
     47a:	55 00       	.word	0x0055	; ????
     47c:	aa aa       	std	Y+50, r10	; 0x32
     47e:	55 aa       	std	Z+53, r5	; 0x35
     480:	55 aa       	std	Z+53, r5	; 0x35
     482:	00 00       	nop
     484:	00 ff       	sbrs	r16, 0
     486:	00 10       	cpse	r0, r0
     488:	10 10       	cpse	r1, r0
     48a:	ff 00       	.word	0x00ff	; ????
     48c:	14 14       	cp	r1, r4
     48e:	14 ff       	sbrs	r17, 4
     490:	00 10       	cpse	r0, r0
     492:	10 ff       	sbrs	r17, 0
     494:	00 ff       	sbrs	r16, 0
     496:	10 10       	cpse	r1, r0
     498:	f0 10       	cpse	r15, r0
     49a:	f0 14       	cp	r15, r0
     49c:	14 14       	cp	r1, r4
     49e:	fc 00       	.word	0x00fc	; ????
     4a0:	14 14       	cp	r1, r4
     4a2:	f7 00       	.word	0x00f7	; ????
     4a4:	ff 00       	.word	0x00ff	; ????
     4a6:	00 ff       	sbrs	r16, 0
     4a8:	00 ff       	sbrs	r16, 0
     4aa:	14 14       	cp	r1, r4
     4ac:	f4 04       	cpc	r15, r4
     4ae:	fc 14       	cp	r15, r12
     4b0:	14 17       	cp	r17, r20
     4b2:	10 1f       	adc	r17, r16
     4b4:	10 10       	cpse	r1, r0
     4b6:	1f 10       	cpse	r1, r15
     4b8:	1f 14       	cp	r1, r15
     4ba:	14 14       	cp	r1, r4
     4bc:	1f 00       	.word	0x001f	; ????
     4be:	10 10       	cpse	r1, r0
     4c0:	10 f0       	brcs	.+4      	; 0x4c6 <__trampolines_end+0x3be>
     4c2:	00 00       	nop
     4c4:	00 00       	nop
     4c6:	1f 10       	cpse	r1, r15
     4c8:	10 10       	cpse	r1, r0
     4ca:	10 1f       	adc	r17, r16
     4cc:	10 10       	cpse	r1, r0
     4ce:	10 10       	cpse	r1, r0
     4d0:	f0 10       	cpse	r15, r0
     4d2:	00 00       	nop
     4d4:	00 ff       	sbrs	r16, 0
     4d6:	10 10       	cpse	r1, r0
     4d8:	10 10       	cpse	r1, r0
     4da:	10 10       	cpse	r1, r0
     4dc:	10 10       	cpse	r1, r0
     4de:	10 ff       	sbrs	r17, 0
     4e0:	10 00       	.word	0x0010	; ????
     4e2:	00 00       	nop
     4e4:	ff 14       	cp	r15, r15
     4e6:	00 00       	nop
     4e8:	ff 00       	.word	0x00ff	; ????
     4ea:	ff 00       	.word	0x00ff	; ????
     4ec:	00 1f       	adc	r16, r16
     4ee:	10 17       	cp	r17, r16
     4f0:	00 00       	nop
     4f2:	fc 04       	cpc	r15, r12
     4f4:	f4 14       	cp	r15, r4
     4f6:	14 17       	cp	r17, r20
     4f8:	10 17       	cp	r17, r16
     4fa:	14 14       	cp	r1, r4
     4fc:	f4 04       	cpc	r15, r4
     4fe:	f4 00       	.word	0x00f4	; ????
     500:	00 ff       	sbrs	r16, 0
     502:	00 f7       	brcc	.-64     	; 0x4c4 <__trampolines_end+0x3bc>
     504:	14 14       	cp	r1, r4
     506:	14 14       	cp	r1, r4
     508:	14 14       	cp	r1, r4
     50a:	14 f7       	brge	.-60     	; 0x4d0 <__trampolines_end+0x3c8>
     50c:	00 f7       	brcc	.-64     	; 0x4ce <__trampolines_end+0x3c6>
     50e:	14 14       	cp	r1, r4
     510:	14 17       	cp	r17, r20
     512:	14 10       	cpse	r1, r4
     514:	10 1f       	adc	r17, r16
     516:	10 1f       	adc	r17, r16
     518:	14 14       	cp	r1, r4
     51a:	14 f4       	brge	.+4      	; 0x520 <__trampolines_end+0x418>
     51c:	14 10       	cpse	r1, r4
     51e:	10 f0       	brcs	.+4      	; 0x524 <__trampolines_end+0x41c>
     520:	10 f0       	brcs	.+4      	; 0x526 <__trampolines_end+0x41e>
     522:	00 00       	nop
     524:	1f 10       	cpse	r1, r15
     526:	1f 00       	.word	0x001f	; ????
     528:	00 00       	nop
     52a:	1f 14       	cp	r1, r15
     52c:	00 00       	nop
     52e:	00 fc       	sbrc	r0, 0
     530:	14 00       	.word	0x0014	; ????
     532:	00 f0       	brcs	.+0      	; 0x534 <__trampolines_end+0x42c>
     534:	10 f0       	brcs	.+4      	; 0x53a <__trampolines_end+0x432>
     536:	10 10       	cpse	r1, r0
     538:	ff 10       	cpse	r15, r15
     53a:	ff 14       	cp	r15, r15
     53c:	14 14       	cp	r1, r4
     53e:	ff 14       	cp	r15, r15
     540:	10 10       	cpse	r1, r0
     542:	10 1f       	adc	r17, r16
     544:	00 00       	nop
     546:	00 00       	nop
     548:	f0 10       	cpse	r15, r0
     54a:	ff ff       	.word	0xffff	; ????
     54c:	ff ff       	.word	0xffff	; ????
     54e:	ff f0       	brie	.+62     	; 0x58e <__trampolines_end+0x486>
     550:	f0 f0       	brcs	.+60     	; 0x58e <__trampolines_end+0x486>
     552:	f0 f0       	brcs	.+60     	; 0x590 <__trampolines_end+0x488>
     554:	ff ff       	.word	0xffff	; ????
     556:	ff 00       	.word	0x00ff	; ????
     558:	00 00       	nop
     55a:	00 00       	nop
     55c:	ff ff       	.word	0xffff	; ????
     55e:	0f 0f       	add	r16, r31
     560:	0f 0f       	add	r16, r31
     562:	0f 38       	cpi	r16, 0x8F	; 143
     564:	44 44       	sbci	r20, 0x44	; 68
     566:	38 44       	sbci	r19, 0x48	; 72
     568:	fc 4a       	sbci	r31, 0xAC	; 172
     56a:	4a 4a       	sbci	r20, 0xAA	; 170
     56c:	34 7e       	andi	r19, 0xE4	; 228
     56e:	02 02       	muls	r16, r18
     570:	06 06       	cpc	r0, r22
     572:	02 7e       	andi	r16, 0xE2	; 226
     574:	02 7e       	andi	r16, 0xE2	; 226
     576:	02 63       	ori	r16, 0x32	; 50
     578:	55 49       	sbci	r21, 0x95	; 149
     57a:	41 63       	ori	r20, 0x31	; 49
     57c:	38 44       	sbci	r19, 0x48	; 72
     57e:	44 3c       	cpi	r20, 0xC4	; 196
     580:	04 40       	sbci	r16, 0x04	; 4
     582:	7e 20       	and	r7, r14
     584:	1e 20       	and	r1, r14
     586:	06 02       	muls	r16, r22
     588:	7e 02       	muls	r23, r30
     58a:	02 99       	sbic	0x00, 2	; 0
     58c:	a5 e7       	ldi	r26, 0x75	; 117
     58e:	a5 99       	sbic	0x14, 5	; 20
     590:	1c 2a       	or	r1, r28
     592:	49 2a       	or	r4, r25
     594:	1c 4c       	sbci	r17, 0xCC	; 204
     596:	72 01       	movw	r14, r4
     598:	72 4c       	sbci	r23, 0xC2	; 194
     59a:	30 4a       	sbci	r19, 0xA0	; 160
     59c:	4d 4d       	sbci	r20, 0xDD	; 221
     59e:	30 30       	cpi	r19, 0x00	; 0
     5a0:	48 78       	andi	r20, 0x88	; 136
     5a2:	48 30       	cpi	r20, 0x08	; 8
     5a4:	bc 62       	ori	r27, 0x2C	; 44
     5a6:	5a 46       	sbci	r21, 0x6A	; 106
     5a8:	3d 3e       	cpi	r19, 0xED	; 237
     5aa:	49 49       	sbci	r20, 0x99	; 153
     5ac:	49 00       	.word	0x0049	; ????
     5ae:	7e 01       	movw	r14, r28
     5b0:	01 01       	movw	r0, r2
     5b2:	7e 2a       	or	r7, r30
     5b4:	2a 2a       	or	r2, r26
     5b6:	2a 2a       	or	r2, r26
     5b8:	44 44       	sbci	r20, 0x44	; 68
     5ba:	5f 44       	sbci	r21, 0x4F	; 79
     5bc:	44 40       	sbci	r20, 0x04	; 4
     5be:	51 4a       	sbci	r21, 0xA1	; 161
     5c0:	44 40       	sbci	r20, 0x04	; 4
     5c2:	40 44       	sbci	r20, 0x40	; 64
     5c4:	4a 51       	subi	r20, 0x1A	; 26
     5c6:	40 00       	.word	0x0040	; ????
     5c8:	00 ff       	sbrs	r16, 0
     5ca:	01 03       	mulsu	r16, r17
     5cc:	e0 80       	ld	r14, Z
     5ce:	ff 00       	.word	0x00ff	; ????
     5d0:	00 08       	sbc	r0, r0
     5d2:	08 6b       	ori	r16, 0xB8	; 184
     5d4:	6b 08       	sbc	r6, r11
     5d6:	36 12       	cpse	r3, r22
     5d8:	36 24       	eor	r3, r6
     5da:	36 06       	cpc	r3, r22
     5dc:	0f 09       	sbc	r16, r15
     5de:	0f 06       	cpc	r0, r31
     5e0:	00 00       	nop
     5e2:	18 18       	sub	r1, r8
     5e4:	00 00       	nop
     5e6:	00 10       	cpse	r0, r0
     5e8:	10 00       	.word	0x0010	; ????
     5ea:	30 40       	sbci	r19, 0x00	; 0
     5ec:	ff 01       	movw	r30, r30
     5ee:	01 00       	.word	0x0001	; ????
     5f0:	1f 01       	movw	r2, r30
     5f2:	01 1e       	adc	r0, r17
     5f4:	00 19       	sub	r16, r0
     5f6:	1d 17       	cp	r17, r29
     5f8:	12 00       	.word	0x0012	; ????
     5fa:	3c 3c       	cpi	r19, 0xCC	; 204
     5fc:	3c 3c       	cpi	r19, 0xCC	; 204
     5fe:	00 00       	nop
     600:	00 00       	nop
	...

00000603 <_ZL21tone_pin_to_timer_PGM>:
     603:	02                                                  .

00000604 <digital_pin_to_timer_PGM>:
     604:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     630:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

0000064a <digital_pin_to_bit_mask_PGM>:
     64a:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     65a:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     66a:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     67a:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     68a:	04 08 10 20 40 80                                   ... @.

00000690 <digital_pin_to_port_PGM>:
     690:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     6a0:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     6b0:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     6c0:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     6d0:	0b 0b 0b 0b 0b 0b                                   ......

000006d6 <port_to_output_PGM>:
     6d6:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     6e6:	02 01 00 00 05 01 08 01 0b 01                       ..........

000006f0 <port_to_mode_PGM>:
     6f0:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     700:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000070a <__ctors_start>:
     70a:	93 0f       	add	r25, r19
     70c:	47 10       	cpse	r4, r7
     70e:	fb 10       	cpse	r15, r11
     710:	af 11       	cpse	r26, r15
     712:	36 12       	cpse	r3, r22
     714:	8c 20       	and	r8, r12

00000716 <__ctors_end>:
     716:	c6 20       	and	r12, r6

00000718 <__dtors_end>:
     718:	11 24       	eor	r1, r1
     71a:	1f be       	out	0x3f, r1	; 63
     71c:	cf ef       	ldi	r28, 0xFF	; 255
     71e:	d1 e2       	ldi	r29, 0x21	; 33
     720:	de bf       	out	0x3e, r29	; 62
     722:	cd bf       	out	0x3d, r28	; 61
     724:	00 e0       	ldi	r16, 0x00	; 0
     726:	0c bf       	out	0x3c, r16	; 60

00000728 <__do_copy_data>:
     728:	14 e0       	ldi	r17, 0x04	; 4
     72a:	a0 e0       	ldi	r26, 0x00	; 0
     72c:	b2 e0       	ldi	r27, 0x02	; 2
     72e:	e6 eb       	ldi	r30, 0xB6	; 182
     730:	f9 e4       	ldi	r31, 0x49	; 73
     732:	00 e0       	ldi	r16, 0x00	; 0
     734:	0b bf       	out	0x3b, r16	; 59
     736:	02 c0       	rjmp	.+4      	; 0x73c <__do_copy_data+0x14>
     738:	07 90       	elpm	r0, Z+
     73a:	0d 92       	st	X+, r0
     73c:	a0 36       	cpi	r26, 0x60	; 96
     73e:	b1 07       	cpc	r27, r17
     740:	d9 f7       	brne	.-10     	; 0x738 <__do_copy_data+0x10>

00000742 <__do_clear_bss>:
     742:	27 e0       	ldi	r18, 0x07	; 7
     744:	a0 e6       	ldi	r26, 0x60	; 96
     746:	b4 e0       	ldi	r27, 0x04	; 4
     748:	01 c0       	rjmp	.+2      	; 0x74c <.do_clear_bss_start>

0000074a <.do_clear_bss_loop>:
     74a:	1d 92       	st	X+, r1

0000074c <.do_clear_bss_start>:
     74c:	ac 37       	cpi	r26, 0x7C	; 124
     74e:	b2 07       	cpc	r27, r18
     750:	e1 f7       	brne	.-8      	; 0x74a <.do_clear_bss_loop>

00000752 <__do_global_ctors>:
     752:	17 e0       	ldi	r17, 0x07	; 7
     754:	c6 e1       	ldi	r28, 0x16	; 22
     756:	d7 e0       	ldi	r29, 0x07	; 7
     758:	00 e0       	ldi	r16, 0x00	; 0
     75a:	06 c0       	rjmp	.+12     	; 0x768 <__do_global_ctors+0x16>
     75c:	22 97       	sbiw	r28, 0x02	; 2
     75e:	01 09       	sbc	r16, r1
     760:	fe 01       	movw	r30, r28
     762:	0b bf       	out	0x3b, r16	; 59
     764:	0e 94 6f 22 	call	0x44de	; 0x44de <__tablejump_elpm__>
     768:	ca 30       	cpi	r28, 0x0A	; 10
     76a:	d1 07       	cpc	r29, r17
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	08 07       	cpc	r16, r24
     770:	a9 f7       	brne	.-22     	; 0x75c <__do_global_ctors+0xa>
     772:	0e 94 38 22 	call	0x4470	; 0x4470 <main>
     776:	0c 94 ca 24 	jmp	0x4994	; 0x4994 <__do_global_dtors>

0000077a <__bad_interrupt>:
     77a:	42 cc       	rjmp	.-1916   	; 0x0 <__vectors>

0000077c <_ZN12Adafruit_GFX8drawLineEiiiij>:
      if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (1 << (i % 8))) {
        drawPixel(x+i, y+j, color);
      }
    }
  }
}
     77c:	2f 92       	push	r2
     77e:	3f 92       	push	r3
     780:	4f 92       	push	r4
     782:	5f 92       	push	r5
     784:	6f 92       	push	r6
     786:	7f 92       	push	r7
     788:	8f 92       	push	r8
     78a:	9f 92       	push	r9
     78c:	af 92       	push	r10
     78e:	bf 92       	push	r11
     790:	cf 92       	push	r12
     792:	df 92       	push	r13
     794:	ef 92       	push	r14
     796:	ff 92       	push	r15
     798:	0f 93       	push	r16
     79a:	1f 93       	push	r17
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
     7a0:	00 d0       	rcall	.+0      	; 0x7a2 <_ZN12Adafruit_GFX8drawLineEiiiij+0x26>
     7a2:	1f 92       	push	r1
     7a4:	cd b7       	in	r28, 0x3d	; 61
     7a6:	de b7       	in	r29, 0x3e	; 62
     7a8:	4c 01       	movw	r8, r24
     7aa:	7c 83       	std	Y+4, r23	; 0x04
     7ac:	6b 83       	std	Y+3, r22	; 0x03
     7ae:	5a 01       	movw	r10, r20
     7b0:	39 01       	movw	r6, r18
     7b2:	c8 01       	movw	r24, r16
     7b4:	84 1b       	sub	r24, r20
     7b6:	95 0b       	sbc	r25, r21
     7b8:	9c 01       	movw	r18, r24
     7ba:	22 f4       	brpl	.+8      	; 0x7c4 <_ZN12Adafruit_GFX8drawLineEiiiij+0x48>
     7bc:	22 27       	eor	r18, r18
     7be:	33 27       	eor	r19, r19
     7c0:	28 1b       	sub	r18, r24
     7c2:	39 0b       	sbc	r19, r25
     7c4:	a3 01       	movw	r20, r6
     7c6:	8b 81       	ldd	r24, Y+3	; 0x03
     7c8:	9c 81       	ldd	r25, Y+4	; 0x04
     7ca:	48 1b       	sub	r20, r24
     7cc:	59 0b       	sbc	r21, r25
     7ce:	ca 01       	movw	r24, r20
     7d0:	99 23       	and	r25, r25
     7d2:	24 f4       	brge	.+8      	; 0x7dc <_ZN12Adafruit_GFX8drawLineEiiiij+0x60>
     7d4:	88 27       	eor	r24, r24
     7d6:	99 27       	eor	r25, r25
     7d8:	84 1b       	sub	r24, r20
     7da:	95 0b       	sbc	r25, r21
     7dc:	51 e0       	ldi	r21, 0x01	; 1
     7de:	40 e0       	ldi	r20, 0x00	; 0
     7e0:	82 17       	cp	r24, r18
     7e2:	93 07       	cpc	r25, r19
     7e4:	0c f0       	brlt	.+2      	; 0x7e8 <_ZN12Adafruit_GFX8drawLineEiiiij+0x6c>
     7e6:	50 e0       	ldi	r21, 0x00	; 0
     7e8:	45 2e       	mov	r4, r21
     7ea:	54 2e       	mov	r5, r20
     7ec:	41 14       	cp	r4, r1
     7ee:	51 04       	cpc	r5, r1
     7f0:	59 f0       	breq	.+22     	; 0x808 <_ZN12Adafruit_GFX8drawLineEiiiij+0x8c>
     7f2:	96 2d       	mov	r25, r6
     7f4:	87 2d       	mov	r24, r7
     7f6:	38 01       	movw	r6, r16
     7f8:	09 2f       	mov	r16, r25
     7fa:	18 2f       	mov	r17, r24
     7fc:	9b 81       	ldd	r25, Y+3	; 0x03
     7fe:	8c 81       	ldd	r24, Y+4	; 0x04
     800:	bc 82       	std	Y+4, r11	; 0x04
     802:	ab 82       	std	Y+3, r10	; 0x03
     804:	a9 2e       	mov	r10, r25
     806:	b8 2e       	mov	r11, r24
     808:	ab 81       	ldd	r26, Y+3	; 0x03
     80a:	bc 81       	ldd	r27, Y+4	; 0x04
     80c:	6a 16       	cp	r6, r26
     80e:	7b 06       	cpc	r7, r27
     810:	5c f4       	brge	.+22     	; 0x828 <_ZN12Adafruit_GFX8drawLineEiiiij+0xac>
     812:	9a 2d       	mov	r25, r10
     814:	8b 2d       	mov	r24, r11
     816:	58 01       	movw	r10, r16
     818:	09 2f       	mov	r16, r25
     81a:	18 2f       	mov	r17, r24
     81c:	9b 81       	ldd	r25, Y+3	; 0x03
     81e:	8c 81       	ldd	r24, Y+4	; 0x04
     820:	7c 82       	std	Y+4, r7	; 0x04
     822:	6b 82       	std	Y+3, r6	; 0x03
     824:	69 2e       	mov	r6, r25
     826:	78 2e       	mov	r7, r24
     828:	f3 01       	movw	r30, r6
     82a:	2b 81       	ldd	r18, Y+3	; 0x03
     82c:	3c 81       	ldd	r19, Y+4	; 0x04
     82e:	e2 1b       	sub	r30, r18
     830:	f3 0b       	sbc	r31, r19
     832:	fa 83       	std	Y+2, r31	; 0x02
     834:	e9 83       	std	Y+1, r30	; 0x01
     836:	c8 01       	movw	r24, r16
     838:	8a 19       	sub	r24, r10
     83a:	9b 09       	sbc	r25, r11
     83c:	1c 01       	movw	r2, r24
     83e:	22 f4       	brpl	.+8      	; 0x848 <_ZN12Adafruit_GFX8drawLineEiiiij+0xcc>
     840:	22 24       	eor	r2, r2
     842:	33 24       	eor	r3, r3
     844:	28 1a       	sub	r2, r24
     846:	39 0a       	sbc	r3, r25
     848:	c9 80       	ldd	r12, Y+1	; 0x01
     84a:	da 80       	ldd	r13, Y+2	; 0x02
     84c:	dd 20       	and	r13, r13
     84e:	1c f4       	brge	.+6      	; 0x856 <_ZN12Adafruit_GFX8drawLineEiiiij+0xda>
     850:	3f ef       	ldi	r19, 0xFF	; 255
     852:	c3 1a       	sub	r12, r19
     854:	d3 0a       	sbc	r13, r19
     856:	d5 94       	asr	r13
     858:	c7 94       	ror	r12
     85a:	a0 16       	cp	r10, r16
     85c:	b1 06       	cpc	r11, r17
     85e:	1c f4       	brge	.+6      	; 0x866 <_ZN12Adafruit_GFX8drawLineEiiiij+0xea>
     860:	01 e0       	ldi	r16, 0x01	; 1
     862:	10 e0       	ldi	r17, 0x00	; 0
     864:	02 c0       	rjmp	.+4      	; 0x86a <_ZN12Adafruit_GFX8drawLineEiiiij+0xee>
     866:	0f ef       	ldi	r16, 0xFF	; 255
     868:	1f ef       	ldi	r17, 0xFF	; 255
     86a:	8b 81       	ldd	r24, Y+3	; 0x03
     86c:	9c 81       	ldd	r25, Y+4	; 0x04
     86e:	68 16       	cp	r6, r24
     870:	79 06       	cpc	r7, r25
     872:	74 f1       	brlt	.+92     	; 0x8d0 <_ZN12Adafruit_GFX8drawLineEiiiij+0x154>
     874:	41 14       	cp	r4, r1
     876:	51 04       	cpc	r5, r1
     878:	69 f0       	breq	.+26     	; 0x894 <_ZN12Adafruit_GFX8drawLineEiiiij+0x118>
     87a:	d4 01       	movw	r26, r8
     87c:	ed 91       	ld	r30, X+
     87e:	fc 91       	ld	r31, X
     880:	04 80       	ldd	r0, Z+4	; 0x04
     882:	f5 81       	ldd	r31, Z+5	; 0x05
     884:	e0 2d       	mov	r30, r0
     886:	97 01       	movw	r18, r14
     888:	4b 81       	ldd	r20, Y+3	; 0x03
     88a:	5c 81       	ldd	r21, Y+4	; 0x04
     88c:	b5 01       	movw	r22, r10
     88e:	c4 01       	movw	r24, r8
     890:	19 95       	eicall
     892:	0c c0       	rjmp	.+24     	; 0x8ac <_ZN12Adafruit_GFX8drawLineEiiiij+0x130>
     894:	d4 01       	movw	r26, r8
     896:	ed 91       	ld	r30, X+
     898:	fc 91       	ld	r31, X
     89a:	04 80       	ldd	r0, Z+4	; 0x04
     89c:	f5 81       	ldd	r31, Z+5	; 0x05
     89e:	e0 2d       	mov	r30, r0
     8a0:	97 01       	movw	r18, r14
     8a2:	a5 01       	movw	r20, r10
     8a4:	6b 81       	ldd	r22, Y+3	; 0x03
     8a6:	7c 81       	ldd	r23, Y+4	; 0x04
     8a8:	c4 01       	movw	r24, r8
     8aa:	19 95       	eicall
     8ac:	c2 18       	sub	r12, r2
     8ae:	d3 08       	sbc	r13, r3
     8b0:	32 f4       	brpl	.+12     	; 0x8be <_ZN12Adafruit_GFX8drawLineEiiiij+0x142>
     8b2:	a0 0e       	add	r10, r16
     8b4:	b1 1e       	adc	r11, r17
     8b6:	e9 81       	ldd	r30, Y+1	; 0x01
     8b8:	fa 81       	ldd	r31, Y+2	; 0x02
     8ba:	ce 0e       	add	r12, r30
     8bc:	df 1e       	adc	r13, r31
     8be:	2b 81       	ldd	r18, Y+3	; 0x03
     8c0:	3c 81       	ldd	r19, Y+4	; 0x04
     8c2:	2f 5f       	subi	r18, 0xFF	; 255
     8c4:	3f 4f       	sbci	r19, 0xFF	; 255
     8c6:	3c 83       	std	Y+4, r19	; 0x04
     8c8:	2b 83       	std	Y+3, r18	; 0x03
     8ca:	62 16       	cp	r6, r18
     8cc:	73 06       	cpc	r7, r19
     8ce:	94 f6       	brge	.-92     	; 0x874 <_ZN12Adafruit_GFX8drawLineEiiiij+0xf8>
     8d0:	0f 90       	pop	r0
     8d2:	0f 90       	pop	r0
     8d4:	0f 90       	pop	r0
     8d6:	0f 90       	pop	r0
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	1f 91       	pop	r17
     8de:	0f 91       	pop	r16
     8e0:	ff 90       	pop	r15
     8e2:	ef 90       	pop	r14
     8e4:	df 90       	pop	r13
     8e6:	cf 90       	pop	r12
     8e8:	bf 90       	pop	r11
     8ea:	af 90       	pop	r10
     8ec:	9f 90       	pop	r9
     8ee:	8f 90       	pop	r8
     8f0:	7f 90       	pop	r7
     8f2:	6f 90       	pop	r6
     8f4:	5f 90       	pop	r5
     8f6:	4f 90       	pop	r4
     8f8:	3f 90       	pop	r3
     8fa:	2f 90       	pop	r2
     8fc:	08 95       	ret

000008fe <_ZN12Adafruit_GFX8drawRectEiiiij>:
     8fe:	6f 92       	push	r6
     900:	7f 92       	push	r7
     902:	8f 92       	push	r8
     904:	9f 92       	push	r9
     906:	af 92       	push	r10
     908:	bf 92       	push	r11
     90a:	cf 92       	push	r12
     90c:	df 92       	push	r13
     90e:	ef 92       	push	r14
     910:	ff 92       	push	r15
     912:	0f 93       	push	r16
     914:	1f 93       	push	r17
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	ec 01       	movw	r28, r24
     91c:	5b 01       	movw	r10, r22
     91e:	6a 01       	movw	r12, r20
     920:	39 01       	movw	r6, r18
     922:	48 01       	movw	r8, r16
     924:	e8 81       	ld	r30, Y
     926:	f9 81       	ldd	r31, Y+1	; 0x01
     928:	02 84       	ldd	r0, Z+10	; 0x0a
     92a:	f3 85       	ldd	r31, Z+11	; 0x0b
     92c:	e0 2d       	mov	r30, r0
     92e:	87 01       	movw	r16, r14
     930:	19 95       	eicall
     932:	e8 81       	ld	r30, Y
     934:	f9 81       	ldd	r31, Y+1	; 0x01
     936:	a6 01       	movw	r20, r12
     938:	48 0d       	add	r20, r8
     93a:	59 1d       	adc	r21, r9
     93c:	41 50       	subi	r20, 0x01	; 1
     93e:	51 09       	sbc	r21, r1
     940:	02 84       	ldd	r0, Z+10	; 0x0a
     942:	f3 85       	ldd	r31, Z+11	; 0x0b
     944:	e0 2d       	mov	r30, r0
     946:	93 01       	movw	r18, r6
     948:	b5 01       	movw	r22, r10
     94a:	ce 01       	movw	r24, r28
     94c:	19 95       	eicall
     94e:	e8 81       	ld	r30, Y
     950:	f9 81       	ldd	r31, Y+1	; 0x01
     952:	00 84       	ldd	r0, Z+8	; 0x08
     954:	f1 85       	ldd	r31, Z+9	; 0x09
     956:	e0 2d       	mov	r30, r0
     958:	94 01       	movw	r18, r8
     95a:	a6 01       	movw	r20, r12
     95c:	b5 01       	movw	r22, r10
     95e:	ce 01       	movw	r24, r28
     960:	19 95       	eicall
     962:	e8 81       	ld	r30, Y
     964:	f9 81       	ldd	r31, Y+1	; 0x01
     966:	a6 0c       	add	r10, r6
     968:	b7 1c       	adc	r11, r7
     96a:	b5 01       	movw	r22, r10
     96c:	61 50       	subi	r22, 0x01	; 1
     96e:	71 09       	sbc	r23, r1
     970:	00 84       	ldd	r0, Z+8	; 0x08
     972:	f1 85       	ldd	r31, Z+9	; 0x09
     974:	e0 2d       	mov	r30, r0
     976:	94 01       	movw	r18, r8
     978:	a6 01       	movw	r20, r12
     97a:	ce 01       	movw	r24, r28
     97c:	19 95       	eicall
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	1f 91       	pop	r17
     984:	0f 91       	pop	r16
     986:	ff 90       	pop	r15
     988:	ef 90       	pop	r14
     98a:	df 90       	pop	r13
     98c:	cf 90       	pop	r12
     98e:	bf 90       	pop	r11
     990:	af 90       	pop	r10
     992:	9f 90       	pop	r9
     994:	8f 90       	pop	r8
     996:	7f 90       	pop	r7
     998:	6f 90       	pop	r6
     99a:	08 95       	ret

0000099c <_ZN12Adafruit_GFX13drawFastVLineEiiij>:
     99c:	ef 92       	push	r14
     99e:	ff 92       	push	r15
     9a0:	0f 93       	push	r16
     9a2:	1f 93       	push	r17
     9a4:	dc 01       	movw	r26, r24
     9a6:	ed 91       	ld	r30, X+
     9a8:	fc 91       	ld	r31, X
     9aa:	24 0f       	add	r18, r20
     9ac:	35 1f       	adc	r19, r21
     9ae:	21 50       	subi	r18, 0x01	; 1
     9b0:	31 09       	sbc	r19, r1
     9b2:	06 80       	ldd	r0, Z+6	; 0x06
     9b4:	f7 81       	ldd	r31, Z+7	; 0x07
     9b6:	e0 2d       	mov	r30, r0
     9b8:	78 01       	movw	r14, r16
     9ba:	89 01       	movw	r16, r18
     9bc:	9b 01       	movw	r18, r22
     9be:	19 95       	eicall
     9c0:	1f 91       	pop	r17
     9c2:	0f 91       	pop	r16
     9c4:	ff 90       	pop	r15
     9c6:	ef 90       	pop	r14
     9c8:	08 95       	ret

000009ca <_ZN12Adafruit_GFX13drawFastHLineEiiij>:
     9ca:	ef 92       	push	r14
     9cc:	ff 92       	push	r15
     9ce:	0f 93       	push	r16
     9d0:	1f 93       	push	r17
     9d2:	dc 01       	movw	r26, r24
     9d4:	ed 91       	ld	r30, X+
     9d6:	fc 91       	ld	r31, X
     9d8:	26 0f       	add	r18, r22
     9da:	37 1f       	adc	r19, r23
     9dc:	21 50       	subi	r18, 0x01	; 1
     9de:	31 09       	sbc	r19, r1
     9e0:	06 80       	ldd	r0, Z+6	; 0x06
     9e2:	f7 81       	ldd	r31, Z+7	; 0x07
     9e4:	e0 2d       	mov	r30, r0
     9e6:	78 01       	movw	r14, r16
     9e8:	8a 01       	movw	r16, r20
     9ea:	19 95       	eicall
     9ec:	1f 91       	pop	r17
     9ee:	0f 91       	pop	r16
     9f0:	ff 90       	pop	r15
     9f2:	ef 90       	pop	r14
     9f4:	08 95       	ret

000009f6 <_ZN12Adafruit_GFX8fillRectEiiiij>:
     9f6:	6f 92       	push	r6
     9f8:	7f 92       	push	r7
     9fa:	8f 92       	push	r8
     9fc:	9f 92       	push	r9
     9fe:	af 92       	push	r10
     a00:	bf 92       	push	r11
     a02:	cf 92       	push	r12
     a04:	df 92       	push	r13
     a06:	ef 92       	push	r14
     a08:	ff 92       	push	r15
     a0a:	0f 93       	push	r16
     a0c:	1f 93       	push	r17
     a0e:	cf 93       	push	r28
     a10:	df 93       	push	r29
     a12:	6c 01       	movw	r12, r24
     a14:	eb 01       	movw	r28, r22
     a16:	4a 01       	movw	r8, r20
     a18:	58 01       	movw	r10, r16
     a1a:	3b 01       	movw	r6, r22
     a1c:	62 0e       	add	r6, r18
     a1e:	73 1e       	adc	r7, r19
     a20:	66 15       	cp	r22, r6
     a22:	77 05       	cpc	r23, r7
     a24:	84 f4       	brge	.+32     	; 0xa46 <_ZN12Adafruit_GFX8fillRectEiiiij+0x50>
     a26:	d6 01       	movw	r26, r12
     a28:	ed 91       	ld	r30, X+
     a2a:	fc 91       	ld	r31, X
     a2c:	00 84       	ldd	r0, Z+8	; 0x08
     a2e:	f1 85       	ldd	r31, Z+9	; 0x09
     a30:	e0 2d       	mov	r30, r0
     a32:	87 01       	movw	r16, r14
     a34:	95 01       	movw	r18, r10
     a36:	a4 01       	movw	r20, r8
     a38:	be 01       	movw	r22, r28
     a3a:	c6 01       	movw	r24, r12
     a3c:	19 95       	eicall
     a3e:	21 96       	adiw	r28, 0x01	; 1
     a40:	c6 15       	cp	r28, r6
     a42:	d7 05       	cpc	r29, r7
     a44:	84 f3       	brlt	.-32     	; 0xa26 <_ZN12Adafruit_GFX8fillRectEiiiij+0x30>
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	1f 91       	pop	r17
     a4c:	0f 91       	pop	r16
     a4e:	ff 90       	pop	r15
     a50:	ef 90       	pop	r14
     a52:	df 90       	pop	r13
     a54:	cf 90       	pop	r12
     a56:	bf 90       	pop	r11
     a58:	af 90       	pop	r10
     a5a:	9f 90       	pop	r9
     a5c:	8f 90       	pop	r8
     a5e:	7f 90       	pop	r7
     a60:	6f 90       	pop	r6
     a62:	08 95       	ret

00000a64 <_ZN12Adafruit_GFX10fillScreenEj>:
     a64:	ef 92       	push	r14
     a66:	ff 92       	push	r15
     a68:	0f 93       	push	r16
     a6a:	1f 93       	push	r17
     a6c:	dc 01       	movw	r26, r24
     a6e:	ed 91       	ld	r30, X+
     a70:	fc 91       	ld	r31, X
     a72:	11 97       	sbiw	r26, 0x01	; 1
     a74:	1a 96       	adiw	r26, 0x0a	; 10
     a76:	0d 91       	ld	r16, X+
     a78:	1c 91       	ld	r17, X
     a7a:	1b 97       	sbiw	r26, 0x0b	; 11
     a7c:	18 96       	adiw	r26, 0x08	; 8
     a7e:	2d 91       	ld	r18, X+
     a80:	3c 91       	ld	r19, X
     a82:	19 97       	sbiw	r26, 0x09	; 9
     a84:	06 84       	ldd	r0, Z+14	; 0x0e
     a86:	f7 85       	ldd	r31, Z+15	; 0x0f
     a88:	e0 2d       	mov	r30, r0
     a8a:	7b 01       	movw	r14, r22
     a8c:	40 e0       	ldi	r20, 0x00	; 0
     a8e:	50 e0       	ldi	r21, 0x00	; 0
     a90:	60 e0       	ldi	r22, 0x00	; 0
     a92:	70 e0       	ldi	r23, 0x00	; 0
     a94:	19 95       	eicall
     a96:	1f 91       	pop	r17
     a98:	0f 91       	pop	r16
     a9a:	ff 90       	pop	r15
     a9c:	ef 90       	pop	r14
     a9e:	08 95       	ret

00000aa0 <_ZN12Adafruit_GFX13invertDisplayEb>:
     aa0:	08 95       	ret

00000aa2 <_ZN12Adafruit_GFXC1Eii>:
     aa2:	fc 01       	movw	r30, r24
     aa4:	13 82       	std	Z+3, r1	; 0x03
     aa6:	12 82       	std	Z+2, r1	; 0x02
     aa8:	8b e0       	ldi	r24, 0x0B	; 11
     aaa:	92 e0       	ldi	r25, 0x02	; 2
     aac:	91 83       	std	Z+1, r25	; 0x01
     aae:	80 83       	st	Z, r24
     ab0:	75 83       	std	Z+5, r23	; 0x05
     ab2:	64 83       	std	Z+4, r22	; 0x04
     ab4:	57 83       	std	Z+7, r21	; 0x07
     ab6:	46 83       	std	Z+6, r20	; 0x06
     ab8:	71 87       	std	Z+9, r23	; 0x09
     aba:	60 87       	std	Z+8, r22	; 0x08
     abc:	53 87       	std	Z+11, r21	; 0x0b
     abe:	42 87       	std	Z+10, r20	; 0x0a
     ac0:	15 8a       	std	Z+21, r1	; 0x15
     ac2:	15 86       	std	Z+13, r1	; 0x0d
     ac4:	14 86       	std	Z+12, r1	; 0x0c
     ac6:	17 86       	std	Z+15, r1	; 0x0f
     ac8:	16 86       	std	Z+14, r1	; 0x0e
     aca:	21 e0       	ldi	r18, 0x01	; 1
     acc:	24 8b       	std	Z+20, r18	; 0x14
     ace:	8f ef       	ldi	r24, 0xFF	; 255
     ad0:	9f ef       	ldi	r25, 0xFF	; 255
     ad2:	93 8b       	std	Z+19, r25	; 0x13
     ad4:	82 8b       	std	Z+18, r24	; 0x12
     ad6:	91 8b       	std	Z+17, r25	; 0x11
     ad8:	80 8b       	std	Z+16, r24	; 0x10
     ada:	26 8b       	std	Z+22, r18	; 0x16
     adc:	08 95       	ret

00000ade <_ZN12Adafruit_GFX16fillCircleHelperEiiihij>:
     ade:	2f 92       	push	r2
     ae0:	3f 92       	push	r3
     ae2:	4f 92       	push	r4
     ae4:	5f 92       	push	r5
     ae6:	6f 92       	push	r6
     ae8:	7f 92       	push	r7
     aea:	8f 92       	push	r8
     aec:	9f 92       	push	r9
     aee:	af 92       	push	r10
     af0:	bf 92       	push	r11
     af2:	cf 92       	push	r12
     af4:	df 92       	push	r13
     af6:	ef 92       	push	r14
     af8:	ff 92       	push	r15
     afa:	0f 93       	push	r16
     afc:	1f 93       	push	r17
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
     b02:	cd b7       	in	r28, 0x3d	; 61
     b04:	de b7       	in	r29, 0x3e	; 62
     b06:	2e 97       	sbiw	r28, 0x0e	; 14
     b08:	0f b6       	in	r0, 0x3f	; 63
     b0a:	f8 94       	cli
     b0c:	de bf       	out	0x3e, r29	; 62
     b0e:	0f be       	out	0x3f, r0	; 63
     b10:	cd bf       	out	0x3d, r28	; 61
     b12:	9a 83       	std	Y+2, r25	; 0x02
     b14:	89 83       	std	Y+1, r24	; 0x01
     b16:	5a 87       	std	Y+10, r21	; 0x0a
     b18:	49 87       	std	Y+9, r20	; 0x09
     b1a:	3e 87       	std	Y+14, r19	; 0x0e
     b1c:	2d 87       	std	Y+13, r18	; 0x0d
     b1e:	fc 86       	std	Y+12, r15	; 0x0c
     b20:	eb 86       	std	Y+11, r14	; 0x0b
     b22:	dc 82       	std	Y+4, r13	; 0x04
     b24:	cb 82       	std	Y+3, r12	; 0x03
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	7c 01       	movw	r14, r24
     b2c:	e2 1a       	sub	r14, r18
     b2e:	f3 0a       	sbc	r15, r19
     b30:	c9 01       	movw	r24, r18
     b32:	91 95       	neg	r25
     b34:	81 95       	neg	r24
     b36:	91 09       	sbc	r25, r1
     b38:	1c 01       	movw	r2, r24
     b3a:	22 0c       	add	r2, r2
     b3c:	33 1c       	adc	r3, r3
     b3e:	12 16       	cp	r1, r18
     b40:	13 06       	cpc	r1, r19
     b42:	0c f0       	brlt	.+2      	; 0xb46 <_ZN12Adafruit_GFX16fillCircleHelperEiiihij+0x68>
     b44:	9d c0       	rjmp	.+314    	; 0xc80 <_ZN12Adafruit_GFX16fillCircleHelperEiiihij+0x1a2>
     b46:	3a 01       	movw	r6, r20
     b48:	21 e0       	ldi	r18, 0x01	; 1
     b4a:	62 1a       	sub	r6, r18
     b4c:	71 08       	sbc	r7, r1
     b4e:	4b 84       	ldd	r4, Y+11	; 0x0b
     b50:	5c 84       	ldd	r5, Y+12	; 0x0c
     b52:	33 e0       	ldi	r19, 0x03	; 3
     b54:	43 0e       	add	r4, r19
     b56:	51 1c       	adc	r5, r1
     b58:	c1 2c       	mov	r12, r1
     b5a:	d1 2c       	mov	r13, r1
     b5c:	88 24       	eor	r8, r8
     b5e:	83 94       	inc	r8
     b60:	91 2c       	mov	r9, r1
     b62:	80 2f       	mov	r24, r16
     b64:	81 70       	andi	r24, 0x01	; 1
     b66:	8f 83       	std	Y+7, r24	; 0x07
     b68:	02 70       	andi	r16, 0x02	; 2
     b6a:	08 87       	std	Y+8, r16	; 0x08
     b6c:	7e 83       	std	Y+6, r23	; 0x06
     b6e:	6d 83       	std	Y+5, r22	; 0x05
     b70:	a9 80       	ldd	r10, Y+1	; 0x01
     b72:	ba 80       	ldd	r11, Y+2	; 0x02
     b74:	ff 20       	and	r15, r15
     b76:	54 f0       	brlt	.+20     	; 0xb8c <_ZN12Adafruit_GFX16fillCircleHelperEiiihij+0xae>
     b78:	ed 85       	ldd	r30, Y+13	; 0x0d
     b7a:	fe 85       	ldd	r31, Y+14	; 0x0e
     b7c:	31 97       	sbiw	r30, 0x01	; 1
     b7e:	fe 87       	std	Y+14, r31	; 0x0e
     b80:	ed 87       	std	Y+13, r30	; 0x0d
     b82:	f2 e0       	ldi	r31, 0x02	; 2
     b84:	2f 0e       	add	r2, r31
     b86:	31 1c       	adc	r3, r1
     b88:	e2 0c       	add	r14, r2
     b8a:	f3 1c       	adc	r15, r3
     b8c:	2f ef       	ldi	r18, 0xFF	; 255
     b8e:	c2 1a       	sub	r12, r18
     b90:	d2 0a       	sbc	r13, r18
     b92:	32 e0       	ldi	r19, 0x02	; 2
     b94:	83 0e       	add	r8, r19
     b96:	91 1c       	adc	r9, r1
     b98:	e8 0c       	add	r14, r8
     b9a:	f9 1c       	adc	r15, r9
     b9c:	8f 81       	ldd	r24, Y+7	; 0x07
     b9e:	88 23       	and	r24, r24
     ba0:	81 f1       	breq	.+96     	; 0xc02 <_ZN12Adafruit_GFX16fillCircleHelperEiiihij+0x124>
     ba2:	d5 01       	movw	r26, r10
     ba4:	ed 91       	ld	r30, X+
     ba6:	fc 91       	ld	r31, X
     ba8:	2d 85       	ldd	r18, Y+13	; 0x0d
     baa:	3e 85       	ldd	r19, Y+14	; 0x0e
     bac:	22 0f       	add	r18, r18
     bae:	33 1f       	adc	r19, r19
     bb0:	2f 5f       	subi	r18, 0xFF	; 255
     bb2:	3f 4f       	sbci	r19, 0xFF	; 255
     bb4:	8b 85       	ldd	r24, Y+11	; 0x0b
     bb6:	9c 85       	ldd	r25, Y+12	; 0x0c
     bb8:	28 0f       	add	r18, r24
     bba:	39 1f       	adc	r19, r25
     bbc:	00 84       	ldd	r0, Z+8	; 0x08
     bbe:	f1 85       	ldd	r31, Z+9	; 0x09
     bc0:	e0 2d       	mov	r30, r0
     bc2:	0b 81       	ldd	r16, Y+3	; 0x03
     bc4:	1c 81       	ldd	r17, Y+4	; 0x04
     bc6:	49 85       	ldd	r20, Y+9	; 0x09
     bc8:	5a 85       	ldd	r21, Y+10	; 0x0a
     bca:	ad 85       	ldd	r26, Y+13	; 0x0d
     bcc:	be 85       	ldd	r27, Y+14	; 0x0e
     bce:	4a 1b       	sub	r20, r26
     bd0:	5b 0b       	sbc	r21, r27
     bd2:	6d 81       	ldd	r22, Y+5	; 0x05
     bd4:	7e 81       	ldd	r23, Y+6	; 0x06
     bd6:	6c 0d       	add	r22, r12
     bd8:	7d 1d       	adc	r23, r13
     bda:	c5 01       	movw	r24, r10
     bdc:	19 95       	eicall
     bde:	d5 01       	movw	r26, r10
     be0:	ed 91       	ld	r30, X+
     be2:	fc 91       	ld	r31, X
     be4:	00 84       	ldd	r0, Z+8	; 0x08
     be6:	f1 85       	ldd	r31, Z+9	; 0x09
     be8:	e0 2d       	mov	r30, r0
     bea:	0b 81       	ldd	r16, Y+3	; 0x03
     bec:	1c 81       	ldd	r17, Y+4	; 0x04
     bee:	92 01       	movw	r18, r4
     bf0:	a3 01       	movw	r20, r6
     bf2:	6d 81       	ldd	r22, Y+5	; 0x05
     bf4:	7e 81       	ldd	r23, Y+6	; 0x06
     bf6:	8d 85       	ldd	r24, Y+13	; 0x0d
     bf8:	9e 85       	ldd	r25, Y+14	; 0x0e
     bfa:	68 0f       	add	r22, r24
     bfc:	79 1f       	adc	r23, r25
     bfe:	c5 01       	movw	r24, r10
     c00:	19 95       	eicall
     c02:	98 85       	ldd	r25, Y+8	; 0x08
     c04:	99 23       	and	r25, r25
     c06:	81 f1       	breq	.+96     	; 0xc68 <_ZN12Adafruit_GFX16fillCircleHelperEiiihij+0x18a>
     c08:	d5 01       	movw	r26, r10
     c0a:	ed 91       	ld	r30, X+
     c0c:	fc 91       	ld	r31, X
     c0e:	2d 85       	ldd	r18, Y+13	; 0x0d
     c10:	3e 85       	ldd	r19, Y+14	; 0x0e
     c12:	22 0f       	add	r18, r18
     c14:	33 1f       	adc	r19, r19
     c16:	2f 5f       	subi	r18, 0xFF	; 255
     c18:	3f 4f       	sbci	r19, 0xFF	; 255
     c1a:	8b 85       	ldd	r24, Y+11	; 0x0b
     c1c:	9c 85       	ldd	r25, Y+12	; 0x0c
     c1e:	28 0f       	add	r18, r24
     c20:	39 1f       	adc	r19, r25
     c22:	00 84       	ldd	r0, Z+8	; 0x08
     c24:	f1 85       	ldd	r31, Z+9	; 0x09
     c26:	e0 2d       	mov	r30, r0
     c28:	0b 81       	ldd	r16, Y+3	; 0x03
     c2a:	1c 81       	ldd	r17, Y+4	; 0x04
     c2c:	49 85       	ldd	r20, Y+9	; 0x09
     c2e:	5a 85       	ldd	r21, Y+10	; 0x0a
     c30:	ad 85       	ldd	r26, Y+13	; 0x0d
     c32:	be 85       	ldd	r27, Y+14	; 0x0e
     c34:	4a 1b       	sub	r20, r26
     c36:	5b 0b       	sbc	r21, r27
     c38:	6d 81       	ldd	r22, Y+5	; 0x05
     c3a:	7e 81       	ldd	r23, Y+6	; 0x06
     c3c:	6c 19       	sub	r22, r12
     c3e:	7d 09       	sbc	r23, r13
     c40:	c5 01       	movw	r24, r10
     c42:	19 95       	eicall
     c44:	d5 01       	movw	r26, r10
     c46:	ed 91       	ld	r30, X+
     c48:	fc 91       	ld	r31, X
     c4a:	00 84       	ldd	r0, Z+8	; 0x08
     c4c:	f1 85       	ldd	r31, Z+9	; 0x09
     c4e:	e0 2d       	mov	r30, r0
     c50:	0b 81       	ldd	r16, Y+3	; 0x03
     c52:	1c 81       	ldd	r17, Y+4	; 0x04
     c54:	92 01       	movw	r18, r4
     c56:	a3 01       	movw	r20, r6
     c58:	6d 81       	ldd	r22, Y+5	; 0x05
     c5a:	7e 81       	ldd	r23, Y+6	; 0x06
     c5c:	8d 85       	ldd	r24, Y+13	; 0x0d
     c5e:	9e 85       	ldd	r25, Y+14	; 0x0e
     c60:	68 1b       	sub	r22, r24
     c62:	79 0b       	sbc	r23, r25
     c64:	c5 01       	movw	r24, r10
     c66:	19 95       	eicall
     c68:	91 e0       	ldi	r25, 0x01	; 1
     c6a:	69 1a       	sub	r6, r25
     c6c:	71 08       	sbc	r7, r1
     c6e:	a2 e0       	ldi	r26, 0x02	; 2
     c70:	4a 0e       	add	r4, r26
     c72:	51 1c       	adc	r5, r1
     c74:	ed 85       	ldd	r30, Y+13	; 0x0d
     c76:	fe 85       	ldd	r31, Y+14	; 0x0e
     c78:	ce 16       	cp	r12, r30
     c7a:	df 06       	cpc	r13, r31
     c7c:	0c f4       	brge	.+2      	; 0xc80 <_ZN12Adafruit_GFX16fillCircleHelperEiiihij+0x1a2>
     c7e:	7a cf       	rjmp	.-268    	; 0xb74 <_ZN12Adafruit_GFX16fillCircleHelperEiiihij+0x96>
     c80:	2e 96       	adiw	r28, 0x0e	; 14
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	f8 94       	cli
     c86:	de bf       	out	0x3e, r29	; 62
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	cd bf       	out	0x3d, r28	; 61
     c8c:	df 91       	pop	r29
     c8e:	cf 91       	pop	r28
     c90:	1f 91       	pop	r17
     c92:	0f 91       	pop	r16
     c94:	ff 90       	pop	r15
     c96:	ef 90       	pop	r14
     c98:	df 90       	pop	r13
     c9a:	cf 90       	pop	r12
     c9c:	bf 90       	pop	r11
     c9e:	af 90       	pop	r10
     ca0:	9f 90       	pop	r9
     ca2:	8f 90       	pop	r8
     ca4:	7f 90       	pop	r7
     ca6:	6f 90       	pop	r6
     ca8:	5f 90       	pop	r5
     caa:	4f 90       	pop	r4
     cac:	3f 90       	pop	r3
     cae:	2f 90       	pop	r2
     cb0:	08 95       	ret

00000cb2 <_ZN12Adafruit_GFX10fillCircleEiiij>:
     cb2:	6f 92       	push	r6
     cb4:	7f 92       	push	r7
     cb6:	8f 92       	push	r8
     cb8:	9f 92       	push	r9
     cba:	af 92       	push	r10
     cbc:	bf 92       	push	r11
     cbe:	cf 92       	push	r12
     cc0:	df 92       	push	r13
     cc2:	ef 92       	push	r14
     cc4:	ff 92       	push	r15
     cc6:	0f 93       	push	r16
     cc8:	1f 93       	push	r17
     cca:	cf 93       	push	r28
     ccc:	df 93       	push	r29
     cce:	ec 01       	movw	r28, r24
     cd0:	4b 01       	movw	r8, r22
     cd2:	3a 01       	movw	r6, r20
     cd4:	59 01       	movw	r10, r18
     cd6:	68 01       	movw	r12, r16
     cd8:	e8 81       	ld	r30, Y
     cda:	f9 81       	ldd	r31, Y+1	; 0x01
     cdc:	22 0f       	add	r18, r18
     cde:	33 1f       	adc	r19, r19
     ce0:	2f 5f       	subi	r18, 0xFF	; 255
     ce2:	3f 4f       	sbci	r19, 0xFF	; 255
     ce4:	4a 19       	sub	r20, r10
     ce6:	5b 09       	sbc	r21, r11
     ce8:	00 84       	ldd	r0, Z+8	; 0x08
     cea:	f1 85       	ldd	r31, Z+9	; 0x09
     cec:	e0 2d       	mov	r30, r0
     cee:	19 95       	eicall
     cf0:	e1 2c       	mov	r14, r1
     cf2:	f1 2c       	mov	r15, r1
     cf4:	03 e0       	ldi	r16, 0x03	; 3
     cf6:	95 01       	movw	r18, r10
     cf8:	a3 01       	movw	r20, r6
     cfa:	b4 01       	movw	r22, r8
     cfc:	ce 01       	movw	r24, r28
     cfe:	ef de       	rcall	.-546    	; 0xade <_ZN12Adafruit_GFX16fillCircleHelperEiiihij>
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	1f 91       	pop	r17
     d06:	0f 91       	pop	r16
     d08:	ff 90       	pop	r15
     d0a:	ef 90       	pop	r14
     d0c:	df 90       	pop	r13
     d0e:	cf 90       	pop	r12
     d10:	bf 90       	pop	r11
     d12:	af 90       	pop	r10
     d14:	9f 90       	pop	r9
     d16:	8f 90       	pop	r8
     d18:	7f 90       	pop	r7
     d1a:	6f 90       	pop	r6
     d1c:	08 95       	ret

00000d1e <_ZN12Adafruit_GFX8drawCharEiihjjh>:
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
     d1e:	2f 92       	push	r2
     d20:	3f 92       	push	r3
     d22:	4f 92       	push	r4
     d24:	5f 92       	push	r5
     d26:	6f 92       	push	r6
     d28:	7f 92       	push	r7
     d2a:	8f 92       	push	r8
     d2c:	9f 92       	push	r9
     d2e:	af 92       	push	r10
     d30:	bf 92       	push	r11
     d32:	cf 92       	push	r12
     d34:	df 92       	push	r13
     d36:	ef 92       	push	r14
     d38:	ff 92       	push	r15
     d3a:	0f 93       	push	r16
     d3c:	1f 93       	push	r17
     d3e:	cf 93       	push	r28
     d40:	df 93       	push	r29
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
     d46:	60 97       	sbiw	r28, 0x10	; 16
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	f8 94       	cli
     d4c:	de bf       	out	0x3e, r29	; 62
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	cd bf       	out	0x3d, r28	; 61
     d52:	4c 01       	movw	r8, r24
     d54:	1a 83       	std	Y+2, r17	; 0x02
     d56:	09 83       	std	Y+1, r16	; 0x01
     d58:	fd 82       	std	Y+5, r15	; 0x05
     d5a:	ec 82       	std	Y+4, r14	; 0x04
     d5c:	cb 82       	std	Y+3, r12	; 0x03

  if((x >= _width)            || // Clip right
     d5e:	dc 01       	movw	r26, r24
     d60:	18 96       	adiw	r26, 0x08	; 8
     d62:	8d 91       	ld	r24, X+
     d64:	9c 91       	ld	r25, X
     d66:	19 97       	sbiw	r26, 0x09	; 9
     d68:	68 17       	cp	r22, r24
     d6a:	79 07       	cpc	r23, r25
     d6c:	0c f0       	brlt	.+2      	; 0xd70 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x52>
     d6e:	c6 c0       	rjmp	.+396    	; 0xefc <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1de>
     d70:	1a 96       	adiw	r26, 0x0a	; 10
     d72:	8d 91       	ld	r24, X+
     d74:	9c 91       	ld	r25, X
     d76:	1b 97       	sbiw	r26, 0x0b	; 11
     d78:	48 17       	cp	r20, r24
     d7a:	59 07       	cpc	r21, r25
     d7c:	0c f0       	brlt	.+2      	; 0xd80 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x62>
     d7e:	be c0       	rjmp	.+380    	; 0xefc <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1de>
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     d80:	6c 2c       	mov	r6, r12
     d82:	71 2c       	mov	r7, r1
     d84:	c3 01       	movw	r24, r6
     d86:	88 0f       	add	r24, r24
     d88:	99 1f       	adc	r25, r25
     d8a:	86 0d       	add	r24, r6
     d8c:	97 1d       	adc	r25, r7
     d8e:	88 0f       	add	r24, r24
     d90:	99 1f       	adc	r25, r25
     d92:	86 0f       	add	r24, r22
     d94:	97 1f       	adc	r25, r23
     d96:	01 97       	sbiw	r24, 0x01	; 1
// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {

  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
     d98:	99 23       	and	r25, r25
     d9a:	0c f4       	brge	.+2      	; 0xd9e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x80>
     d9c:	af c0       	rjmp	.+350    	; 0xefc <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1de>
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
     d9e:	c3 01       	movw	r24, r6
     da0:	88 0f       	add	r24, r24
     da2:	99 1f       	adc	r25, r25
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	88 0f       	add	r24, r24
     daa:	99 1f       	adc	r25, r25
     dac:	84 0f       	add	r24, r20
     dae:	95 1f       	adc	r25, r21
     db0:	01 97       	sbiw	r24, 0x01	; 1
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {

  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     db2:	99 23       	and	r25, r25
     db4:	0c f4       	brge	.+2      	; 0xdb8 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x9a>
     db6:	a2 c0       	rjmp	.+324    	; 0xefc <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1de>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	c9 01       	movw	r24, r18
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	88 0f       	add	r24, r24
     dc2:	99 1f       	adc	r25, r25
     dc4:	28 0f       	add	r18, r24
     dc6:	39 1f       	adc	r19, r25
     dc8:	13 01       	movw	r2, r6
     dca:	7f 83       	std	Y+7, r23	; 0x07
     dcc:	6e 83       	std	Y+6, r22	; 0x06
     dce:	79 87       	std	Y+9, r23	; 0x09
     dd0:	68 87       	std	Y+8, r22	; 0x08
     dd2:	1a 86       	std	Y+10, r1	; 0x0a
     dd4:	28 5f       	subi	r18, 0xF8	; 248
     dd6:	3e 4f       	sbci	r19, 0xFE	; 254
     dd8:	f9 01       	movw	r30, r18
     dda:	e6 1b       	sub	r30, r22
     ddc:	f7 0b       	sbc	r31, r23
     dde:	fe 87       	std	Y+14, r31	; 0x0e
     de0:	ed 87       	std	Y+13, r30	; 0x0d
     de2:	4b 87       	std	Y+11, r20	; 0x0b
     de4:	5c 87       	std	Y+12, r21	; 0x0c
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
     de6:	fa 85       	ldd	r31, Y+10	; 0x0a
     de8:	f5 30       	cpi	r31, 0x05	; 5
     dea:	09 f4       	brne	.+2      	; 0xdee <_ZN12Adafruit_GFX8drawCharEiihjjh+0xd0>
     dec:	77 c0       	rjmp	.+238    	; 0xedc <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1be>
     dee:	ed 85       	ldd	r30, Y+13	; 0x0d
     df0:	fe 85       	ldd	r31, Y+14	; 0x0e
     df2:	2e 81       	ldd	r18, Y+6	; 0x06
     df4:	3f 81       	ldd	r19, Y+7	; 0x07
     df6:	e2 0f       	add	r30, r18
     df8:	f3 1f       	adc	r31, r19
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
     dfa:	04 91       	lpm	r16, Z
     dfc:	70 c0       	rjmp	.+224    	; 0xede <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1c0>
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
     dfe:	90 fe       	sbrs	r9, 0
     e00:	25 c0       	rjmp	.+74     	; 0xe4c <_ZN12Adafruit_GFX8drawCharEiihjjh+0x12e>
        if (size == 1) // default size
     e02:	3b 81       	ldd	r19, Y+3	; 0x03
     e04:	31 30       	cpi	r19, 0x01	; 1
     e06:	81 f4       	brne	.+32     	; 0xe28 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x10a>
          drawPixel(x+i, y+j, color);
     e08:	af 85       	ldd	r26, Y+15	; 0x0f
     e0a:	b8 89       	ldd	r27, Y+16	; 0x10
     e0c:	ed 91       	ld	r30, X+
     e0e:	fc 91       	ld	r31, X
     e10:	11 97       	sbiw	r26, 0x01	; 1
     e12:	04 80       	ldd	r0, Z+4	; 0x04
     e14:	f5 81       	ldd	r31, Z+5	; 0x05
     e16:	e0 2d       	mov	r30, r0
     e18:	29 81       	ldd	r18, Y+1	; 0x01
     e1a:	3a 81       	ldd	r19, Y+2	; 0x02
     e1c:	a5 01       	movw	r20, r10
     e1e:	6e 81       	ldd	r22, Y+6	; 0x06
     e20:	7f 81       	ldd	r23, Y+7	; 0x07
     e22:	cd 01       	movw	r24, r26
     e24:	19 95       	eicall
     e26:	3d c0       	rjmp	.+122    	; 0xea2 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x184>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
     e28:	af 85       	ldd	r26, Y+15	; 0x0f
     e2a:	b8 89       	ldd	r27, Y+16	; 0x10
     e2c:	ed 91       	ld	r30, X+
     e2e:	fc 91       	ld	r31, X
     e30:	11 97       	sbiw	r26, 0x01	; 1
     e32:	06 84       	ldd	r0, Z+14	; 0x0e
     e34:	f7 85       	ldd	r31, Z+15	; 0x0f
     e36:	e0 2d       	mov	r30, r0
     e38:	e9 80       	ldd	r14, Y+1	; 0x01
     e3a:	fa 80       	ldd	r15, Y+2	; 0x02
     e3c:	83 01       	movw	r16, r6
     e3e:	93 01       	movw	r18, r6
     e40:	a6 01       	movw	r20, r12
     e42:	68 2d       	mov	r22, r8
     e44:	74 2d       	mov	r23, r4
     e46:	cd 01       	movw	r24, r26
     e48:	19 95       	eicall
     e4a:	2b c0       	rjmp	.+86     	; 0xea2 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x184>
        } 
      } else if (bg != color) {
     e4c:	ec 81       	ldd	r30, Y+4	; 0x04
     e4e:	fd 81       	ldd	r31, Y+5	; 0x05
     e50:	29 81       	ldd	r18, Y+1	; 0x01
     e52:	3a 81       	ldd	r19, Y+2	; 0x02
     e54:	e2 17       	cp	r30, r18
     e56:	f3 07       	cpc	r31, r19
     e58:	21 f1       	breq	.+72     	; 0xea2 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x184>
        if (size == 1) // default size
     e5a:	3b 81       	ldd	r19, Y+3	; 0x03
     e5c:	31 30       	cpi	r19, 0x01	; 1
     e5e:	81 f4       	brne	.+32     	; 0xe80 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x162>
          drawPixel(x+i, y+j, bg);
     e60:	af 85       	ldd	r26, Y+15	; 0x0f
     e62:	b8 89       	ldd	r27, Y+16	; 0x10
     e64:	ed 91       	ld	r30, X+
     e66:	fc 91       	ld	r31, X
     e68:	11 97       	sbiw	r26, 0x01	; 1
     e6a:	04 80       	ldd	r0, Z+4	; 0x04
     e6c:	f5 81       	ldd	r31, Z+5	; 0x05
     e6e:	e0 2d       	mov	r30, r0
     e70:	2c 81       	ldd	r18, Y+4	; 0x04
     e72:	3d 81       	ldd	r19, Y+5	; 0x05
     e74:	a5 01       	movw	r20, r10
     e76:	6e 81       	ldd	r22, Y+6	; 0x06
     e78:	7f 81       	ldd	r23, Y+7	; 0x07
     e7a:	cd 01       	movw	r24, r26
     e7c:	19 95       	eicall
     e7e:	11 c0       	rjmp	.+34     	; 0xea2 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x184>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
     e80:	af 85       	ldd	r26, Y+15	; 0x0f
     e82:	b8 89       	ldd	r27, Y+16	; 0x10
     e84:	ed 91       	ld	r30, X+
     e86:	fc 91       	ld	r31, X
     e88:	11 97       	sbiw	r26, 0x01	; 1
     e8a:	06 84       	ldd	r0, Z+14	; 0x0e
     e8c:	f7 85       	ldd	r31, Z+15	; 0x0f
     e8e:	e0 2d       	mov	r30, r0
     e90:	ec 80       	ldd	r14, Y+4	; 0x04
     e92:	fd 80       	ldd	r15, Y+5	; 0x05
     e94:	83 01       	movw	r16, r6
     e96:	93 01       	movw	r18, r6
     e98:	a6 01       	movw	r20, r12
     e9a:	68 2d       	mov	r22, r8
     e9c:	74 2d       	mov	r23, r4
     e9e:	cd 01       	movw	r24, r26
     ea0:	19 95       	eicall
        }
      }
      line >>= 1;
     ea2:	96 94       	lsr	r9
     ea4:	5a 94       	dec	r5
     ea6:	c2 0c       	add	r12, r2
     ea8:	d3 1c       	adc	r13, r3
     eaa:	bf ef       	ldi	r27, 0xFF	; 255
     eac:	ab 1a       	sub	r10, r27
     eae:	bb 0a       	sbc	r11, r27
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
     eb0:	51 10       	cpse	r5, r1
     eb2:	a5 cf       	rjmp	.-182    	; 0xdfe <_ZN12Adafruit_GFX8drawCharEiihjjh+0xe0>
     eb4:	8f 84       	ldd	r8, Y+15	; 0x0f
     eb6:	98 88       	ldd	r9, Y+16	; 0x10
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
     eb8:	ea 85       	ldd	r30, Y+10	; 0x0a
     eba:	ef 5f       	subi	r30, 0xFF	; 255
     ebc:	ea 87       	std	Y+10, r30	; 0x0a
     ebe:	28 85       	ldd	r18, Y+8	; 0x08
     ec0:	39 85       	ldd	r19, Y+9	; 0x09
     ec2:	22 0d       	add	r18, r2
     ec4:	33 1d       	adc	r19, r3
     ec6:	39 87       	std	Y+9, r19	; 0x09
     ec8:	28 87       	std	Y+8, r18	; 0x08
     eca:	8e 81       	ldd	r24, Y+6	; 0x06
     ecc:	9f 81       	ldd	r25, Y+7	; 0x07
     ece:	01 96       	adiw	r24, 0x01	; 1
     ed0:	9f 83       	std	Y+7, r25	; 0x07
     ed2:	8e 83       	std	Y+6, r24	; 0x06
     ed4:	e6 30       	cpi	r30, 0x06	; 6
     ed6:	09 f0       	breq	.+2      	; 0xeda <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1bc>
     ed8:	86 cf       	rjmp	.-244    	; 0xde6 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xc8>
     eda:	10 c0       	rjmp	.+32     	; 0xefc <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1de>
    uint8_t line;
    if (i == 5) 
      line = 0x0;
     edc:	00 e0       	ldi	r16, 0x00	; 0
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
     ede:	18 85       	ldd	r17, Y+8	; 0x08
     ee0:	49 84       	ldd	r4, Y+9	; 0x09
     ee2:	cb 84       	ldd	r12, Y+11	; 0x0b
     ee4:	dc 84       	ldd	r13, Y+12	; 0x0c
     ee6:	ac 2c       	mov	r10, r12
     ee8:	bd 2c       	mov	r11, r13
     eea:	68 94       	set
     eec:	55 24       	eor	r5, r5
     eee:	53 f8       	bld	r5, 3
     ef0:	c4 01       	movw	r24, r8
     ef2:	90 2e       	mov	r9, r16
     ef4:	81 2e       	mov	r8, r17
     ef6:	98 8b       	std	Y+16, r25	; 0x10
     ef8:	8f 87       	std	Y+15, r24	; 0x0f
     efa:	81 cf       	rjmp	.-254    	; 0xdfe <_ZN12Adafruit_GFX8drawCharEiihjjh+0xe0>
        }
      }
      line >>= 1;
    }
  }
}
     efc:	60 96       	adiw	r28, 0x10	; 16
     efe:	0f b6       	in	r0, 0x3f	; 63
     f00:	f8 94       	cli
     f02:	de bf       	out	0x3e, r29	; 62
     f04:	0f be       	out	0x3f, r0	; 63
     f06:	cd bf       	out	0x3d, r28	; 61
     f08:	df 91       	pop	r29
     f0a:	cf 91       	pop	r28
     f0c:	1f 91       	pop	r17
     f0e:	0f 91       	pop	r16
     f10:	ff 90       	pop	r15
     f12:	ef 90       	pop	r14
     f14:	df 90       	pop	r13
     f16:	cf 90       	pop	r12
     f18:	bf 90       	pop	r11
     f1a:	af 90       	pop	r10
     f1c:	9f 90       	pop	r9
     f1e:	8f 90       	pop	r8
     f20:	7f 90       	pop	r7
     f22:	6f 90       	pop	r6
     f24:	5f 90       	pop	r5
     f26:	4f 90       	pop	r4
     f28:	3f 90       	pop	r3
     f2a:	2f 90       	pop	r2
     f2c:	08 95       	ret

00000f2e <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
     f2e:	cf 92       	push	r12
     f30:	ef 92       	push	r14
     f32:	ff 92       	push	r15
     f34:	0f 93       	push	r16
     f36:	1f 93       	push	r17
     f38:	cf 93       	push	r28
     f3a:	df 93       	push	r29
     f3c:	ec 01       	movw	r28, r24
  if (c == '\n') {
     f3e:	6a 30       	cpi	r22, 0x0A	; 10
     f40:	69 f4       	brne	.+26     	; 0xf5c <_ZN12Adafruit_GFX5writeEh+0x2e>
    cursor_y += textsize*8;
     f42:	2c 89       	ldd	r18, Y+20	; 0x14
     f44:	8e 85       	ldd	r24, Y+14	; 0x0e
     f46:	9f 85       	ldd	r25, Y+15	; 0x0f
     f48:	38 e0       	ldi	r19, 0x08	; 8
     f4a:	23 9f       	mul	r18, r19
     f4c:	80 0d       	add	r24, r0
     f4e:	91 1d       	adc	r25, r1
     f50:	11 24       	eor	r1, r1
     f52:	9f 87       	std	Y+15, r25	; 0x0f
     f54:	8e 87       	std	Y+14, r24	; 0x0e
    cursor_x  = 0;
     f56:	1d 86       	std	Y+13, r1	; 0x0d
     f58:	1c 86       	std	Y+12, r1	; 0x0c
     f5a:	3c c0       	rjmp	.+120    	; 0xfd4 <_ZN12Adafruit_GFX5writeEh+0xa6>
  } else if (c == '\r') {
     f5c:	6d 30       	cpi	r22, 0x0D	; 13
     f5e:	d1 f1       	breq	.+116    	; 0xfd4 <_ZN12Adafruit_GFX5writeEh+0xa6>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
     f60:	ea 88       	ldd	r14, Y+18	; 0x12
     f62:	fb 88       	ldd	r15, Y+19	; 0x13
     f64:	08 89       	ldd	r16, Y+16	; 0x10
     f66:	19 89       	ldd	r17, Y+17	; 0x11
     f68:	4e 85       	ldd	r20, Y+14	; 0x0e
     f6a:	5f 85       	ldd	r21, Y+15	; 0x0f
     f6c:	8c 85       	ldd	r24, Y+12	; 0x0c
     f6e:	9d 85       	ldd	r25, Y+13	; 0x0d
     f70:	cc 88       	ldd	r12, Y+20	; 0x14
     f72:	26 2f       	mov	r18, r22
     f74:	bc 01       	movw	r22, r24
     f76:	ce 01       	movw	r24, r28
     f78:	d2 de       	rcall	.-604    	; 0xd1e <_ZN12Adafruit_GFX8drawCharEiihjjh>
    cursor_x += textsize*6;
     f7a:	2c 89       	ldd	r18, Y+20	; 0x14
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	c9 01       	movw	r24, r18
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	82 0f       	add	r24, r18
     f86:	93 1f       	adc	r25, r19
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	4c 85       	ldd	r20, Y+12	; 0x0c
     f8e:	5d 85       	ldd	r21, Y+13	; 0x0d
     f90:	84 0f       	add	r24, r20
     f92:	95 1f       	adc	r25, r21
     f94:	9d 87       	std	Y+13, r25	; 0x0d
     f96:	8c 87       	std	Y+12, r24	; 0x0c
    if (wrap && (cursor_x > (_width - textsize*6))) {
     f98:	4e 89       	ldd	r20, Y+22	; 0x16
     f9a:	44 23       	and	r20, r20
     f9c:	d9 f0       	breq	.+54     	; 0xfd4 <_ZN12Adafruit_GFX5writeEh+0xa6>
     f9e:	4a ef       	ldi	r20, 0xFA	; 250
     fa0:	42 03       	mulsu	r20, r18
     fa2:	b0 01       	movw	r22, r0
     fa4:	43 9f       	mul	r20, r19
     fa6:	70 0d       	add	r23, r0
     fa8:	11 24       	eor	r1, r1
     faa:	48 85       	ldd	r20, Y+8	; 0x08
     fac:	59 85       	ldd	r21, Y+9	; 0x09
     fae:	46 0f       	add	r20, r22
     fb0:	57 1f       	adc	r21, r23
     fb2:	48 17       	cp	r20, r24
     fb4:	59 07       	cpc	r21, r25
     fb6:	74 f4       	brge	.+28     	; 0xfd4 <_ZN12Adafruit_GFX5writeEh+0xa6>
      cursor_y += textsize*8;
     fb8:	22 0f       	add	r18, r18
     fba:	33 1f       	adc	r19, r19
     fbc:	22 0f       	add	r18, r18
     fbe:	33 1f       	adc	r19, r19
     fc0:	22 0f       	add	r18, r18
     fc2:	33 1f       	adc	r19, r19
     fc4:	8e 85       	ldd	r24, Y+14	; 0x0e
     fc6:	9f 85       	ldd	r25, Y+15	; 0x0f
     fc8:	28 0f       	add	r18, r24
     fca:	39 1f       	adc	r19, r25
     fcc:	3f 87       	std	Y+15, r19	; 0x0f
     fce:	2e 87       	std	Y+14, r18	; 0x0e
      cursor_x = 0;
     fd0:	1d 86       	std	Y+13, r1	; 0x0d
     fd2:	1c 86       	std	Y+12, r1	; 0x0c
    }
  }
  return 1;
}
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	df 91       	pop	r29
     fda:	cf 91       	pop	r28
     fdc:	1f 91       	pop	r17
     fde:	0f 91       	pop	r16
     fe0:	ff 90       	pop	r15
     fe2:	ef 90       	pop	r14
     fe4:	cf 90       	pop	r12
     fe6:	08 95       	ret

00000fe8 <_ZN12Adafruit_GFX9setCursorEii>:
    }
  }
}

void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
  cursor_x = x;
     fe8:	fc 01       	movw	r30, r24
     fea:	75 87       	std	Z+13, r23	; 0x0d
     fec:	64 87       	std	Z+12, r22	; 0x0c
  cursor_y = y;
     fee:	57 87       	std	Z+15, r21	; 0x0f
     ff0:	46 87       	std	Z+14, r20	; 0x0e
     ff2:	08 95       	ret

00000ff4 <_ZN12Adafruit_GFX11setTextSizeEh>:
}

void Adafruit_GFX::setTextSize(uint8_t s) {
  textsize = (s > 0) ? s : 1;
     ff4:	61 11       	cpse	r22, r1
     ff6:	01 c0       	rjmp	.+2      	; 0xffa <_ZN12Adafruit_GFX11setTextSizeEh+0x6>
     ff8:	61 e0       	ldi	r22, 0x01	; 1
     ffa:	fc 01       	movw	r30, r24
     ffc:	64 8b       	std	Z+20, r22	; 0x14
     ffe:	08 95       	ret

00001000 <_ZN12Adafruit_GFX12setTextColorEj>:
}

void Adafruit_GFX::setTextColor(uint16_t c) {
  // For 'transparent' background, we'll set the bg 
  // to the same as fg instead of using a flag
  textcolor = textbgcolor = c;
    1000:	fc 01       	movw	r30, r24
    1002:	73 8b       	std	Z+19, r23	; 0x13
    1004:	62 8b       	std	Z+18, r22	; 0x12
    1006:	71 8b       	std	Z+17, r23	; 0x11
    1008:	60 8b       	std	Z+16, r22	; 0x10
    100a:	08 95       	ret

0000100c <_ZN14RGBmatrixPanel9drawPixelEiij>:
      if((i & 7) == 7) Serial.print(",\n  ");
      else             Serial.print(',');
    }
  }
  Serial.println("\n};");
}
    100c:	8f 92       	push	r8
    100e:	9f 92       	push	r9
    1010:	af 92       	push	r10
    1012:	bf 92       	push	r11
    1014:	cf 92       	push	r12
    1016:	df 92       	push	r13
    1018:	ef 92       	push	r14
    101a:	ff 92       	push	r15
    101c:	0f 93       	push	r16
    101e:	1f 93       	push	r17
    1020:	cf 93       	push	r28
    1022:	df 93       	push	r29
    1024:	fc 01       	movw	r30, r24
    1026:	77 23       	and	r23, r23
    1028:	0c f4       	brge	.+2      	; 0x102c <_ZN14RGBmatrixPanel9drawPixelEiij+0x20>
    102a:	1f c1       	rjmp	.+574    	; 0x126a <_ZN14RGBmatrixPanel9drawPixelEiij+0x25e>
    102c:	80 85       	ldd	r24, Z+8	; 0x08
    102e:	91 85       	ldd	r25, Z+9	; 0x09
    1030:	68 17       	cp	r22, r24
    1032:	79 07       	cpc	r23, r25
    1034:	0c f0       	brlt	.+2      	; 0x1038 <_ZN14RGBmatrixPanel9drawPixelEiij+0x2c>
    1036:	19 c1       	rjmp	.+562    	; 0x126a <_ZN14RGBmatrixPanel9drawPixelEiij+0x25e>
    1038:	55 23       	and	r21, r21
    103a:	0c f4       	brge	.+2      	; 0x103e <_ZN14RGBmatrixPanel9drawPixelEiij+0x32>
    103c:	16 c1       	rjmp	.+556    	; 0x126a <_ZN14RGBmatrixPanel9drawPixelEiij+0x25e>
    103e:	a2 85       	ldd	r26, Z+10	; 0x0a
    1040:	b3 85       	ldd	r27, Z+11	; 0x0b
    1042:	4a 17       	cp	r20, r26
    1044:	5b 07       	cpc	r21, r27
    1046:	0c f0       	brlt	.+2      	; 0x104a <_ZN14RGBmatrixPanel9drawPixelEiij+0x3e>
    1048:	10 c1       	rjmp	.+544    	; 0x126a <_ZN14RGBmatrixPanel9drawPixelEiij+0x25e>
    104a:	a5 89       	ldd	r26, Z+21	; 0x15
    104c:	a2 30       	cpi	r26, 0x02	; 2
    104e:	61 f0       	breq	.+24     	; 0x1068 <_ZN14RGBmatrixPanel9drawPixelEiij+0x5c>
    1050:	a3 30       	cpi	r26, 0x03	; 3
    1052:	c9 f0       	breq	.+50     	; 0x1086 <_ZN14RGBmatrixPanel9drawPixelEiij+0x7a>
    1054:	a1 30       	cpi	r26, 0x01	; 1
    1056:	f1 f4       	brne	.+60     	; 0x1094 <_ZN14RGBmatrixPanel9drawPixelEiij+0x88>
    1058:	a4 81       	ldd	r26, Z+4	; 0x04
    105a:	b5 81       	ldd	r27, Z+5	; 0x05
    105c:	11 97       	sbiw	r26, 0x01	; 1
    105e:	a4 1b       	sub	r26, r20
    1060:	b5 0b       	sbc	r27, r21
    1062:	ab 01       	movw	r20, r22
    1064:	bd 01       	movw	r22, r26
    1066:	16 c0       	rjmp	.+44     	; 0x1094 <_ZN14RGBmatrixPanel9drawPixelEiij+0x88>
    1068:	a4 81       	ldd	r26, Z+4	; 0x04
    106a:	b5 81       	ldd	r27, Z+5	; 0x05
    106c:	11 97       	sbiw	r26, 0x01	; 1
    106e:	ed 01       	movw	r28, r26
    1070:	c6 1b       	sub	r28, r22
    1072:	d7 0b       	sbc	r29, r23
    1074:	be 01       	movw	r22, r28
    1076:	a6 81       	ldd	r26, Z+6	; 0x06
    1078:	b7 81       	ldd	r27, Z+7	; 0x07
    107a:	11 97       	sbiw	r26, 0x01	; 1
    107c:	ed 01       	movw	r28, r26
    107e:	c4 1b       	sub	r28, r20
    1080:	d5 0b       	sbc	r29, r21
    1082:	ae 01       	movw	r20, r28
    1084:	07 c0       	rjmp	.+14     	; 0x1094 <_ZN14RGBmatrixPanel9drawPixelEiij+0x88>
    1086:	a6 81       	ldd	r26, Z+6	; 0x06
    1088:	b7 81       	ldd	r27, Z+7	; 0x07
    108a:	11 97       	sbiw	r26, 0x01	; 1
    108c:	a6 1b       	sub	r26, r22
    108e:	b7 0b       	sbc	r27, r23
    1090:	ba 01       	movw	r22, r20
    1092:	ad 01       	movw	r20, r26
    1094:	a3 2e       	mov	r10, r19
    1096:	a6 94       	lsr	r10
    1098:	a6 94       	lsr	r10
    109a:	a6 94       	lsr	r10
    109c:	a6 94       	lsr	r10
    109e:	da 2c       	mov	r13, r10
    10a0:	49 01       	movw	r8, r18
    10a2:	88 0c       	add	r8, r8
    10a4:	89 2c       	mov	r8, r9
    10a6:	88 1c       	adc	r8, r8
    10a8:	99 08       	sbc	r9, r9
    10aa:	91 94       	neg	r9
    10ac:	d8 2d       	mov	r29, r8
    10ae:	df 70       	andi	r29, 0x0F	; 15
    10b0:	cd 2e       	mov	r12, r29
    10b2:	36 95       	lsr	r19
    10b4:	27 95       	ror	r18
    10b6:	a2 2f       	mov	r26, r18
    10b8:	af 70       	andi	r26, 0x0F	; 15
    10ba:	ba 2e       	mov	r11, r26
    10bc:	c3 8d       	ldd	r28, Z+27	; 0x1b
    10be:	d0 e0       	ldi	r29, 0x00	; 0
    10c0:	4c 17       	cp	r20, r28
    10c2:	5d 07       	cpc	r21, r29
    10c4:	0c f0       	brlt	.+2      	; 0x10c8 <_ZN14RGBmatrixPanel9drawPixelEiij+0xbc>
    10c6:	6b c0       	rjmp	.+214    	; 0x119e <_ZN14RGBmatrixPanel9drawPixelEiij+0x192>
    10c8:	04 8d       	ldd	r16, Z+28	; 0x1c
    10ca:	10 e0       	ldi	r17, 0x00	; 0
    10cc:	00 0f       	add	r16, r16
    10ce:	11 1f       	adc	r17, r17
    10d0:	0e 0f       	add	r16, r30
    10d2:	1f 1f       	adc	r17, r31
    10d4:	e4 80       	ldd	r14, Z+4	; 0x04
    10d6:	f5 80       	ldd	r15, Z+5	; 0x05
    10d8:	4e 9d       	mul	r20, r14
    10da:	e0 01       	movw	r28, r0
    10dc:	4f 9d       	mul	r20, r15
    10de:	d0 0d       	add	r29, r0
    10e0:	5e 9d       	mul	r21, r14
    10e2:	d0 0d       	add	r29, r0
    10e4:	11 24       	eor	r1, r1
    10e6:	ae 01       	movw	r20, r28
    10e8:	44 0f       	add	r20, r20
    10ea:	55 1f       	adc	r21, r21
    10ec:	c4 0f       	add	r28, r20
    10ee:	d5 1f       	adc	r29, r21
    10f0:	6c 0f       	add	r22, r28
    10f2:	7d 1f       	adc	r23, r29
    10f4:	e8 01       	movw	r28, r16
    10f6:	4f 89       	ldd	r20, Y+23	; 0x17
    10f8:	58 8d       	ldd	r21, Y+24	; 0x18
    10fa:	ea 01       	movw	r28, r20
    10fc:	c6 0f       	add	r28, r22
    10fe:	d7 1f       	adc	r29, r23
    1100:	88 0f       	add	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	8c 0f       	add	r24, r28
    1106:	9d 1f       	adc	r25, r29
    1108:	dc 01       	movw	r26, r24
    110a:	4c 91       	ld	r20, X
    110c:	4c 7f       	andi	r20, 0xFC	; 252
    110e:	4c 93       	st	X, r20
    1110:	a0 fe       	sbrs	r10, 0
    1112:	0a c0       	rjmp	.+20     	; 0x1128 <_ZN14RGBmatrixPanel9drawPixelEiij+0x11c>
    1114:	80 85       	ldd	r24, Z+8	; 0x08
    1116:	91 85       	ldd	r25, Z+9	; 0x09
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	8c 0f       	add	r24, r28
    111e:	9d 1f       	adc	r25, r29
    1120:	dc 01       	movw	r26, r24
    1122:	4c 91       	ld	r20, X
    1124:	41 60       	ori	r20, 0x01	; 1
    1126:	4c 93       	st	X, r20
    1128:	80 fe       	sbrs	r8, 0
    112a:	09 c0       	rjmp	.+18     	; 0x113e <_ZN14RGBmatrixPanel9drawPixelEiij+0x132>
    112c:	a0 85       	ldd	r26, Z+8	; 0x08
    112e:	b1 85       	ldd	r27, Z+9	; 0x09
    1130:	aa 0f       	add	r26, r26
    1132:	bb 1f       	adc	r27, r27
    1134:	ac 0f       	add	r26, r28
    1136:	bd 1f       	adc	r27, r29
    1138:	8c 91       	ld	r24, X
    113a:	82 60       	ori	r24, 0x02	; 2
    113c:	8c 93       	st	X, r24
    113e:	20 ff       	sbrs	r18, 0
    1140:	08 c0       	rjmp	.+16     	; 0x1152 <_ZN14RGBmatrixPanel9drawPixelEiij+0x146>
    1142:	a0 85       	ldd	r26, Z+8	; 0x08
    1144:	b1 85       	ldd	r27, Z+9	; 0x09
    1146:	ac 0f       	add	r26, r28
    1148:	bd 1f       	adc	r27, r29
    114a:	8c 91       	ld	r24, X
    114c:	81 60       	ori	r24, 0x01	; 1
    114e:	8c 93       	st	X, r24
    1150:	84 c0       	rjmp	.+264    	; 0x125a <_ZN14RGBmatrixPanel9drawPixelEiij+0x24e>
    1152:	a0 85       	ldd	r26, Z+8	; 0x08
    1154:	b1 85       	ldd	r27, Z+9	; 0x09
    1156:	ac 0f       	add	r26, r28
    1158:	bd 1f       	adc	r27, r29
    115a:	8c 91       	ld	r24, X
    115c:	8e 7f       	andi	r24, 0xFE	; 254
    115e:	8c 93       	st	X, r24
    1160:	7c c0       	rjmp	.+248    	; 0x125a <_ZN14RGBmatrixPanel9drawPixelEiij+0x24e>
    1162:	28 81       	ld	r18, Y
    1164:	23 7e       	andi	r18, 0xE3	; 227
    1166:	34 2f       	mov	r19, r20
    1168:	3d 21       	and	r19, r13
    116a:	11 f4       	brne	.+4      	; 0x1170 <_ZN14RGBmatrixPanel9drawPixelEiij+0x164>
    116c:	28 83       	st	Y, r18
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <_ZN14RGBmatrixPanel9drawPixelEiij+0x168>
    1170:	24 60       	ori	r18, 0x04	; 4
    1172:	28 83       	st	Y, r18
    1174:	24 2f       	mov	r18, r20
    1176:	2c 21       	and	r18, r12
    1178:	19 f0       	breq	.+6      	; 0x1180 <_ZN14RGBmatrixPanel9drawPixelEiij+0x174>
    117a:	28 81       	ld	r18, Y
    117c:	28 60       	ori	r18, 0x08	; 8
    117e:	28 83       	st	Y, r18
    1180:	24 2f       	mov	r18, r20
    1182:	2b 21       	and	r18, r11
    1184:	19 f0       	breq	.+6      	; 0x118c <_ZN14RGBmatrixPanel9drawPixelEiij+0x180>
    1186:	28 81       	ld	r18, Y
    1188:	20 61       	ori	r18, 0x10	; 16
    118a:	28 83       	st	Y, r18
    118c:	24 81       	ldd	r18, Z+4	; 0x04
    118e:	35 81       	ldd	r19, Z+5	; 0x05
    1190:	c2 0f       	add	r28, r18
    1192:	d3 1f       	adc	r29, r19
    1194:	44 0f       	add	r20, r20
    1196:	01 97       	sbiw	r24, 0x01	; 1
    1198:	00 97       	sbiw	r24, 0x00	; 0
    119a:	19 f7       	brne	.-58     	; 0x1162 <_ZN14RGBmatrixPanel9drawPixelEiij+0x156>
    119c:	66 c0       	rjmp	.+204    	; 0x126a <_ZN14RGBmatrixPanel9drawPixelEiij+0x25e>
    119e:	04 8d       	ldd	r16, Z+28	; 0x1c
    11a0:	10 e0       	ldi	r17, 0x00	; 0
    11a2:	00 0f       	add	r16, r16
    11a4:	11 1f       	adc	r17, r17
    11a6:	0e 0f       	add	r16, r30
    11a8:	1f 1f       	adc	r17, r31
    11aa:	4c 1b       	sub	r20, r28
    11ac:	5d 0b       	sbc	r21, r29
    11ae:	c4 81       	ldd	r28, Z+4	; 0x04
    11b0:	d5 81       	ldd	r29, Z+5	; 0x05
    11b2:	4c 9f       	mul	r20, r28
    11b4:	c0 01       	movw	r24, r0
    11b6:	4d 9f       	mul	r20, r29
    11b8:	90 0d       	add	r25, r0
    11ba:	5c 9f       	mul	r21, r28
    11bc:	90 0d       	add	r25, r0
    11be:	11 24       	eor	r1, r1
    11c0:	ec 01       	movw	r28, r24
    11c2:	cc 0f       	add	r28, r28
    11c4:	dd 1f       	adc	r29, r29
    11c6:	8c 0f       	add	r24, r28
    11c8:	9d 1f       	adc	r25, r29
    11ca:	68 0f       	add	r22, r24
    11cc:	79 1f       	adc	r23, r25
    11ce:	d8 01       	movw	r26, r16
    11d0:	57 96       	adiw	r26, 0x17	; 23
    11d2:	cd 91       	ld	r28, X+
    11d4:	dc 91       	ld	r29, X
    11d6:	58 97       	sbiw	r26, 0x18	; 24
    11d8:	c6 0f       	add	r28, r22
    11da:	d7 1f       	adc	r29, r23
    11dc:	88 81       	ld	r24, Y
    11de:	8c 7f       	andi	r24, 0xFC	; 252
    11e0:	88 83       	st	Y, r24
    11e2:	a0 fe       	sbrs	r10, 0
    11e4:	09 c0       	rjmp	.+18     	; 0x11f8 <_ZN14RGBmatrixPanel9drawPixelEiij+0x1ec>
    11e6:	80 85       	ldd	r24, Z+8	; 0x08
    11e8:	91 85       	ldd	r25, Z+9	; 0x09
    11ea:	8c 0f       	add	r24, r28
    11ec:	9d 1f       	adc	r25, r29
    11ee:	dc 01       	movw	r26, r24
    11f0:	4c 91       	ld	r20, X
    11f2:	42 60       	ori	r20, 0x02	; 2
    11f4:	4c 93       	st	X, r20
    11f6:	08 c0       	rjmp	.+16     	; 0x1208 <_ZN14RGBmatrixPanel9drawPixelEiij+0x1fc>
    11f8:	80 85       	ldd	r24, Z+8	; 0x08
    11fa:	91 85       	ldd	r25, Z+9	; 0x09
    11fc:	8c 0f       	add	r24, r28
    11fe:	9d 1f       	adc	r25, r29
    1200:	dc 01       	movw	r26, r24
    1202:	4c 91       	ld	r20, X
    1204:	4d 7f       	andi	r20, 0xFD	; 253
    1206:	4c 93       	st	X, r20
    1208:	80 fe       	sbrs	r8, 0
    120a:	03 c0       	rjmp	.+6      	; 0x1212 <_ZN14RGBmatrixPanel9drawPixelEiij+0x206>
    120c:	88 81       	ld	r24, Y
    120e:	81 60       	ori	r24, 0x01	; 1
    1210:	88 83       	st	Y, r24
    1212:	20 ff       	sbrs	r18, 0
    1214:	26 c0       	rjmp	.+76     	; 0x1262 <_ZN14RGBmatrixPanel9drawPixelEiij+0x256>
    1216:	88 81       	ld	r24, Y
    1218:	82 60       	ori	r24, 0x02	; 2
    121a:	88 83       	st	Y, r24
    121c:	22 c0       	rjmp	.+68     	; 0x1262 <_ZN14RGBmatrixPanel9drawPixelEiij+0x256>
    121e:	28 81       	ld	r18, Y
    1220:	2f 71       	andi	r18, 0x1F	; 31
    1222:	34 2f       	mov	r19, r20
    1224:	3d 21       	and	r19, r13
    1226:	11 f4       	brne	.+4      	; 0x122c <_ZN14RGBmatrixPanel9drawPixelEiij+0x220>
    1228:	28 83       	st	Y, r18
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <_ZN14RGBmatrixPanel9drawPixelEiij+0x224>
    122c:	20 62       	ori	r18, 0x20	; 32
    122e:	28 83       	st	Y, r18
    1230:	24 2f       	mov	r18, r20
    1232:	2c 21       	and	r18, r12
    1234:	19 f0       	breq	.+6      	; 0x123c <_ZN14RGBmatrixPanel9drawPixelEiij+0x230>
    1236:	28 81       	ld	r18, Y
    1238:	20 64       	ori	r18, 0x40	; 64
    123a:	28 83       	st	Y, r18
    123c:	24 2f       	mov	r18, r20
    123e:	2b 21       	and	r18, r11
    1240:	19 f0       	breq	.+6      	; 0x1248 <_ZN14RGBmatrixPanel9drawPixelEiij+0x23c>
    1242:	28 81       	ld	r18, Y
    1244:	20 68       	ori	r18, 0x80	; 128
    1246:	28 83       	st	Y, r18
    1248:	24 81       	ldd	r18, Z+4	; 0x04
    124a:	35 81       	ldd	r19, Z+5	; 0x05
    124c:	c2 0f       	add	r28, r18
    124e:	d3 1f       	adc	r29, r19
    1250:	44 0f       	add	r20, r20
    1252:	01 97       	sbiw	r24, 0x01	; 1
    1254:	00 97       	sbiw	r24, 0x00	; 0
    1256:	19 f7       	brne	.-58     	; 0x121e <_ZN14RGBmatrixPanel9drawPixelEiij+0x212>
    1258:	08 c0       	rjmp	.+16     	; 0x126a <_ZN14RGBmatrixPanel9drawPixelEiij+0x25e>
    125a:	83 e0       	ldi	r24, 0x03	; 3
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	42 e0       	ldi	r20, 0x02	; 2
    1260:	80 cf       	rjmp	.-256    	; 0x1162 <_ZN14RGBmatrixPanel9drawPixelEiij+0x156>
    1262:	83 e0       	ldi	r24, 0x03	; 3
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	42 e0       	ldi	r20, 0x02	; 2
    1268:	da cf       	rjmp	.-76     	; 0x121e <_ZN14RGBmatrixPanel9drawPixelEiij+0x212>
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	1f 91       	pop	r17
    1270:	0f 91       	pop	r16
    1272:	ff 90       	pop	r15
    1274:	ef 90       	pop	r14
    1276:	df 90       	pop	r13
    1278:	cf 90       	pop	r12
    127a:	bf 90       	pop	r11
    127c:	af 90       	pop	r10
    127e:	9f 90       	pop	r9
    1280:	8f 90       	pop	r8
    1282:	08 95       	ret

00001284 <_ZN14RGBmatrixPanel4initEhhhhhhhbh>:
    1284:	2f 92       	push	r2
    1286:	3f 92       	push	r3
    1288:	4f 92       	push	r4
    128a:	5f 92       	push	r5
    128c:	6f 92       	push	r6
    128e:	7f 92       	push	r7
    1290:	8f 92       	push	r8
    1292:	af 92       	push	r10
    1294:	cf 92       	push	r12
    1296:	ef 92       	push	r14
    1298:	ff 92       	push	r15
    129a:	0f 93       	push	r16
    129c:	1f 93       	push	r17
    129e:	cf 93       	push	r28
    12a0:	df 93       	push	r29
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
    12a6:	3c 01       	movw	r6, r24
    12a8:	f4 2e       	mov	r15, r20
    12aa:	12 2f       	mov	r17, r18
    12ac:	dc 01       	movw	r26, r24
    12ae:	5b 96       	adiw	r26, 0x1b	; 27
    12b0:	6c 93       	st	X, r22
    12b2:	2b 88       	ldd	r2, Y+19	; 0x13
    12b4:	26 9e       	mul	r2, r22
    12b6:	b0 01       	movw	r22, r0
    12b8:	11 24       	eor	r1, r1
    12ba:	1b 01       	movw	r2, r22
    12bc:	22 0c       	add	r2, r2
    12be:	33 1c       	adc	r3, r3
    12c0:	26 0e       	add	r2, r22
    12c2:	37 1e       	adc	r3, r23
    12c4:	88 20       	and	r8, r8
    12c6:	21 f0       	breq	.+8      	; 0x12d0 <_ZN14RGBmatrixPanel4initEhhhhhhhbh+0x4c>
    12c8:	21 01       	movw	r4, r2
    12ca:	44 0c       	add	r4, r4
    12cc:	55 1c       	adc	r5, r5
    12ce:	01 c0       	rjmp	.+2      	; 0x12d2 <_ZN14RGBmatrixPanel4initEhhhhhhhbh+0x4e>
    12d0:	21 01       	movw	r4, r2
    12d2:	c2 01       	movw	r24, r4
    12d4:	0e 94 73 22 	call	0x44e6	; 0x44e6 <malloc>
    12d8:	f3 01       	movw	r30, r6
    12da:	90 8f       	std	Z+24, r25	; 0x18
    12dc:	87 8b       	std	Z+23, r24	; 0x17
    12de:	00 97       	sbiw	r24, 0x00	; 0
    12e0:	09 f4       	brne	.+2      	; 0x12e4 <_ZN14RGBmatrixPanel4initEhhhhhhhbh+0x60>
    12e2:	b3 c0       	rjmp	.+358    	; 0x144a <_ZN14RGBmatrixPanel4initEhhhhhhhbh+0x1c6>
    12e4:	a2 01       	movw	r20, r4
    12e6:	60 e0       	ldi	r22, 0x00	; 0
    12e8:	70 e0       	ldi	r23, 0x00	; 0
    12ea:	0e 94 93 24 	call	0x4926	; 0x4926 <memset>
    12ee:	88 20       	and	r8, r8
    12f0:	41 f0       	breq	.+16     	; 0x1302 <_ZN14RGBmatrixPanel4initEhhhhhhhbh+0x7e>
    12f2:	d3 01       	movw	r26, r6
    12f4:	57 96       	adiw	r26, 0x17	; 23
    12f6:	8d 91       	ld	r24, X+
    12f8:	9c 91       	ld	r25, X
    12fa:	58 97       	sbiw	r26, 0x18	; 24
    12fc:	28 0e       	add	r2, r24
    12fe:	39 1e       	adc	r3, r25
    1300:	03 c0       	rjmp	.+6      	; 0x1308 <_ZN14RGBmatrixPanel4initEhhhhhhhbh+0x84>
    1302:	f3 01       	movw	r30, r6
    1304:	27 88       	ldd	r2, Z+23	; 0x17
    1306:	30 8c       	ldd	r3, Z+24	; 0x18
    1308:	d3 01       	movw	r26, r6
    130a:	5a 96       	adiw	r26, 0x1a	; 26
    130c:	3c 92       	st	X, r3
    130e:	2e 92       	st	-X, r2
    1310:	59 97       	sbiw	r26, 0x19	; 25
    1312:	d4 96       	adiw	r26, 0x34	; 52
    1314:	fc 92       	st	X, r15
    1316:	d4 97       	sbiw	r26, 0x34	; 52
    1318:	d5 96       	adiw	r26, 0x35	; 53
    131a:	1c 93       	st	X, r17
    131c:	d5 97       	sbiw	r26, 0x35	; 53
    131e:	d6 96       	adiw	r26, 0x36	; 54
    1320:	0c 93       	st	X, r16
    1322:	d6 97       	sbiw	r26, 0x36	; 54
    1324:	d1 96       	adiw	r26, 0x31	; 49
    1326:	ec 92       	st	X, r14
    1328:	d1 97       	sbiw	r26, 0x31	; 49
    132a:	d2 96       	adiw	r26, 0x32	; 50
    132c:	cc 92       	st	X, r12
    132e:	d2 97       	sbiw	r26, 0x32	; 50
    1330:	d3 96       	adiw	r26, 0x33	; 51
    1332:	ac 92       	st	X, r10
    1334:	ee 2d       	mov	r30, r14
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	e6 5b       	subi	r30, 0xB6	; 182
    133a:	f9 4f       	sbci	r31, 0xF9	; 249
    133c:	e4 91       	lpm	r30, Z
    133e:	d3 01       	movw	r26, r6
    1340:	9a 96       	adiw	r26, 0x2a	; 42
    1342:	ec 93       	st	X, r30
    1344:	8c 2d       	mov	r24, r12
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	fc 01       	movw	r30, r24
    134a:	e0 57       	subi	r30, 0x70	; 112
    134c:	f9 4f       	sbci	r31, 0xF9	; 249
    134e:	e4 91       	lpm	r30, Z
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	ee 0f       	add	r30, r30
    1354:	ff 1f       	adc	r31, r31
    1356:	ea 52       	subi	r30, 0x2A	; 42
    1358:	f9 4f       	sbci	r31, 0xF9	; 249
    135a:	25 91       	lpm	r18, Z+
    135c:	34 91       	lpm	r19, Z
    135e:	f3 01       	movw	r30, r6
    1360:	37 8f       	std	Z+31, r19	; 0x1f
    1362:	26 8f       	std	Z+30, r18	; 0x1e
    1364:	fc 01       	movw	r30, r24
    1366:	e6 5b       	subi	r30, 0xB6	; 182
    1368:	f9 4f       	sbci	r31, 0xF9	; 249
    136a:	84 91       	lpm	r24, Z
    136c:	d3 01       	movw	r26, r6
    136e:	9b 96       	adiw	r26, 0x2b	; 43
    1370:	8c 93       	st	X, r24
    1372:	8a 2d       	mov	r24, r10
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	fc 01       	movw	r30, r24
    1378:	e0 57       	subi	r30, 0x70	; 112
    137a:	f9 4f       	sbci	r31, 0xF9	; 249
    137c:	e4 91       	lpm	r30, Z
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	ee 0f       	add	r30, r30
    1382:	ff 1f       	adc	r31, r31
    1384:	ea 52       	subi	r30, 0x2A	; 42
    1386:	f9 4f       	sbci	r31, 0xF9	; 249
    1388:	25 91       	lpm	r18, Z+
    138a:	34 91       	lpm	r19, Z
    138c:	f3 01       	movw	r30, r6
    138e:	31 a3       	std	Z+33, r19	; 0x21
    1390:	20 a3       	std	Z+32, r18	; 0x20
    1392:	fc 01       	movw	r30, r24
    1394:	e6 5b       	subi	r30, 0xB6	; 182
    1396:	f9 4f       	sbci	r31, 0xF9	; 249
    1398:	84 91       	lpm	r24, Z
    139a:	d3 01       	movw	r26, r6
    139c:	9c 96       	adiw	r26, 0x2c	; 44
    139e:	8c 93       	st	X, r24
    13a0:	8f 2d       	mov	r24, r15
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	fc 01       	movw	r30, r24
    13a6:	e0 57       	subi	r30, 0x70	; 112
    13a8:	f9 4f       	sbci	r31, 0xF9	; 249
    13aa:	e4 91       	lpm	r30, Z
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	ee 0f       	add	r30, r30
    13b0:	ff 1f       	adc	r31, r31
    13b2:	ea 52       	subi	r30, 0x2A	; 42
    13b4:	f9 4f       	sbci	r31, 0xF9	; 249
    13b6:	25 91       	lpm	r18, Z+
    13b8:	34 91       	lpm	r19, Z
    13ba:	f3 01       	movw	r30, r6
    13bc:	33 a3       	std	Z+35, r19	; 0x23
    13be:	22 a3       	std	Z+34, r18	; 0x22
    13c0:	fc 01       	movw	r30, r24
    13c2:	e6 5b       	subi	r30, 0xB6	; 182
    13c4:	f9 4f       	sbci	r31, 0xF9	; 249
    13c6:	84 91       	lpm	r24, Z
    13c8:	d3 01       	movw	r26, r6
    13ca:	9d 96       	adiw	r26, 0x2d	; 45
    13cc:	8c 93       	st	X, r24
    13ce:	81 2f       	mov	r24, r17
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	fc 01       	movw	r30, r24
    13d4:	e0 57       	subi	r30, 0x70	; 112
    13d6:	f9 4f       	sbci	r31, 0xF9	; 249
    13d8:	e4 91       	lpm	r30, Z
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	ee 0f       	add	r30, r30
    13de:	ff 1f       	adc	r31, r31
    13e0:	ea 52       	subi	r30, 0x2A	; 42
    13e2:	f9 4f       	sbci	r31, 0xF9	; 249
    13e4:	25 91       	lpm	r18, Z+
    13e6:	34 91       	lpm	r19, Z
    13e8:	f3 01       	movw	r30, r6
    13ea:	35 a3       	std	Z+37, r19	; 0x25
    13ec:	24 a3       	std	Z+36, r18	; 0x24
    13ee:	fc 01       	movw	r30, r24
    13f0:	e6 5b       	subi	r30, 0xB6	; 182
    13f2:	f9 4f       	sbci	r31, 0xF9	; 249
    13f4:	84 91       	lpm	r24, Z
    13f6:	d3 01       	movw	r26, r6
    13f8:	9e 96       	adiw	r26, 0x2e	; 46
    13fa:	8c 93       	st	X, r24
    13fc:	10 e0       	ldi	r17, 0x00	; 0
    13fe:	f8 01       	movw	r30, r16
    1400:	e0 57       	subi	r30, 0x70	; 112
    1402:	f9 4f       	sbci	r31, 0xF9	; 249
    1404:	e4 91       	lpm	r30, Z
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	ee 0f       	add	r30, r30
    140a:	ff 1f       	adc	r31, r31
    140c:	ea 52       	subi	r30, 0x2A	; 42
    140e:	f9 4f       	sbci	r31, 0xF9	; 249
    1410:	85 91       	lpm	r24, Z+
    1412:	94 91       	lpm	r25, Z
    1414:	f3 01       	movw	r30, r6
    1416:	97 a3       	std	Z+39, r25	; 0x27
    1418:	86 a3       	std	Z+38, r24	; 0x26
    141a:	f8 01       	movw	r30, r16
    141c:	e6 5b       	subi	r30, 0xB6	; 182
    141e:	f9 4f       	sbci	r31, 0xF9	; 249
    1420:	04 91       	lpm	r16, Z
    1422:	d3 01       	movw	r26, r6
    1424:	9f 96       	adiw	r26, 0x2f	; 47
    1426:	0c 93       	st	X, r16
    1428:	9f 97       	sbiw	r26, 0x2f	; 47
    142a:	83 e0       	ldi	r24, 0x03	; 3
    142c:	d9 96       	adiw	r26, 0x39	; 57
    142e:	8c 93       	st	X, r24
    1430:	d9 97       	sbiw	r26, 0x39	; 57
    1432:	5b 96       	adiw	r26, 0x1b	; 27
    1434:	8c 91       	ld	r24, X
    1436:	5b 97       	sbiw	r26, 0x1b	; 27
    1438:	81 50       	subi	r24, 0x01	; 1
    143a:	d8 96       	adiw	r26, 0x38	; 56
    143c:	8c 93       	st	X, r24
    143e:	d8 97       	sbiw	r26, 0x38	; 56
    1440:	5d 96       	adiw	r26, 0x1d	; 29
    1442:	1c 92       	st	X, r1
    1444:	5d 97       	sbiw	r26, 0x1d	; 29
    1446:	5c 96       	adiw	r26, 0x1c	; 28
    1448:	1c 92       	st	X, r1
    144a:	df 91       	pop	r29
    144c:	cf 91       	pop	r28
    144e:	1f 91       	pop	r17
    1450:	0f 91       	pop	r16
    1452:	ff 90       	pop	r15
    1454:	ef 90       	pop	r14
    1456:	cf 90       	pop	r12
    1458:	af 90       	pop	r10
    145a:	8f 90       	pop	r8
    145c:	7f 90       	pop	r7
    145e:	6f 90       	pop	r6
    1460:	5f 90       	pop	r5
    1462:	4f 90       	pop	r4
    1464:	3f 90       	pop	r3
    1466:	2f 90       	pop	r2
    1468:	08 95       	ret

0000146a <_ZN14RGBmatrixPanelC1Ehhhhhhhbh>:
    146a:	6f 92       	push	r6
    146c:	7f 92       	push	r7
    146e:	8f 92       	push	r8
    1470:	9f 92       	push	r9
    1472:	af 92       	push	r10
    1474:	bf 92       	push	r11
    1476:	cf 92       	push	r12
    1478:	df 92       	push	r13
    147a:	ef 92       	push	r14
    147c:	ff 92       	push	r15
    147e:	0f 93       	push	r16
    1480:	1f 93       	push	r17
    1482:	cf 93       	push	r28
    1484:	df 93       	push	r29
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	3c 01       	movw	r6, r24
    148c:	d6 2e       	mov	r13, r22
    148e:	b4 2e       	mov	r11, r20
    1490:	92 2e       	mov	r9, r18
    1492:	10 2f       	mov	r17, r16
    1494:	fa 88       	ldd	r15, Y+18	; 0x12
    1496:	6f 2d       	mov	r22, r15
    1498:	70 e0       	ldi	r23, 0x00	; 0
    149a:	40 e2       	ldi	r20, 0x20	; 32
    149c:	50 e0       	ldi	r21, 0x00	; 0
    149e:	01 db       	rcall	.-2558   	; 0xaa2 <_ZN12Adafruit_GFXC1Eii>
    14a0:	83 e2       	ldi	r24, 0x23	; 35
    14a2:	92 e0       	ldi	r25, 0x02	; 2
    14a4:	f3 01       	movw	r30, r6
    14a6:	91 83       	std	Z+1, r25	; 0x01
    14a8:	80 83       	st	Z, r24
    14aa:	ff 92       	push	r15
    14ac:	09 2d       	mov	r16, r9
    14ae:	2b 2d       	mov	r18, r11
    14b0:	4d 2d       	mov	r20, r13
    14b2:	60 e1       	ldi	r22, 0x10	; 16
    14b4:	c3 01       	movw	r24, r6
    14b6:	e6 de       	rcall	.-564    	; 0x1284 <_ZN14RGBmatrixPanel4initEhhhhhhhbh>
    14b8:	f3 01       	movw	r30, r6
    14ba:	17 ab       	std	Z+55, r17	; 0x37
    14bc:	01 2f       	mov	r16, r17
    14be:	10 e0       	ldi	r17, 0x00	; 0
    14c0:	f8 01       	movw	r30, r16
    14c2:	e0 57       	subi	r30, 0x70	; 112
    14c4:	f9 4f       	sbci	r31, 0xF9	; 249
    14c6:	e4 91       	lpm	r30, Z
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	ee 0f       	add	r30, r30
    14cc:	ff 1f       	adc	r31, r31
    14ce:	ea 52       	subi	r30, 0x2A	; 42
    14d0:	f9 4f       	sbci	r31, 0xF9	; 249
    14d2:	85 91       	lpm	r24, Z+
    14d4:	94 91       	lpm	r25, Z
    14d6:	f3 01       	movw	r30, r6
    14d8:	91 a7       	std	Z+41, r25	; 0x29
    14da:	80 a7       	std	Z+40, r24	; 0x28
    14dc:	f8 01       	movw	r30, r16
    14de:	e6 5b       	subi	r30, 0xB6	; 182
    14e0:	f9 4f       	sbci	r31, 0xF9	; 249
    14e2:	04 91       	lpm	r16, Z
    14e4:	f3 01       	movw	r30, r6
    14e6:	00 ab       	std	Z+48, r16	; 0x30
    14e8:	0f 90       	pop	r0
    14ea:	df 91       	pop	r29
    14ec:	cf 91       	pop	r28
    14ee:	1f 91       	pop	r17
    14f0:	0f 91       	pop	r16
    14f2:	ff 90       	pop	r15
    14f4:	ef 90       	pop	r14
    14f6:	df 90       	pop	r13
    14f8:	cf 90       	pop	r12
    14fa:	bf 90       	pop	r11
    14fc:	af 90       	pop	r10
    14fe:	9f 90       	pop	r9
    1500:	8f 90       	pop	r8
    1502:	7f 90       	pop	r7
    1504:	6f 90       	pop	r6
    1506:	08 95       	ret

00001508 <_ZN14RGBmatrixPanel5beginEv>:
    1508:	cf 93       	push	r28
    150a:	df 93       	push	r29
    150c:	ec 01       	movw	r28, r24
    150e:	1c 8e       	std	Y+28, r1	; 0x1c
    1510:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1512:	e1 e0       	ldi	r30, 0x01	; 1
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	e8 1b       	sub	r30, r24
    1518:	f1 09       	sbc	r31, r1
    151a:	ee 0f       	add	r30, r30
    151c:	ff 1f       	adc	r31, r31
    151e:	ec 0f       	add	r30, r28
    1520:	fd 1f       	adc	r31, r29
    1522:	87 89       	ldd	r24, Z+23	; 0x17
    1524:	90 8d       	ldd	r25, Z+24	; 0x18
    1526:	9b af       	std	Y+59, r25	; 0x3b
    1528:	8a af       	std	Y+58, r24	; 0x3a
    152a:	d0 93 61 04 	sts	0x0461, r29
    152e:	c0 93 60 04 	sts	0x0460, r28
    1532:	61 e0       	ldi	r22, 0x01	; 1
    1534:	89 a9       	ldd	r24, Y+49	; 0x31
    1536:	0e 94 ed 16 	call	0x2dda	; 0x2dda <pinMode>
    153a:	95 b1       	in	r25, 0x05	; 5
    153c:	8a a5       	ldd	r24, Y+42	; 0x2a
    153e:	80 95       	com	r24
    1540:	89 23       	and	r24, r25
    1542:	85 b9       	out	0x05, r24	; 5
    1544:	61 e0       	ldi	r22, 0x01	; 1
    1546:	8a a9       	ldd	r24, Y+50	; 0x32
    1548:	0e 94 ed 16 	call	0x2dda	; 0x2dda <pinMode>
    154c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    154e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1550:	90 81       	ld	r25, Z
    1552:	8b a5       	ldd	r24, Y+43	; 0x2b
    1554:	80 95       	com	r24
    1556:	89 23       	and	r24, r25
    1558:	80 83       	st	Z, r24
    155a:	61 e0       	ldi	r22, 0x01	; 1
    155c:	8b a9       	ldd	r24, Y+51	; 0x33
    155e:	0e 94 ed 16 	call	0x2dda	; 0x2dda <pinMode>
    1562:	e8 a1       	ldd	r30, Y+32	; 0x20
    1564:	f9 a1       	ldd	r31, Y+33	; 0x21
    1566:	90 81       	ld	r25, Z
    1568:	8c a5       	ldd	r24, Y+44	; 0x2c
    156a:	89 2b       	or	r24, r25
    156c:	80 83       	st	Z, r24
    156e:	61 e0       	ldi	r22, 0x01	; 1
    1570:	8c a9       	ldd	r24, Y+52	; 0x34
    1572:	0e 94 ed 16 	call	0x2dda	; 0x2dda <pinMode>
    1576:	ea a1       	ldd	r30, Y+34	; 0x22
    1578:	fb a1       	ldd	r31, Y+35	; 0x23
    157a:	90 81       	ld	r25, Z
    157c:	8d a5       	ldd	r24, Y+45	; 0x2d
    157e:	80 95       	com	r24
    1580:	89 23       	and	r24, r25
    1582:	80 83       	st	Z, r24
    1584:	61 e0       	ldi	r22, 0x01	; 1
    1586:	8d a9       	ldd	r24, Y+53	; 0x35
    1588:	0e 94 ed 16 	call	0x2dda	; 0x2dda <pinMode>
    158c:	ec a1       	ldd	r30, Y+36	; 0x24
    158e:	fd a1       	ldd	r31, Y+37	; 0x25
    1590:	90 81       	ld	r25, Z
    1592:	8e a5       	ldd	r24, Y+46	; 0x2e
    1594:	80 95       	com	r24
    1596:	89 23       	and	r24, r25
    1598:	80 83       	st	Z, r24
    159a:	61 e0       	ldi	r22, 0x01	; 1
    159c:	8e a9       	ldd	r24, Y+54	; 0x36
    159e:	0e 94 ed 16 	call	0x2dda	; 0x2dda <pinMode>
    15a2:	ee a1       	ldd	r30, Y+38	; 0x26
    15a4:	ff a1       	ldd	r31, Y+39	; 0x27
    15a6:	90 81       	ld	r25, Z
    15a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    15aa:	80 95       	com	r24
    15ac:	89 23       	and	r24, r25
    15ae:	80 83       	st	Z, r24
    15b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15b2:	89 30       	cpi	r24, 0x09	; 9
    15b4:	58 f0       	brcs	.+22     	; 0x15cc <_ZN14RGBmatrixPanel5beginEv+0xc4>
    15b6:	61 e0       	ldi	r22, 0x01	; 1
    15b8:	8f a9       	ldd	r24, Y+55	; 0x37
    15ba:	0e 94 ed 16 	call	0x2dda	; 0x2dda <pinMode>
    15be:	e8 a5       	ldd	r30, Y+40	; 0x28
    15c0:	f9 a5       	ldd	r31, Y+41	; 0x29
    15c2:	90 81       	ld	r25, Z
    15c4:	88 a9       	ldd	r24, Y+48	; 0x30
    15c6:	80 95       	com	r24
    15c8:	89 23       	and	r24, r25
    15ca:	80 83       	st	Z, r24
    15cc:	8c ef       	ldi	r24, 0xFC	; 252
    15ce:	81 b9       	out	0x01, r24	; 1
    15d0:	12 b8       	out	0x02, r1	; 2
    15d2:	82 e0       	ldi	r24, 0x02	; 2
    15d4:	80 93 80 00 	sts	0x0080, r24
    15d8:	89 e1       	ldi	r24, 0x19	; 25
    15da:	80 93 81 00 	sts	0x0081, r24
    15de:	84 e6       	ldi	r24, 0x64	; 100
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	90 93 87 00 	sts	0x0087, r25
    15e6:	80 93 86 00 	sts	0x0086, r24
    15ea:	ef e6       	ldi	r30, 0x6F	; 111
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	81 60       	ori	r24, 0x01	; 1
    15f2:	80 83       	st	Z, r24
    15f4:	78 94       	sei
    15f6:	df 91       	pop	r29
    15f8:	cf 91       	pop	r28
    15fa:	08 95       	ret

000015fc <_ZN14RGBmatrixPanel8Color333Ehhh>:
    15fc:	82 2f       	mov	r24, r18
    15fe:	86 70       	andi	r24, 0x06	; 6
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	95 95       	asr	r25
    1604:	87 95       	ror	r24
    1606:	27 70       	andi	r18, 0x07	; 7
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	22 0f       	add	r18, r18
    160c:	33 1f       	adc	r19, r19
    160e:	22 0f       	add	r18, r18
    1610:	33 1f       	adc	r19, r19
    1612:	82 2b       	or	r24, r18
    1614:	93 2b       	or	r25, r19
    1616:	26 2f       	mov	r18, r22
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	32 2f       	mov	r19, r18
    161c:	22 27       	eor	r18, r18
    161e:	32 95       	swap	r19
    1620:	33 0f       	add	r19, r19
    1622:	30 7e       	andi	r19, 0xE0	; 224
    1624:	82 2b       	or	r24, r18
    1626:	93 2b       	or	r25, r19
    1628:	24 2f       	mov	r18, r20
    162a:	27 70       	andi	r18, 0x07	; 7
    162c:	92 2b       	or	r25, r18
    162e:	20 e2       	ldi	r18, 0x20	; 32
    1630:	42 9f       	mul	r20, r18
    1632:	a0 01       	movw	r20, r0
    1634:	11 24       	eor	r1, r1
    1636:	55 27       	eor	r21, r21
    1638:	84 2b       	or	r24, r20
    163a:	95 2b       	or	r25, r21
    163c:	66 70       	andi	r22, 0x06	; 6
    163e:	70 e0       	ldi	r23, 0x00	; 0
    1640:	76 2f       	mov	r23, r22
    1642:	66 27       	eor	r22, r22
    1644:	77 0f       	add	r23, r23
    1646:	77 0f       	add	r23, r23
    1648:	86 2b       	or	r24, r22
    164a:	97 2b       	or	r25, r23
    164c:	08 95       	ret

0000164e <_ZN14RGBmatrixPanel13updateDisplayEv>:
// being issued to the LED matrix for the *next* bitplane and/or row
// while the *current* plane/row is being shown.  As a result, the
// counter variables change between past/present/future tense in mid-
// function...hopefully tenses are sufficiently commented.

void RGBmatrixPanel::updateDisplay(void) {
    164e:	0f 93       	push	r16
    1650:	1f 93       	push	r17
    1652:	cf 93       	push	r28
    1654:	df 93       	push	r29
    1656:	dc 01       	movw	r26, r24
  uint8_t  i, tick, tock, *ptr;
  uint16_t t, duration;

  *oeport  |= oepin;  // Disable LED output during row/plane switchover
    1658:	90 96       	adiw	r26, 0x20	; 32
    165a:	ed 91       	ld	r30, X+
    165c:	fc 91       	ld	r31, X
    165e:	91 97       	sbiw	r26, 0x21	; 33
    1660:	90 81       	ld	r25, Z
    1662:	9c 96       	adiw	r26, 0x2c	; 44
    1664:	8c 91       	ld	r24, X
    1666:	9c 97       	sbiw	r26, 0x2c	; 44
    1668:	89 2b       	or	r24, r25
    166a:	80 83       	st	Z, r24
  *latport |= latpin; // Latch data loaded during *prior* interrupt
    166c:	5e 96       	adiw	r26, 0x1e	; 30
    166e:	ed 91       	ld	r30, X+
    1670:	fc 91       	ld	r31, X
    1672:	5f 97       	sbiw	r26, 0x1f	; 31
    1674:	90 81       	ld	r25, Z
    1676:	9b 96       	adiw	r26, 0x2b	; 43
    1678:	8c 91       	ld	r24, X
    167a:	9b 97       	sbiw	r26, 0x2b	; 43
    167c:	89 2b       	or	r24, r25
    167e:	80 83       	st	Z, r24
  // This is because duration is the display time for the data loaded
  // on the PRIOR interrupt.  CALLOVERHEAD is subtracted from the
  // result because that time is implicit between the timer overflow
  // (interrupt triggered) and the initial LEDs-off line at the start
  // of this method.
  t = (nRows > 8) ? LOOPTIME : (LOOPTIME * 2);
    1680:	5b 96       	adiw	r26, 0x1b	; 27
    1682:	3c 91       	ld	r19, X
    1684:	5b 97       	sbiw	r26, 0x1b	; 27
    1686:	39 30       	cpi	r19, 0x09	; 9
    1688:	18 f0       	brcs	.+6      	; 0x1690 <_ZN14RGBmatrixPanel13updateDisplayEv+0x42>
    168a:	88 ec       	ldi	r24, 0xC8	; 200
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <_ZN14RGBmatrixPanel13updateDisplayEv+0x46>
    1690:	80 e9       	ldi	r24, 0x90	; 144
    1692:	91 e0       	ldi	r25, 0x01	; 1
  duration = ((t + CALLOVERHEAD * 2) << plane) - CALLOVERHEAD;
    1694:	d9 96       	adiw	r26, 0x39	; 57
    1696:	2c 91       	ld	r18, X
    1698:	d9 97       	sbiw	r26, 0x39	; 57
    169a:	88 58       	subi	r24, 0x88	; 136
    169c:	9f 4f       	sbci	r25, 0xFF	; 255
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <_ZN14RGBmatrixPanel13updateDisplayEv+0x56>
    16a0:	88 0f       	add	r24, r24
    16a2:	99 1f       	adc	r25, r25
    16a4:	2a 95       	dec	r18
    16a6:	e2 f7       	brpl	.-8      	; 0x16a0 <_ZN14RGBmatrixPanel13updateDisplayEv+0x52>
    16a8:	cc 97       	sbiw	r24, 0x3c	; 60
  // advancing to the next line.  While it might seem beneficial to
  // advance lines every time and interleave the planes to reduce
  // vertical scanning artifacts, in practice with this panel it causes
  // a green 'ghosting' effect on black pixels, a much worse artifact.

  if(++plane >= nPlanes) {      // Advance plane counter.  Maxed out?
    16aa:	d9 96       	adiw	r26, 0x39	; 57
    16ac:	2c 91       	ld	r18, X
    16ae:	d9 97       	sbiw	r26, 0x39	; 57
    16b0:	2f 5f       	subi	r18, 0xFF	; 255
    16b2:	d9 96       	adiw	r26, 0x39	; 57
    16b4:	2c 93       	st	X, r18
    16b6:	d9 97       	sbiw	r26, 0x39	; 57
    16b8:	24 30       	cpi	r18, 0x04	; 4
    16ba:	90 f1       	brcs	.+100    	; 0x1720 <_ZN14RGBmatrixPanel13updateDisplayEv+0xd2>
    plane = 0;                  // Yes, reset to plane 0, and
    16bc:	d9 96       	adiw	r26, 0x39	; 57
    16be:	1c 92       	st	X, r1
    16c0:	d9 97       	sbiw	r26, 0x39	; 57
    if(++row >= nRows) {        // advance row counter.  Maxed out?
    16c2:	d8 96       	adiw	r26, 0x38	; 56
    16c4:	2c 91       	ld	r18, X
    16c6:	d8 97       	sbiw	r26, 0x38	; 56
    16c8:	2f 5f       	subi	r18, 0xFF	; 255
    16ca:	d8 96       	adiw	r26, 0x38	; 56
    16cc:	2c 93       	st	X, r18
    16ce:	d8 97       	sbiw	r26, 0x38	; 56
    16d0:	23 17       	cp	r18, r19
    16d2:	08 f4       	brcc	.+2      	; 0x16d6 <_ZN14RGBmatrixPanel13updateDisplayEv+0x88>
    16d4:	9c c0       	rjmp	.+312    	; 0x180e <_ZN14RGBmatrixPanel13updateDisplayEv+0x1c0>
      row     = 0;              // Yes, reset row counter, then...
    16d6:	d8 96       	adiw	r26, 0x38	; 56
    16d8:	1c 92       	st	X, r1
    16da:	d8 97       	sbiw	r26, 0x38	; 56
      if(swapflag == true) {    // Swap front/back buffers if requested
    16dc:	5d 96       	adiw	r26, 0x1d	; 29
    16de:	2c 91       	ld	r18, X
    16e0:	5d 97       	sbiw	r26, 0x1d	; 29
    16e2:	22 23       	and	r18, r18
    16e4:	59 f0       	breq	.+22     	; 0x16fc <_ZN14RGBmatrixPanel13updateDisplayEv+0xae>
        backindex = 1 - backindex;
    16e6:	5c 96       	adiw	r26, 0x1c	; 28
    16e8:	3c 91       	ld	r19, X
    16ea:	5c 97       	sbiw	r26, 0x1c	; 28
    16ec:	21 e0       	ldi	r18, 0x01	; 1
    16ee:	23 1b       	sub	r18, r19
    16f0:	5c 96       	adiw	r26, 0x1c	; 28
    16f2:	2c 93       	st	X, r18
    16f4:	5c 97       	sbiw	r26, 0x1c	; 28
        swapflag  = false;
    16f6:	5d 96       	adiw	r26, 0x1d	; 29
    16f8:	1c 92       	st	X, r1
    16fa:	5d 97       	sbiw	r26, 0x1d	; 29
      }
      buffptr = matrixbuff[1-backindex]; // Reset into front buffer
    16fc:	5c 96       	adiw	r26, 0x1c	; 28
    16fe:	2c 91       	ld	r18, X
    1700:	5c 97       	sbiw	r26, 0x1c	; 28
    1702:	e1 e0       	ldi	r30, 0x01	; 1
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	e2 1b       	sub	r30, r18
    1708:	f1 09       	sbc	r31, r1
    170a:	ee 0f       	add	r30, r30
    170c:	ff 1f       	adc	r31, r31
    170e:	ea 0f       	add	r30, r26
    1710:	fb 1f       	adc	r31, r27
    1712:	27 89       	ldd	r18, Z+23	; 0x17
    1714:	30 8d       	ldd	r19, Z+24	; 0x18
    1716:	db 96       	adiw	r26, 0x3b	; 59
    1718:	3c 93       	st	X, r19
    171a:	2e 93       	st	-X, r18
    171c:	da 97       	sbiw	r26, 0x3a	; 58
    171e:	77 c0       	rjmp	.+238    	; 0x180e <_ZN14RGBmatrixPanel13updateDisplayEv+0x1c0>
    }
  } else if(plane == 1) {
    1720:	d9 96       	adiw	r26, 0x39	; 57
    1722:	2c 91       	ld	r18, X
    1724:	d9 97       	sbiw	r26, 0x39	; 57
    1726:	21 30       	cpi	r18, 0x01	; 1
    1728:	09 f0       	breq	.+2      	; 0x172c <_ZN14RGBmatrixPanel13updateDisplayEv+0xde>
    172a:	71 c0       	rjmp	.+226    	; 0x180e <_ZN14RGBmatrixPanel13updateDisplayEv+0x1c0>
    // Plane 0 was loaded on prior interrupt invocation and is about to
    // latch now, so update the row address lines before we do that:
    if(row & 0x1)   *addraport |=  addrapin;
    172c:	d8 96       	adiw	r26, 0x38	; 56
    172e:	2c 91       	ld	r18, X
    1730:	d8 97       	sbiw	r26, 0x38	; 56
    1732:	20 ff       	sbrs	r18, 0
    1734:	0b c0       	rjmp	.+22     	; 0x174c <_ZN14RGBmatrixPanel13updateDisplayEv+0xfe>
    1736:	92 96       	adiw	r26, 0x22	; 34
    1738:	ed 91       	ld	r30, X+
    173a:	fc 91       	ld	r31, X
    173c:	93 97       	sbiw	r26, 0x23	; 35
    173e:	30 81       	ld	r19, Z
    1740:	9d 96       	adiw	r26, 0x2d	; 45
    1742:	2c 91       	ld	r18, X
    1744:	9d 97       	sbiw	r26, 0x2d	; 45
    1746:	23 2b       	or	r18, r19
    1748:	20 83       	st	Z, r18
    174a:	0b c0       	rjmp	.+22     	; 0x1762 <_ZN14RGBmatrixPanel13updateDisplayEv+0x114>
    else            *addraport &= ~addrapin;
    174c:	92 96       	adiw	r26, 0x22	; 34
    174e:	ed 91       	ld	r30, X+
    1750:	fc 91       	ld	r31, X
    1752:	93 97       	sbiw	r26, 0x23	; 35
    1754:	30 81       	ld	r19, Z
    1756:	9d 96       	adiw	r26, 0x2d	; 45
    1758:	2c 91       	ld	r18, X
    175a:	9d 97       	sbiw	r26, 0x2d	; 45
    175c:	20 95       	com	r18
    175e:	23 23       	and	r18, r19
    1760:	20 83       	st	Z, r18
    if(row & 0x2)   *addrbport |=  addrbpin;
    1762:	d8 96       	adiw	r26, 0x38	; 56
    1764:	2c 91       	ld	r18, X
    1766:	d8 97       	sbiw	r26, 0x38	; 56
    1768:	21 ff       	sbrs	r18, 1
    176a:	0b c0       	rjmp	.+22     	; 0x1782 <_ZN14RGBmatrixPanel13updateDisplayEv+0x134>
    176c:	94 96       	adiw	r26, 0x24	; 36
    176e:	ed 91       	ld	r30, X+
    1770:	fc 91       	ld	r31, X
    1772:	95 97       	sbiw	r26, 0x25	; 37
    1774:	30 81       	ld	r19, Z
    1776:	9e 96       	adiw	r26, 0x2e	; 46
    1778:	2c 91       	ld	r18, X
    177a:	9e 97       	sbiw	r26, 0x2e	; 46
    177c:	23 2b       	or	r18, r19
    177e:	20 83       	st	Z, r18
    1780:	0b c0       	rjmp	.+22     	; 0x1798 <_ZN14RGBmatrixPanel13updateDisplayEv+0x14a>
    else            *addrbport &= ~addrbpin;
    1782:	94 96       	adiw	r26, 0x24	; 36
    1784:	ed 91       	ld	r30, X+
    1786:	fc 91       	ld	r31, X
    1788:	95 97       	sbiw	r26, 0x25	; 37
    178a:	30 81       	ld	r19, Z
    178c:	9e 96       	adiw	r26, 0x2e	; 46
    178e:	2c 91       	ld	r18, X
    1790:	9e 97       	sbiw	r26, 0x2e	; 46
    1792:	20 95       	com	r18
    1794:	23 23       	and	r18, r19
    1796:	20 83       	st	Z, r18
    if(row & 0x4)   *addrcport |=  addrcpin;
    1798:	d8 96       	adiw	r26, 0x38	; 56
    179a:	2c 91       	ld	r18, X
    179c:	d8 97       	sbiw	r26, 0x38	; 56
    179e:	22 ff       	sbrs	r18, 2
    17a0:	0b c0       	rjmp	.+22     	; 0x17b8 <_ZN14RGBmatrixPanel13updateDisplayEv+0x16a>
    17a2:	96 96       	adiw	r26, 0x26	; 38
    17a4:	ed 91       	ld	r30, X+
    17a6:	fc 91       	ld	r31, X
    17a8:	97 97       	sbiw	r26, 0x27	; 39
    17aa:	30 81       	ld	r19, Z
    17ac:	9f 96       	adiw	r26, 0x2f	; 47
    17ae:	2c 91       	ld	r18, X
    17b0:	9f 97       	sbiw	r26, 0x2f	; 47
    17b2:	23 2b       	or	r18, r19
    17b4:	20 83       	st	Z, r18
    17b6:	0b c0       	rjmp	.+22     	; 0x17ce <_ZN14RGBmatrixPanel13updateDisplayEv+0x180>
    else            *addrcport &= ~addrcpin;
    17b8:	96 96       	adiw	r26, 0x26	; 38
    17ba:	ed 91       	ld	r30, X+
    17bc:	fc 91       	ld	r31, X
    17be:	97 97       	sbiw	r26, 0x27	; 39
    17c0:	30 81       	ld	r19, Z
    17c2:	9f 96       	adiw	r26, 0x2f	; 47
    17c4:	2c 91       	ld	r18, X
    17c6:	9f 97       	sbiw	r26, 0x2f	; 47
    17c8:	20 95       	com	r18
    17ca:	23 23       	and	r18, r19
    17cc:	20 83       	st	Z, r18
    if(nRows > 8) {
    17ce:	5b 96       	adiw	r26, 0x1b	; 27
    17d0:	2c 91       	ld	r18, X
    17d2:	5b 97       	sbiw	r26, 0x1b	; 27
    17d4:	29 30       	cpi	r18, 0x09	; 9
    17d6:	d8 f0       	brcs	.+54     	; 0x180e <_ZN14RGBmatrixPanel13updateDisplayEv+0x1c0>
      if(row & 0x8) *addrdport |=  addrdpin;
    17d8:	d8 96       	adiw	r26, 0x38	; 56
    17da:	2c 91       	ld	r18, X
    17dc:	d8 97       	sbiw	r26, 0x38	; 56
    17de:	23 ff       	sbrs	r18, 3
    17e0:	0b c0       	rjmp	.+22     	; 0x17f8 <_ZN14RGBmatrixPanel13updateDisplayEv+0x1aa>
    17e2:	98 96       	adiw	r26, 0x28	; 40
    17e4:	ed 91       	ld	r30, X+
    17e6:	fc 91       	ld	r31, X
    17e8:	99 97       	sbiw	r26, 0x29	; 41
    17ea:	30 81       	ld	r19, Z
    17ec:	d0 96       	adiw	r26, 0x30	; 48
    17ee:	2c 91       	ld	r18, X
    17f0:	d0 97       	sbiw	r26, 0x30	; 48
    17f2:	23 2b       	or	r18, r19
    17f4:	20 83       	st	Z, r18
    17f6:	0b c0       	rjmp	.+22     	; 0x180e <_ZN14RGBmatrixPanel13updateDisplayEv+0x1c0>
      else          *addrdport &= ~addrdpin;
    17f8:	98 96       	adiw	r26, 0x28	; 40
    17fa:	ed 91       	ld	r30, X+
    17fc:	fc 91       	ld	r31, X
    17fe:	99 97       	sbiw	r26, 0x29	; 41
    1800:	30 81       	ld	r19, Z
    1802:	d0 96       	adiw	r26, 0x30	; 48
    1804:	2c 91       	ld	r18, X
    1806:	d0 97       	sbiw	r26, 0x30	; 48
    1808:	20 95       	com	r18
    180a:	23 23       	and	r18, r19
    180c:	20 83       	st	Z, r18
    }
  }

  // buffptr, being 'volatile' type, doesn't take well to optimization.
  // A local register copy can speed some things up:
  ptr = (uint8_t *)buffptr;
    180e:	da 96       	adiw	r26, 0x3a	; 58
    1810:	ed 91       	ld	r30, X+
    1812:	fc 91       	ld	r31, X
    1814:	db 97       	sbiw	r26, 0x3b	; 59

  ICR1      = duration; // Set interval for next interrupt
    1816:	90 93 87 00 	sts	0x0087, r25
    181a:	80 93 86 00 	sts	0x0086, r24
  TCNT1     = 0;        // Restart interrupt timer
    181e:	10 92 85 00 	sts	0x0085, r1
    1822:	10 92 84 00 	sts	0x0084, r1
  *oeport  &= ~oepin;   // Re-enable output
    1826:	90 96       	adiw	r26, 0x20	; 32
    1828:	cd 91       	ld	r28, X+
    182a:	dc 91       	ld	r29, X
    182c:	91 97       	sbiw	r26, 0x21	; 33
    182e:	98 81       	ld	r25, Y
    1830:	9c 96       	adiw	r26, 0x2c	; 44
    1832:	8c 91       	ld	r24, X
    1834:	9c 97       	sbiw	r26, 0x2c	; 44
    1836:	80 95       	com	r24
    1838:	89 23       	and	r24, r25
    183a:	88 83       	st	Y, r24
  *latport &= ~latpin;  // Latch down
    183c:	5e 96       	adiw	r26, 0x1e	; 30
    183e:	cd 91       	ld	r28, X+
    1840:	dc 91       	ld	r29, X
    1842:	5f 97       	sbiw	r26, 0x1f	; 31
    1844:	98 81       	ld	r25, Y
    1846:	9b 96       	adiw	r26, 0x2b	; 43
    1848:	8c 91       	ld	r24, X
    184a:	9b 97       	sbiw	r26, 0x2b	; 43
    184c:	80 95       	com	r24
    184e:	89 23       	and	r24, r25
    1850:	88 83       	st	Y, r24
  // not have to load/modify/store bits every single time.  It's a
  // somewhat rude trick that ONLY works because the interrupt
  // handler is set ISR_BLOCK, halting any other interrupts that
  // might otherwise also be twiddling the port at the same time
  // (else this would clobber them).
  tock = SCLKPORT;
    1852:	65 b1       	in	r22, 0x05	; 5
  tick = tock | sclkpin;
    1854:	9a 96       	adiw	r26, 0x2a	; 42
    1856:	7c 91       	ld	r23, X
    1858:	9a 97       	sbiw	r26, 0x2a	; 42
    185a:	76 2b       	or	r23, r22

  if(plane > 0) { // 188 ticks from TCNT1=0 (above) to end of function
    185c:	d9 96       	adiw	r26, 0x39	; 57
    185e:	8c 91       	ld	r24, X
    1860:	d9 97       	sbiw	r26, 0x39	; 57
    1862:	81 11       	cpse	r24, r1
    1864:	09 c0       	rjmp	.+18     	; 0x1878 <_ZN14RGBmatrixPanel13updateDisplayEv+0x22a>
    // the slack, with all its data packed into the 2 least bits not
    // used by the other planes.  This works because the unpacking and
    // output for plane 0 is handled while plane 3 is being displayed...
    // because binary coded modulation is used (not PWM), that plane
    // has the longest display interval, so the extra work fits.
    for(i=0; i<_width; i++) {
    1866:	18 96       	adiw	r26, 0x08	; 8
    1868:	8d 91       	ld	r24, X+
    186a:	9c 91       	ld	r25, X
    186c:	19 97       	sbiw	r26, 0x09	; 9
    186e:	18 16       	cp	r1, r24
    1870:	19 06       	cpc	r1, r25
    1872:	0c f4       	brge	.+2      	; 0x1876 <_ZN14RGBmatrixPanel13updateDisplayEv+0x228>
    1874:	0e c1       	rjmp	.+540    	; 0x1a92 <_ZN14RGBmatrixPanel13updateDisplayEv+0x444>
    1876:	3c c1       	rjmp	.+632    	; 0x1af0 <_ZN14RGBmatrixPanel13updateDisplayEv+0x4a2>
         [clk]  "I" (_SFR_IO_ADDR(SCLKPORT)), \
         [tick] "r" (tick),                   \
         [tock] "r" (tock));

    // Loop is unrolled for speed:
    pew pew pew pew pew pew pew pew
    1878:	01 90       	ld	r0, Z+
    187a:	02 b8       	out	0x02, r0	; 2
    187c:	75 b9       	out	0x05, r23	; 5
    187e:	65 b9       	out	0x05, r22	; 5
    1880:	01 90       	ld	r0, Z+
    1882:	02 b8       	out	0x02, r0	; 2
    1884:	75 b9       	out	0x05, r23	; 5
    1886:	65 b9       	out	0x05, r22	; 5
    1888:	01 90       	ld	r0, Z+
    188a:	02 b8       	out	0x02, r0	; 2
    188c:	75 b9       	out	0x05, r23	; 5
    188e:	65 b9       	out	0x05, r22	; 5
    1890:	01 90       	ld	r0, Z+
    1892:	02 b8       	out	0x02, r0	; 2
    1894:	75 b9       	out	0x05, r23	; 5
    1896:	65 b9       	out	0x05, r22	; 5
    1898:	01 90       	ld	r0, Z+
    189a:	02 b8       	out	0x02, r0	; 2
    189c:	75 b9       	out	0x05, r23	; 5
    189e:	65 b9       	out	0x05, r22	; 5
    18a0:	01 90       	ld	r0, Z+
    18a2:	02 b8       	out	0x02, r0	; 2
    18a4:	75 b9       	out	0x05, r23	; 5
    18a6:	65 b9       	out	0x05, r22	; 5
    18a8:	01 90       	ld	r0, Z+
    18aa:	02 b8       	out	0x02, r0	; 2
    18ac:	75 b9       	out	0x05, r23	; 5
    18ae:	65 b9       	out	0x05, r22	; 5
    18b0:	01 90       	ld	r0, Z+
    18b2:	02 b8       	out	0x02, r0	; 2
    18b4:	75 b9       	out	0x05, r23	; 5
    18b6:	65 b9       	out	0x05, r22	; 5
    pew pew pew pew pew pew pew pew
    18b8:	01 90       	ld	r0, Z+
    18ba:	02 b8       	out	0x02, r0	; 2
    18bc:	75 b9       	out	0x05, r23	; 5
    18be:	65 b9       	out	0x05, r22	; 5
    18c0:	01 90       	ld	r0, Z+
    18c2:	02 b8       	out	0x02, r0	; 2
    18c4:	75 b9       	out	0x05, r23	; 5
    18c6:	65 b9       	out	0x05, r22	; 5
    18c8:	01 90       	ld	r0, Z+
    18ca:	02 b8       	out	0x02, r0	; 2
    18cc:	75 b9       	out	0x05, r23	; 5
    18ce:	65 b9       	out	0x05, r22	; 5
    18d0:	01 90       	ld	r0, Z+
    18d2:	02 b8       	out	0x02, r0	; 2
    18d4:	75 b9       	out	0x05, r23	; 5
    18d6:	65 b9       	out	0x05, r22	; 5
    18d8:	01 90       	ld	r0, Z+
    18da:	02 b8       	out	0x02, r0	; 2
    18dc:	75 b9       	out	0x05, r23	; 5
    18de:	65 b9       	out	0x05, r22	; 5
    18e0:	01 90       	ld	r0, Z+
    18e2:	02 b8       	out	0x02, r0	; 2
    18e4:	75 b9       	out	0x05, r23	; 5
    18e6:	65 b9       	out	0x05, r22	; 5
    18e8:	01 90       	ld	r0, Z+
    18ea:	02 b8       	out	0x02, r0	; 2
    18ec:	75 b9       	out	0x05, r23	; 5
    18ee:	65 b9       	out	0x05, r22	; 5
    18f0:	01 90       	ld	r0, Z+
    18f2:	02 b8       	out	0x02, r0	; 2
    18f4:	75 b9       	out	0x05, r23	; 5
    18f6:	65 b9       	out	0x05, r22	; 5
    pew pew pew pew pew pew pew pew
    18f8:	01 90       	ld	r0, Z+
    18fa:	02 b8       	out	0x02, r0	; 2
    18fc:	75 b9       	out	0x05, r23	; 5
    18fe:	65 b9       	out	0x05, r22	; 5
    1900:	01 90       	ld	r0, Z+
    1902:	02 b8       	out	0x02, r0	; 2
    1904:	75 b9       	out	0x05, r23	; 5
    1906:	65 b9       	out	0x05, r22	; 5
    1908:	01 90       	ld	r0, Z+
    190a:	02 b8       	out	0x02, r0	; 2
    190c:	75 b9       	out	0x05, r23	; 5
    190e:	65 b9       	out	0x05, r22	; 5
    1910:	01 90       	ld	r0, Z+
    1912:	02 b8       	out	0x02, r0	; 2
    1914:	75 b9       	out	0x05, r23	; 5
    1916:	65 b9       	out	0x05, r22	; 5
    1918:	01 90       	ld	r0, Z+
    191a:	02 b8       	out	0x02, r0	; 2
    191c:	75 b9       	out	0x05, r23	; 5
    191e:	65 b9       	out	0x05, r22	; 5
    1920:	01 90       	ld	r0, Z+
    1922:	02 b8       	out	0x02, r0	; 2
    1924:	75 b9       	out	0x05, r23	; 5
    1926:	65 b9       	out	0x05, r22	; 5
    1928:	01 90       	ld	r0, Z+
    192a:	02 b8       	out	0x02, r0	; 2
    192c:	75 b9       	out	0x05, r23	; 5
    192e:	65 b9       	out	0x05, r22	; 5
    1930:	01 90       	ld	r0, Z+
    1932:	02 b8       	out	0x02, r0	; 2
    1934:	75 b9       	out	0x05, r23	; 5
    1936:	65 b9       	out	0x05, r22	; 5
    pew pew pew pew pew pew pew pew
    1938:	01 90       	ld	r0, Z+
    193a:	02 b8       	out	0x02, r0	; 2
    193c:	75 b9       	out	0x05, r23	; 5
    193e:	65 b9       	out	0x05, r22	; 5
    1940:	01 90       	ld	r0, Z+
    1942:	02 b8       	out	0x02, r0	; 2
    1944:	75 b9       	out	0x05, r23	; 5
    1946:	65 b9       	out	0x05, r22	; 5
    1948:	01 90       	ld	r0, Z+
    194a:	02 b8       	out	0x02, r0	; 2
    194c:	75 b9       	out	0x05, r23	; 5
    194e:	65 b9       	out	0x05, r22	; 5
    1950:	01 90       	ld	r0, Z+
    1952:	02 b8       	out	0x02, r0	; 2
    1954:	75 b9       	out	0x05, r23	; 5
    1956:	65 b9       	out	0x05, r22	; 5
    1958:	01 90       	ld	r0, Z+
    195a:	02 b8       	out	0x02, r0	; 2
    195c:	75 b9       	out	0x05, r23	; 5
    195e:	65 b9       	out	0x05, r22	; 5
    1960:	01 90       	ld	r0, Z+
    1962:	02 b8       	out	0x02, r0	; 2
    1964:	75 b9       	out	0x05, r23	; 5
    1966:	65 b9       	out	0x05, r22	; 5
    1968:	01 90       	ld	r0, Z+
    196a:	02 b8       	out	0x02, r0	; 2
    196c:	75 b9       	out	0x05, r23	; 5
    196e:	65 b9       	out	0x05, r22	; 5
    1970:	01 90       	ld	r0, Z+
    1972:	02 b8       	out	0x02, r0	; 2
    1974:	75 b9       	out	0x05, r23	; 5
    1976:	65 b9       	out	0x05, r22	; 5

      if (_width == 64) {
    1978:	18 96       	adiw	r26, 0x08	; 8
    197a:	8d 91       	ld	r24, X+
    197c:	9c 91       	ld	r25, X
    197e:	19 97       	sbiw	r26, 0x09	; 9
    1980:	80 34       	cpi	r24, 0x40	; 64
    1982:	91 05       	cpc	r25, r1
    1984:	09 f0       	breq	.+2      	; 0x1988 <_ZN14RGBmatrixPanel13updateDisplayEv+0x33a>
    1986:	80 c0       	rjmp	.+256    	; 0x1a88 <_ZN14RGBmatrixPanel13updateDisplayEv+0x43a>
    pew pew pew pew pew pew pew pew
    1988:	01 90       	ld	r0, Z+
    198a:	02 b8       	out	0x02, r0	; 2
    198c:	75 b9       	out	0x05, r23	; 5
    198e:	65 b9       	out	0x05, r22	; 5
    1990:	01 90       	ld	r0, Z+
    1992:	02 b8       	out	0x02, r0	; 2
    1994:	75 b9       	out	0x05, r23	; 5
    1996:	65 b9       	out	0x05, r22	; 5
    1998:	01 90       	ld	r0, Z+
    199a:	02 b8       	out	0x02, r0	; 2
    199c:	75 b9       	out	0x05, r23	; 5
    199e:	65 b9       	out	0x05, r22	; 5
    19a0:	01 90       	ld	r0, Z+
    19a2:	02 b8       	out	0x02, r0	; 2
    19a4:	75 b9       	out	0x05, r23	; 5
    19a6:	65 b9       	out	0x05, r22	; 5
    19a8:	01 90       	ld	r0, Z+
    19aa:	02 b8       	out	0x02, r0	; 2
    19ac:	75 b9       	out	0x05, r23	; 5
    19ae:	65 b9       	out	0x05, r22	; 5
    19b0:	01 90       	ld	r0, Z+
    19b2:	02 b8       	out	0x02, r0	; 2
    19b4:	75 b9       	out	0x05, r23	; 5
    19b6:	65 b9       	out	0x05, r22	; 5
    19b8:	01 90       	ld	r0, Z+
    19ba:	02 b8       	out	0x02, r0	; 2
    19bc:	75 b9       	out	0x05, r23	; 5
    19be:	65 b9       	out	0x05, r22	; 5
    19c0:	01 90       	ld	r0, Z+
    19c2:	02 b8       	out	0x02, r0	; 2
    19c4:	75 b9       	out	0x05, r23	; 5
    19c6:	65 b9       	out	0x05, r22	; 5
    pew pew pew pew pew pew pew pew
    19c8:	01 90       	ld	r0, Z+
    19ca:	02 b8       	out	0x02, r0	; 2
    19cc:	75 b9       	out	0x05, r23	; 5
    19ce:	65 b9       	out	0x05, r22	; 5
    19d0:	01 90       	ld	r0, Z+
    19d2:	02 b8       	out	0x02, r0	; 2
    19d4:	75 b9       	out	0x05, r23	; 5
    19d6:	65 b9       	out	0x05, r22	; 5
    19d8:	01 90       	ld	r0, Z+
    19da:	02 b8       	out	0x02, r0	; 2
    19dc:	75 b9       	out	0x05, r23	; 5
    19de:	65 b9       	out	0x05, r22	; 5
    19e0:	01 90       	ld	r0, Z+
    19e2:	02 b8       	out	0x02, r0	; 2
    19e4:	75 b9       	out	0x05, r23	; 5
    19e6:	65 b9       	out	0x05, r22	; 5
    19e8:	01 90       	ld	r0, Z+
    19ea:	02 b8       	out	0x02, r0	; 2
    19ec:	75 b9       	out	0x05, r23	; 5
    19ee:	65 b9       	out	0x05, r22	; 5
    19f0:	01 90       	ld	r0, Z+
    19f2:	02 b8       	out	0x02, r0	; 2
    19f4:	75 b9       	out	0x05, r23	; 5
    19f6:	65 b9       	out	0x05, r22	; 5
    19f8:	01 90       	ld	r0, Z+
    19fa:	02 b8       	out	0x02, r0	; 2
    19fc:	75 b9       	out	0x05, r23	; 5
    19fe:	65 b9       	out	0x05, r22	; 5
    1a00:	01 90       	ld	r0, Z+
    1a02:	02 b8       	out	0x02, r0	; 2
    1a04:	75 b9       	out	0x05, r23	; 5
    1a06:	65 b9       	out	0x05, r22	; 5
    pew pew pew pew pew pew pew pew
    1a08:	01 90       	ld	r0, Z+
    1a0a:	02 b8       	out	0x02, r0	; 2
    1a0c:	75 b9       	out	0x05, r23	; 5
    1a0e:	65 b9       	out	0x05, r22	; 5
    1a10:	01 90       	ld	r0, Z+
    1a12:	02 b8       	out	0x02, r0	; 2
    1a14:	75 b9       	out	0x05, r23	; 5
    1a16:	65 b9       	out	0x05, r22	; 5
    1a18:	01 90       	ld	r0, Z+
    1a1a:	02 b8       	out	0x02, r0	; 2
    1a1c:	75 b9       	out	0x05, r23	; 5
    1a1e:	65 b9       	out	0x05, r22	; 5
    1a20:	01 90       	ld	r0, Z+
    1a22:	02 b8       	out	0x02, r0	; 2
    1a24:	75 b9       	out	0x05, r23	; 5
    1a26:	65 b9       	out	0x05, r22	; 5
    1a28:	01 90       	ld	r0, Z+
    1a2a:	02 b8       	out	0x02, r0	; 2
    1a2c:	75 b9       	out	0x05, r23	; 5
    1a2e:	65 b9       	out	0x05, r22	; 5
    1a30:	01 90       	ld	r0, Z+
    1a32:	02 b8       	out	0x02, r0	; 2
    1a34:	75 b9       	out	0x05, r23	; 5
    1a36:	65 b9       	out	0x05, r22	; 5
    1a38:	01 90       	ld	r0, Z+
    1a3a:	02 b8       	out	0x02, r0	; 2
    1a3c:	75 b9       	out	0x05, r23	; 5
    1a3e:	65 b9       	out	0x05, r22	; 5
    1a40:	01 90       	ld	r0, Z+
    1a42:	02 b8       	out	0x02, r0	; 2
    1a44:	75 b9       	out	0x05, r23	; 5
    1a46:	65 b9       	out	0x05, r22	; 5
    pew pew pew pew pew pew pew pew
    1a48:	01 90       	ld	r0, Z+
    1a4a:	02 b8       	out	0x02, r0	; 2
    1a4c:	75 b9       	out	0x05, r23	; 5
    1a4e:	65 b9       	out	0x05, r22	; 5
    1a50:	01 90       	ld	r0, Z+
    1a52:	02 b8       	out	0x02, r0	; 2
    1a54:	75 b9       	out	0x05, r23	; 5
    1a56:	65 b9       	out	0x05, r22	; 5
    1a58:	01 90       	ld	r0, Z+
    1a5a:	02 b8       	out	0x02, r0	; 2
    1a5c:	75 b9       	out	0x05, r23	; 5
    1a5e:	65 b9       	out	0x05, r22	; 5
    1a60:	01 90       	ld	r0, Z+
    1a62:	02 b8       	out	0x02, r0	; 2
    1a64:	75 b9       	out	0x05, r23	; 5
    1a66:	65 b9       	out	0x05, r22	; 5
    1a68:	01 90       	ld	r0, Z+
    1a6a:	02 b8       	out	0x02, r0	; 2
    1a6c:	75 b9       	out	0x05, r23	; 5
    1a6e:	65 b9       	out	0x05, r22	; 5
    1a70:	01 90       	ld	r0, Z+
    1a72:	02 b8       	out	0x02, r0	; 2
    1a74:	75 b9       	out	0x05, r23	; 5
    1a76:	65 b9       	out	0x05, r22	; 5
    1a78:	01 90       	ld	r0, Z+
    1a7a:	02 b8       	out	0x02, r0	; 2
    1a7c:	75 b9       	out	0x05, r23	; 5
    1a7e:	65 b9       	out	0x05, r22	; 5
    1a80:	01 90       	ld	r0, Z+
    1a82:	02 b8       	out	0x02, r0	; 2
    1a84:	75 b9       	out	0x05, r23	; 5
    1a86:	65 b9       	out	0x05, r22	; 5
      }

    buffptr = ptr; //+= 32;
    1a88:	db 96       	adiw	r26, 0x3b	; 59
    1a8a:	fc 93       	st	X, r31
    1a8c:	ee 93       	st	-X, r30
    1a8e:	da 97       	sbiw	r26, 0x3a	; 58
    1a90:	2f c0       	rjmp	.+94     	; 0x1af0 <_ZN14RGBmatrixPanel13updateDisplayEv+0x4a2>
    // the slack, with all its data packed into the 2 least bits not
    // used by the other planes.  This works because the unpacking and
    // output for plane 0 is handled while plane 3 is being displayed...
    // because binary coded modulation is used (not PWM), that plane
    // has the longest display interval, so the extra work fits.
    for(i=0; i<_width; i++) {
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	10 e0       	ldi	r17, 0x00	; 0
      DATAPORT =
        ( ptr[i]    << 6)         |
        ((ptr[i+_width] << 4) & 0x30) |
    1a98:	28 0f       	add	r18, r24
    1a9a:	39 1f       	adc	r19, r25
    1a9c:	ef 01       	movw	r28, r30
    1a9e:	c2 0f       	add	r28, r18
    1aa0:	d3 1f       	adc	r29, r19
    1aa2:	48 81       	ld	r20, Y
    1aa4:	c0 e1       	ldi	r28, 0x10	; 16
    1aa6:	4c 9f       	mul	r20, r28
    1aa8:	a0 01       	movw	r20, r0
    1aaa:	11 24       	eor	r1, r1
        ((ptr[i+_width*2] << 2) & 0x0C);
    1aac:	04 2f       	mov	r16, r20
    1aae:	00 73       	andi	r16, 0x30	; 48
    // output for plane 0 is handled while plane 3 is being displayed...
    // because binary coded modulation is used (not PWM), that plane
    // has the longest display interval, so the extra work fits.
    for(i=0; i<_width; i++) {
      DATAPORT =
        ( ptr[i]    << 6)         |
    1ab0:	ef 01       	movw	r28, r30
    1ab2:	c1 0f       	add	r28, r17
    1ab4:	d1 1d       	adc	r29, r1
    1ab6:	48 81       	ld	r20, Y
    1ab8:	c0 e4       	ldi	r28, 0x40	; 64
    1aba:	4c 9f       	mul	r20, r28
    1abc:	a0 01       	movw	r20, r0
    1abe:	11 24       	eor	r1, r1
        ((ptr[i+_width] << 4) & 0x30) |
        ((ptr[i+_width*2] << 2) & 0x0C);
    1ac0:	40 2b       	or	r20, r16
    1ac2:	8e 0f       	add	r24, r30
    1ac4:	9f 1f       	adc	r25, r31
    1ac6:	ec 01       	movw	r28, r24
    1ac8:	c2 0f       	add	r28, r18
    1aca:	d3 1f       	adc	r29, r19
    1acc:	88 81       	ld	r24, Y
    1ace:	88 0f       	add	r24, r24
    1ad0:	88 0f       	add	r24, r24
    1ad2:	8c 70       	andi	r24, 0x0C	; 12
    1ad4:	48 2b       	or	r20, r24
    1ad6:	42 b9       	out	0x02, r20	; 2
      SCLKPORT = tick; // Clock lo
    1ad8:	75 b9       	out	0x05, r23	; 5
      SCLKPORT = tock; // Clock hi
    1ada:	65 b9       	out	0x05, r22	; 5
    // the slack, with all its data packed into the 2 least bits not
    // used by the other planes.  This works because the unpacking and
    // output for plane 0 is handled while plane 3 is being displayed...
    // because binary coded modulation is used (not PWM), that plane
    // has the longest display interval, so the extra work fits.
    for(i=0; i<_width; i++) {
    1adc:	1f 5f       	subi	r17, 0xFF	; 255
    1ade:	21 2f       	mov	r18, r17
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	18 96       	adiw	r26, 0x08	; 8
    1ae4:	8d 91       	ld	r24, X+
    1ae6:	9c 91       	ld	r25, X
    1ae8:	19 97       	sbiw	r26, 0x09	; 9
    1aea:	28 17       	cp	r18, r24
    1aec:	39 07       	cpc	r19, r25
    1aee:	a4 f2       	brlt	.-88     	; 0x1a98 <_ZN14RGBmatrixPanel13updateDisplayEv+0x44a>
        ((ptr[i+_width*2] << 2) & 0x0C);
      SCLKPORT = tick; // Clock lo
      SCLKPORT = tock; // Clock hi
    } 
  }
}
    1af0:	df 91       	pop	r29
    1af2:	cf 91       	pop	r28
    1af4:	1f 91       	pop	r17
    1af6:	0f 91       	pop	r16
    1af8:	08 95       	ret

00001afa <__vector_20>:
  Serial.println("\n};");
}

// -------------------- Interrupt handler stuff --------------------

ISR(TIMER1_OVF_vect, ISR_BLOCK) { // ISR_BLOCK important -- see notes later
    1afa:	1f 92       	push	r1
    1afc:	0f 92       	push	r0
    1afe:	0f b6       	in	r0, 0x3f	; 63
    1b00:	0f 92       	push	r0
    1b02:	11 24       	eor	r1, r1
    1b04:	0b b6       	in	r0, 0x3b	; 59
    1b06:	0f 92       	push	r0
    1b08:	2f 93       	push	r18
    1b0a:	3f 93       	push	r19
    1b0c:	4f 93       	push	r20
    1b0e:	5f 93       	push	r21
    1b10:	6f 93       	push	r22
    1b12:	7f 93       	push	r23
    1b14:	8f 93       	push	r24
    1b16:	9f 93       	push	r25
    1b18:	af 93       	push	r26
    1b1a:	bf 93       	push	r27
    1b1c:	ef 93       	push	r30
    1b1e:	ff 93       	push	r31
  activePanel->updateDisplay();   // Call refresh func for active display
    1b20:	80 91 60 04 	lds	r24, 0x0460
    1b24:	90 91 61 04 	lds	r25, 0x0461
    1b28:	92 dd       	rcall	.-1244   	; 0x164e <_ZN14RGBmatrixPanel13updateDisplayEv>
  TIFR1 |= TOV1;                  // Clear Timer1 interrupt flag
    1b2a:	86 b3       	in	r24, 0x16	; 22
    1b2c:	86 bb       	out	0x16, r24	; 22
}
    1b2e:	ff 91       	pop	r31
    1b30:	ef 91       	pop	r30
    1b32:	bf 91       	pop	r27
    1b34:	af 91       	pop	r26
    1b36:	9f 91       	pop	r25
    1b38:	8f 91       	pop	r24
    1b3a:	7f 91       	pop	r23
    1b3c:	6f 91       	pop	r22
    1b3e:	5f 91       	pop	r21
    1b40:	4f 91       	pop	r20
    1b42:	3f 91       	pop	r19
    1b44:	2f 91       	pop	r18
    1b46:	0f 90       	pop	r0
    1b48:	0b be       	out	0x3b, r0	; 59
    1b4a:	0f 90       	pop	r0
    1b4c:	0f be       	out	0x3f, r0	; 63
    1b4e:	0f 90       	pop	r0
    1b50:	1f 90       	pop	r1
    1b52:	18 95       	reti

00001b54 <_ZN14RGBmatrixPanel10fillScreenEj>:
    }
  }
}

void RGBmatrixPanel::fillScreen(uint16_t c) {
  if((c == 0x0000) || (c == 0xffff)) {
    1b54:	9b 01       	movw	r18, r22
    1b56:	21 50       	subi	r18, 0x01	; 1
    1b58:	31 09       	sbc	r19, r1
    1b5a:	2e 3f       	cpi	r18, 0xFE	; 254
    1b5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b5e:	08 f1       	brcs	.+66     	; 0x1ba2 <_ZN14RGBmatrixPanel10fillScreenEj+0x4e>
    // For black or white, all bits in frame buffer will be identically
    // set or unset (regardless of weird bit packing), so it's OK to just
    // quickly memset the whole thing:
    memset(matrixbuff[backindex], c, _width * nRows * 3);
    1b60:	dc 01       	movw	r26, r24
    1b62:	5c 96       	adiw	r26, 0x1c	; 28
    1b64:	ec 91       	ld	r30, X
    1b66:	5c 97       	sbiw	r26, 0x1c	; 28
    1b68:	5b 96       	adiw	r26, 0x1b	; 27
    1b6a:	fc 91       	ld	r31, X
    1b6c:	5b 97       	sbiw	r26, 0x1b	; 27
    1b6e:	18 96       	adiw	r26, 0x08	; 8
    1b70:	4d 91       	ld	r20, X+
    1b72:	5c 91       	ld	r21, X
    1b74:	19 97       	sbiw	r26, 0x09	; 9
    1b76:	f4 9f       	mul	r31, r20
    1b78:	90 01       	movw	r18, r0
    1b7a:	f5 9f       	mul	r31, r21
    1b7c:	30 0d       	add	r19, r0
    1b7e:	11 24       	eor	r1, r1
    1b80:	a9 01       	movw	r20, r18
    1b82:	44 0f       	add	r20, r20
    1b84:	55 1f       	adc	r21, r21
    1b86:	42 0f       	add	r20, r18
    1b88:	53 1f       	adc	r21, r19
    1b8a:	2e 2f       	mov	r18, r30
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	22 0f       	add	r18, r18
    1b90:	33 1f       	adc	r19, r19
    1b92:	fc 01       	movw	r30, r24
    1b94:	e2 0f       	add	r30, r18
    1b96:	f3 1f       	adc	r31, r19
    1b98:	87 89       	ldd	r24, Z+23	; 0x17
    1b9a:	90 8d       	ldd	r25, Z+24	; 0x18
    1b9c:	0c 94 93 24 	jmp	0x4926	; 0x4926 <memset>
    1ba0:	08 95       	ret
  } else {
    // Otherwise, need to handle it the long way:
    Adafruit_GFX::fillScreen(c);
    1ba2:	0c 94 32 05 	jmp	0xa64	; 0xa64 <_ZN12Adafruit_GFX10fillScreenEj>
    1ba6:	08 95       	ret

00001ba8 <__cxa_pure_virtual>:
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
    1ba8:	0e 94 7e 24 	call	0x48fc	; 0x48fc <abort>

00001bac <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1bac:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1bae:	81 8d       	ldd	r24, Z+25	; 0x19
    1bb0:	22 8d       	ldd	r18, Z+26	; 0x1a
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	80 5c       	subi	r24, 0xC0	; 192
    1bb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb8:	82 1b       	sub	r24, r18
    1bba:	91 09       	sbc	r25, r1
}
    1bbc:	8f 73       	andi	r24, 0x3F	; 63
    1bbe:	99 27       	eor	r25, r25
    1bc0:	08 95       	ret

00001bc2 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1bc2:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1bc4:	91 8d       	ldd	r25, Z+25	; 0x19
    1bc6:	82 8d       	ldd	r24, Z+26	; 0x1a
    1bc8:	98 17       	cp	r25, r24
    1bca:	31 f0       	breq	.+12     	; 0x1bd8 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1bcc:	82 8d       	ldd	r24, Z+26	; 0x1a
    1bce:	e8 0f       	add	r30, r24
    1bd0:	f1 1d       	adc	r31, r1
    1bd2:	85 8d       	ldd	r24, Z+29	; 0x1d
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1bd8:	8f ef       	ldi	r24, 0xFF	; 255
    1bda:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1bdc:	08 95       	ret

00001bde <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1bde:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1be0:	91 8d       	ldd	r25, Z+25	; 0x19
    1be2:	82 8d       	ldd	r24, Z+26	; 0x1a
    1be4:	98 17       	cp	r25, r24
    1be6:	61 f0       	breq	.+24     	; 0x1c00 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1be8:	82 8d       	ldd	r24, Z+26	; 0x1a
    1bea:	df 01       	movw	r26, r30
    1bec:	a8 0f       	add	r26, r24
    1bee:	b1 1d       	adc	r27, r1
    1bf0:	5d 96       	adiw	r26, 0x1d	; 29
    1bf2:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1bf4:	92 8d       	ldd	r25, Z+26	; 0x1a
    1bf6:	9f 5f       	subi	r25, 0xFF	; 255
    1bf8:	9f 73       	andi	r25, 0x3F	; 63
    1bfa:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1c00:	8f ef       	ldi	r24, 0xFF	; 255
    1c02:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1c04:	08 95       	ret

00001c06 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1c06:	8a e8       	ldi	r24, 0x8A	; 138
    1c08:	9f e0       	ldi	r25, 0x0F	; 15
    1c0a:	89 2b       	or	r24, r25
    1c0c:	41 f0       	breq	.+16     	; 0x1c1e <_Z14serialEventRunv+0x18>
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	89 2b       	or	r24, r25
    1c14:	21 f0       	breq	.+8      	; 0x1c1e <_Z14serialEventRunv+0x18>
    1c16:	7e d1       	rcall	.+764    	; 0x1f14 <_Z17Serial0_availablev>
    1c18:	81 11       	cpse	r24, r1
    1c1a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    1c1e:	8e e3       	ldi	r24, 0x3E	; 62
    1c20:	90 e1       	ldi	r25, 0x10	; 16
    1c22:	89 2b       	or	r24, r25
    1c24:	41 f0       	breq	.+16     	; 0x1c36 <_Z14serialEventRunv+0x30>
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	89 2b       	or	r24, r25
    1c2c:	21 f0       	breq	.+8      	; 0x1c36 <_Z14serialEventRunv+0x30>
    1c2e:	26 d2       	rcall	.+1100   	; 0x207c <_Z17Serial1_availablev>
    1c30:	81 11       	cpse	r24, r1
    1c32:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    1c36:	82 ef       	ldi	r24, 0xF2	; 242
    1c38:	90 e1       	ldi	r25, 0x10	; 16
    1c3a:	89 2b       	or	r24, r25
    1c3c:	41 f0       	breq	.+16     	; 0x1c4e <_Z14serialEventRunv+0x48>
    1c3e:	80 e0       	ldi	r24, 0x00	; 0
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	89 2b       	or	r24, r25
    1c44:	21 f0       	breq	.+8      	; 0x1c4e <_Z14serialEventRunv+0x48>
    1c46:	ce d2       	rcall	.+1436   	; 0x21e4 <_Z17Serial2_availablev>
    1c48:	81 11       	cpse	r24, r1
    1c4a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    1c4e:	86 ea       	ldi	r24, 0xA6	; 166
    1c50:	91 e1       	ldi	r25, 0x11	; 17
    1c52:	89 2b       	or	r24, r25
    1c54:	41 f0       	breq	.+16     	; 0x1c66 <_Z14serialEventRunv+0x60>
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	89 2b       	or	r24, r25
    1c5c:	21 f0       	breq	.+8      	; 0x1c66 <_Z14serialEventRunv+0x60>
    1c5e:	76 d3       	rcall	.+1772   	; 0x234c <_Z17Serial3_availablev>
    1c60:	81 11       	cpse	r24, r1
    1c62:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1c66:	08 95       	ret

00001c68 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1c68:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1c6a:	84 8d       	ldd	r24, Z+28	; 0x1c
    1c6c:	df 01       	movw	r26, r30
    1c6e:	a8 0f       	add	r26, r24
    1c70:	b1 1d       	adc	r27, r1
    1c72:	a3 5a       	subi	r26, 0xA3	; 163
    1c74:	bf 4f       	sbci	r27, 0xFF	; 255
    1c76:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1c78:	84 8d       	ldd	r24, Z+28	; 0x1c
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	01 96       	adiw	r24, 0x01	; 1
    1c7e:	8f 73       	andi	r24, 0x3F	; 63
    1c80:	90 78       	andi	r25, 0x80	; 128
    1c82:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1c84:	a6 89       	ldd	r26, Z+22	; 0x16
    1c86:	b7 89       	ldd	r27, Z+23	; 0x17
    1c88:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    1c8a:	a0 89       	ldd	r26, Z+16	; 0x10
    1c8c:	b1 89       	ldd	r27, Z+17	; 0x11
    1c8e:	8c 91       	ld	r24, X
    1c90:	80 64       	ori	r24, 0x40	; 64
    1c92:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    1c94:	93 8d       	ldd	r25, Z+27	; 0x1b
    1c96:	84 8d       	ldd	r24, Z+28	; 0x1c
    1c98:	98 13       	cpse	r25, r24
    1c9a:	06 c0       	rjmp	.+12     	; 0x1ca8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1c9c:	02 88       	ldd	r0, Z+18	; 0x12
    1c9e:	f3 89       	ldd	r31, Z+19	; 0x13
    1ca0:	e0 2d       	mov	r30, r0
    1ca2:	80 81       	ld	r24, Z
    1ca4:	8f 7d       	andi	r24, 0xDF	; 223
    1ca6:	80 83       	st	Z, r24
    1ca8:	08 95       	ret

00001caa <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1caa:	cf 93       	push	r28
    1cac:	df 93       	push	r29
    1cae:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1cb0:	88 8d       	ldd	r24, Y+24	; 0x18
    1cb2:	81 11       	cpse	r24, r1
    1cb4:	0a c0       	rjmp	.+20     	; 0x1cca <_ZN14HardwareSerial5flushEv+0x20>
    1cb6:	1a c0       	rjmp	.+52     	; 0x1cec <_ZN14HardwareSerial5flushEv+0x42>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1cb8:	0f b6       	in	r0, 0x3f	; 63
    1cba:	07 fc       	sbrc	r0, 7
    1cbc:	08 c0       	rjmp	.+16     	; 0x1cce <_ZN14HardwareSerial5flushEv+0x24>
    1cbe:	80 81       	ld	r24, Z
    1cc0:	85 ff       	sbrs	r24, 5
    1cc2:	05 c0       	rjmp	.+10     	; 0x1cce <_ZN14HardwareSerial5flushEv+0x24>
    1cc4:	0d c0       	rjmp	.+26     	; 0x1ce0 <_ZN14HardwareSerial5flushEv+0x36>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
    1cc6:	ce 01       	movw	r24, r28
    1cc8:	cf df       	rcall	.-98     	; 0x1c68 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1cca:	ea 89       	ldd	r30, Y+18	; 0x12
    1ccc:	fb 89       	ldd	r31, Y+19	; 0x13
    1cce:	80 81       	ld	r24, Z
    1cd0:	85 fd       	sbrc	r24, 5
    1cd2:	f2 cf       	rjmp	.-28     	; 0x1cb8 <_ZN14HardwareSerial5flushEv+0xe>
    1cd4:	a8 89       	ldd	r26, Y+16	; 0x10
    1cd6:	b9 89       	ldd	r27, Y+17	; 0x11
    1cd8:	8c 91       	ld	r24, X
    1cda:	86 ff       	sbrs	r24, 6
    1cdc:	ed cf       	rjmp	.-38     	; 0x1cb8 <_ZN14HardwareSerial5flushEv+0xe>
    1cde:	06 c0       	rjmp	.+12     	; 0x1cec <_ZN14HardwareSerial5flushEv+0x42>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1ce0:	a8 89       	ldd	r26, Y+16	; 0x10
    1ce2:	b9 89       	ldd	r27, Y+17	; 0x11
    1ce4:	8c 91       	ld	r24, X
    1ce6:	85 ff       	sbrs	r24, 5
    1ce8:	f2 cf       	rjmp	.-28     	; 0x1cce <_ZN14HardwareSerial5flushEv+0x24>
    1cea:	ed cf       	rjmp	.-38     	; 0x1cc6 <_ZN14HardwareSerial5flushEv+0x1c>
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1cec:	df 91       	pop	r29
    1cee:	cf 91       	pop	r28
    1cf0:	08 95       	ret

00001cf2 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    1cf2:	0f 93       	push	r16
    1cf4:	1f 93       	push	r17
    1cf6:	cf 93       	push	r28
    1cf8:	df 93       	push	r29
    1cfa:	ec 01       	movw	r28, r24
    1cfc:	16 2f       	mov	r17, r22
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1cfe:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d00:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d02:	98 13       	cpse	r25, r24
    1d04:	23 c0       	rjmp	.+70     	; 0x1d4c <_ZN14HardwareSerial5writeEh+0x5a>
    1d06:	e8 89       	ldd	r30, Y+16	; 0x10
    1d08:	f9 89       	ldd	r31, Y+17	; 0x11
    1d0a:	80 81       	ld	r24, Z
    1d0c:	85 fd       	sbrc	r24, 5
    1d0e:	25 c0       	rjmp	.+74     	; 0x1d5a <_ZN14HardwareSerial5writeEh+0x68>
    1d10:	1d c0       	rjmp	.+58     	; 0x1d4c <_ZN14HardwareSerial5writeEh+0x5a>
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    if (bit_is_clear(SREG, SREG_I)) {
    1d12:	0f b6       	in	r0, 0x3f	; 63
    1d14:	07 fc       	sbrc	r0, 7
    1d16:	07 c0       	rjmp	.+14     	; 0x1d26 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1d18:	e8 89       	ldd	r30, Y+16	; 0x10
    1d1a:	f9 89       	ldd	r31, Y+17	; 0x11
    1d1c:	80 81       	ld	r24, Z
    1d1e:	85 ff       	sbrs	r24, 5
    1d20:	02 c0       	rjmp	.+4      	; 0x1d26 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1d22:	ce 01       	movw	r24, r28
    1d24:	a1 df       	rcall	.-190    	; 0x1c68 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1d26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d28:	09 17       	cp	r16, r25
    1d2a:	99 f3       	breq	.-26     	; 0x1d12 <_ZN14HardwareSerial5writeEh+0x20>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1d2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d2e:	fe 01       	movw	r30, r28
    1d30:	e8 0f       	add	r30, r24
    1d32:	f1 1d       	adc	r31, r1
    1d34:	e3 5a       	subi	r30, 0xA3	; 163
    1d36:	ff 4f       	sbci	r31, 0xFF	; 255
    1d38:	10 83       	st	Z, r17
  _tx_buffer_head = i;
    1d3a:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    1d3c:	ea 89       	ldd	r30, Y+18	; 0x12
    1d3e:	fb 89       	ldd	r31, Y+19	; 0x13
    1d40:	80 81       	ld	r24, Z
    1d42:	80 62       	ori	r24, 0x20	; 32
    1d44:	80 83       	st	Z, r24
  _written = true;
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	88 8f       	std	Y+24, r24	; 0x18
  
  return 1;
    1d4a:	0f c0       	rjmp	.+30     	; 0x1d6a <_ZN14HardwareSerial5writeEh+0x78>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1d4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	01 96       	adiw	r24, 0x01	; 1
    1d52:	8f 73       	andi	r24, 0x3F	; 63
    1d54:	90 78       	andi	r25, 0x80	; 128
    1d56:	08 2f       	mov	r16, r24
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1d58:	e6 cf       	rjmp	.-52     	; 0x1d26 <_ZN14HardwareSerial5writeEh+0x34>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    1d5a:	ee 89       	ldd	r30, Y+22	; 0x16
    1d5c:	ff 89       	ldd	r31, Y+23	; 0x17
    1d5e:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    1d60:	e8 89       	ldd	r30, Y+16	; 0x10
    1d62:	f9 89       	ldd	r31, Y+17	; 0x11
    1d64:	80 81       	ld	r24, Z
    1d66:	80 64       	ori	r24, 0x40	; 64
    1d68:	80 83       	st	Z, r24
	
  sbi(*_ucsrb, UDRIE0);
  _written = true;
  
  return 1;
}
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	df 91       	pop	r29
    1d70:	cf 91       	pop	r28
    1d72:	1f 91       	pop	r17
    1d74:	0f 91       	pop	r16
    1d76:	08 95       	ret

00001d78 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1d78:	cf 92       	push	r12
    1d7a:	df 92       	push	r13
    1d7c:	ef 92       	push	r14
    1d7e:	ff 92       	push	r15
    1d80:	1f 93       	push	r17
    1d82:	cf 93       	push	r28
    1d84:	df 93       	push	r29
    1d86:	ec 01       	movw	r28, r24
    1d88:	6a 01       	movw	r12, r20
    1d8a:	7b 01       	movw	r14, r22
    1d8c:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1d8e:	e8 89       	ldd	r30, Y+16	; 0x10
    1d90:	f9 89       	ldd	r31, Y+17	; 0x11
    1d92:	82 e0       	ldi	r24, 0x02	; 2
    1d94:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1d96:	41 15       	cp	r20, r1
    1d98:	81 ee       	ldi	r24, 0xE1	; 225
    1d9a:	58 07       	cpc	r21, r24
    1d9c:	61 05       	cpc	r22, r1
    1d9e:	71 05       	cpc	r23, r1
    1da0:	b1 f0       	breq	.+44     	; 0x1dce <_ZN14HardwareSerial5beginEmh+0x56>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1da2:	60 e0       	ldi	r22, 0x00	; 0
    1da4:	79 e0       	ldi	r23, 0x09	; 9
    1da6:	8d e3       	ldi	r24, 0x3D	; 61
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	a7 01       	movw	r20, r14
    1dac:	96 01       	movw	r18, r12
    1dae:	0e 94 47 22 	call	0x448e	; 0x448e <__udivmodsi4>
    1db2:	ba 01       	movw	r22, r20
    1db4:	a9 01       	movw	r20, r18
    1db6:	41 50       	subi	r20, 0x01	; 1
    1db8:	51 09       	sbc	r21, r1
    1dba:	61 09       	sbc	r22, r1
    1dbc:	71 09       	sbc	r23, r1
    1dbe:	76 95       	lsr	r23
    1dc0:	67 95       	ror	r22
    1dc2:	57 95       	ror	r21
    1dc4:	47 95       	ror	r20
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1dc6:	41 15       	cp	r20, r1
    1dc8:	80 e1       	ldi	r24, 0x10	; 16
    1dca:	58 07       	cpc	r21, r24
    1dcc:	a8 f0       	brcs	.+42     	; 0x1df8 <_ZN14HardwareSerial5beginEmh+0x80>
  {
    *_ucsra = 0;
    1dce:	e8 89       	ldd	r30, Y+16	; 0x10
    1dd0:	f9 89       	ldd	r31, Y+17	; 0x11
    1dd2:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1dd4:	60 e8       	ldi	r22, 0x80	; 128
    1dd6:	74 e8       	ldi	r23, 0x84	; 132
    1dd8:	8e e1       	ldi	r24, 0x1E	; 30
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	a7 01       	movw	r20, r14
    1dde:	96 01       	movw	r18, r12
    1de0:	0e 94 47 22 	call	0x448e	; 0x448e <__udivmodsi4>
    1de4:	ba 01       	movw	r22, r20
    1de6:	a9 01       	movw	r20, r18
    1de8:	41 50       	subi	r20, 0x01	; 1
    1dea:	51 09       	sbc	r21, r1
    1dec:	61 09       	sbc	r22, r1
    1dee:	71 09       	sbc	r23, r1
    1df0:	76 95       	lsr	r23
    1df2:	67 95       	ror	r22
    1df4:	57 95       	ror	r21
    1df6:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1df8:	ec 85       	ldd	r30, Y+12	; 0x0c
    1dfa:	fd 85       	ldd	r31, Y+13	; 0x0d
    1dfc:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
    1dfe:	ee 85       	ldd	r30, Y+14	; 0x0e
    1e00:	ff 85       	ldd	r31, Y+15	; 0x0f
    1e02:	40 83       	st	Z, r20

  _written = false;
    1e04:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1e06:	ec 89       	ldd	r30, Y+20	; 0x14
    1e08:	fd 89       	ldd	r31, Y+21	; 0x15
    1e0a:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1e0c:	ea 89       	ldd	r30, Y+18	; 0x12
    1e0e:	fb 89       	ldd	r31, Y+19	; 0x13
    1e10:	80 81       	ld	r24, Z
    1e12:	80 61       	ori	r24, 0x10	; 16
    1e14:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1e16:	ea 89       	ldd	r30, Y+18	; 0x12
    1e18:	fb 89       	ldd	r31, Y+19	; 0x13
    1e1a:	80 81       	ld	r24, Z
    1e1c:	88 60       	ori	r24, 0x08	; 8
    1e1e:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1e20:	ea 89       	ldd	r30, Y+18	; 0x12
    1e22:	fb 89       	ldd	r31, Y+19	; 0x13
    1e24:	80 81       	ld	r24, Z
    1e26:	80 68       	ori	r24, 0x80	; 128
    1e28:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1e2a:	ea 89       	ldd	r30, Y+18	; 0x12
    1e2c:	fb 89       	ldd	r31, Y+19	; 0x13
    1e2e:	80 81       	ld	r24, Z
    1e30:	8f 7d       	andi	r24, 0xDF	; 223
    1e32:	80 83       	st	Z, r24
}
    1e34:	df 91       	pop	r29
    1e36:	cf 91       	pop	r28
    1e38:	1f 91       	pop	r17
    1e3a:	ff 90       	pop	r15
    1e3c:	ef 90       	pop	r14
    1e3e:	df 90       	pop	r13
    1e40:	cf 90       	pop	r12
    1e42:	08 95       	ret

00001e44 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1e44:	1f 92       	push	r1
    1e46:	0f 92       	push	r0
    1e48:	0f b6       	in	r0, 0x3f	; 63
    1e4a:	0f 92       	push	r0
    1e4c:	11 24       	eor	r1, r1
    1e4e:	0b b6       	in	r0, 0x3b	; 59
    1e50:	0f 92       	push	r0
    1e52:	2f 93       	push	r18
    1e54:	8f 93       	push	r24
    1e56:	9f 93       	push	r25
    1e58:	af 93       	push	r26
    1e5a:	bf 93       	push	r27
    1e5c:	ef 93       	push	r30
    1e5e:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1e60:	e0 91 72 04 	lds	r30, 0x0472
    1e64:	f0 91 73 04 	lds	r31, 0x0473
    1e68:	80 81       	ld	r24, Z
    1e6a:	82 fd       	sbrc	r24, 2
    1e6c:	17 c0       	rjmp	.+46     	; 0x1e9c <__vector_25+0x58>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1e6e:	e0 91 78 04 	lds	r30, 0x0478
    1e72:	f0 91 79 04 	lds	r31, 0x0479
    1e76:	20 81       	ld	r18, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1e78:	80 91 7b 04 	lds	r24, 0x047B
    1e7c:	8f 5f       	subi	r24, 0xFF	; 255
    1e7e:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1e80:	90 91 7c 04 	lds	r25, 0x047C
    1e84:	89 17       	cp	r24, r25
    1e86:	79 f0       	breq	.+30     	; 0x1ea6 <__vector_25+0x62>
      _rx_buffer[_rx_buffer_head] = c;
    1e88:	eb e7       	ldi	r30, 0x7B	; 123
    1e8a:	f4 e0       	ldi	r31, 0x04	; 4
    1e8c:	a0 81       	ld	r26, Z
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	ae 59       	subi	r26, 0x9E	; 158
    1e92:	bb 4f       	sbci	r27, 0xFB	; 251
    1e94:	5d 96       	adiw	r26, 0x1d	; 29
    1e96:	2c 93       	st	X, r18
      _rx_buffer_head = i;
    1e98:	80 83       	st	Z, r24
    1e9a:	05 c0       	rjmp	.+10     	; 0x1ea6 <__vector_25+0x62>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1e9c:	e0 91 78 04 	lds	r30, 0x0478
    1ea0:	f0 91 79 04 	lds	r31, 0x0479
    1ea4:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1ea6:	ff 91       	pop	r31
    1ea8:	ef 91       	pop	r30
    1eaa:	bf 91       	pop	r27
    1eac:	af 91       	pop	r26
    1eae:	9f 91       	pop	r25
    1eb0:	8f 91       	pop	r24
    1eb2:	2f 91       	pop	r18
    1eb4:	0f 90       	pop	r0
    1eb6:	0b be       	out	0x3b, r0	; 59
    1eb8:	0f 90       	pop	r0
    1eba:	0f be       	out	0x3f, r0	; 63
    1ebc:	0f 90       	pop	r0
    1ebe:	1f 90       	pop	r1
    1ec0:	18 95       	reti

00001ec2 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1ec2:	1f 92       	push	r1
    1ec4:	0f 92       	push	r0
    1ec6:	0f b6       	in	r0, 0x3f	; 63
    1ec8:	0f 92       	push	r0
    1eca:	11 24       	eor	r1, r1
    1ecc:	0b b6       	in	r0, 0x3b	; 59
    1ece:	0f 92       	push	r0
    1ed0:	2f 93       	push	r18
    1ed2:	3f 93       	push	r19
    1ed4:	4f 93       	push	r20
    1ed6:	5f 93       	push	r21
    1ed8:	6f 93       	push	r22
    1eda:	7f 93       	push	r23
    1edc:	8f 93       	push	r24
    1ede:	9f 93       	push	r25
    1ee0:	af 93       	push	r26
    1ee2:	bf 93       	push	r27
    1ee4:	ef 93       	push	r30
    1ee6:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1ee8:	82 e6       	ldi	r24, 0x62	; 98
    1eea:	94 e0       	ldi	r25, 0x04	; 4
    1eec:	bd de       	rcall	.-646    	; 0x1c68 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1eee:	ff 91       	pop	r31
    1ef0:	ef 91       	pop	r30
    1ef2:	bf 91       	pop	r27
    1ef4:	af 91       	pop	r26
    1ef6:	9f 91       	pop	r25
    1ef8:	8f 91       	pop	r24
    1efa:	7f 91       	pop	r23
    1efc:	6f 91       	pop	r22
    1efe:	5f 91       	pop	r21
    1f00:	4f 91       	pop	r20
    1f02:	3f 91       	pop	r19
    1f04:	2f 91       	pop	r18
    1f06:	0f 90       	pop	r0
    1f08:	0b be       	out	0x3b, r0	; 59
    1f0a:	0f 90       	pop	r0
    1f0c:	0f be       	out	0x3f, r0	; 63
    1f0e:	0f 90       	pop	r0
    1f10:	1f 90       	pop	r1
    1f12:	18 95       	reti

00001f14 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1f14:	82 e6       	ldi	r24, 0x62	; 98
    1f16:	94 e0       	ldi	r25, 0x04	; 4
    1f18:	49 de       	rcall	.-878    	; 0x1bac <_ZN14HardwareSerial9availableEv>
    1f1a:	21 e0       	ldi	r18, 0x01	; 1
    1f1c:	89 2b       	or	r24, r25
    1f1e:	09 f4       	brne	.+2      	; 0x1f22 <_Z17Serial0_availablev+0xe>
    1f20:	20 e0       	ldi	r18, 0x00	; 0
}
    1f22:	82 2f       	mov	r24, r18
    1f24:	08 95       	ret

00001f26 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1f26:	10 92 65 04 	sts	0x0465, r1
    1f2a:	10 92 64 04 	sts	0x0464, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1f2e:	88 ee       	ldi	r24, 0xE8	; 232
    1f30:	93 e0       	ldi	r25, 0x03	; 3
    1f32:	a0 e0       	ldi	r26, 0x00	; 0
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	80 93 66 04 	sts	0x0466, r24
    1f3a:	90 93 67 04 	sts	0x0467, r25
    1f3e:	a0 93 68 04 	sts	0x0468, r26
    1f42:	b0 93 69 04 	sts	0x0469, r27
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1f46:	8b e3       	ldi	r24, 0x3B	; 59
    1f48:	92 e0       	ldi	r25, 0x02	; 2
    1f4a:	90 93 63 04 	sts	0x0463, r25
    1f4e:	80 93 62 04 	sts	0x0462, r24
    1f52:	85 ec       	ldi	r24, 0xC5	; 197
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	90 93 6f 04 	sts	0x046F, r25
    1f5a:	80 93 6e 04 	sts	0x046E, r24
    1f5e:	84 ec       	ldi	r24, 0xC4	; 196
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	90 93 71 04 	sts	0x0471, r25
    1f66:	80 93 70 04 	sts	0x0470, r24
    1f6a:	80 ec       	ldi	r24, 0xC0	; 192
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	90 93 73 04 	sts	0x0473, r25
    1f72:	80 93 72 04 	sts	0x0472, r24
    1f76:	81 ec       	ldi	r24, 0xC1	; 193
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	90 93 75 04 	sts	0x0475, r25
    1f7e:	80 93 74 04 	sts	0x0474, r24
    1f82:	82 ec       	ldi	r24, 0xC2	; 194
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	90 93 77 04 	sts	0x0477, r25
    1f8a:	80 93 76 04 	sts	0x0476, r24
    1f8e:	86 ec       	ldi	r24, 0xC6	; 198
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	90 93 79 04 	sts	0x0479, r25
    1f96:	80 93 78 04 	sts	0x0478, r24
    1f9a:	10 92 7b 04 	sts	0x047B, r1
    1f9e:	10 92 7c 04 	sts	0x047C, r1
    1fa2:	10 92 7d 04 	sts	0x047D, r1
    1fa6:	10 92 7e 04 	sts	0x047E, r1
    1faa:	08 95       	ret

00001fac <__vector_36>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    1fac:	1f 92       	push	r1
    1fae:	0f 92       	push	r0
    1fb0:	0f b6       	in	r0, 0x3f	; 63
    1fb2:	0f 92       	push	r0
    1fb4:	11 24       	eor	r1, r1
    1fb6:	0b b6       	in	r0, 0x3b	; 59
    1fb8:	0f 92       	push	r0
    1fba:	2f 93       	push	r18
    1fbc:	8f 93       	push	r24
    1fbe:	9f 93       	push	r25
    1fc0:	af 93       	push	r26
    1fc2:	bf 93       	push	r27
    1fc4:	ef 93       	push	r30
    1fc6:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1fc8:	e0 91 0f 05 	lds	r30, 0x050F
    1fcc:	f0 91 10 05 	lds	r31, 0x0510
    1fd0:	80 81       	ld	r24, Z
    1fd2:	82 fd       	sbrc	r24, 2
    1fd4:	17 c0       	rjmp	.+46     	; 0x2004 <__vector_36+0x58>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1fd6:	e0 91 15 05 	lds	r30, 0x0515
    1fda:	f0 91 16 05 	lds	r31, 0x0516
    1fde:	20 81       	ld	r18, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1fe0:	80 91 18 05 	lds	r24, 0x0518
    1fe4:	8f 5f       	subi	r24, 0xFF	; 255
    1fe6:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1fe8:	90 91 19 05 	lds	r25, 0x0519
    1fec:	89 17       	cp	r24, r25
    1fee:	79 f0       	breq	.+30     	; 0x200e <__vector_36+0x62>
      _rx_buffer[_rx_buffer_head] = c;
    1ff0:	e8 e1       	ldi	r30, 0x18	; 24
    1ff2:	f5 e0       	ldi	r31, 0x05	; 5
    1ff4:	a0 81       	ld	r26, Z
    1ff6:	b0 e0       	ldi	r27, 0x00	; 0
    1ff8:	a1 50       	subi	r26, 0x01	; 1
    1ffa:	bb 4f       	sbci	r27, 0xFB	; 251
    1ffc:	5d 96       	adiw	r26, 0x1d	; 29
    1ffe:	2c 93       	st	X, r18
      _rx_buffer_head = i;
    2000:	80 83       	st	Z, r24
    2002:	05 c0       	rjmp	.+10     	; 0x200e <__vector_36+0x62>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2004:	e0 91 15 05 	lds	r30, 0x0515
    2008:	f0 91 16 05 	lds	r31, 0x0516
    200c:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
    200e:	ff 91       	pop	r31
    2010:	ef 91       	pop	r30
    2012:	bf 91       	pop	r27
    2014:	af 91       	pop	r26
    2016:	9f 91       	pop	r25
    2018:	8f 91       	pop	r24
    201a:	2f 91       	pop	r18
    201c:	0f 90       	pop	r0
    201e:	0b be       	out	0x3b, r0	; 59
    2020:	0f 90       	pop	r0
    2022:	0f be       	out	0x3f, r0	; 63
    2024:	0f 90       	pop	r0
    2026:	1f 90       	pop	r1
    2028:	18 95       	reti

0000202a <__vector_37>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    202a:	1f 92       	push	r1
    202c:	0f 92       	push	r0
    202e:	0f b6       	in	r0, 0x3f	; 63
    2030:	0f 92       	push	r0
    2032:	11 24       	eor	r1, r1
    2034:	0b b6       	in	r0, 0x3b	; 59
    2036:	0f 92       	push	r0
    2038:	2f 93       	push	r18
    203a:	3f 93       	push	r19
    203c:	4f 93       	push	r20
    203e:	5f 93       	push	r21
    2040:	6f 93       	push	r22
    2042:	7f 93       	push	r23
    2044:	8f 93       	push	r24
    2046:	9f 93       	push	r25
    2048:	af 93       	push	r26
    204a:	bf 93       	push	r27
    204c:	ef 93       	push	r30
    204e:	ff 93       	push	r31
  Serial1._tx_udr_empty_irq();
    2050:	8f ef       	ldi	r24, 0xFF	; 255
    2052:	94 e0       	ldi	r25, 0x04	; 4
    2054:	09 de       	rcall	.-1006   	; 0x1c68 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    2056:	ff 91       	pop	r31
    2058:	ef 91       	pop	r30
    205a:	bf 91       	pop	r27
    205c:	af 91       	pop	r26
    205e:	9f 91       	pop	r25
    2060:	8f 91       	pop	r24
    2062:	7f 91       	pop	r23
    2064:	6f 91       	pop	r22
    2066:	5f 91       	pop	r21
    2068:	4f 91       	pop	r20
    206a:	3f 91       	pop	r19
    206c:	2f 91       	pop	r18
    206e:	0f 90       	pop	r0
    2070:	0b be       	out	0x3b, r0	; 59
    2072:	0f 90       	pop	r0
    2074:	0f be       	out	0x3f, r0	; 63
    2076:	0f 90       	pop	r0
    2078:	1f 90       	pop	r1
    207a:	18 95       	reti

0000207c <_Z17Serial1_availablev>:
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    207c:	8f ef       	ldi	r24, 0xFF	; 255
    207e:	94 e0       	ldi	r25, 0x04	; 4
    2080:	95 dd       	rcall	.-1238   	; 0x1bac <_ZN14HardwareSerial9availableEv>
    2082:	21 e0       	ldi	r18, 0x01	; 1
    2084:	89 2b       	or	r24, r25
    2086:	09 f4       	brne	.+2      	; 0x208a <_Z17Serial1_availablev+0xe>
    2088:	20 e0       	ldi	r18, 0x00	; 0
}
    208a:	82 2f       	mov	r24, r18
    208c:	08 95       	ret

0000208e <_GLOBAL__sub_I___vector_36>:
    208e:	10 92 02 05 	sts	0x0502, r1
    2092:	10 92 01 05 	sts	0x0501, r1
    2096:	88 ee       	ldi	r24, 0xE8	; 232
    2098:	93 e0       	ldi	r25, 0x03	; 3
    209a:	a0 e0       	ldi	r26, 0x00	; 0
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	80 93 03 05 	sts	0x0503, r24
    20a2:	90 93 04 05 	sts	0x0504, r25
    20a6:	a0 93 05 05 	sts	0x0505, r26
    20aa:	b0 93 06 05 	sts	0x0506, r27
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    20ae:	8b e3       	ldi	r24, 0x3B	; 59
    20b0:	92 e0       	ldi	r25, 0x02	; 2
    20b2:	90 93 00 05 	sts	0x0500, r25
    20b6:	80 93 ff 04 	sts	0x04FF, r24
    20ba:	8d ec       	ldi	r24, 0xCD	; 205
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	90 93 0c 05 	sts	0x050C, r25
    20c2:	80 93 0b 05 	sts	0x050B, r24
    20c6:	8c ec       	ldi	r24, 0xCC	; 204
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	90 93 0e 05 	sts	0x050E, r25
    20ce:	80 93 0d 05 	sts	0x050D, r24
    20d2:	88 ec       	ldi	r24, 0xC8	; 200
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	90 93 10 05 	sts	0x0510, r25
    20da:	80 93 0f 05 	sts	0x050F, r24
    20de:	89 ec       	ldi	r24, 0xC9	; 201
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	90 93 12 05 	sts	0x0512, r25
    20e6:	80 93 11 05 	sts	0x0511, r24
    20ea:	8a ec       	ldi	r24, 0xCA	; 202
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	90 93 14 05 	sts	0x0514, r25
    20f2:	80 93 13 05 	sts	0x0513, r24
    20f6:	8e ec       	ldi	r24, 0xCE	; 206
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	90 93 16 05 	sts	0x0516, r25
    20fe:	80 93 15 05 	sts	0x0515, r24
    2102:	10 92 18 05 	sts	0x0518, r1
    2106:	10 92 19 05 	sts	0x0519, r1
    210a:	10 92 1a 05 	sts	0x051A, r1
    210e:	10 92 1b 05 	sts	0x051B, r1
    2112:	08 95       	ret

00002114 <__vector_51>:
// first place.

#if defined(HAVE_HWSERIAL2)

ISR(USART2_RX_vect)
{
    2114:	1f 92       	push	r1
    2116:	0f 92       	push	r0
    2118:	0f b6       	in	r0, 0x3f	; 63
    211a:	0f 92       	push	r0
    211c:	11 24       	eor	r1, r1
    211e:	0b b6       	in	r0, 0x3b	; 59
    2120:	0f 92       	push	r0
    2122:	2f 93       	push	r18
    2124:	8f 93       	push	r24
    2126:	9f 93       	push	r25
    2128:	af 93       	push	r26
    212a:	bf 93       	push	r27
    212c:	ef 93       	push	r30
    212e:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2130:	e0 91 ac 05 	lds	r30, 0x05AC
    2134:	f0 91 ad 05 	lds	r31, 0x05AD
    2138:	80 81       	ld	r24, Z
    213a:	82 fd       	sbrc	r24, 2
    213c:	17 c0       	rjmp	.+46     	; 0x216c <__vector_51+0x58>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    213e:	e0 91 b2 05 	lds	r30, 0x05B2
    2142:	f0 91 b3 05 	lds	r31, 0x05B3
    2146:	20 81       	ld	r18, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2148:	80 91 b5 05 	lds	r24, 0x05B5
    214c:	8f 5f       	subi	r24, 0xFF	; 255
    214e:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2150:	90 91 b6 05 	lds	r25, 0x05B6
    2154:	89 17       	cp	r24, r25
    2156:	79 f0       	breq	.+30     	; 0x2176 <__vector_51+0x62>
      _rx_buffer[_rx_buffer_head] = c;
    2158:	e5 eb       	ldi	r30, 0xB5	; 181
    215a:	f5 e0       	ldi	r31, 0x05	; 5
    215c:	a0 81       	ld	r26, Z
    215e:	b0 e0       	ldi	r27, 0x00	; 0
    2160:	a4 56       	subi	r26, 0x64	; 100
    2162:	ba 4f       	sbci	r27, 0xFA	; 250
    2164:	5d 96       	adiw	r26, 0x1d	; 29
    2166:	2c 93       	st	X, r18
      _rx_buffer_head = i;
    2168:	80 83       	st	Z, r24
    216a:	05 c0       	rjmp	.+10     	; 0x2176 <__vector_51+0x62>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    216c:	e0 91 b2 05 	lds	r30, 0x05B2
    2170:	f0 91 b3 05 	lds	r31, 0x05B3
    2174:	80 81       	ld	r24, Z
  Serial2._rx_complete_irq();
}
    2176:	ff 91       	pop	r31
    2178:	ef 91       	pop	r30
    217a:	bf 91       	pop	r27
    217c:	af 91       	pop	r26
    217e:	9f 91       	pop	r25
    2180:	8f 91       	pop	r24
    2182:	2f 91       	pop	r18
    2184:	0f 90       	pop	r0
    2186:	0b be       	out	0x3b, r0	; 59
    2188:	0f 90       	pop	r0
    218a:	0f be       	out	0x3f, r0	; 63
    218c:	0f 90       	pop	r0
    218e:	1f 90       	pop	r1
    2190:	18 95       	reti

00002192 <__vector_52>:

ISR(USART2_UDRE_vect)
{
    2192:	1f 92       	push	r1
    2194:	0f 92       	push	r0
    2196:	0f b6       	in	r0, 0x3f	; 63
    2198:	0f 92       	push	r0
    219a:	11 24       	eor	r1, r1
    219c:	0b b6       	in	r0, 0x3b	; 59
    219e:	0f 92       	push	r0
    21a0:	2f 93       	push	r18
    21a2:	3f 93       	push	r19
    21a4:	4f 93       	push	r20
    21a6:	5f 93       	push	r21
    21a8:	6f 93       	push	r22
    21aa:	7f 93       	push	r23
    21ac:	8f 93       	push	r24
    21ae:	9f 93       	push	r25
    21b0:	af 93       	push	r26
    21b2:	bf 93       	push	r27
    21b4:	ef 93       	push	r30
    21b6:	ff 93       	push	r31
  Serial2._tx_udr_empty_irq();
    21b8:	8c e9       	ldi	r24, 0x9C	; 156
    21ba:	95 e0       	ldi	r25, 0x05	; 5
    21bc:	55 dd       	rcall	.-1366   	; 0x1c68 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    21be:	ff 91       	pop	r31
    21c0:	ef 91       	pop	r30
    21c2:	bf 91       	pop	r27
    21c4:	af 91       	pop	r26
    21c6:	9f 91       	pop	r25
    21c8:	8f 91       	pop	r24
    21ca:	7f 91       	pop	r23
    21cc:	6f 91       	pop	r22
    21ce:	5f 91       	pop	r21
    21d0:	4f 91       	pop	r20
    21d2:	3f 91       	pop	r19
    21d4:	2f 91       	pop	r18
    21d6:	0f 90       	pop	r0
    21d8:	0b be       	out	0x3b, r0	; 59
    21da:	0f 90       	pop	r0
    21dc:	0f be       	out	0x3f, r0	; 63
    21de:	0f 90       	pop	r0
    21e0:	1f 90       	pop	r1
    21e2:	18 95       	reti

000021e4 <_Z17Serial2_availablev>:
HardwareSerial Serial2(&UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available() {
  return Serial2.available();
    21e4:	8c e9       	ldi	r24, 0x9C	; 156
    21e6:	95 e0       	ldi	r25, 0x05	; 5
    21e8:	e1 dc       	rcall	.-1598   	; 0x1bac <_ZN14HardwareSerial9availableEv>
    21ea:	21 e0       	ldi	r18, 0x01	; 1
    21ec:	89 2b       	or	r24, r25
    21ee:	09 f4       	brne	.+2      	; 0x21f2 <_Z17Serial2_availablev+0xe>
    21f0:	20 e0       	ldi	r18, 0x00	; 0
}
    21f2:	82 2f       	mov	r24, r18
    21f4:	08 95       	ret

000021f6 <_GLOBAL__sub_I___vector_51>:
    21f6:	10 92 9f 05 	sts	0x059F, r1
    21fa:	10 92 9e 05 	sts	0x059E, r1
    21fe:	88 ee       	ldi	r24, 0xE8	; 232
    2200:	93 e0       	ldi	r25, 0x03	; 3
    2202:	a0 e0       	ldi	r26, 0x00	; 0
    2204:	b0 e0       	ldi	r27, 0x00	; 0
    2206:	80 93 a0 05 	sts	0x05A0, r24
    220a:	90 93 a1 05 	sts	0x05A1, r25
    220e:	a0 93 a2 05 	sts	0x05A2, r26
    2212:	b0 93 a3 05 	sts	0x05A3, r27
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2216:	8b e3       	ldi	r24, 0x3B	; 59
    2218:	92 e0       	ldi	r25, 0x02	; 2
    221a:	90 93 9d 05 	sts	0x059D, r25
    221e:	80 93 9c 05 	sts	0x059C, r24
    2222:	85 ed       	ldi	r24, 0xD5	; 213
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	90 93 a9 05 	sts	0x05A9, r25
    222a:	80 93 a8 05 	sts	0x05A8, r24
    222e:	84 ed       	ldi	r24, 0xD4	; 212
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	90 93 ab 05 	sts	0x05AB, r25
    2236:	80 93 aa 05 	sts	0x05AA, r24
    223a:	80 ed       	ldi	r24, 0xD0	; 208
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	90 93 ad 05 	sts	0x05AD, r25
    2242:	80 93 ac 05 	sts	0x05AC, r24
    2246:	81 ed       	ldi	r24, 0xD1	; 209
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	90 93 af 05 	sts	0x05AF, r25
    224e:	80 93 ae 05 	sts	0x05AE, r24
    2252:	82 ed       	ldi	r24, 0xD2	; 210
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	90 93 b1 05 	sts	0x05B1, r25
    225a:	80 93 b0 05 	sts	0x05B0, r24
    225e:	86 ed       	ldi	r24, 0xD6	; 214
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	90 93 b3 05 	sts	0x05B3, r25
    2266:	80 93 b2 05 	sts	0x05B2, r24
    226a:	10 92 b5 05 	sts	0x05B5, r1
    226e:	10 92 b6 05 	sts	0x05B6, r1
    2272:	10 92 b7 05 	sts	0x05B7, r1
    2276:	10 92 b8 05 	sts	0x05B8, r1
    227a:	08 95       	ret

0000227c <__vector_54>:
// first place.

#if defined(HAVE_HWSERIAL3)

ISR(USART3_RX_vect)
{
    227c:	1f 92       	push	r1
    227e:	0f 92       	push	r0
    2280:	0f b6       	in	r0, 0x3f	; 63
    2282:	0f 92       	push	r0
    2284:	11 24       	eor	r1, r1
    2286:	0b b6       	in	r0, 0x3b	; 59
    2288:	0f 92       	push	r0
    228a:	2f 93       	push	r18
    228c:	8f 93       	push	r24
    228e:	9f 93       	push	r25
    2290:	af 93       	push	r26
    2292:	bf 93       	push	r27
    2294:	ef 93       	push	r30
    2296:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2298:	e0 91 49 06 	lds	r30, 0x0649
    229c:	f0 91 4a 06 	lds	r31, 0x064A
    22a0:	80 81       	ld	r24, Z
    22a2:	82 fd       	sbrc	r24, 2
    22a4:	17 c0       	rjmp	.+46     	; 0x22d4 <__vector_54+0x58>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    22a6:	e0 91 4f 06 	lds	r30, 0x064F
    22aa:	f0 91 50 06 	lds	r31, 0x0650
    22ae:	20 81       	ld	r18, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    22b0:	80 91 52 06 	lds	r24, 0x0652
    22b4:	8f 5f       	subi	r24, 0xFF	; 255
    22b6:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    22b8:	90 91 53 06 	lds	r25, 0x0653
    22bc:	89 17       	cp	r24, r25
    22be:	79 f0       	breq	.+30     	; 0x22de <__vector_54+0x62>
      _rx_buffer[_rx_buffer_head] = c;
    22c0:	e2 e5       	ldi	r30, 0x52	; 82
    22c2:	f6 e0       	ldi	r31, 0x06	; 6
    22c4:	a0 81       	ld	r26, Z
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
    22c8:	a7 5c       	subi	r26, 0xC7	; 199
    22ca:	b9 4f       	sbci	r27, 0xF9	; 249
    22cc:	5d 96       	adiw	r26, 0x1d	; 29
    22ce:	2c 93       	st	X, r18
      _rx_buffer_head = i;
    22d0:	80 83       	st	Z, r24
    22d2:	05 c0       	rjmp	.+10     	; 0x22de <__vector_54+0x62>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    22d4:	e0 91 4f 06 	lds	r30, 0x064F
    22d8:	f0 91 50 06 	lds	r31, 0x0650
    22dc:	80 81       	ld	r24, Z
  Serial3._rx_complete_irq();
}
    22de:	ff 91       	pop	r31
    22e0:	ef 91       	pop	r30
    22e2:	bf 91       	pop	r27
    22e4:	af 91       	pop	r26
    22e6:	9f 91       	pop	r25
    22e8:	8f 91       	pop	r24
    22ea:	2f 91       	pop	r18
    22ec:	0f 90       	pop	r0
    22ee:	0b be       	out	0x3b, r0	; 59
    22f0:	0f 90       	pop	r0
    22f2:	0f be       	out	0x3f, r0	; 63
    22f4:	0f 90       	pop	r0
    22f6:	1f 90       	pop	r1
    22f8:	18 95       	reti

000022fa <__vector_55>:

ISR(USART3_UDRE_vect)
{
    22fa:	1f 92       	push	r1
    22fc:	0f 92       	push	r0
    22fe:	0f b6       	in	r0, 0x3f	; 63
    2300:	0f 92       	push	r0
    2302:	11 24       	eor	r1, r1
    2304:	0b b6       	in	r0, 0x3b	; 59
    2306:	0f 92       	push	r0
    2308:	2f 93       	push	r18
    230a:	3f 93       	push	r19
    230c:	4f 93       	push	r20
    230e:	5f 93       	push	r21
    2310:	6f 93       	push	r22
    2312:	7f 93       	push	r23
    2314:	8f 93       	push	r24
    2316:	9f 93       	push	r25
    2318:	af 93       	push	r26
    231a:	bf 93       	push	r27
    231c:	ef 93       	push	r30
    231e:	ff 93       	push	r31
  Serial3._tx_udr_empty_irq();
    2320:	89 e3       	ldi	r24, 0x39	; 57
    2322:	96 e0       	ldi	r25, 0x06	; 6
    2324:	a1 dc       	rcall	.-1726   	; 0x1c68 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    2326:	ff 91       	pop	r31
    2328:	ef 91       	pop	r30
    232a:	bf 91       	pop	r27
    232c:	af 91       	pop	r26
    232e:	9f 91       	pop	r25
    2330:	8f 91       	pop	r24
    2332:	7f 91       	pop	r23
    2334:	6f 91       	pop	r22
    2336:	5f 91       	pop	r21
    2338:	4f 91       	pop	r20
    233a:	3f 91       	pop	r19
    233c:	2f 91       	pop	r18
    233e:	0f 90       	pop	r0
    2340:	0b be       	out	0x3b, r0	; 59
    2342:	0f 90       	pop	r0
    2344:	0f be       	out	0x3f, r0	; 63
    2346:	0f 90       	pop	r0
    2348:	1f 90       	pop	r1
    234a:	18 95       	reti

0000234c <_Z17Serial3_availablev>:
HardwareSerial Serial3(&UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial3_available() {
  return Serial3.available();
    234c:	89 e3       	ldi	r24, 0x39	; 57
    234e:	96 e0       	ldi	r25, 0x06	; 6
    2350:	2d dc       	rcall	.-1958   	; 0x1bac <_ZN14HardwareSerial9availableEv>
    2352:	21 e0       	ldi	r18, 0x01	; 1
    2354:	89 2b       	or	r24, r25
    2356:	09 f4       	brne	.+2      	; 0x235a <_Z17Serial3_availablev+0xe>
    2358:	20 e0       	ldi	r18, 0x00	; 0
}
    235a:	82 2f       	mov	r24, r18
    235c:	08 95       	ret

0000235e <_GLOBAL__sub_I___vector_54>:
    235e:	10 92 3c 06 	sts	0x063C, r1
    2362:	10 92 3b 06 	sts	0x063B, r1
    2366:	88 ee       	ldi	r24, 0xE8	; 232
    2368:	93 e0       	ldi	r25, 0x03	; 3
    236a:	a0 e0       	ldi	r26, 0x00	; 0
    236c:	b0 e0       	ldi	r27, 0x00	; 0
    236e:	80 93 3d 06 	sts	0x063D, r24
    2372:	90 93 3e 06 	sts	0x063E, r25
    2376:	a0 93 3f 06 	sts	0x063F, r26
    237a:	b0 93 40 06 	sts	0x0640, r27
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    237e:	8b e3       	ldi	r24, 0x3B	; 59
    2380:	92 e0       	ldi	r25, 0x02	; 2
    2382:	90 93 3a 06 	sts	0x063A, r25
    2386:	80 93 39 06 	sts	0x0639, r24
    238a:	85 e3       	ldi	r24, 0x35	; 53
    238c:	91 e0       	ldi	r25, 0x01	; 1
    238e:	90 93 46 06 	sts	0x0646, r25
    2392:	80 93 45 06 	sts	0x0645, r24
    2396:	84 e3       	ldi	r24, 0x34	; 52
    2398:	91 e0       	ldi	r25, 0x01	; 1
    239a:	90 93 48 06 	sts	0x0648, r25
    239e:	80 93 47 06 	sts	0x0647, r24
    23a2:	80 e3       	ldi	r24, 0x30	; 48
    23a4:	91 e0       	ldi	r25, 0x01	; 1
    23a6:	90 93 4a 06 	sts	0x064A, r25
    23aa:	80 93 49 06 	sts	0x0649, r24
    23ae:	81 e3       	ldi	r24, 0x31	; 49
    23b0:	91 e0       	ldi	r25, 0x01	; 1
    23b2:	90 93 4c 06 	sts	0x064C, r25
    23b6:	80 93 4b 06 	sts	0x064B, r24
    23ba:	82 e3       	ldi	r24, 0x32	; 50
    23bc:	91 e0       	ldi	r25, 0x01	; 1
    23be:	90 93 4e 06 	sts	0x064E, r25
    23c2:	80 93 4d 06 	sts	0x064D, r24
    23c6:	86 e3       	ldi	r24, 0x36	; 54
    23c8:	91 e0       	ldi	r25, 0x01	; 1
    23ca:	90 93 50 06 	sts	0x0650, r25
    23ce:	80 93 4f 06 	sts	0x064F, r24
    23d2:	10 92 52 06 	sts	0x0652, r1
    23d6:	10 92 53 06 	sts	0x0653, r1
    23da:	10 92 54 06 	sts	0x0654, r1
    23de:	10 92 55 06 	sts	0x0655, r1
    23e2:	08 95       	ret

000023e4 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    23e4:	08 95       	ret

000023e6 <_ZNK9IPAddress7printToER5Print>:
}

bool IPAddress::operator==(const uint8_t* addr) const
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}
    23e6:	af 92       	push	r10
    23e8:	bf 92       	push	r11
    23ea:	cf 92       	push	r12
    23ec:	df 92       	push	r13
    23ee:	ef 92       	push	r14
    23f0:	ff 92       	push	r15
    23f2:	0f 93       	push	r16
    23f4:	1f 93       	push	r17
    23f6:	cf 93       	push	r28
    23f8:	df 93       	push	r29
    23fa:	5c 01       	movw	r10, r24
    23fc:	7b 01       	movw	r14, r22
    23fe:	c0 e0       	ldi	r28, 0x00	; 0
    2400:	d0 e0       	ldi	r29, 0x00	; 0
    2402:	00 e0       	ldi	r16, 0x00	; 0
    2404:	10 e0       	ldi	r17, 0x00	; 0
    2406:	f5 01       	movw	r30, r10
    2408:	ec 0f       	add	r30, r28
    240a:	fd 1f       	adc	r31, r29
    240c:	4a e0       	ldi	r20, 0x0A	; 10
    240e:	50 e0       	ldi	r21, 0x00	; 0
    2410:	62 81       	ldd	r22, Z+2	; 0x02
    2412:	c7 01       	movw	r24, r14
    2414:	41 d1       	rcall	.+642    	; 0x2698 <_ZN5Print5printEhi>
    2416:	6c 01       	movw	r12, r24
    2418:	6e e2       	ldi	r22, 0x2E	; 46
    241a:	c7 01       	movw	r24, r14
    241c:	8a d0       	rcall	.+276    	; 0x2532 <_ZN5Print5printEc>
    241e:	8c 0d       	add	r24, r12
    2420:	9d 1d       	adc	r25, r13
    2422:	08 0f       	add	r16, r24
    2424:	19 1f       	adc	r17, r25
    2426:	21 96       	adiw	r28, 0x01	; 1
    2428:	c3 30       	cpi	r28, 0x03	; 3
    242a:	d1 05       	cpc	r29, r1
    242c:	61 f7       	brne	.-40     	; 0x2406 <_ZNK9IPAddress7printToER5Print+0x20>
    242e:	4a e0       	ldi	r20, 0x0A	; 10
    2430:	50 e0       	ldi	r21, 0x00	; 0
    2432:	f5 01       	movw	r30, r10
    2434:	65 81       	ldd	r22, Z+5	; 0x05
    2436:	c7 01       	movw	r24, r14
    2438:	2f d1       	rcall	.+606    	; 0x2698 <_ZN5Print5printEhi>
    243a:	80 0f       	add	r24, r16
    243c:	91 1f       	adc	r25, r17
    243e:	df 91       	pop	r29
    2440:	cf 91       	pop	r28
    2442:	1f 91       	pop	r17
    2444:	0f 91       	pop	r16
    2446:	ff 90       	pop	r15
    2448:	ef 90       	pop	r14
    244a:	df 90       	pop	r13
    244c:	cf 90       	pop	r12
    244e:	bf 90       	pop	r11
    2450:	af 90       	pop	r10
    2452:	08 95       	ret

00002454 <_ZN9IPAddressC1Ehhhh>:
    2454:	0f 93       	push	r16
    2456:	fc 01       	movw	r30, r24
    2458:	8b e4       	ldi	r24, 0x4B	; 75
    245a:	92 e0       	ldi	r25, 0x02	; 2
    245c:	91 83       	std	Z+1, r25	; 0x01
    245e:	80 83       	st	Z, r24
    2460:	62 83       	std	Z+2, r22	; 0x02
    2462:	43 83       	std	Z+3, r20	; 0x03
    2464:	24 83       	std	Z+4, r18	; 0x04
    2466:	05 83       	std	Z+5, r16	; 0x05
    2468:	0f 91       	pop	r16
    246a:	08 95       	ret

0000246c <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
    return n;
}
    246c:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    246e:	00 e0       	ldi	r16, 0x00	; 0
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	40 e0       	ldi	r20, 0x00	; 0
    2474:	60 e0       	ldi	r22, 0x00	; 0
    2476:	86 ed       	ldi	r24, 0xD6	; 214
    2478:	96 e0       	ldi	r25, 0x06	; 6
    247a:	ec df       	rcall	.-40     	; 0x2454 <_ZN9IPAddressC1Ehhhh>
    247c:	0f 91       	pop	r16
    247e:	08 95       	ret

00002480 <_Znaj>:
void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
  return malloc(size);
    2480:	0c 94 73 22 	jmp	0x44e6	; 0x44e6 <malloc>
}
    2484:	08 95       	ret

00002486 <_ZdlPv>:

void operator delete(void * ptr) {
  free(ptr);
    2486:	0c 94 0b 23 	jmp	0x4616	; 0x4616 <free>
    248a:	08 95       	ret

0000248c <_ZN5Print5writeEPKhj>:
size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    248c:	cf 92       	push	r12
    248e:	df 92       	push	r13
    2490:	ef 92       	push	r14
    2492:	ff 92       	push	r15
    2494:	0f 93       	push	r16
    2496:	1f 93       	push	r17
    2498:	cf 93       	push	r28
    249a:	df 93       	push	r29
    249c:	6c 01       	movw	r12, r24
    249e:	41 15       	cp	r20, r1
    24a0:	51 05       	cpc	r21, r1
    24a2:	b1 f0       	breq	.+44     	; 0x24d0 <_ZN5Print5writeEPKhj+0x44>
    24a4:	06 2f       	mov	r16, r22
    24a6:	17 2f       	mov	r17, r23
    24a8:	ea 01       	movw	r28, r20
    24aa:	e1 2c       	mov	r14, r1
    24ac:	f1 2c       	mov	r15, r1
    24ae:	d8 01       	movw	r26, r16
    24b0:	6d 91       	ld	r22, X+
    24b2:	8d 01       	movw	r16, r26
    24b4:	d6 01       	movw	r26, r12
    24b6:	ed 91       	ld	r30, X+
    24b8:	fc 91       	ld	r31, X
    24ba:	01 90       	ld	r0, Z+
    24bc:	f0 81       	ld	r31, Z
    24be:	e0 2d       	mov	r30, r0
    24c0:	c6 01       	movw	r24, r12
    24c2:	19 95       	eicall
    24c4:	e8 0e       	add	r14, r24
    24c6:	f9 1e       	adc	r15, r25
    24c8:	21 97       	sbiw	r28, 0x01	; 1
    24ca:	20 97       	sbiw	r28, 0x00	; 0
    24cc:	81 f7       	brne	.-32     	; 0x24ae <_ZN5Print5writeEPKhj+0x22>
    24ce:	02 c0       	rjmp	.+4      	; 0x24d4 <_ZN5Print5writeEPKhj+0x48>
    24d0:	e1 2c       	mov	r14, r1
    24d2:	f1 2c       	mov	r15, r1
    24d4:	c7 01       	movw	r24, r14
    24d6:	df 91       	pop	r29
    24d8:	cf 91       	pop	r28
    24da:	1f 91       	pop	r17
    24dc:	0f 91       	pop	r16
    24de:	ff 90       	pop	r15
    24e0:	ef 90       	pop	r14
    24e2:	df 90       	pop	r13
    24e4:	cf 90       	pop	r12
    24e6:	08 95       	ret

000024e8 <_ZN5Print5printERK6String>:
    24e8:	dc 01       	movw	r26, r24
    24ea:	ed 91       	ld	r30, X+
    24ec:	fc 91       	ld	r31, X
    24ee:	db 01       	movw	r26, r22
    24f0:	14 96       	adiw	r26, 0x04	; 4
    24f2:	4d 91       	ld	r20, X+
    24f4:	5c 91       	ld	r21, X
    24f6:	15 97       	sbiw	r26, 0x05	; 5
    24f8:	6d 91       	ld	r22, X+
    24fa:	7c 91       	ld	r23, X
    24fc:	02 80       	ldd	r0, Z+2	; 0x02
    24fe:	f3 81       	ldd	r31, Z+3	; 0x03
    2500:	e0 2d       	mov	r30, r0
    2502:	19 95       	eicall
    2504:	08 95       	ret

00002506 <_ZN5Print5printEPKc>:
    2506:	61 15       	cp	r22, r1
    2508:	71 05       	cpc	r23, r1
    250a:	81 f0       	breq	.+32     	; 0x252c <_ZN5Print5printEPKc+0x26>
    250c:	fb 01       	movw	r30, r22
    250e:	01 90       	ld	r0, Z+
    2510:	00 20       	and	r0, r0
    2512:	e9 f7       	brne	.-6      	; 0x250e <_ZN5Print5printEPKc+0x8>
    2514:	31 97       	sbiw	r30, 0x01	; 1
    2516:	af 01       	movw	r20, r30
    2518:	46 1b       	sub	r20, r22
    251a:	57 0b       	sbc	r21, r23
    251c:	dc 01       	movw	r26, r24
    251e:	ed 91       	ld	r30, X+
    2520:	fc 91       	ld	r31, X
    2522:	02 80       	ldd	r0, Z+2	; 0x02
    2524:	f3 81       	ldd	r31, Z+3	; 0x03
    2526:	e0 2d       	mov	r30, r0
    2528:	19 95       	eicall
    252a:	08 95       	ret
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	08 95       	ret

00002532 <_ZN5Print5printEc>:
    2532:	dc 01       	movw	r26, r24
    2534:	ed 91       	ld	r30, X+
    2536:	fc 91       	ld	r31, X
    2538:	01 90       	ld	r0, Z+
    253a:	f0 81       	ld	r31, Z
    253c:	e0 2d       	mov	r30, r0
    253e:	19 95       	eicall
    2540:	08 95       	ret

00002542 <_ZN5Print7printlnEv>:
    2542:	0f 93       	push	r16
    2544:	1f 93       	push	r17
    2546:	cf 93       	push	r28
    2548:	df 93       	push	r29
    254a:	ec 01       	movw	r28, r24
    254c:	6d e0       	ldi	r22, 0x0D	; 13
    254e:	f1 df       	rcall	.-30     	; 0x2532 <_ZN5Print5printEc>
    2550:	8c 01       	movw	r16, r24
    2552:	6a e0       	ldi	r22, 0x0A	; 10
    2554:	ce 01       	movw	r24, r28
    2556:	ed df       	rcall	.-38     	; 0x2532 <_ZN5Print5printEc>
    2558:	80 0f       	add	r24, r16
    255a:	91 1f       	adc	r25, r17
    255c:	df 91       	pop	r29
    255e:	cf 91       	pop	r28
    2560:	1f 91       	pop	r17
    2562:	0f 91       	pop	r16
    2564:	08 95       	ret

00002566 <_ZN5Print7printlnEPKc>:
    2566:	0f 93       	push	r16
    2568:	1f 93       	push	r17
    256a:	cf 93       	push	r28
    256c:	df 93       	push	r29
    256e:	ec 01       	movw	r28, r24
    2570:	ca df       	rcall	.-108    	; 0x2506 <_ZN5Print5printEPKc>
    2572:	8c 01       	movw	r16, r24
    2574:	ce 01       	movw	r24, r28
    2576:	e5 df       	rcall	.-54     	; 0x2542 <_ZN5Print7printlnEv>
    2578:	80 0f       	add	r24, r16
    257a:	91 1f       	adc	r25, r17
    257c:	df 91       	pop	r29
    257e:	cf 91       	pop	r28
    2580:	1f 91       	pop	r17
    2582:	0f 91       	pop	r16
    2584:	08 95       	ret

00002586 <_ZN5Print11printNumberEmh>:
    2586:	6f 92       	push	r6
    2588:	7f 92       	push	r7
    258a:	8f 92       	push	r8
    258c:	9f 92       	push	r9
    258e:	af 92       	push	r10
    2590:	bf 92       	push	r11
    2592:	cf 92       	push	r12
    2594:	df 92       	push	r13
    2596:	ef 92       	push	r14
    2598:	ff 92       	push	r15
    259a:	0f 93       	push	r16
    259c:	1f 93       	push	r17
    259e:	cf 93       	push	r28
    25a0:	df 93       	push	r29
    25a2:	cd b7       	in	r28, 0x3d	; 61
    25a4:	de b7       	in	r29, 0x3e	; 62
    25a6:	a1 97       	sbiw	r28, 0x21	; 33
    25a8:	0f b6       	in	r0, 0x3f	; 63
    25aa:	f8 94       	cli
    25ac:	de bf       	out	0x3e, r29	; 62
    25ae:	0f be       	out	0x3f, r0	; 63
    25b0:	cd bf       	out	0x3d, r28	; 61
    25b2:	6c 01       	movw	r12, r24
    25b4:	74 2e       	mov	r7, r20
    25b6:	35 2f       	mov	r19, r21
    25b8:	86 2f       	mov	r24, r22
    25ba:	97 2f       	mov	r25, r23
    25bc:	62 2e       	mov	r6, r18
    25be:	19 a2       	std	Y+33, r1	; 0x21
    25c0:	21 e0       	ldi	r18, 0x01	; 1
    25c2:	26 15       	cp	r18, r6
    25c4:	20 f0       	brcs	.+8      	; 0x25ce <_ZN5Print11printNumberEmh+0x48>
    25c6:	0f 2e       	mov	r0, r31
    25c8:	fa e0       	ldi	r31, 0x0A	; 10
    25ca:	6f 2e       	mov	r6, r31
    25cc:	f0 2d       	mov	r31, r0
    25ce:	7e 01       	movw	r14, r28
    25d0:	a1 e2       	ldi	r26, 0x21	; 33
    25d2:	ea 0e       	add	r14, r26
    25d4:	f1 1c       	adc	r15, r1
    25d6:	86 2c       	mov	r8, r6
    25d8:	91 2c       	mov	r9, r1
    25da:	a1 2c       	mov	r10, r1
    25dc:	b1 2c       	mov	r11, r1
    25de:	67 2d       	mov	r22, r7
    25e0:	73 2f       	mov	r23, r19
    25e2:	a5 01       	movw	r20, r10
    25e4:	94 01       	movw	r18, r8
    25e6:	0e 94 47 22 	call	0x448e	; 0x448e <__udivmodsi4>
    25ea:	e2 2f       	mov	r30, r18
    25ec:	73 2f       	mov	r23, r19
    25ee:	02 2f       	mov	r16, r18
    25f0:	13 2f       	mov	r17, r19
    25f2:	24 2f       	mov	r18, r20
    25f4:	35 2f       	mov	r19, r21
    25f6:	f7 2d       	mov	r31, r7
    25f8:	6e 9e       	mul	r6, r30
    25fa:	f0 19       	sub	r31, r0
    25fc:	11 24       	eor	r1, r1
    25fe:	b1 e0       	ldi	r27, 0x01	; 1
    2600:	eb 1a       	sub	r14, r27
    2602:	f1 08       	sbc	r15, r1
    2604:	fa 30       	cpi	r31, 0x0A	; 10
    2606:	10 f4       	brcc	.+4      	; 0x260c <_ZN5Print11printNumberEmh+0x86>
    2608:	f0 5d       	subi	r31, 0xD0	; 208
    260a:	01 c0       	rjmp	.+2      	; 0x260e <_ZN5Print11printNumberEmh+0x88>
    260c:	f9 5c       	subi	r31, 0xC9	; 201
    260e:	d7 01       	movw	r26, r14
    2610:	fc 93       	st	X, r31
    2612:	01 2b       	or	r16, r17
    2614:	02 2b       	or	r16, r18
    2616:	03 2b       	or	r16, r19
    2618:	29 f0       	breq	.+10     	; 0x2624 <_ZN5Print11printNumberEmh+0x9e>
    261a:	7e 2e       	mov	r7, r30
    261c:	37 2f       	mov	r19, r23
    261e:	84 2f       	mov	r24, r20
    2620:	95 2f       	mov	r25, r21
    2622:	dd cf       	rjmp	.-70     	; 0x25de <_ZN5Print11printNumberEmh+0x58>
    2624:	e1 14       	cp	r14, r1
    2626:	f1 04       	cpc	r15, r1
    2628:	91 f0       	breq	.+36     	; 0x264e <_ZN5Print11printNumberEmh+0xc8>
    262a:	f7 01       	movw	r30, r14
    262c:	01 90       	ld	r0, Z+
    262e:	00 20       	and	r0, r0
    2630:	e9 f7       	brne	.-6      	; 0x262c <_ZN5Print11printNumberEmh+0xa6>
    2632:	31 97       	sbiw	r30, 0x01	; 1
    2634:	af 01       	movw	r20, r30
    2636:	4e 19       	sub	r20, r14
    2638:	5f 09       	sbc	r21, r15
    263a:	d6 01       	movw	r26, r12
    263c:	ed 91       	ld	r30, X+
    263e:	fc 91       	ld	r31, X
    2640:	02 80       	ldd	r0, Z+2	; 0x02
    2642:	f3 81       	ldd	r31, Z+3	; 0x03
    2644:	e0 2d       	mov	r30, r0
    2646:	b7 01       	movw	r22, r14
    2648:	c6 01       	movw	r24, r12
    264a:	19 95       	eicall
    264c:	02 c0       	rjmp	.+4      	; 0x2652 <_ZN5Print11printNumberEmh+0xcc>
    264e:	80 e0       	ldi	r24, 0x00	; 0
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	a1 96       	adiw	r28, 0x21	; 33
    2654:	0f b6       	in	r0, 0x3f	; 63
    2656:	f8 94       	cli
    2658:	de bf       	out	0x3e, r29	; 62
    265a:	0f be       	out	0x3f, r0	; 63
    265c:	cd bf       	out	0x3d, r28	; 61
    265e:	df 91       	pop	r29
    2660:	cf 91       	pop	r28
    2662:	1f 91       	pop	r17
    2664:	0f 91       	pop	r16
    2666:	ff 90       	pop	r15
    2668:	ef 90       	pop	r14
    266a:	df 90       	pop	r13
    266c:	cf 90       	pop	r12
    266e:	bf 90       	pop	r11
    2670:	af 90       	pop	r10
    2672:	9f 90       	pop	r9
    2674:	8f 90       	pop	r8
    2676:	7f 90       	pop	r7
    2678:	6f 90       	pop	r6
    267a:	08 95       	ret

0000267c <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    267c:	21 15       	cp	r18, r1
    267e:	31 05       	cpc	r19, r1
    2680:	49 f4       	brne	.+18     	; 0x2694 <_ZN5Print5printEmi+0x18>
    2682:	dc 01       	movw	r26, r24
    2684:	ed 91       	ld	r30, X+
    2686:	fc 91       	ld	r31, X
    2688:	01 90       	ld	r0, Z+
    268a:	f0 81       	ld	r31, Z
    268c:	e0 2d       	mov	r30, r0
    268e:	64 2f       	mov	r22, r20
    2690:	19 95       	eicall
    2692:	08 95       	ret
  else return printNumber(n, base);
    2694:	78 cf       	rjmp	.-272    	; 0x2586 <_ZN5Print11printNumberEmh>
}
    2696:	08 95       	ret

00002698 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    2698:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    269a:	46 2f       	mov	r20, r22
    269c:	50 e0       	ldi	r21, 0x00	; 0
    269e:	60 e0       	ldi	r22, 0x00	; 0
    26a0:	70 e0       	ldi	r23, 0x00	; 0
    26a2:	ec cf       	rjmp	.-40     	; 0x267c <_ZN5Print5printEmi>
}
    26a4:	08 95       	ret

000026a6 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    26a6:	82 30       	cpi	r24, 0x02	; 2
    26a8:	a9 f0       	breq	.+42     	; 0x26d4 <_Z12disableTimerh+0x2e>
    26aa:	28 f4       	brcc	.+10     	; 0x26b6 <_Z12disableTimerh+0x10>
    26ac:	88 23       	and	r24, r24
    26ae:	49 f0       	breq	.+18     	; 0x26c2 <_Z12disableTimerh+0x1c>
    26b0:	81 30       	cpi	r24, 0x01	; 1
    26b2:	51 f0       	breq	.+20     	; 0x26c8 <_Z12disableTimerh+0x22>
    26b4:	08 95       	ret
    26b6:	84 30       	cpi	r24, 0x04	; 4
    26b8:	09 f1       	breq	.+66     	; 0x26fc <_Z12disableTimerh+0x56>
    26ba:	e8 f0       	brcs	.+58     	; 0x26f6 <_Z12disableTimerh+0x50>
    26bc:	85 30       	cpi	r24, 0x05	; 5
    26be:	09 f1       	breq	.+66     	; 0x2702 <_Z12disableTimerh+0x5c>
    26c0:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    26c2:	10 92 6e 00 	sts	0x006E, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
    26c6:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    26c8:	ef e6       	ldi	r30, 0x6F	; 111
    26ca:	f0 e0       	ldi	r31, 0x00	; 0
    26cc:	80 81       	ld	r24, Z
    26ce:	8d 7f       	andi	r24, 0xFD	; 253
    26d0:	80 83       	st	Z, r24
      break;
    26d2:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    26d4:	e0 e7       	ldi	r30, 0x70	; 112
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	80 81       	ld	r24, Z
    26da:	8d 7f       	andi	r24, 0xFD	; 253
    26dc:	80 83       	st	Z, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
    26e4:	e1 eb       	ldi	r30, 0xB1	; 177
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	80 81       	ld	r24, Z
    26ea:	88 7f       	andi	r24, 0xF8	; 248
    26ec:	84 60       	ori	r24, 0x04	; 4
    26ee:	80 83       	st	Z, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    26f0:	10 92 b3 00 	sts	0x00B3, r1
      #endif
      break;
    26f4:	08 95       	ret

#if defined(TIMSK3)
    case 3:
      TIMSK3 = 0;
    26f6:	10 92 71 00 	sts	0x0071, r1
      break;
    26fa:	08 95       	ret
#endif

#if defined(TIMSK4)
    case 4:
      TIMSK4 = 0;
    26fc:	10 92 72 00 	sts	0x0072, r1
      break;
    2700:	08 95       	ret
#endif

#if defined(TIMSK5)
    case 5:
      TIMSK5 = 0;
    2702:	10 92 73 00 	sts	0x0073, r1
    2706:	08 95       	ret

00002708 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
    2708:	cf 93       	push	r28
    270a:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    270c:	80 91 06 02 	lds	r24, 0x0206
    2710:	8c 13       	cpse	r24, r28
    2712:	07 c0       	rjmp	.+14     	; 0x2722 <_Z6noToneh+0x1a>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    2714:	e3 e0       	ldi	r30, 0x03	; 3
    2716:	f6 e0       	ldi	r31, 0x06	; 6
    2718:	84 91       	lpm	r24, Z
      tone_pins[i] = 255;
    271a:	9f ef       	ldi	r25, 0xFF	; 255
    271c:	90 93 06 02 	sts	0x0206, r25
    2720:	01 c0       	rjmp	.+2      	; 0x2724 <_Z6noToneh+0x1c>
    2722:	8f ef       	ldi	r24, 0xFF	; 255
    }
  }
  
  disableTimer(_timer);
    2724:	c0 df       	rcall	.-128    	; 0x26a6 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
    2726:	60 e0       	ldi	r22, 0x00	; 0
    2728:	8c 2f       	mov	r24, r28
    272a:	95 d3       	rcall	.+1834   	; 0x2e56 <digitalWrite>
}
    272c:	cf 91       	pop	r28
    272e:	08 95       	ret

00002730 <__vector_13>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
    2730:	1f 92       	push	r1
    2732:	0f 92       	push	r0
    2734:	0f b6       	in	r0, 0x3f	; 63
    2736:	0f 92       	push	r0
    2738:	11 24       	eor	r1, r1
    273a:	0b b6       	in	r0, 0x3b	; 59
    273c:	0f 92       	push	r0
    273e:	2f 93       	push	r18
    2740:	3f 93       	push	r19
    2742:	4f 93       	push	r20
    2744:	5f 93       	push	r21
    2746:	6f 93       	push	r22
    2748:	7f 93       	push	r23
    274a:	8f 93       	push	r24
    274c:	9f 93       	push	r25
    274e:	af 93       	push	r26
    2750:	bf 93       	push	r27
    2752:	ef 93       	push	r30
    2754:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
    2756:	80 91 df 06 	lds	r24, 0x06DF
    275a:	90 91 e0 06 	lds	r25, 0x06E0
    275e:	a0 91 e1 06 	lds	r26, 0x06E1
    2762:	b0 91 e2 06 	lds	r27, 0x06E2
    2766:	89 2b       	or	r24, r25
    2768:	8a 2b       	or	r24, r26
    276a:	8b 2b       	or	r24, r27
    276c:	51 f1       	breq	.+84     	; 0x27c2 <__vector_13+0x92>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    276e:	80 91 dc 06 	lds	r24, 0x06DC
    2772:	e0 91 dd 06 	lds	r30, 0x06DD
    2776:	f0 91 de 06 	lds	r31, 0x06DE
    277a:	90 81       	ld	r25, Z
    277c:	89 27       	eor	r24, r25
    277e:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
    2780:	80 91 df 06 	lds	r24, 0x06DF
    2784:	90 91 e0 06 	lds	r25, 0x06E0
    2788:	a0 91 e1 06 	lds	r26, 0x06E1
    278c:	b0 91 e2 06 	lds	r27, 0x06E2
    2790:	18 16       	cp	r1, r24
    2792:	19 06       	cpc	r1, r25
    2794:	1a 06       	cpc	r1, r26
    2796:	1b 06       	cpc	r1, r27
    2798:	bc f4       	brge	.+46     	; 0x27c8 <__vector_13+0x98>
      timer2_toggle_count--;
    279a:	80 91 df 06 	lds	r24, 0x06DF
    279e:	90 91 e0 06 	lds	r25, 0x06E0
    27a2:	a0 91 e1 06 	lds	r26, 0x06E1
    27a6:	b0 91 e2 06 	lds	r27, 0x06E2
    27aa:	01 97       	sbiw	r24, 0x01	; 1
    27ac:	a1 09       	sbc	r26, r1
    27ae:	b1 09       	sbc	r27, r1
    27b0:	80 93 df 06 	sts	0x06DF, r24
    27b4:	90 93 e0 06 	sts	0x06E0, r25
    27b8:	a0 93 e1 06 	sts	0x06E1, r26
    27bc:	b0 93 e2 06 	sts	0x06E2, r27
    27c0:	03 c0       	rjmp	.+6      	; 0x27c8 <__vector_13+0x98>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    27c2:	80 91 06 02 	lds	r24, 0x0206
    27c6:	a0 df       	rcall	.-192    	; 0x2708 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    27c8:	ff 91       	pop	r31
    27ca:	ef 91       	pop	r30
    27cc:	bf 91       	pop	r27
    27ce:	af 91       	pop	r26
    27d0:	9f 91       	pop	r25
    27d2:	8f 91       	pop	r24
    27d4:	7f 91       	pop	r23
    27d6:	6f 91       	pop	r22
    27d8:	5f 91       	pop	r21
    27da:	4f 91       	pop	r20
    27dc:	3f 91       	pop	r19
    27de:	2f 91       	pop	r18
    27e0:	0f 90       	pop	r0
    27e2:	0b be       	out	0x3b, r0	; 59
    27e4:	0f 90       	pop	r0
    27e6:	0f be       	out	0x3f, r0	; 63
    27e8:	0f 90       	pop	r0
    27ea:	1f 90       	pop	r1
    27ec:	18 95       	reti

000027ee <__vector_1>:
		intFunc[EXTERNAL_INT_4]();
}

#elif defined(EICRA) && defined(EICRB)

ISR(INT0_vect) {
    27ee:	1f 92       	push	r1
    27f0:	0f 92       	push	r0
    27f2:	0f b6       	in	r0, 0x3f	; 63
    27f4:	0f 92       	push	r0
    27f6:	11 24       	eor	r1, r1
    27f8:	0b b6       	in	r0, 0x3b	; 59
    27fa:	0f 92       	push	r0
    27fc:	2f 93       	push	r18
    27fe:	3f 93       	push	r19
    2800:	4f 93       	push	r20
    2802:	5f 93       	push	r21
    2804:	6f 93       	push	r22
    2806:	7f 93       	push	r23
    2808:	8f 93       	push	r24
    280a:	9f 93       	push	r25
    280c:	af 93       	push	r26
    280e:	bf 93       	push	r27
    2810:	ef 93       	push	r30
    2812:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_2])
    2814:	80 91 e7 06 	lds	r24, 0x06E7
    2818:	90 91 e8 06 	lds	r25, 0x06E8
    281c:	89 2b       	or	r24, r25
    281e:	29 f0       	breq	.+10     	; 0x282a <__vector_1+0x3c>
    intFunc[EXTERNAL_INT_2]();
    2820:	e0 91 e7 06 	lds	r30, 0x06E7
    2824:	f0 91 e8 06 	lds	r31, 0x06E8
    2828:	19 95       	eicall
}
    282a:	ff 91       	pop	r31
    282c:	ef 91       	pop	r30
    282e:	bf 91       	pop	r27
    2830:	af 91       	pop	r26
    2832:	9f 91       	pop	r25
    2834:	8f 91       	pop	r24
    2836:	7f 91       	pop	r23
    2838:	6f 91       	pop	r22
    283a:	5f 91       	pop	r21
    283c:	4f 91       	pop	r20
    283e:	3f 91       	pop	r19
    2840:	2f 91       	pop	r18
    2842:	0f 90       	pop	r0
    2844:	0b be       	out	0x3b, r0	; 59
    2846:	0f 90       	pop	r0
    2848:	0f be       	out	0x3f, r0	; 63
    284a:	0f 90       	pop	r0
    284c:	1f 90       	pop	r1
    284e:	18 95       	reti

00002850 <__vector_2>:

ISR(INT1_vect) {
    2850:	1f 92       	push	r1
    2852:	0f 92       	push	r0
    2854:	0f b6       	in	r0, 0x3f	; 63
    2856:	0f 92       	push	r0
    2858:	11 24       	eor	r1, r1
    285a:	0b b6       	in	r0, 0x3b	; 59
    285c:	0f 92       	push	r0
    285e:	2f 93       	push	r18
    2860:	3f 93       	push	r19
    2862:	4f 93       	push	r20
    2864:	5f 93       	push	r21
    2866:	6f 93       	push	r22
    2868:	7f 93       	push	r23
    286a:	8f 93       	push	r24
    286c:	9f 93       	push	r25
    286e:	af 93       	push	r26
    2870:	bf 93       	push	r27
    2872:	ef 93       	push	r30
    2874:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_3])
    2876:	80 91 e9 06 	lds	r24, 0x06E9
    287a:	90 91 ea 06 	lds	r25, 0x06EA
    287e:	89 2b       	or	r24, r25
    2880:	29 f0       	breq	.+10     	; 0x288c <__vector_2+0x3c>
    intFunc[EXTERNAL_INT_3]();
    2882:	e0 91 e9 06 	lds	r30, 0x06E9
    2886:	f0 91 ea 06 	lds	r31, 0x06EA
    288a:	19 95       	eicall
}
    288c:	ff 91       	pop	r31
    288e:	ef 91       	pop	r30
    2890:	bf 91       	pop	r27
    2892:	af 91       	pop	r26
    2894:	9f 91       	pop	r25
    2896:	8f 91       	pop	r24
    2898:	7f 91       	pop	r23
    289a:	6f 91       	pop	r22
    289c:	5f 91       	pop	r21
    289e:	4f 91       	pop	r20
    28a0:	3f 91       	pop	r19
    28a2:	2f 91       	pop	r18
    28a4:	0f 90       	pop	r0
    28a6:	0b be       	out	0x3b, r0	; 59
    28a8:	0f 90       	pop	r0
    28aa:	0f be       	out	0x3f, r0	; 63
    28ac:	0f 90       	pop	r0
    28ae:	1f 90       	pop	r1
    28b0:	18 95       	reti

000028b2 <__vector_3>:

ISR(INT2_vect) {
    28b2:	1f 92       	push	r1
    28b4:	0f 92       	push	r0
    28b6:	0f b6       	in	r0, 0x3f	; 63
    28b8:	0f 92       	push	r0
    28ba:	11 24       	eor	r1, r1
    28bc:	0b b6       	in	r0, 0x3b	; 59
    28be:	0f 92       	push	r0
    28c0:	2f 93       	push	r18
    28c2:	3f 93       	push	r19
    28c4:	4f 93       	push	r20
    28c6:	5f 93       	push	r21
    28c8:	6f 93       	push	r22
    28ca:	7f 93       	push	r23
    28cc:	8f 93       	push	r24
    28ce:	9f 93       	push	r25
    28d0:	af 93       	push	r26
    28d2:	bf 93       	push	r27
    28d4:	ef 93       	push	r30
    28d6:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_4])
    28d8:	80 91 eb 06 	lds	r24, 0x06EB
    28dc:	90 91 ec 06 	lds	r25, 0x06EC
    28e0:	89 2b       	or	r24, r25
    28e2:	29 f0       	breq	.+10     	; 0x28ee <__vector_3+0x3c>
    intFunc[EXTERNAL_INT_4]();
    28e4:	e0 91 eb 06 	lds	r30, 0x06EB
    28e8:	f0 91 ec 06 	lds	r31, 0x06EC
    28ec:	19 95       	eicall
}
    28ee:	ff 91       	pop	r31
    28f0:	ef 91       	pop	r30
    28f2:	bf 91       	pop	r27
    28f4:	af 91       	pop	r26
    28f6:	9f 91       	pop	r25
    28f8:	8f 91       	pop	r24
    28fa:	7f 91       	pop	r23
    28fc:	6f 91       	pop	r22
    28fe:	5f 91       	pop	r21
    2900:	4f 91       	pop	r20
    2902:	3f 91       	pop	r19
    2904:	2f 91       	pop	r18
    2906:	0f 90       	pop	r0
    2908:	0b be       	out	0x3b, r0	; 59
    290a:	0f 90       	pop	r0
    290c:	0f be       	out	0x3f, r0	; 63
    290e:	0f 90       	pop	r0
    2910:	1f 90       	pop	r1
    2912:	18 95       	reti

00002914 <__vector_4>:

ISR(INT3_vect) {
    2914:	1f 92       	push	r1
    2916:	0f 92       	push	r0
    2918:	0f b6       	in	r0, 0x3f	; 63
    291a:	0f 92       	push	r0
    291c:	11 24       	eor	r1, r1
    291e:	0b b6       	in	r0, 0x3b	; 59
    2920:	0f 92       	push	r0
    2922:	2f 93       	push	r18
    2924:	3f 93       	push	r19
    2926:	4f 93       	push	r20
    2928:	5f 93       	push	r21
    292a:	6f 93       	push	r22
    292c:	7f 93       	push	r23
    292e:	8f 93       	push	r24
    2930:	9f 93       	push	r25
    2932:	af 93       	push	r26
    2934:	bf 93       	push	r27
    2936:	ef 93       	push	r30
    2938:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_5])
    293a:	80 91 ed 06 	lds	r24, 0x06ED
    293e:	90 91 ee 06 	lds	r25, 0x06EE
    2942:	89 2b       	or	r24, r25
    2944:	29 f0       	breq	.+10     	; 0x2950 <__vector_4+0x3c>
    intFunc[EXTERNAL_INT_5]();
    2946:	e0 91 ed 06 	lds	r30, 0x06ED
    294a:	f0 91 ee 06 	lds	r31, 0x06EE
    294e:	19 95       	eicall
}
    2950:	ff 91       	pop	r31
    2952:	ef 91       	pop	r30
    2954:	bf 91       	pop	r27
    2956:	af 91       	pop	r26
    2958:	9f 91       	pop	r25
    295a:	8f 91       	pop	r24
    295c:	7f 91       	pop	r23
    295e:	6f 91       	pop	r22
    2960:	5f 91       	pop	r21
    2962:	4f 91       	pop	r20
    2964:	3f 91       	pop	r19
    2966:	2f 91       	pop	r18
    2968:	0f 90       	pop	r0
    296a:	0b be       	out	0x3b, r0	; 59
    296c:	0f 90       	pop	r0
    296e:	0f be       	out	0x3f, r0	; 63
    2970:	0f 90       	pop	r0
    2972:	1f 90       	pop	r1
    2974:	18 95       	reti

00002976 <__vector_5>:

ISR(INT4_vect) {
    2976:	1f 92       	push	r1
    2978:	0f 92       	push	r0
    297a:	0f b6       	in	r0, 0x3f	; 63
    297c:	0f 92       	push	r0
    297e:	11 24       	eor	r1, r1
    2980:	0b b6       	in	r0, 0x3b	; 59
    2982:	0f 92       	push	r0
    2984:	2f 93       	push	r18
    2986:	3f 93       	push	r19
    2988:	4f 93       	push	r20
    298a:	5f 93       	push	r21
    298c:	6f 93       	push	r22
    298e:	7f 93       	push	r23
    2990:	8f 93       	push	r24
    2992:	9f 93       	push	r25
    2994:	af 93       	push	r26
    2996:	bf 93       	push	r27
    2998:	ef 93       	push	r30
    299a:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    299c:	80 91 e3 06 	lds	r24, 0x06E3
    29a0:	90 91 e4 06 	lds	r25, 0x06E4
    29a4:	89 2b       	or	r24, r25
    29a6:	29 f0       	breq	.+10     	; 0x29b2 <__vector_5+0x3c>
    intFunc[EXTERNAL_INT_0]();
    29a8:	e0 91 e3 06 	lds	r30, 0x06E3
    29ac:	f0 91 e4 06 	lds	r31, 0x06E4
    29b0:	19 95       	eicall
}
    29b2:	ff 91       	pop	r31
    29b4:	ef 91       	pop	r30
    29b6:	bf 91       	pop	r27
    29b8:	af 91       	pop	r26
    29ba:	9f 91       	pop	r25
    29bc:	8f 91       	pop	r24
    29be:	7f 91       	pop	r23
    29c0:	6f 91       	pop	r22
    29c2:	5f 91       	pop	r21
    29c4:	4f 91       	pop	r20
    29c6:	3f 91       	pop	r19
    29c8:	2f 91       	pop	r18
    29ca:	0f 90       	pop	r0
    29cc:	0b be       	out	0x3b, r0	; 59
    29ce:	0f 90       	pop	r0
    29d0:	0f be       	out	0x3f, r0	; 63
    29d2:	0f 90       	pop	r0
    29d4:	1f 90       	pop	r1
    29d6:	18 95       	reti

000029d8 <__vector_6>:

ISR(INT5_vect) {
    29d8:	1f 92       	push	r1
    29da:	0f 92       	push	r0
    29dc:	0f b6       	in	r0, 0x3f	; 63
    29de:	0f 92       	push	r0
    29e0:	11 24       	eor	r1, r1
    29e2:	0b b6       	in	r0, 0x3b	; 59
    29e4:	0f 92       	push	r0
    29e6:	2f 93       	push	r18
    29e8:	3f 93       	push	r19
    29ea:	4f 93       	push	r20
    29ec:	5f 93       	push	r21
    29ee:	6f 93       	push	r22
    29f0:	7f 93       	push	r23
    29f2:	8f 93       	push	r24
    29f4:	9f 93       	push	r25
    29f6:	af 93       	push	r26
    29f8:	bf 93       	push	r27
    29fa:	ef 93       	push	r30
    29fc:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    29fe:	80 91 e5 06 	lds	r24, 0x06E5
    2a02:	90 91 e6 06 	lds	r25, 0x06E6
    2a06:	89 2b       	or	r24, r25
    2a08:	29 f0       	breq	.+10     	; 0x2a14 <__vector_6+0x3c>
    intFunc[EXTERNAL_INT_1]();
    2a0a:	e0 91 e5 06 	lds	r30, 0x06E5
    2a0e:	f0 91 e6 06 	lds	r31, 0x06E6
    2a12:	19 95       	eicall
}
    2a14:	ff 91       	pop	r31
    2a16:	ef 91       	pop	r30
    2a18:	bf 91       	pop	r27
    2a1a:	af 91       	pop	r26
    2a1c:	9f 91       	pop	r25
    2a1e:	8f 91       	pop	r24
    2a20:	7f 91       	pop	r23
    2a22:	6f 91       	pop	r22
    2a24:	5f 91       	pop	r21
    2a26:	4f 91       	pop	r20
    2a28:	3f 91       	pop	r19
    2a2a:	2f 91       	pop	r18
    2a2c:	0f 90       	pop	r0
    2a2e:	0b be       	out	0x3b, r0	; 59
    2a30:	0f 90       	pop	r0
    2a32:	0f be       	out	0x3f, r0	; 63
    2a34:	0f 90       	pop	r0
    2a36:	1f 90       	pop	r1
    2a38:	18 95       	reti

00002a3a <__vector_7>:

ISR(INT6_vect) {
    2a3a:	1f 92       	push	r1
    2a3c:	0f 92       	push	r0
    2a3e:	0f b6       	in	r0, 0x3f	; 63
    2a40:	0f 92       	push	r0
    2a42:	11 24       	eor	r1, r1
    2a44:	0b b6       	in	r0, 0x3b	; 59
    2a46:	0f 92       	push	r0
    2a48:	2f 93       	push	r18
    2a4a:	3f 93       	push	r19
    2a4c:	4f 93       	push	r20
    2a4e:	5f 93       	push	r21
    2a50:	6f 93       	push	r22
    2a52:	7f 93       	push	r23
    2a54:	8f 93       	push	r24
    2a56:	9f 93       	push	r25
    2a58:	af 93       	push	r26
    2a5a:	bf 93       	push	r27
    2a5c:	ef 93       	push	r30
    2a5e:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_6])
    2a60:	80 91 ef 06 	lds	r24, 0x06EF
    2a64:	90 91 f0 06 	lds	r25, 0x06F0
    2a68:	89 2b       	or	r24, r25
    2a6a:	29 f0       	breq	.+10     	; 0x2a76 <__vector_7+0x3c>
    intFunc[EXTERNAL_INT_6]();
    2a6c:	e0 91 ef 06 	lds	r30, 0x06EF
    2a70:	f0 91 f0 06 	lds	r31, 0x06F0
    2a74:	19 95       	eicall
}
    2a76:	ff 91       	pop	r31
    2a78:	ef 91       	pop	r30
    2a7a:	bf 91       	pop	r27
    2a7c:	af 91       	pop	r26
    2a7e:	9f 91       	pop	r25
    2a80:	8f 91       	pop	r24
    2a82:	7f 91       	pop	r23
    2a84:	6f 91       	pop	r22
    2a86:	5f 91       	pop	r21
    2a88:	4f 91       	pop	r20
    2a8a:	3f 91       	pop	r19
    2a8c:	2f 91       	pop	r18
    2a8e:	0f 90       	pop	r0
    2a90:	0b be       	out	0x3b, r0	; 59
    2a92:	0f 90       	pop	r0
    2a94:	0f be       	out	0x3f, r0	; 63
    2a96:	0f 90       	pop	r0
    2a98:	1f 90       	pop	r1
    2a9a:	18 95       	reti

00002a9c <__vector_8>:

ISR(INT7_vect) {
    2a9c:	1f 92       	push	r1
    2a9e:	0f 92       	push	r0
    2aa0:	0f b6       	in	r0, 0x3f	; 63
    2aa2:	0f 92       	push	r0
    2aa4:	11 24       	eor	r1, r1
    2aa6:	0b b6       	in	r0, 0x3b	; 59
    2aa8:	0f 92       	push	r0
    2aaa:	2f 93       	push	r18
    2aac:	3f 93       	push	r19
    2aae:	4f 93       	push	r20
    2ab0:	5f 93       	push	r21
    2ab2:	6f 93       	push	r22
    2ab4:	7f 93       	push	r23
    2ab6:	8f 93       	push	r24
    2ab8:	9f 93       	push	r25
    2aba:	af 93       	push	r26
    2abc:	bf 93       	push	r27
    2abe:	ef 93       	push	r30
    2ac0:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_7])
    2ac2:	80 91 f1 06 	lds	r24, 0x06F1
    2ac6:	90 91 f2 06 	lds	r25, 0x06F2
    2aca:	89 2b       	or	r24, r25
    2acc:	29 f0       	breq	.+10     	; 0x2ad8 <__vector_8+0x3c>
    intFunc[EXTERNAL_INT_7]();
    2ace:	e0 91 f1 06 	lds	r30, 0x06F1
    2ad2:	f0 91 f2 06 	lds	r31, 0x06F2
    2ad6:	19 95       	eicall
}
    2ad8:	ff 91       	pop	r31
    2ada:	ef 91       	pop	r30
    2adc:	bf 91       	pop	r27
    2ade:	af 91       	pop	r26
    2ae0:	9f 91       	pop	r25
    2ae2:	8f 91       	pop	r24
    2ae4:	7f 91       	pop	r23
    2ae6:	6f 91       	pop	r22
    2ae8:	5f 91       	pop	r21
    2aea:	4f 91       	pop	r20
    2aec:	3f 91       	pop	r19
    2aee:	2f 91       	pop	r18
    2af0:	0f 90       	pop	r0
    2af2:	0b be       	out	0x3b, r0	; 59
    2af4:	0f 90       	pop	r0
    2af6:	0f be       	out	0x3f, r0	; 63
    2af8:	0f 90       	pop	r0
    2afa:	1f 90       	pop	r1
    2afc:	18 95       	reti

00002afe <__vector_23>:
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    2afe:	1f 92       	push	r1
    2b00:	0f 92       	push	r0
    2b02:	0f b6       	in	r0, 0x3f	; 63
    2b04:	0f 92       	push	r0
    2b06:	11 24       	eor	r1, r1
    2b08:	2f 93       	push	r18
    2b0a:	3f 93       	push	r19
    2b0c:	8f 93       	push	r24
    2b0e:	9f 93       	push	r25
    2b10:	af 93       	push	r26
    2b12:	bf 93       	push	r27
    2b14:	80 91 f4 06 	lds	r24, 0x06F4
    2b18:	90 91 f5 06 	lds	r25, 0x06F5
    2b1c:	a0 91 f6 06 	lds	r26, 0x06F6
    2b20:	b0 91 f7 06 	lds	r27, 0x06F7
    2b24:	30 91 f3 06 	lds	r19, 0x06F3
    2b28:	23 e0       	ldi	r18, 0x03	; 3
    2b2a:	23 0f       	add	r18, r19
    2b2c:	2d 37       	cpi	r18, 0x7D	; 125
    2b2e:	20 f4       	brcc	.+8      	; 0x2b38 <__vector_23+0x3a>
    2b30:	01 96       	adiw	r24, 0x01	; 1
    2b32:	a1 1d       	adc	r26, r1
    2b34:	b1 1d       	adc	r27, r1
    2b36:	05 c0       	rjmp	.+10     	; 0x2b42 <__vector_23+0x44>
    2b38:	26 e8       	ldi	r18, 0x86	; 134
    2b3a:	23 0f       	add	r18, r19
    2b3c:	02 96       	adiw	r24, 0x02	; 2
    2b3e:	a1 1d       	adc	r26, r1
    2b40:	b1 1d       	adc	r27, r1
    2b42:	20 93 f3 06 	sts	0x06F3, r18
    2b46:	80 93 f4 06 	sts	0x06F4, r24
    2b4a:	90 93 f5 06 	sts	0x06F5, r25
    2b4e:	a0 93 f6 06 	sts	0x06F6, r26
    2b52:	b0 93 f7 06 	sts	0x06F7, r27
    2b56:	80 91 f8 06 	lds	r24, 0x06F8
    2b5a:	90 91 f9 06 	lds	r25, 0x06F9
    2b5e:	a0 91 fa 06 	lds	r26, 0x06FA
    2b62:	b0 91 fb 06 	lds	r27, 0x06FB
    2b66:	01 96       	adiw	r24, 0x01	; 1
    2b68:	a1 1d       	adc	r26, r1
    2b6a:	b1 1d       	adc	r27, r1
    2b6c:	80 93 f8 06 	sts	0x06F8, r24
    2b70:	90 93 f9 06 	sts	0x06F9, r25
    2b74:	a0 93 fa 06 	sts	0x06FA, r26
    2b78:	b0 93 fb 06 	sts	0x06FB, r27
    2b7c:	bf 91       	pop	r27
    2b7e:	af 91       	pop	r26
    2b80:	9f 91       	pop	r25
    2b82:	8f 91       	pop	r24
    2b84:	3f 91       	pop	r19
    2b86:	2f 91       	pop	r18
    2b88:	0f 90       	pop	r0
    2b8a:	0f be       	out	0x3f, r0	; 63
    2b8c:	0f 90       	pop	r0
    2b8e:	1f 90       	pop	r1
    2b90:	18 95       	reti

00002b92 <millis>:
    2b92:	2f b7       	in	r18, 0x3f	; 63
    2b94:	f8 94       	cli
    2b96:	60 91 f4 06 	lds	r22, 0x06F4
    2b9a:	70 91 f5 06 	lds	r23, 0x06F5
    2b9e:	80 91 f6 06 	lds	r24, 0x06F6
    2ba2:	90 91 f7 06 	lds	r25, 0x06F7
    2ba6:	2f bf       	out	0x3f, r18	; 63
    2ba8:	08 95       	ret

00002baa <micros>:
    2baa:	3f b7       	in	r19, 0x3f	; 63
    2bac:	f8 94       	cli
    2bae:	80 91 f8 06 	lds	r24, 0x06F8
    2bb2:	90 91 f9 06 	lds	r25, 0x06F9
    2bb6:	a0 91 fa 06 	lds	r26, 0x06FA
    2bba:	b0 91 fb 06 	lds	r27, 0x06FB
    2bbe:	26 b5       	in	r18, 0x26	; 38
    2bc0:	a8 9b       	sbis	0x15, 0	; 21
    2bc2:	05 c0       	rjmp	.+10     	; 0x2bce <micros+0x24>
    2bc4:	2f 3f       	cpi	r18, 0xFF	; 255
    2bc6:	19 f0       	breq	.+6      	; 0x2bce <micros+0x24>
    2bc8:	01 96       	adiw	r24, 0x01	; 1
    2bca:	a1 1d       	adc	r26, r1
    2bcc:	b1 1d       	adc	r27, r1
    2bce:	3f bf       	out	0x3f, r19	; 63
    2bd0:	ba 2f       	mov	r27, r26
    2bd2:	a9 2f       	mov	r26, r25
    2bd4:	98 2f       	mov	r25, r24
    2bd6:	88 27       	eor	r24, r24
    2bd8:	82 0f       	add	r24, r18
    2bda:	91 1d       	adc	r25, r1
    2bdc:	a1 1d       	adc	r26, r1
    2bde:	b1 1d       	adc	r27, r1
    2be0:	bc 01       	movw	r22, r24
    2be2:	cd 01       	movw	r24, r26
    2be4:	66 0f       	add	r22, r22
    2be6:	77 1f       	adc	r23, r23
    2be8:	88 1f       	adc	r24, r24
    2bea:	99 1f       	adc	r25, r25
    2bec:	66 0f       	add	r22, r22
    2bee:	77 1f       	adc	r23, r23
    2bf0:	88 1f       	adc	r24, r24
    2bf2:	99 1f       	adc	r25, r25
    2bf4:	08 95       	ret

00002bf6 <delay>:
    2bf6:	cf 92       	push	r12
    2bf8:	df 92       	push	r13
    2bfa:	ef 92       	push	r14
    2bfc:	ff 92       	push	r15
    2bfe:	cf 93       	push	r28
    2c00:	df 93       	push	r29
    2c02:	6b 01       	movw	r12, r22
    2c04:	7c 01       	movw	r14, r24
    2c06:	d1 df       	rcall	.-94     	; 0x2baa <micros>
    2c08:	eb 01       	movw	r28, r22
    2c0a:	c1 14       	cp	r12, r1
    2c0c:	d1 04       	cpc	r13, r1
    2c0e:	e1 04       	cpc	r14, r1
    2c10:	f1 04       	cpc	r15, r1
    2c12:	99 f0       	breq	.+38     	; 0x2c3a <delay+0x44>
    2c14:	e7 db       	rcall	.-2098   	; 0x23e4 <yield>
    2c16:	c9 df       	rcall	.-110    	; 0x2baa <micros>
    2c18:	6c 1b       	sub	r22, r28
    2c1a:	7d 0b       	sbc	r23, r29
    2c1c:	68 3e       	cpi	r22, 0xE8	; 232
    2c1e:	73 40       	sbci	r23, 0x03	; 3
    2c20:	38 f0       	brcs	.+14     	; 0x2c30 <delay+0x3a>
    2c22:	81 e0       	ldi	r24, 0x01	; 1
    2c24:	c8 1a       	sub	r12, r24
    2c26:	d1 08       	sbc	r13, r1
    2c28:	e1 08       	sbc	r14, r1
    2c2a:	f1 08       	sbc	r15, r1
    2c2c:	c8 51       	subi	r28, 0x18	; 24
    2c2e:	dc 4f       	sbci	r29, 0xFC	; 252
    2c30:	c1 14       	cp	r12, r1
    2c32:	d1 04       	cpc	r13, r1
    2c34:	e1 04       	cpc	r14, r1
    2c36:	f1 04       	cpc	r15, r1
    2c38:	69 f7       	brne	.-38     	; 0x2c14 <delay+0x1e>
    2c3a:	df 91       	pop	r29
    2c3c:	cf 91       	pop	r28
    2c3e:	ff 90       	pop	r15
    2c40:	ef 90       	pop	r14
    2c42:	df 90       	pop	r13
    2c44:	cf 90       	pop	r12
    2c46:	08 95       	ret

00002c48 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2c48:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2c4a:	84 b5       	in	r24, 0x24	; 36
    2c4c:	82 60       	ori	r24, 0x02	; 2
    2c4e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2c50:	84 b5       	in	r24, 0x24	; 36
    2c52:	81 60       	ori	r24, 0x01	; 1
    2c54:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2c56:	85 b5       	in	r24, 0x25	; 37
    2c58:	82 60       	ori	r24, 0x02	; 2
    2c5a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2c5c:	85 b5       	in	r24, 0x25	; 37
    2c5e:	81 60       	ori	r24, 0x01	; 1
    2c60:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2c62:	ee e6       	ldi	r30, 0x6E	; 110
    2c64:	f0 e0       	ldi	r31, 0x00	; 0
    2c66:	80 81       	ld	r24, Z
    2c68:	81 60       	ori	r24, 0x01	; 1
    2c6a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2c6c:	e1 e8       	ldi	r30, 0x81	; 129
    2c6e:	f0 e0       	ldi	r31, 0x00	; 0
    2c70:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2c72:	80 81       	ld	r24, Z
    2c74:	82 60       	ori	r24, 0x02	; 2
    2c76:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2c78:	80 81       	ld	r24, Z
    2c7a:	81 60       	ori	r24, 0x01	; 1
    2c7c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2c7e:	e0 e8       	ldi	r30, 0x80	; 128
    2c80:	f0 e0       	ldi	r31, 0x00	; 0
    2c82:	80 81       	ld	r24, Z
    2c84:	81 60       	ori	r24, 0x01	; 1
    2c86:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2c88:	e1 eb       	ldi	r30, 0xB1	; 177
    2c8a:	f0 e0       	ldi	r31, 0x00	; 0
    2c8c:	80 81       	ld	r24, Z
    2c8e:	84 60       	ori	r24, 0x04	; 4
    2c90:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2c92:	e0 eb       	ldi	r30, 0xB0	; 176
    2c94:	f0 e0       	ldi	r31, 0x00	; 0
    2c96:	80 81       	ld	r24, Z
    2c98:	81 60       	ori	r24, 0x01	; 1
    2c9a:	80 83       	st	Z, r24
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    2c9c:	e1 e9       	ldi	r30, 0x91	; 145
    2c9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ca0:	80 81       	ld	r24, Z
    2ca2:	82 60       	ori	r24, 0x02	; 2
    2ca4:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    2ca6:	80 81       	ld	r24, Z
    2ca8:	81 60       	ori	r24, 0x01	; 1
    2caa:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    2cac:	e0 e9       	ldi	r30, 0x90	; 144
    2cae:	f0 e0       	ldi	r31, 0x00	; 0
    2cb0:	80 81       	ld	r24, Z
    2cb2:	81 60       	ori	r24, 0x01	; 1
    2cb4:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    2cb6:	e1 ea       	ldi	r30, 0xA1	; 161
    2cb8:	f0 e0       	ldi	r31, 0x00	; 0
    2cba:	80 81       	ld	r24, Z
    2cbc:	82 60       	ori	r24, 0x02	; 2
    2cbe:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    2cc0:	80 81       	ld	r24, Z
    2cc2:	81 60       	ori	r24, 0x01	; 1
    2cc4:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    2cc6:	e0 ea       	ldi	r30, 0xA0	; 160
    2cc8:	f0 e0       	ldi	r31, 0x00	; 0
    2cca:	80 81       	ld	r24, Z
    2ccc:	81 60       	ori	r24, 0x01	; 1
    2cce:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    2cd0:	e1 e2       	ldi	r30, 0x21	; 33
    2cd2:	f1 e0       	ldi	r31, 0x01	; 1
    2cd4:	80 81       	ld	r24, Z
    2cd6:	82 60       	ori	r24, 0x02	; 2
    2cd8:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    2cda:	80 81       	ld	r24, Z
    2cdc:	81 60       	ori	r24, 0x01	; 1
    2cde:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    2ce0:	e0 e2       	ldi	r30, 0x20	; 32
    2ce2:	f1 e0       	ldi	r31, 0x01	; 1
    2ce4:	80 81       	ld	r24, Z
    2ce6:	81 60       	ori	r24, 0x01	; 1
    2ce8:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    2cea:	ea e7       	ldi	r30, 0x7A	; 122
    2cec:	f0 e0       	ldi	r31, 0x00	; 0
    2cee:	80 81       	ld	r24, Z
    2cf0:	84 60       	ori	r24, 0x04	; 4
    2cf2:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    2cf4:	80 81       	ld	r24, Z
    2cf6:	82 60       	ori	r24, 0x02	; 2
    2cf8:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    2cfa:	80 81       	ld	r24, Z
    2cfc:	81 60       	ori	r24, 0x01	; 1
    2cfe:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2d00:	80 81       	ld	r24, Z
    2d02:	80 68       	ori	r24, 0x80	; 128
    2d04:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2d06:	10 92 c1 00 	sts	0x00C1, r1
    2d0a:	08 95       	ret

00002d0c <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	fc 01       	movw	r30, r24
    2d10:	31 97       	sbiw	r30, 0x01	; 1
    2d12:	e2 31       	cpi	r30, 0x12	; 18
    2d14:	f1 05       	cpc	r31, r1
    2d16:	08 f0       	brcs	.+2      	; 0x2d1a <turnOffPWM+0xe>
    2d18:	5f c0       	rjmp	.+190    	; 0x2dd8 <turnOffPWM+0xcc>
    2d1a:	ee 58       	subi	r30, 0x8E	; 142
    2d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1e:	0c 94 69 22 	jmp	0x44d2	; 0x44d2 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2d22:	e0 e8       	ldi	r30, 0x80	; 128
    2d24:	f0 e0       	ldi	r31, 0x00	; 0
    2d26:	80 81       	ld	r24, Z
    2d28:	8f 77       	andi	r24, 0x7F	; 127
    2d2a:	80 83       	st	Z, r24
    2d2c:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2d2e:	e0 e8       	ldi	r30, 0x80	; 128
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	80 81       	ld	r24, Z
    2d34:	8f 7d       	andi	r24, 0xDF	; 223
    2d36:	80 83       	st	Z, r24
    2d38:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    2d3a:	e0 e8       	ldi	r30, 0x80	; 128
    2d3c:	f0 e0       	ldi	r31, 0x00	; 0
    2d3e:	80 81       	ld	r24, Z
    2d40:	87 7f       	andi	r24, 0xF7	; 247
    2d42:	80 83       	st	Z, r24
    2d44:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2d46:	84 b5       	in	r24, 0x24	; 36
    2d48:	8f 77       	andi	r24, 0x7F	; 127
    2d4a:	84 bd       	out	0x24, r24	; 36
    2d4c:	08 95       	ret
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2d4e:	84 b5       	in	r24, 0x24	; 36
    2d50:	8f 7d       	andi	r24, 0xDF	; 223
    2d52:	84 bd       	out	0x24, r24	; 36
    2d54:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2d56:	e0 eb       	ldi	r30, 0xB0	; 176
    2d58:	f0 e0       	ldi	r31, 0x00	; 0
    2d5a:	80 81       	ld	r24, Z
    2d5c:	8f 77       	andi	r24, 0x7F	; 127
    2d5e:	80 83       	st	Z, r24
    2d60:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2d62:	e0 eb       	ldi	r30, 0xB0	; 176
    2d64:	f0 e0       	ldi	r31, 0x00	; 0
    2d66:	80 81       	ld	r24, Z
    2d68:	8f 7d       	andi	r24, 0xDF	; 223
    2d6a:	80 83       	st	Z, r24
    2d6c:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    2d6e:	e0 e9       	ldi	r30, 0x90	; 144
    2d70:	f0 e0       	ldi	r31, 0x00	; 0
    2d72:	80 81       	ld	r24, Z
    2d74:	8f 77       	andi	r24, 0x7F	; 127
    2d76:	80 83       	st	Z, r24
    2d78:	08 95       	ret
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    2d7a:	e0 e9       	ldi	r30, 0x90	; 144
    2d7c:	f0 e0       	ldi	r31, 0x00	; 0
    2d7e:	80 81       	ld	r24, Z
    2d80:	8f 7d       	andi	r24, 0xDF	; 223
    2d82:	80 83       	st	Z, r24
    2d84:	08 95       	ret
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    2d86:	e0 e9       	ldi	r30, 0x90	; 144
    2d88:	f0 e0       	ldi	r31, 0x00	; 0
    2d8a:	80 81       	ld	r24, Z
    2d8c:	87 7f       	andi	r24, 0xF7	; 247
    2d8e:	80 83       	st	Z, r24
    2d90:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    2d92:	e0 ea       	ldi	r30, 0xA0	; 160
    2d94:	f0 e0       	ldi	r31, 0x00	; 0
    2d96:	80 81       	ld	r24, Z
    2d98:	8f 77       	andi	r24, 0x7F	; 127
    2d9a:	80 83       	st	Z, r24
    2d9c:	08 95       	ret
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    2d9e:	e0 ea       	ldi	r30, 0xA0	; 160
    2da0:	f0 e0       	ldi	r31, 0x00	; 0
    2da2:	80 81       	ld	r24, Z
    2da4:	8f 7d       	andi	r24, 0xDF	; 223
    2da6:	80 83       	st	Z, r24
    2da8:	08 95       	ret
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    2daa:	e0 ea       	ldi	r30, 0xA0	; 160
    2dac:	f0 e0       	ldi	r31, 0x00	; 0
    2dae:	80 81       	ld	r24, Z
    2db0:	87 7f       	andi	r24, 0xF7	; 247
    2db2:	80 83       	st	Z, r24
    2db4:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    2db6:	e0 e2       	ldi	r30, 0x20	; 32
    2db8:	f1 e0       	ldi	r31, 0x01	; 1
    2dba:	80 81       	ld	r24, Z
    2dbc:	8f 77       	andi	r24, 0x7F	; 127
    2dbe:	80 83       	st	Z, r24
    2dc0:	08 95       	ret
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    2dc2:	e0 e2       	ldi	r30, 0x20	; 32
    2dc4:	f1 e0       	ldi	r31, 0x01	; 1
    2dc6:	80 81       	ld	r24, Z
    2dc8:	8f 7d       	andi	r24, 0xDF	; 223
    2dca:	80 83       	st	Z, r24
    2dcc:	08 95       	ret
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    2dce:	e0 e2       	ldi	r30, 0x20	; 32
    2dd0:	f1 e0       	ldi	r31, 0x01	; 1
    2dd2:	80 81       	ld	r24, Z
    2dd4:	87 7f       	andi	r24, 0xF7	; 247
    2dd6:	80 83       	st	Z, r24
    2dd8:	08 95       	ret

00002dda <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2dda:	cf 93       	push	r28
    2ddc:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	fc 01       	movw	r30, r24
    2de2:	e6 5b       	subi	r30, 0xB6	; 182
    2de4:	f9 4f       	sbci	r31, 0xF9	; 249
    2de6:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2de8:	fc 01       	movw	r30, r24
    2dea:	e0 57       	subi	r30, 0x70	; 112
    2dec:	f9 4f       	sbci	r31, 0xF9	; 249
    2dee:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2df0:	88 23       	and	r24, r24
    2df2:	71 f1       	breq	.+92     	; 0x2e50 <pinMode+0x76>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	88 0f       	add	r24, r24
    2df8:	99 1f       	adc	r25, r25
    2dfa:	fc 01       	movw	r30, r24
    2dfc:	e0 51       	subi	r30, 0x10	; 16
    2dfe:	f9 4f       	sbci	r31, 0xF9	; 249
    2e00:	a5 91       	lpm	r26, Z+
    2e02:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    2e04:	8a 52       	subi	r24, 0x2A	; 42
    2e06:	99 4f       	sbci	r25, 0xF9	; 249
    2e08:	fc 01       	movw	r30, r24
    2e0a:	c5 91       	lpm	r28, Z+
    2e0c:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
    2e0e:	61 11       	cpse	r22, r1
    2e10:	0b c0       	rjmp	.+22     	; 0x2e28 <pinMode+0x4e>
		uint8_t oldSREG = SREG;
    2e12:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2e14:	f8 94       	cli
		*reg &= ~bit;
    2e16:	9c 91       	ld	r25, X
    2e18:	20 95       	com	r18
    2e1a:	92 23       	and	r25, r18
    2e1c:	9c 93       	st	X, r25
		*out &= ~bit;
    2e1e:	e8 81       	ld	r30, Y
    2e20:	2e 23       	and	r18, r30
    2e22:	28 83       	st	Y, r18
		SREG = oldSREG;
    2e24:	8f bf       	out	0x3f, r24	; 63
    2e26:	14 c0       	rjmp	.+40     	; 0x2e50 <pinMode+0x76>
	} else if (mode == INPUT_PULLUP) {
    2e28:	62 30       	cpi	r22, 0x02	; 2
    2e2a:	61 f4       	brne	.+24     	; 0x2e44 <pinMode+0x6a>
		uint8_t oldSREG = SREG;
    2e2c:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2e2e:	f8 94       	cli
		*reg &= ~bit;
    2e30:	3c 91       	ld	r19, X
    2e32:	92 2f       	mov	r25, r18
    2e34:	90 95       	com	r25
    2e36:	93 23       	and	r25, r19
    2e38:	9c 93       	st	X, r25
		*out |= bit;
    2e3a:	e8 81       	ld	r30, Y
    2e3c:	2e 2b       	or	r18, r30
    2e3e:	28 83       	st	Y, r18
		SREG = oldSREG;
    2e40:	8f bf       	out	0x3f, r24	; 63
    2e42:	06 c0       	rjmp	.+12     	; 0x2e50 <pinMode+0x76>
	} else {
		uint8_t oldSREG = SREG;
    2e44:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2e46:	f8 94       	cli
		*reg |= bit;
    2e48:	ec 91       	ld	r30, X
    2e4a:	2e 2b       	or	r18, r30
    2e4c:	2c 93       	st	X, r18
		SREG = oldSREG;
    2e4e:	8f bf       	out	0x3f, r24	; 63
	}
}
    2e50:	df 91       	pop	r29
    2e52:	cf 91       	pop	r28
    2e54:	08 95       	ret

00002e56 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2e56:	1f 93       	push	r17
    2e58:	cf 93       	push	r28
    2e5a:	df 93       	push	r29
    2e5c:	c6 2f       	mov	r28, r22
	uint8_t timer = digitalPinToTimer(pin);
    2e5e:	28 2f       	mov	r18, r24
    2e60:	30 e0       	ldi	r19, 0x00	; 0
    2e62:	f9 01       	movw	r30, r18
    2e64:	ec 5f       	subi	r30, 0xFC	; 252
    2e66:	f9 4f       	sbci	r31, 0xF9	; 249
    2e68:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2e6a:	f9 01       	movw	r30, r18
    2e6c:	e6 5b       	subi	r30, 0xB6	; 182
    2e6e:	f9 4f       	sbci	r31, 0xF9	; 249
    2e70:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    2e72:	f9 01       	movw	r30, r18
    2e74:	e0 57       	subi	r30, 0x70	; 112
    2e76:	f9 4f       	sbci	r31, 0xF9	; 249
    2e78:	d4 91       	lpm	r29, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2e7a:	dd 23       	and	r29, r29
    2e7c:	c1 f0       	breq	.+48     	; 0x2eae <digitalWrite+0x58>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2e7e:	81 11       	cpse	r24, r1
    2e80:	45 df       	rcall	.-374    	; 0x2d0c <turnOffPWM>

	out = portOutputRegister(port);
    2e82:	2d 2f       	mov	r18, r29
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	f9 01       	movw	r30, r18
    2e88:	ee 0f       	add	r30, r30
    2e8a:	ff 1f       	adc	r31, r31
    2e8c:	ea 52       	subi	r30, 0x2A	; 42
    2e8e:	f9 4f       	sbci	r31, 0xF9	; 249
    2e90:	a5 91       	lpm	r26, Z+
    2e92:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2e94:	8f b7       	in	r24, 0x3f	; 63
	cli();
    2e96:	f8 94       	cli

	if (val == LOW) {
    2e98:	c1 11       	cpse	r28, r1
    2e9a:	05 c0       	rjmp	.+10     	; 0x2ea6 <digitalWrite+0x50>
		*out &= ~bit;
    2e9c:	ec 91       	ld	r30, X
    2e9e:	10 95       	com	r17
    2ea0:	1e 23       	and	r17, r30
    2ea2:	1c 93       	st	X, r17
    2ea4:	03 c0       	rjmp	.+6      	; 0x2eac <digitalWrite+0x56>
	} else {
		*out |= bit;
    2ea6:	ec 91       	ld	r30, X
    2ea8:	1e 2b       	or	r17, r30
    2eaa:	1c 93       	st	X, r17
	}

	SREG = oldSREG;
    2eac:	8f bf       	out	0x3f, r24	; 63
}
    2eae:	df 91       	pop	r29
    2eb0:	cf 91       	pop	r28
    2eb2:	1f 91       	pop	r17
    2eb4:	08 95       	ret

00002eb6 <_ZN6StringD1Ev>:
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
	}
}
    2eb6:	fc 01       	movw	r30, r24
    2eb8:	80 81       	ld	r24, Z
    2eba:	91 81       	ldd	r25, Z+1	; 0x01
    2ebc:	0c 94 0b 23 	jmp	0x4616	; 0x4616 <free>
    2ec0:	08 95       	ret

00002ec2 <_ZN6String10invalidateEv>:
    2ec2:	cf 93       	push	r28
    2ec4:	df 93       	push	r29
    2ec6:	ec 01       	movw	r28, r24
    2ec8:	88 81       	ld	r24, Y
    2eca:	99 81       	ldd	r25, Y+1	; 0x01
    2ecc:	00 97       	sbiw	r24, 0x00	; 0
    2ece:	11 f0       	breq	.+4      	; 0x2ed4 <_ZN6String10invalidateEv+0x12>
    2ed0:	0e 94 0b 23 	call	0x4616	; 0x4616 <free>
    2ed4:	19 82       	std	Y+1, r1	; 0x01
    2ed6:	18 82       	st	Y, r1
    2ed8:	1d 82       	std	Y+5, r1	; 0x05
    2eda:	1c 82       	std	Y+4, r1	; 0x04
    2edc:	1b 82       	std	Y+3, r1	; 0x03
    2ede:	1a 82       	std	Y+2, r1	; 0x02
    2ee0:	df 91       	pop	r29
    2ee2:	cf 91       	pop	r28
    2ee4:	08 95       	ret

00002ee6 <_ZN6String12changeBufferEj>:
    2ee6:	0f 93       	push	r16
    2ee8:	1f 93       	push	r17
    2eea:	cf 93       	push	r28
    2eec:	df 93       	push	r29
    2eee:	ec 01       	movw	r28, r24
    2ef0:	8b 01       	movw	r16, r22
    2ef2:	6f 5f       	subi	r22, 0xFF	; 255
    2ef4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ef6:	88 81       	ld	r24, Y
    2ef8:	99 81       	ldd	r25, Y+1	; 0x01
    2efa:	0e 94 9a 23 	call	0x4734	; 0x4734 <realloc>
    2efe:	00 97       	sbiw	r24, 0x00	; 0
    2f00:	31 f0       	breq	.+12     	; 0x2f0e <_ZN6String12changeBufferEj+0x28>
    2f02:	99 83       	std	Y+1, r25	; 0x01
    2f04:	88 83       	st	Y, r24
    2f06:	1b 83       	std	Y+3, r17	; 0x03
    2f08:	0a 83       	std	Y+2, r16	; 0x02
    2f0a:	81 e0       	ldi	r24, 0x01	; 1
    2f0c:	01 c0       	rjmp	.+2      	; 0x2f10 <_ZN6String12changeBufferEj+0x2a>
    2f0e:	80 e0       	ldi	r24, 0x00	; 0
    2f10:	df 91       	pop	r29
    2f12:	cf 91       	pop	r28
    2f14:	1f 91       	pop	r17
    2f16:	0f 91       	pop	r16
    2f18:	08 95       	ret

00002f1a <_ZN6String7reserveEj>:
    2f1a:	cf 93       	push	r28
    2f1c:	df 93       	push	r29
    2f1e:	ec 01       	movw	r28, r24
    2f20:	88 81       	ld	r24, Y
    2f22:	99 81       	ldd	r25, Y+1	; 0x01
    2f24:	89 2b       	or	r24, r25
    2f26:	29 f0       	breq	.+10     	; 0x2f32 <_ZN6String7reserveEj+0x18>
    2f28:	8a 81       	ldd	r24, Y+2	; 0x02
    2f2a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f2c:	86 17       	cp	r24, r22
    2f2e:	97 07       	cpc	r25, r23
    2f30:	68 f4       	brcc	.+26     	; 0x2f4c <_ZN6String7reserveEj+0x32>
    2f32:	ce 01       	movw	r24, r28
    2f34:	d8 df       	rcall	.-80     	; 0x2ee6 <_ZN6String12changeBufferEj>
    2f36:	88 23       	and	r24, r24
    2f38:	61 f0       	breq	.+24     	; 0x2f52 <_ZN6String7reserveEj+0x38>
    2f3a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f3c:	9d 81       	ldd	r25, Y+5	; 0x05
    2f3e:	89 2b       	or	r24, r25
    2f40:	39 f4       	brne	.+14     	; 0x2f50 <_ZN6String7reserveEj+0x36>
    2f42:	e8 81       	ld	r30, Y
    2f44:	f9 81       	ldd	r31, Y+1	; 0x01
    2f46:	10 82       	st	Z, r1
    2f48:	81 e0       	ldi	r24, 0x01	; 1
    2f4a:	03 c0       	rjmp	.+6      	; 0x2f52 <_ZN6String7reserveEj+0x38>
    2f4c:	81 e0       	ldi	r24, 0x01	; 1
    2f4e:	01 c0       	rjmp	.+2      	; 0x2f52 <_ZN6String7reserveEj+0x38>
    2f50:	81 e0       	ldi	r24, 0x01	; 1
    2f52:	df 91       	pop	r29
    2f54:	cf 91       	pop	r28
    2f56:	08 95       	ret

00002f58 <_ZN6String4copyEPKcj>:
    2f58:	ef 92       	push	r14
    2f5a:	ff 92       	push	r15
    2f5c:	0f 93       	push	r16
    2f5e:	1f 93       	push	r17
    2f60:	cf 93       	push	r28
    2f62:	df 93       	push	r29
    2f64:	ec 01       	movw	r28, r24
    2f66:	7b 01       	movw	r14, r22
    2f68:	8a 01       	movw	r16, r20
    2f6a:	ba 01       	movw	r22, r20
    2f6c:	d6 df       	rcall	.-84     	; 0x2f1a <_ZN6String7reserveEj>
    2f6e:	81 11       	cpse	r24, r1
    2f70:	03 c0       	rjmp	.+6      	; 0x2f78 <_ZN6String4copyEPKcj+0x20>
    2f72:	ce 01       	movw	r24, r28
    2f74:	a6 df       	rcall	.-180    	; 0x2ec2 <_ZN6String10invalidateEv>
    2f76:	07 c0       	rjmp	.+14     	; 0x2f86 <_ZN6String4copyEPKcj+0x2e>
    2f78:	1d 83       	std	Y+5, r17	; 0x05
    2f7a:	0c 83       	std	Y+4, r16	; 0x04
    2f7c:	b7 01       	movw	r22, r14
    2f7e:	88 81       	ld	r24, Y
    2f80:	99 81       	ldd	r25, Y+1	; 0x01
    2f82:	0e 94 a3 24 	call	0x4946	; 0x4946 <strcpy>
    2f86:	ce 01       	movw	r24, r28
    2f88:	df 91       	pop	r29
    2f8a:	cf 91       	pop	r28
    2f8c:	1f 91       	pop	r17
    2f8e:	0f 91       	pop	r16
    2f90:	ff 90       	pop	r15
    2f92:	ef 90       	pop	r14
    2f94:	08 95       	ret

00002f96 <_ZN6StringC1EPKc>:
    2f96:	fc 01       	movw	r30, r24
    2f98:	11 82       	std	Z+1, r1	; 0x01
    2f9a:	10 82       	st	Z, r1
    2f9c:	13 82       	std	Z+3, r1	; 0x03
    2f9e:	12 82       	std	Z+2, r1	; 0x02
    2fa0:	15 82       	std	Z+5, r1	; 0x05
    2fa2:	14 82       	std	Z+4, r1	; 0x04
    2fa4:	61 15       	cp	r22, r1
    2fa6:	71 05       	cpc	r23, r1
    2fa8:	49 f0       	breq	.+18     	; 0x2fbc <_ZN6StringC1EPKc+0x26>
    2faa:	fb 01       	movw	r30, r22
    2fac:	01 90       	ld	r0, Z+
    2fae:	00 20       	and	r0, r0
    2fb0:	e9 f7       	brne	.-6      	; 0x2fac <_ZN6StringC1EPKc+0x16>
    2fb2:	31 97       	sbiw	r30, 0x01	; 1
    2fb4:	af 01       	movw	r20, r30
    2fb6:	46 1b       	sub	r20, r22
    2fb8:	57 0b       	sbc	r21, r23
    2fba:	ce cf       	rjmp	.-100    	; 0x2f58 <_ZN6String4copyEPKcj>
    2fbc:	08 95       	ret

00002fbe <_ZN6StringaSERKS_>:
    2fbe:	cf 93       	push	r28
    2fc0:	df 93       	push	r29
    2fc2:	ec 01       	movw	r28, r24
    2fc4:	fb 01       	movw	r30, r22
    2fc6:	86 17       	cp	r24, r22
    2fc8:	97 07       	cpc	r25, r23
    2fca:	51 f0       	breq	.+20     	; 0x2fe0 <_ZN6StringaSERKS_+0x22>
    2fcc:	60 81       	ld	r22, Z
    2fce:	71 81       	ldd	r23, Z+1	; 0x01
    2fd0:	61 15       	cp	r22, r1
    2fd2:	71 05       	cpc	r23, r1
    2fd4:	21 f0       	breq	.+8      	; 0x2fde <_ZN6StringaSERKS_+0x20>
    2fd6:	44 81       	ldd	r20, Z+4	; 0x04
    2fd8:	55 81       	ldd	r21, Z+5	; 0x05
    2fda:	be df       	rcall	.-132    	; 0x2f58 <_ZN6String4copyEPKcj>
    2fdc:	01 c0       	rjmp	.+2      	; 0x2fe0 <_ZN6StringaSERKS_+0x22>
    2fde:	71 df       	rcall	.-286    	; 0x2ec2 <_ZN6String10invalidateEv>
    2fe0:	ce 01       	movw	r24, r28
    2fe2:	df 91       	pop	r29
    2fe4:	cf 91       	pop	r28
    2fe6:	08 95       	ret

00002fe8 <_ZN6StringC1ERKS_>:
    2fe8:	fc 01       	movw	r30, r24
    2fea:	11 82       	std	Z+1, r1	; 0x01
    2fec:	10 82       	st	Z, r1
    2fee:	13 82       	std	Z+3, r1	; 0x03
    2ff0:	12 82       	std	Z+2, r1	; 0x02
    2ff2:	15 82       	std	Z+5, r1	; 0x05
    2ff4:	14 82       	std	Z+4, r1	; 0x04
    2ff6:	e3 cf       	rjmp	.-58     	; 0x2fbe <_ZN6StringaSERKS_>
    2ff8:	08 95       	ret

00002ffa <_ZN6StringaSEPKc>:
    2ffa:	cf 93       	push	r28
    2ffc:	df 93       	push	r29
    2ffe:	ec 01       	movw	r28, r24
    3000:	61 15       	cp	r22, r1
    3002:	71 05       	cpc	r23, r1
    3004:	51 f0       	breq	.+20     	; 0x301a <_ZN6StringaSEPKc+0x20>
    3006:	fb 01       	movw	r30, r22
    3008:	01 90       	ld	r0, Z+
    300a:	00 20       	and	r0, r0
    300c:	e9 f7       	brne	.-6      	; 0x3008 <_ZN6StringaSEPKc+0xe>
    300e:	31 97       	sbiw	r30, 0x01	; 1
    3010:	af 01       	movw	r20, r30
    3012:	46 1b       	sub	r20, r22
    3014:	57 0b       	sbc	r21, r23
    3016:	a0 df       	rcall	.-192    	; 0x2f58 <_ZN6String4copyEPKcj>
    3018:	01 c0       	rjmp	.+2      	; 0x301c <_ZN6StringaSEPKc+0x22>
    301a:	53 df       	rcall	.-346    	; 0x2ec2 <_ZN6String10invalidateEv>
    301c:	ce 01       	movw	r24, r28
    301e:	df 91       	pop	r29
    3020:	cf 91       	pop	r28
    3022:	08 95       	ret

00003024 <_ZN6String6concatEPKcj>:
    3024:	ef 92       	push	r14
    3026:	ff 92       	push	r15
    3028:	0f 93       	push	r16
    302a:	1f 93       	push	r17
    302c:	cf 93       	push	r28
    302e:	df 93       	push	r29
    3030:	ec 01       	movw	r28, r24
    3032:	8b 01       	movw	r16, r22
    3034:	6c 81       	ldd	r22, Y+4	; 0x04
    3036:	7d 81       	ldd	r23, Y+5	; 0x05
    3038:	01 15       	cp	r16, r1
    303a:	11 05       	cpc	r17, r1
    303c:	b9 f0       	breq	.+46     	; 0x306c <_ZN6String6concatEPKcj+0x48>
    303e:	41 15       	cp	r20, r1
    3040:	51 05       	cpc	r21, r1
    3042:	b1 f0       	breq	.+44     	; 0x3070 <_ZN6String6concatEPKcj+0x4c>
    3044:	7a 01       	movw	r14, r20
    3046:	e6 0e       	add	r14, r22
    3048:	f7 1e       	adc	r15, r23
    304a:	b7 01       	movw	r22, r14
    304c:	66 df       	rcall	.-308    	; 0x2f1a <_ZN6String7reserveEj>
    304e:	88 23       	and	r24, r24
    3050:	81 f0       	breq	.+32     	; 0x3072 <_ZN6String6concatEPKcj+0x4e>
    3052:	28 81       	ld	r18, Y
    3054:	39 81       	ldd	r19, Y+1	; 0x01
    3056:	8c 81       	ldd	r24, Y+4	; 0x04
    3058:	9d 81       	ldd	r25, Y+5	; 0x05
    305a:	b8 01       	movw	r22, r16
    305c:	82 0f       	add	r24, r18
    305e:	93 1f       	adc	r25, r19
    3060:	0e 94 a3 24 	call	0x4946	; 0x4946 <strcpy>
    3064:	fd 82       	std	Y+5, r15	; 0x05
    3066:	ec 82       	std	Y+4, r14	; 0x04
    3068:	81 e0       	ldi	r24, 0x01	; 1
    306a:	03 c0       	rjmp	.+6      	; 0x3072 <_ZN6String6concatEPKcj+0x4e>
    306c:	80 e0       	ldi	r24, 0x00	; 0
    306e:	01 c0       	rjmp	.+2      	; 0x3072 <_ZN6String6concatEPKcj+0x4e>
    3070:	81 e0       	ldi	r24, 0x01	; 1
    3072:	df 91       	pop	r29
    3074:	cf 91       	pop	r28
    3076:	1f 91       	pop	r17
    3078:	0f 91       	pop	r16
    307a:	ff 90       	pop	r15
    307c:	ef 90       	pop	r14
    307e:	08 95       	ret

00003080 <_ZN6String6concatEPKc>:
    3080:	61 15       	cp	r22, r1
    3082:	71 05       	cpc	r23, r1
    3084:	51 f0       	breq	.+20     	; 0x309a <_ZN6String6concatEPKc+0x1a>
    3086:	fb 01       	movw	r30, r22
    3088:	01 90       	ld	r0, Z+
    308a:	00 20       	and	r0, r0
    308c:	e9 f7       	brne	.-6      	; 0x3088 <_ZN6String6concatEPKc+0x8>
    308e:	31 97       	sbiw	r30, 0x01	; 1
    3090:	af 01       	movw	r20, r30
    3092:	46 1b       	sub	r20, r22
    3094:	57 0b       	sbc	r21, r23
    3096:	c6 cf       	rjmp	.-116    	; 0x3024 <_ZN6String6concatEPKcj>
    3098:	08 95       	ret
    309a:	80 e0       	ldi	r24, 0x00	; 0
    309c:	08 95       	ret

0000309e <_ZN6String6concatEc>:
    309e:	cf 93       	push	r28
    30a0:	df 93       	push	r29
    30a2:	1f 92       	push	r1
    30a4:	1f 92       	push	r1
    30a6:	cd b7       	in	r28, 0x3d	; 61
    30a8:	de b7       	in	r29, 0x3e	; 62
    30aa:	69 83       	std	Y+1, r22	; 0x01
    30ac:	1a 82       	std	Y+2, r1	; 0x02
    30ae:	41 e0       	ldi	r20, 0x01	; 1
    30b0:	50 e0       	ldi	r21, 0x00	; 0
    30b2:	be 01       	movw	r22, r28
    30b4:	6f 5f       	subi	r22, 0xFF	; 255
    30b6:	7f 4f       	sbci	r23, 0xFF	; 255
    30b8:	b5 df       	rcall	.-150    	; 0x3024 <_ZN6String6concatEPKcj>
    30ba:	0f 90       	pop	r0
    30bc:	0f 90       	pop	r0
    30be:	df 91       	pop	r29
    30c0:	cf 91       	pop	r28
    30c2:	08 95       	ret

000030c4 <_ZplRK15StringSumHelperRK6String>:
    30c4:	cf 93       	push	r28
    30c6:	df 93       	push	r29
    30c8:	ec 01       	movw	r28, r24
    30ca:	fb 01       	movw	r30, r22
    30cc:	44 81       	ldd	r20, Z+4	; 0x04
    30ce:	55 81       	ldd	r21, Z+5	; 0x05
    30d0:	60 81       	ld	r22, Z
    30d2:	71 81       	ldd	r23, Z+1	; 0x01
    30d4:	a7 df       	rcall	.-178    	; 0x3024 <_ZN6String6concatEPKcj>
    30d6:	81 11       	cpse	r24, r1
    30d8:	02 c0       	rjmp	.+4      	; 0x30de <_ZplRK15StringSumHelperRK6String+0x1a>
    30da:	ce 01       	movw	r24, r28
    30dc:	f2 de       	rcall	.-540    	; 0x2ec2 <_ZN6String10invalidateEv>
    30de:	ce 01       	movw	r24, r28
    30e0:	df 91       	pop	r29
    30e2:	cf 91       	pop	r28
    30e4:	08 95       	ret

000030e6 <_ZplRK15StringSumHelperPKc>:
    30e6:	cf 93       	push	r28
    30e8:	df 93       	push	r29
    30ea:	ec 01       	movw	r28, r24
    30ec:	61 15       	cp	r22, r1
    30ee:	71 05       	cpc	r23, r1
    30f0:	59 f0       	breq	.+22     	; 0x3108 <_ZplRK15StringSumHelperPKc+0x22>
    30f2:	fb 01       	movw	r30, r22
    30f4:	01 90       	ld	r0, Z+
    30f6:	00 20       	and	r0, r0
    30f8:	e9 f7       	brne	.-6      	; 0x30f4 <_ZplRK15StringSumHelperPKc+0xe>
    30fa:	31 97       	sbiw	r30, 0x01	; 1
    30fc:	af 01       	movw	r20, r30
    30fe:	46 1b       	sub	r20, r22
    3100:	57 0b       	sbc	r21, r23
    3102:	90 df       	rcall	.-224    	; 0x3024 <_ZN6String6concatEPKcj>
    3104:	81 11       	cpse	r24, r1
    3106:	02 c0       	rjmp	.+4      	; 0x310c <_ZplRK15StringSumHelperPKc+0x26>
    3108:	ce 01       	movw	r24, r28
    310a:	db de       	rcall	.-586    	; 0x2ec2 <_ZN6String10invalidateEv>
    310c:	ce 01       	movw	r24, r28
    310e:	df 91       	pop	r29
    3110:	cf 91       	pop	r28
    3112:	08 95       	ret

00003114 <_ZNK6String10startsWithERKS_j>:
    3114:	fc 01       	movw	r30, r24
    3116:	ca 01       	movw	r24, r20
    3118:	db 01       	movw	r26, r22
    311a:	14 96       	adiw	r26, 0x04	; 4
    311c:	4d 91       	ld	r20, X+
    311e:	5c 91       	ld	r21, X
    3120:	15 97       	sbiw	r26, 0x05	; 5
    3122:	24 81       	ldd	r18, Z+4	; 0x04
    3124:	35 81       	ldd	r19, Z+5	; 0x05
    3126:	24 1b       	sub	r18, r20
    3128:	35 0b       	sbc	r19, r21
    312a:	28 17       	cp	r18, r24
    312c:	39 07       	cpc	r19, r25
    312e:	98 f0       	brcs	.+38     	; 0x3156 <_ZNK6String10startsWithERKS_j+0x42>
    3130:	20 81       	ld	r18, Z
    3132:	31 81       	ldd	r19, Z+1	; 0x01
    3134:	21 15       	cp	r18, r1
    3136:	31 05       	cpc	r19, r1
    3138:	81 f0       	breq	.+32     	; 0x315a <_ZNK6String10startsWithERKS_j+0x46>
    313a:	6d 91       	ld	r22, X+
    313c:	7c 91       	ld	r23, X
    313e:	61 15       	cp	r22, r1
    3140:	71 05       	cpc	r23, r1
    3142:	69 f0       	breq	.+26     	; 0x315e <_ZNK6String10startsWithERKS_j+0x4a>
    3144:	82 0f       	add	r24, r18
    3146:	93 1f       	adc	r25, r19
    3148:	0e 94 aa 24 	call	0x4954	; 0x4954 <strncmp>
    314c:	21 e0       	ldi	r18, 0x01	; 1
    314e:	89 2b       	or	r24, r25
    3150:	39 f0       	breq	.+14     	; 0x3160 <_ZNK6String10startsWithERKS_j+0x4c>
    3152:	20 e0       	ldi	r18, 0x00	; 0
    3154:	05 c0       	rjmp	.+10     	; 0x3160 <_ZNK6String10startsWithERKS_j+0x4c>
    3156:	20 e0       	ldi	r18, 0x00	; 0
    3158:	03 c0       	rjmp	.+6      	; 0x3160 <_ZNK6String10startsWithERKS_j+0x4c>
    315a:	20 e0       	ldi	r18, 0x00	; 0
    315c:	01 c0       	rjmp	.+2      	; 0x3160 <_ZNK6String10startsWithERKS_j+0x4c>
    315e:	20 e0       	ldi	r18, 0x00	; 0
    3160:	82 2f       	mov	r24, r18
    3162:	08 95       	ret

00003164 <_ZNK6String10startsWithERKS_>:
    3164:	fc 01       	movw	r30, r24
    3166:	44 81       	ldd	r20, Z+4	; 0x04
    3168:	55 81       	ldd	r21, Z+5	; 0x05
    316a:	fb 01       	movw	r30, r22
    316c:	24 81       	ldd	r18, Z+4	; 0x04
    316e:	35 81       	ldd	r19, Z+5	; 0x05
    3170:	42 17       	cp	r20, r18
    3172:	53 07       	cpc	r21, r19
    3174:	20 f0       	brcs	.+8      	; 0x317e <_ZNK6String10startsWithERKS_+0x1a>
    3176:	40 e0       	ldi	r20, 0x00	; 0
    3178:	50 e0       	ldi	r21, 0x00	; 0
    317a:	cc cf       	rjmp	.-104    	; 0x3114 <_ZNK6String10startsWithERKS_j>
    317c:	08 95       	ret
    317e:	80 e0       	ldi	r24, 0x00	; 0
    3180:	08 95       	ret

00003182 <_ZNK6String8endsWithERKS_>:
    3182:	fc 01       	movw	r30, r24
    3184:	44 81       	ldd	r20, Z+4	; 0x04
    3186:	55 81       	ldd	r21, Z+5	; 0x05
    3188:	fb 01       	movw	r30, r22
    318a:	24 81       	ldd	r18, Z+4	; 0x04
    318c:	35 81       	ldd	r19, Z+5	; 0x05
    318e:	42 17       	cp	r20, r18
    3190:	53 07       	cpc	r21, r19
    3192:	b0 f0       	brcs	.+44     	; 0x31c0 <_ZNK6String8endsWithERKS_+0x3e>
    3194:	fc 01       	movw	r30, r24
    3196:	80 81       	ld	r24, Z
    3198:	91 81       	ldd	r25, Z+1	; 0x01
    319a:	00 97       	sbiw	r24, 0x00	; 0
    319c:	99 f0       	breq	.+38     	; 0x31c4 <_ZNK6String8endsWithERKS_+0x42>
    319e:	fb 01       	movw	r30, r22
    31a0:	60 81       	ld	r22, Z
    31a2:	71 81       	ldd	r23, Z+1	; 0x01
    31a4:	61 15       	cp	r22, r1
    31a6:	71 05       	cpc	r23, r1
    31a8:	79 f0       	breq	.+30     	; 0x31c8 <_ZNK6String8endsWithERKS_+0x46>
    31aa:	42 1b       	sub	r20, r18
    31ac:	53 0b       	sbc	r21, r19
    31ae:	84 0f       	add	r24, r20
    31b0:	95 1f       	adc	r25, r21
    31b2:	0e 94 9a 24 	call	0x4934	; 0x4934 <strcmp>
    31b6:	21 e0       	ldi	r18, 0x01	; 1
    31b8:	89 2b       	or	r24, r25
    31ba:	39 f0       	breq	.+14     	; 0x31ca <_ZNK6String8endsWithERKS_+0x48>
    31bc:	20 e0       	ldi	r18, 0x00	; 0
    31be:	05 c0       	rjmp	.+10     	; 0x31ca <_ZNK6String8endsWithERKS_+0x48>
    31c0:	20 e0       	ldi	r18, 0x00	; 0
    31c2:	03 c0       	rjmp	.+6      	; 0x31ca <_ZNK6String8endsWithERKS_+0x48>
    31c4:	20 e0       	ldi	r18, 0x00	; 0
    31c6:	01 c0       	rjmp	.+2      	; 0x31ca <_ZNK6String8endsWithERKS_+0x48>
    31c8:	20 e0       	ldi	r18, 0x00	; 0
    31ca:	82 2f       	mov	r24, r18
    31cc:	08 95       	ret

000031ce <_ZNK6StringixEj>:
    31ce:	fc 01       	movw	r30, r24
    31d0:	24 81       	ldd	r18, Z+4	; 0x04
    31d2:	35 81       	ldd	r19, Z+5	; 0x05
    31d4:	62 17       	cp	r22, r18
    31d6:	73 07       	cpc	r23, r19
    31d8:	48 f4       	brcc	.+18     	; 0x31ec <_ZNK6StringixEj+0x1e>
    31da:	80 81       	ld	r24, Z
    31dc:	91 81       	ldd	r25, Z+1	; 0x01
    31de:	00 97       	sbiw	r24, 0x00	; 0
    31e0:	39 f0       	breq	.+14     	; 0x31f0 <_ZNK6StringixEj+0x22>
    31e2:	fc 01       	movw	r30, r24
    31e4:	e6 0f       	add	r30, r22
    31e6:	f7 1f       	adc	r31, r23
    31e8:	80 81       	ld	r24, Z
    31ea:	08 95       	ret
    31ec:	80 e0       	ldi	r24, 0x00	; 0
    31ee:	08 95       	ret
    31f0:	80 e0       	ldi	r24, 0x00	; 0
    31f2:	08 95       	ret

000031f4 <_ZNK6String6charAtEj>:
    31f4:	ec cf       	rjmp	.-40     	; 0x31ce <_ZNK6StringixEj>
    31f6:	08 95       	ret

000031f8 <_ZNK6String8getBytesEPhjj>:
    31f8:	0f 93       	push	r16
    31fa:	1f 93       	push	r17
    31fc:	cf 93       	push	r28
    31fe:	df 93       	push	r29
    3200:	eb 01       	movw	r28, r22
    3202:	41 15       	cp	r20, r1
    3204:	51 05       	cpc	r21, r1
    3206:	f9 f0       	breq	.+62     	; 0x3246 <_ZNK6String8getBytesEPhjj+0x4e>
    3208:	20 97       	sbiw	r28, 0x00	; 0
    320a:	e9 f0       	breq	.+58     	; 0x3246 <_ZNK6String8getBytesEPhjj+0x4e>
    320c:	fc 01       	movw	r30, r24
    320e:	64 81       	ldd	r22, Z+4	; 0x04
    3210:	75 81       	ldd	r23, Z+5	; 0x05
    3212:	26 17       	cp	r18, r22
    3214:	37 07       	cpc	r19, r23
    3216:	10 f0       	brcs	.+4      	; 0x321c <_ZNK6String8getBytesEPhjj+0x24>
    3218:	18 82       	st	Y, r1
    321a:	15 c0       	rjmp	.+42     	; 0x3246 <_ZNK6String8getBytesEPhjj+0x4e>
    321c:	62 1b       	sub	r22, r18
    321e:	73 0b       	sbc	r23, r19
    3220:	8a 01       	movw	r16, r20
    3222:	01 50       	subi	r16, 0x01	; 1
    3224:	11 09       	sbc	r17, r1
    3226:	60 17       	cp	r22, r16
    3228:	71 07       	cpc	r23, r17
    322a:	08 f4       	brcc	.+2      	; 0x322e <_ZNK6String8getBytesEPhjj+0x36>
    322c:	8b 01       	movw	r16, r22
    322e:	fc 01       	movw	r30, r24
    3230:	60 81       	ld	r22, Z
    3232:	71 81       	ldd	r23, Z+1	; 0x01
    3234:	62 0f       	add	r22, r18
    3236:	73 1f       	adc	r23, r19
    3238:	a8 01       	movw	r20, r16
    323a:	ce 01       	movw	r24, r28
    323c:	0e 94 b8 24 	call	0x4970	; 0x4970 <strncpy>
    3240:	c0 0f       	add	r28, r16
    3242:	d1 1f       	adc	r29, r17
    3244:	18 82       	st	Y, r1
    3246:	df 91       	pop	r29
    3248:	cf 91       	pop	r28
    324a:	1f 91       	pop	r17
    324c:	0f 91       	pop	r16
    324e:	08 95       	ret

00003250 <_ZN6String6removeEjj>:
    3250:	cf 93       	push	r28
    3252:	df 93       	push	r29
    3254:	ec 01       	movw	r28, r24
    3256:	cb 01       	movw	r24, r22
    3258:	2c 81       	ldd	r18, Y+4	; 0x04
    325a:	3d 81       	ldd	r19, Y+5	; 0x05
    325c:	62 17       	cp	r22, r18
    325e:	73 07       	cpc	r23, r19
    3260:	10 f5       	brcc	.+68     	; 0x32a6 <_ZN6String6removeEjj+0x56>
    3262:	41 15       	cp	r20, r1
    3264:	51 05       	cpc	r21, r1
    3266:	f9 f0       	breq	.+62     	; 0x32a6 <_ZN6String6removeEjj+0x56>
    3268:	b9 01       	movw	r22, r18
    326a:	68 1b       	sub	r22, r24
    326c:	79 0b       	sbc	r23, r25
    326e:	46 17       	cp	r20, r22
    3270:	57 07       	cpc	r21, r23
    3272:	08 f4       	brcc	.+2      	; 0x3276 <_ZN6String6removeEjj+0x26>
    3274:	ba 01       	movw	r22, r20
    3276:	e8 81       	ld	r30, Y
    3278:	f9 81       	ldd	r31, Y+1	; 0x01
    327a:	26 1b       	sub	r18, r22
    327c:	37 0b       	sbc	r19, r23
    327e:	3d 83       	std	Y+5, r19	; 0x05
    3280:	2c 83       	std	Y+4, r18	; 0x04
    3282:	a9 01       	movw	r20, r18
    3284:	48 1b       	sub	r20, r24
    3286:	59 0b       	sbc	r21, r25
    3288:	68 0f       	add	r22, r24
    328a:	79 1f       	adc	r23, r25
    328c:	6e 0f       	add	r22, r30
    328e:	7f 1f       	adc	r23, r31
    3290:	8e 0f       	add	r24, r30
    3292:	9f 1f       	adc	r25, r31
    3294:	0e 94 b8 24 	call	0x4970	; 0x4970 <strncpy>
    3298:	e8 81       	ld	r30, Y
    329a:	f9 81       	ldd	r31, Y+1	; 0x01
    329c:	8c 81       	ldd	r24, Y+4	; 0x04
    329e:	9d 81       	ldd	r25, Y+5	; 0x05
    32a0:	e8 0f       	add	r30, r24
    32a2:	f9 1f       	adc	r31, r25
    32a4:	10 82       	st	Z, r1
    32a6:	df 91       	pop	r29
    32a8:	cf 91       	pop	r28
    32aa:	08 95       	ret

000032ac <_ZN6String4trimEv>:

void String::trim(void)
{
    32ac:	af 92       	push	r10
    32ae:	bf 92       	push	r11
    32b0:	cf 92       	push	r12
    32b2:	df 92       	push	r13
    32b4:	ef 92       	push	r14
    32b6:	ff 92       	push	r15
    32b8:	0f 93       	push	r16
    32ba:	1f 93       	push	r17
    32bc:	cf 93       	push	r28
    32be:	df 93       	push	r29
    32c0:	6c 01       	movw	r12, r24
	if (!buffer || len == 0) return;
    32c2:	dc 01       	movw	r26, r24
    32c4:	ad 90       	ld	r10, X+
    32c6:	bc 90       	ld	r11, X
    32c8:	11 97       	sbiw	r26, 0x01	; 1
    32ca:	a1 14       	cp	r10, r1
    32cc:	b1 04       	cpc	r11, r1
    32ce:	d9 f1       	breq	.+118    	; 0x3346 <_ZN6String4trimEv+0x9a>
    32d0:	14 96       	adiw	r26, 0x04	; 4
    32d2:	cd 91       	ld	r28, X+
    32d4:	dc 91       	ld	r29, X
    32d6:	15 97       	sbiw	r26, 0x05	; 5
    32d8:	20 97       	sbiw	r28, 0x00	; 0
    32da:	a9 f1       	breq	.+106    	; 0x3346 <_ZN6String4trimEv+0x9a>
    32dc:	75 01       	movw	r14, r10
    32de:	87 01       	movw	r16, r14
    32e0:	bf ef       	ldi	r27, 0xFF	; 255
    32e2:	eb 1a       	sub	r14, r27
    32e4:	fb 0a       	sbc	r15, r27
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    32e6:	f8 01       	movw	r30, r16
    32e8:	80 81       	ld	r24, Z
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	0e 94 82 24 	call	0x4904	; 0x4904 <isspace>
    32f0:	89 2b       	or	r24, r25
    32f2:	a9 f7       	brne	.-22     	; 0x32de <_ZN6String4trimEv+0x32>
	char *end = buffer + len - 1;
    32f4:	21 97       	sbiw	r28, 0x01	; 1
    32f6:	ca 0d       	add	r28, r10
    32f8:	db 1d       	adc	r29, r11
	while (isspace(*end) && end >= begin) end--;
    32fa:	01 c0       	rjmp	.+2      	; 0x32fe <_ZN6String4trimEv+0x52>
    32fc:	21 97       	sbiw	r28, 0x01	; 1
    32fe:	88 81       	ld	r24, Y
    3300:	90 e0       	ldi	r25, 0x00	; 0
    3302:	0e 94 82 24 	call	0x4904	; 0x4904 <isspace>
    3306:	89 2b       	or	r24, r25
    3308:	19 f0       	breq	.+6      	; 0x3310 <_ZN6String4trimEv+0x64>
    330a:	c0 17       	cp	r28, r16
    330c:	d1 07       	cpc	r29, r17
    330e:	b0 f7       	brcc	.-20     	; 0x32fc <_ZN6String4trimEv+0x50>
	len = end + 1 - begin;
    3310:	21 96       	adiw	r28, 0x01	; 1
    3312:	ae 01       	movw	r20, r28
    3314:	40 1b       	sub	r20, r16
    3316:	51 0b       	sbc	r21, r17
    3318:	d6 01       	movw	r26, r12
    331a:	15 96       	adiw	r26, 0x05	; 5
    331c:	5c 93       	st	X, r21
    331e:	4e 93       	st	-X, r20
    3320:	14 97       	sbiw	r26, 0x04	; 4
	if (begin > buffer) memcpy(buffer, begin, len);
    3322:	a0 16       	cp	r10, r16
    3324:	b1 06       	cpc	r11, r17
    3326:	20 f4       	brcc	.+8      	; 0x3330 <_ZN6String4trimEv+0x84>
    3328:	b8 01       	movw	r22, r16
    332a:	c5 01       	movw	r24, r10
    332c:	0e 94 8a 24 	call	0x4914	; 0x4914 <memcpy>
	buffer[len] = 0;
    3330:	d6 01       	movw	r26, r12
    3332:	ed 91       	ld	r30, X+
    3334:	fc 91       	ld	r31, X
    3336:	11 97       	sbiw	r26, 0x01	; 1
    3338:	14 96       	adiw	r26, 0x04	; 4
    333a:	8d 91       	ld	r24, X+
    333c:	9c 91       	ld	r25, X
    333e:	15 97       	sbiw	r26, 0x05	; 5
    3340:	e8 0f       	add	r30, r24
    3342:	f9 1f       	adc	r31, r25
    3344:	10 82       	st	Z, r1
}
    3346:	df 91       	pop	r29
    3348:	cf 91       	pop	r28
    334a:	1f 91       	pop	r17
    334c:	0f 91       	pop	r16
    334e:	ff 90       	pop	r15
    3350:	ef 90       	pop	r14
    3352:	df 90       	pop	r13
    3354:	cf 90       	pop	r12
    3356:	bf 90       	pop	r11
    3358:	af 90       	pop	r10
    335a:	08 95       	ret

0000335c <_ZN8BLEMate2C1EP6Stream>:
    }    
  }
  // We don't expect this operation to take too long, so we can return a
  //  timeout if we get here.
  return TIMEOUT_ERROR;
}
    335c:	cf 92       	push	r12
    335e:	df 92       	push	r13
    3360:	ef 92       	push	r14
    3362:	ff 92       	push	r15
    3364:	0f 93       	push	r16
    3366:	1f 93       	push	r17
    3368:	cf 93       	push	r28
    336a:	df 93       	push	r29
    336c:	7c 01       	movw	r14, r24
    336e:	6b 01       	movw	r12, r22
    3370:	ec 01       	movw	r28, r24
    3372:	22 96       	adiw	r28, 0x02	; 2
    3374:	8c 01       	movw	r16, r24
    3376:	00 5e       	subi	r16, 0xE0	; 224
    3378:	1f 4f       	sbci	r17, 0xFF	; 255
    337a:	6f e4       	ldi	r22, 0x4F	; 79
    337c:	72 e0       	ldi	r23, 0x02	; 2
    337e:	ce 01       	movw	r24, r28
    3380:	0a de       	rcall	.-1004   	; 0x2f96 <_ZN6StringC1EPKc>
    3382:	26 96       	adiw	r28, 0x06	; 6
    3384:	c0 17       	cp	r28, r16
    3386:	d1 07       	cpc	r29, r17
    3388:	c1 f7       	brne	.-16     	; 0x337a <_ZN8BLEMate2C1EP6Stream+0x1e>
    338a:	f7 01       	movw	r30, r14
    338c:	d2 a2       	std	Z+34, r13	; 0x22
    338e:	c1 a2       	std	Z+33, r12	; 0x21
    3390:	10 a2       	std	Z+32, r1	; 0x20
    3392:	df 91       	pop	r29
    3394:	cf 91       	pop	r28
    3396:	1f 91       	pop	r17
    3398:	0f 91       	pop	r16
    339a:	ff 90       	pop	r15
    339c:	ef 90       	pop	r14
    339e:	df 90       	pop	r13
    33a0:	cf 90       	pop	r12
    33a2:	08 95       	ret

000033a4 <_ZN8BLEMate210knownStartEv>:
    33a4:	8f 92       	push	r8
    33a6:	9f 92       	push	r9
    33a8:	af 92       	push	r10
    33aa:	bf 92       	push	r11
    33ac:	cf 92       	push	r12
    33ae:	df 92       	push	r13
    33b0:	ef 92       	push	r14
    33b2:	ff 92       	push	r15
    33b4:	0f 93       	push	r16
    33b6:	1f 93       	push	r17
    33b8:	cf 93       	push	r28
    33ba:	df 93       	push	r29
    33bc:	cd b7       	in	r28, 0x3d	; 61
    33be:	de b7       	in	r29, 0x3e	; 62
    33c0:	62 97       	sbiw	r28, 0x12	; 18
    33c2:	0f b6       	in	r0, 0x3f	; 63
    33c4:	f8 94       	cli
    33c6:	de bf       	out	0x3e, r29	; 62
    33c8:	0f be       	out	0x3f, r0	; 63
    33ca:	cd bf       	out	0x3d, r28	; 61
    33cc:	8c 01       	movw	r16, r24
    33ce:	6d e4       	ldi	r22, 0x4D	; 77
    33d0:	72 e0       	ldi	r23, 0x02	; 2
    33d2:	ce 01       	movw	r24, r28
    33d4:	0d 96       	adiw	r24, 0x0d	; 13
    33d6:	df dd       	rcall	.-1090   	; 0x2f96 <_ZN6StringC1EPKc>
    33d8:	6f e4       	ldi	r22, 0x4F	; 79
    33da:	72 e0       	ldi	r23, 0x02	; 2
    33dc:	ce 01       	movw	r24, r28
    33de:	07 96       	adiw	r24, 0x07	; 7
    33e0:	da dd       	rcall	.-1100   	; 0x2f96 <_ZN6StringC1EPKc>
    33e2:	6e e4       	ldi	r22, 0x4E	; 78
    33e4:	72 e0       	ldi	r23, 0x02	; 2
    33e6:	d8 01       	movw	r26, r16
    33e8:	91 96       	adiw	r26, 0x21	; 33
    33ea:	8d 91       	ld	r24, X+
    33ec:	9c 91       	ld	r25, X
    33ee:	92 97       	sbiw	r26, 0x22	; 34
    33f0:	8a d8       	rcall	.-3820   	; 0x2506 <_ZN5Print5printEPKc>
    33f2:	f8 01       	movw	r30, r16
    33f4:	81 a1       	ldd	r24, Z+33	; 0x21
    33f6:	92 a1       	ldd	r25, Z+34	; 0x22
    33f8:	dc 01       	movw	r26, r24
    33fa:	ed 91       	ld	r30, X+
    33fc:	fc 91       	ld	r31, X
    33fe:	02 84       	ldd	r0, Z+10	; 0x0a
    3400:	f3 85       	ldd	r31, Z+11	; 0x0b
    3402:	e0 2d       	mov	r30, r0
    3404:	19 95       	eicall
    3406:	c5 db       	rcall	.-2166   	; 0x2b92 <millis>
    3408:	6b 01       	movw	r12, r22
    340a:	7c 01       	movw	r14, r24
    340c:	2c c0       	rjmp	.+88     	; 0x3466 <_ZN8BLEMate210knownStartEv+0xc2>
    340e:	f8 01       	movw	r30, r16
    3410:	81 a1       	ldd	r24, Z+33	; 0x21
    3412:	92 a1       	ldd	r25, Z+34	; 0x22
    3414:	dc 01       	movw	r26, r24
    3416:	ed 91       	ld	r30, X+
    3418:	fc 91       	ld	r31, X
    341a:	04 80       	ldd	r0, Z+4	; 0x04
    341c:	f5 81       	ldd	r31, Z+5	; 0x05
    341e:	e0 2d       	mov	r30, r0
    3420:	19 95       	eicall
    3422:	18 16       	cp	r1, r24
    3424:	19 06       	cpc	r1, r25
    3426:	8c f4       	brge	.+34     	; 0x344a <_ZN8BLEMate210knownStartEv+0xa6>
    3428:	f8 01       	movw	r30, r16
    342a:	81 a1       	ldd	r24, Z+33	; 0x21
    342c:	92 a1       	ldd	r25, Z+34	; 0x22
    342e:	dc 01       	movw	r26, r24
    3430:	ed 91       	ld	r30, X+
    3432:	fc 91       	ld	r31, X
    3434:	06 80       	ldd	r0, Z+6	; 0x06
    3436:	f7 81       	ldd	r31, Z+7	; 0x07
    3438:	e0 2d       	mov	r30, r0
    343a:	19 95       	eicall
    343c:	68 2f       	mov	r22, r24
    343e:	ce 01       	movw	r24, r28
    3440:	07 96       	adiw	r24, 0x07	; 7
    3442:	2d de       	rcall	.-934    	; 0x309e <_ZN6String6concatEc>
    3444:	a6 db       	rcall	.-2228   	; 0x2b92 <millis>
    3446:	6b 01       	movw	r12, r22
    3448:	7c 01       	movw	r14, r24
    344a:	a3 db       	rcall	.-2234   	; 0x2b92 <millis>
    344c:	46 01       	movw	r8, r12
    344e:	57 01       	movw	r10, r14
    3450:	b8 ee       	ldi	r27, 0xE8	; 232
    3452:	8b 0e       	add	r8, r27
    3454:	b3 e0       	ldi	r27, 0x03	; 3
    3456:	9b 1e       	adc	r9, r27
    3458:	a1 1c       	adc	r10, r1
    345a:	b1 1c       	adc	r11, r1
    345c:	86 16       	cp	r8, r22
    345e:	97 06       	cpc	r9, r23
    3460:	a8 06       	cpc	r10, r24
    3462:	b9 06       	cpc	r11, r25
    3464:	c0 f0       	brcs	.+48     	; 0x3496 <_ZN8BLEMate210knownStartEv+0xf2>
    3466:	be 01       	movw	r22, r28
    3468:	63 5f       	subi	r22, 0xF3	; 243
    346a:	7f 4f       	sbci	r23, 0xFF	; 255
    346c:	ce 01       	movw	r24, r28
    346e:	07 96       	adiw	r24, 0x07	; 7
    3470:	88 de       	rcall	.-752    	; 0x3182 <_ZNK6String8endsWithERKS_>
    3472:	81 30       	cpi	r24, 0x01	; 1
    3474:	61 f6       	brne	.-104    	; 0x340e <_ZN8BLEMate210knownStartEv+0x6a>
    3476:	60 e5       	ldi	r22, 0x50	; 80
    3478:	72 e0       	ldi	r23, 0x02	; 2
    347a:	ce 01       	movw	r24, r28
    347c:	01 96       	adiw	r24, 0x01	; 1
    347e:	8b dd       	rcall	.-1258   	; 0x2f96 <_ZN6StringC1EPKc>
    3480:	be 01       	movw	r22, r28
    3482:	6f 5f       	subi	r22, 0xFF	; 255
    3484:	7f 4f       	sbci	r23, 0xFF	; 255
    3486:	ce 01       	movw	r24, r28
    3488:	07 96       	adiw	r24, 0x07	; 7
    348a:	6c de       	rcall	.-808    	; 0x3164 <_ZNK6String10startsWithERKS_>
    348c:	ce 01       	movw	r24, r28
    348e:	01 96       	adiw	r24, 0x01	; 1
    3490:	12 dd       	rcall	.-1500   	; 0x2eb6 <_ZN6StringD1Ev>
    3492:	11 e0       	ldi	r17, 0x01	; 1
    3494:	01 c0       	rjmp	.+2      	; 0x3498 <_ZN8BLEMate210knownStartEv+0xf4>
    3496:	1e ef       	ldi	r17, 0xFE	; 254
    3498:	ce 01       	movw	r24, r28
    349a:	07 96       	adiw	r24, 0x07	; 7
    349c:	0c dd       	rcall	.-1512   	; 0x2eb6 <_ZN6StringD1Ev>
    349e:	ce 01       	movw	r24, r28
    34a0:	0d 96       	adiw	r24, 0x0d	; 13
    34a2:	09 dd       	rcall	.-1518   	; 0x2eb6 <_ZN6StringD1Ev>
    34a4:	81 2f       	mov	r24, r17
    34a6:	62 96       	adiw	r28, 0x12	; 18
    34a8:	0f b6       	in	r0, 0x3f	; 63
    34aa:	f8 94       	cli
    34ac:	de bf       	out	0x3e, r29	; 62
    34ae:	0f be       	out	0x3f, r0	; 63
    34b0:	cd bf       	out	0x3d, r28	; 61
    34b2:	df 91       	pop	r29
    34b4:	cf 91       	pop	r28
    34b6:	1f 91       	pop	r17
    34b8:	0f 91       	pop	r16
    34ba:	ff 90       	pop	r15
    34bc:	ef 90       	pop	r14
    34be:	df 90       	pop	r13
    34c0:	cf 90       	pop	r12
    34c2:	bf 90       	pop	r11
    34c4:	af 90       	pop	r10
    34c6:	9f 90       	pop	r9
    34c8:	8f 90       	pop	r8
    34ca:	08 95       	ret

000034cc <_ZN8BLEMate26stdCmdE6String>:
    34cc:	bf 92       	push	r11
    34ce:	cf 92       	push	r12
    34d0:	df 92       	push	r13
    34d2:	ef 92       	push	r14
    34d4:	ff 92       	push	r15
    34d6:	0f 93       	push	r16
    34d8:	1f 93       	push	r17
    34da:	cf 93       	push	r28
    34dc:	df 93       	push	r29
    34de:	cd b7       	in	r28, 0x3d	; 61
    34e0:	de b7       	in	r29, 0x3e	; 62
    34e2:	68 97       	sbiw	r28, 0x18	; 24
    34e4:	0f b6       	in	r0, 0x3f	; 63
    34e6:	f8 94       	cli
    34e8:	de bf       	out	0x3e, r29	; 62
    34ea:	0f be       	out	0x3f, r0	; 63
    34ec:	cd bf       	out	0x3d, r28	; 61
    34ee:	8c 01       	movw	r16, r24
    34f0:	7b 01       	movw	r14, r22
    34f2:	6f e4       	ldi	r22, 0x4F	; 79
    34f4:	72 e0       	ldi	r23, 0x02	; 2
    34f6:	ce 01       	movw	r24, r28
    34f8:	43 96       	adiw	r24, 0x13	; 19
    34fa:	4d dd       	rcall	.-1382   	; 0x2f96 <_ZN6StringC1EPKc>
    34fc:	6d e4       	ldi	r22, 0x4D	; 77
    34fe:	72 e0       	ldi	r23, 0x02	; 2
    3500:	ce 01       	movw	r24, r28
    3502:	0d 96       	adiw	r24, 0x0d	; 13
    3504:	48 dd       	rcall	.-1392   	; 0x2f96 <_ZN6StringC1EPKc>
    3506:	c8 01       	movw	r24, r16
    3508:	4d df       	rcall	.-358    	; 0x33a4 <_ZN8BLEMate210knownStartEv>
    350a:	b7 01       	movw	r22, r14
    350c:	d8 01       	movw	r26, r16
    350e:	91 96       	adiw	r26, 0x21	; 33
    3510:	8d 91       	ld	r24, X+
    3512:	9c 91       	ld	r25, X
    3514:	92 97       	sbiw	r26, 0x22	; 34
    3516:	0e 94 74 12 	call	0x24e8	; 0x24e8 <_ZN5Print5printERK6String>
    351a:	6e e4       	ldi	r22, 0x4E	; 78
    351c:	72 e0       	ldi	r23, 0x02	; 2
    351e:	f8 01       	movw	r30, r16
    3520:	81 a1       	ldd	r24, Z+33	; 0x21
    3522:	92 a1       	ldd	r25, Z+34	; 0x22
    3524:	0e 94 83 12 	call	0x2506	; 0x2506 <_ZN5Print5printEPKc>
    3528:	d8 01       	movw	r26, r16
    352a:	91 96       	adiw	r26, 0x21	; 33
    352c:	8d 91       	ld	r24, X+
    352e:	9c 91       	ld	r25, X
    3530:	92 97       	sbiw	r26, 0x22	; 34
    3532:	dc 01       	movw	r26, r24
    3534:	ed 91       	ld	r30, X+
    3536:	fc 91       	ld	r31, X
    3538:	02 84       	ldd	r0, Z+10	; 0x0a
    353a:	f3 85       	ldd	r31, Z+11	; 0x0b
    353c:	e0 2d       	mov	r30, r0
    353e:	19 95       	eicall
    3540:	28 db       	rcall	.-2480   	; 0x2b92 <millis>
    3542:	6b 01       	movw	r12, r22
    3544:	7c 01       	movw	r14, r24
    3546:	b8 eb       	ldi	r27, 0xB8	; 184
    3548:	cb 0e       	add	r12, r27
    354a:	bb e0       	ldi	r27, 0x0B	; 11
    354c:	db 1e       	adc	r13, r27
    354e:	e1 1c       	adc	r14, r1
    3550:	f1 1c       	adc	r15, r1
    3552:	4a c0       	rjmp	.+148    	; 0x35e8 <_ZN8BLEMate26stdCmdE6String+0x11c>
    3554:	f8 01       	movw	r30, r16
    3556:	81 a1       	ldd	r24, Z+33	; 0x21
    3558:	92 a1       	ldd	r25, Z+34	; 0x22
    355a:	dc 01       	movw	r26, r24
    355c:	ed 91       	ld	r30, X+
    355e:	fc 91       	ld	r31, X
    3560:	04 80       	ldd	r0, Z+4	; 0x04
    3562:	f5 81       	ldd	r31, Z+5	; 0x05
    3564:	e0 2d       	mov	r30, r0
    3566:	19 95       	eicall
    3568:	18 16       	cp	r1, r24
    356a:	19 06       	cpc	r1, r25
    356c:	74 f4       	brge	.+28     	; 0x358a <_ZN8BLEMate26stdCmdE6String+0xbe>
    356e:	f8 01       	movw	r30, r16
    3570:	81 a1       	ldd	r24, Z+33	; 0x21
    3572:	92 a1       	ldd	r25, Z+34	; 0x22
    3574:	dc 01       	movw	r26, r24
    3576:	ed 91       	ld	r30, X+
    3578:	fc 91       	ld	r31, X
    357a:	06 80       	ldd	r0, Z+6	; 0x06
    357c:	f7 81       	ldd	r31, Z+7	; 0x07
    357e:	e0 2d       	mov	r30, r0
    3580:	19 95       	eicall
    3582:	68 2f       	mov	r22, r24
    3584:	ce 01       	movw	r24, r28
    3586:	43 96       	adiw	r24, 0x13	; 19
    3588:	8a dd       	rcall	.-1260   	; 0x309e <_ZN6String6concatEc>
    358a:	be 01       	movw	r22, r28
    358c:	63 5f       	subi	r22, 0xF3	; 243
    358e:	7f 4f       	sbci	r23, 0xFF	; 255
    3590:	ce 01       	movw	r24, r28
    3592:	43 96       	adiw	r24, 0x13	; 19
    3594:	f6 dd       	rcall	.-1044   	; 0x3182 <_ZNK6String8endsWithERKS_>
    3596:	88 23       	and	r24, r24
    3598:	39 f1       	breq	.+78     	; 0x35e8 <_ZN8BLEMate26stdCmdE6String+0x11c>
    359a:	69 e5       	ldi	r22, 0x59	; 89
    359c:	72 e0       	ldi	r23, 0x02	; 2
    359e:	ce 01       	movw	r24, r28
    35a0:	07 96       	adiw	r24, 0x07	; 7
    35a2:	f9 dc       	rcall	.-1550   	; 0x2f96 <_ZN6StringC1EPKc>
    35a4:	be 01       	movw	r22, r28
    35a6:	69 5f       	subi	r22, 0xF9	; 249
    35a8:	7f 4f       	sbci	r23, 0xFF	; 255
    35aa:	ce 01       	movw	r24, r28
    35ac:	43 96       	adiw	r24, 0x13	; 19
    35ae:	da dd       	rcall	.-1100   	; 0x3164 <_ZNK6String10startsWithERKS_>
    35b0:	b8 2e       	mov	r11, r24
    35b2:	ce 01       	movw	r24, r28
    35b4:	07 96       	adiw	r24, 0x07	; 7
    35b6:	7f dc       	rcall	.-1794   	; 0x2eb6 <_ZN6StringD1Ev>
    35b8:	b1 10       	cpse	r11, r1
    35ba:	1f c0       	rjmp	.+62     	; 0x35fa <_ZN8BLEMate26stdCmdE6String+0x12e>
    35bc:	62 e6       	ldi	r22, 0x62	; 98
    35be:	72 e0       	ldi	r23, 0x02	; 2
    35c0:	ce 01       	movw	r24, r28
    35c2:	01 96       	adiw	r24, 0x01	; 1
    35c4:	e8 dc       	rcall	.-1584   	; 0x2f96 <_ZN6StringC1EPKc>
    35c6:	be 01       	movw	r22, r28
    35c8:	6f 5f       	subi	r22, 0xFF	; 255
    35ca:	7f 4f       	sbci	r23, 0xFF	; 255
    35cc:	ce 01       	movw	r24, r28
    35ce:	43 96       	adiw	r24, 0x13	; 19
    35d0:	c9 dd       	rcall	.-1134   	; 0x3164 <_ZNK6String10startsWithERKS_>
    35d2:	b8 2e       	mov	r11, r24
    35d4:	ce 01       	movw	r24, r28
    35d6:	01 96       	adiw	r24, 0x01	; 1
    35d8:	6e dc       	rcall	.-1828   	; 0x2eb6 <_ZN6StringD1Ev>
    35da:	b1 10       	cpse	r11, r1
    35dc:	10 c0       	rjmp	.+32     	; 0x35fe <_ZN8BLEMate26stdCmdE6String+0x132>
    35de:	6f e4       	ldi	r22, 0x4F	; 79
    35e0:	72 e0       	ldi	r23, 0x02	; 2
    35e2:	ce 01       	movw	r24, r28
    35e4:	43 96       	adiw	r24, 0x13	; 19
    35e6:	09 dd       	rcall	.-1518   	; 0x2ffa <_ZN6StringaSEPKc>
    35e8:	d4 da       	rcall	.-2648   	; 0x2b92 <millis>
    35ea:	6c 15       	cp	r22, r12
    35ec:	7d 05       	cpc	r23, r13
    35ee:	8e 05       	cpc	r24, r14
    35f0:	9f 05       	cpc	r25, r15
    35f2:	08 f4       	brcc	.+2      	; 0x35f6 <_ZN8BLEMate26stdCmdE6String+0x12a>
    35f4:	af cf       	rjmp	.-162    	; 0x3554 <_ZN8BLEMate26stdCmdE6String+0x88>
    35f6:	1e ef       	ldi	r17, 0xFE	; 254
    35f8:	03 c0       	rjmp	.+6      	; 0x3600 <_ZN8BLEMate26stdCmdE6String+0x134>
    35fa:	1f ef       	ldi	r17, 0xFF	; 255
    35fc:	01 c0       	rjmp	.+2      	; 0x3600 <_ZN8BLEMate26stdCmdE6String+0x134>
    35fe:	11 e0       	ldi	r17, 0x01	; 1
    3600:	ce 01       	movw	r24, r28
    3602:	0d 96       	adiw	r24, 0x0d	; 13
    3604:	58 dc       	rcall	.-1872   	; 0x2eb6 <_ZN6StringD1Ev>
    3606:	ce 01       	movw	r24, r28
    3608:	43 96       	adiw	r24, 0x13	; 19
    360a:	55 dc       	rcall	.-1878   	; 0x2eb6 <_ZN6StringD1Ev>
    360c:	81 2f       	mov	r24, r17
    360e:	68 96       	adiw	r28, 0x18	; 24
    3610:	0f b6       	in	r0, 0x3f	; 63
    3612:	f8 94       	cli
    3614:	de bf       	out	0x3e, r29	; 62
    3616:	0f be       	out	0x3f, r0	; 63
    3618:	cd bf       	out	0x3d, r28	; 61
    361a:	df 91       	pop	r29
    361c:	cf 91       	pop	r28
    361e:	1f 91       	pop	r17
    3620:	0f 91       	pop	r16
    3622:	ff 90       	pop	r15
    3624:	ef 90       	pop	r14
    3626:	df 90       	pop	r13
    3628:	cf 90       	pop	r12
    362a:	bf 90       	pop	r11
    362c:	08 95       	ret

0000362e <_ZN8BLEMate27restoreEv>:
    362e:	0f 93       	push	r16
    3630:	1f 93       	push	r17
    3632:	cf 93       	push	r28
    3634:	df 93       	push	r29
    3636:	00 d0       	rcall	.+0      	; 0x3638 <_ZN8BLEMate27restoreEv+0xa>
    3638:	00 d0       	rcall	.+0      	; 0x363a <_ZN8BLEMate27restoreEv+0xc>
    363a:	cd b7       	in	r28, 0x3d	; 61
    363c:	de b7       	in	r29, 0x3e	; 62
    363e:	8c 01       	movw	r16, r24
    3640:	65 e6       	ldi	r22, 0x65	; 101
    3642:	72 e0       	ldi	r23, 0x02	; 2
    3644:	ce 01       	movw	r24, r28
    3646:	01 96       	adiw	r24, 0x01	; 1
    3648:	a6 dc       	rcall	.-1716   	; 0x2f96 <_ZN6StringC1EPKc>
    364a:	be 01       	movw	r22, r28
    364c:	6f 5f       	subi	r22, 0xFF	; 255
    364e:	7f 4f       	sbci	r23, 0xFF	; 255
    3650:	c8 01       	movw	r24, r16
    3652:	3c df       	rcall	.-392    	; 0x34cc <_ZN8BLEMate26stdCmdE6String>
    3654:	18 2f       	mov	r17, r24
    3656:	ce 01       	movw	r24, r28
    3658:	01 96       	adiw	r24, 0x01	; 1
    365a:	2d dc       	rcall	.-1958   	; 0x2eb6 <_ZN6StringD1Ev>
    365c:	81 2f       	mov	r24, r17
    365e:	26 96       	adiw	r28, 0x06	; 6
    3660:	0f b6       	in	r0, 0x3f	; 63
    3662:	f8 94       	cli
    3664:	de bf       	out	0x3e, r29	; 62
    3666:	0f be       	out	0x3f, r0	; 63
    3668:	cd bf       	out	0x3d, r28	; 61
    366a:	df 91       	pop	r29
    366c:	cf 91       	pop	r28
    366e:	1f 91       	pop	r17
    3670:	0f 91       	pop	r16
    3672:	08 95       	ret

00003674 <_ZN8BLEMate211writeConfigEv>:
    3674:	0f 93       	push	r16
    3676:	1f 93       	push	r17
    3678:	cf 93       	push	r28
    367a:	df 93       	push	r29
    367c:	00 d0       	rcall	.+0      	; 0x367e <_ZN8BLEMate211writeConfigEv+0xa>
    367e:	00 d0       	rcall	.+0      	; 0x3680 <_ZN8BLEMate211writeConfigEv+0xc>
    3680:	cd b7       	in	r28, 0x3d	; 61
    3682:	de b7       	in	r29, 0x3e	; 62
    3684:	8c 01       	movw	r16, r24
    3686:	69 e6       	ldi	r22, 0x69	; 105
    3688:	72 e0       	ldi	r23, 0x02	; 2
    368a:	ce 01       	movw	r24, r28
    368c:	01 96       	adiw	r24, 0x01	; 1
    368e:	83 dc       	rcall	.-1786   	; 0x2f96 <_ZN6StringC1EPKc>
    3690:	be 01       	movw	r22, r28
    3692:	6f 5f       	subi	r22, 0xFF	; 255
    3694:	7f 4f       	sbci	r23, 0xFF	; 255
    3696:	c8 01       	movw	r24, r16
    3698:	19 df       	rcall	.-462    	; 0x34cc <_ZN8BLEMate26stdCmdE6String>
    369a:	18 2f       	mov	r17, r24
    369c:	ce 01       	movw	r24, r28
    369e:	01 96       	adiw	r24, 0x01	; 1
    36a0:	0a dc       	rcall	.-2028   	; 0x2eb6 <_ZN6StringD1Ev>
    36a2:	81 2f       	mov	r24, r17
    36a4:	26 96       	adiw	r28, 0x06	; 6
    36a6:	0f b6       	in	r0, 0x3f	; 63
    36a8:	f8 94       	cli
    36aa:	de bf       	out	0x3e, r29	; 62
    36ac:	0f be       	out	0x3f, r0	; 63
    36ae:	cd bf       	out	0x3d, r28	; 61
    36b0:	df 91       	pop	r29
    36b2:	cf 91       	pop	r28
    36b4:	1f 91       	pop	r17
    36b6:	0f 91       	pop	r16
    36b8:	08 95       	ret

000036ba <_ZN8BLEMate25resetEv>:
//    READY
// If there is some sort of error, the module will respond with
//    ERR
// We'll buffer characters until we see an EOL (\n\r), then check the string.
BLEMate2::opResult BLEMate2::reset()
{
    36ba:	bf 92       	push	r11
    36bc:	cf 92       	push	r12
    36be:	df 92       	push	r13
    36c0:	ef 92       	push	r14
    36c2:	ff 92       	push	r15
    36c4:	0f 93       	push	r16
    36c6:	1f 93       	push	r17
    36c8:	cf 93       	push	r28
    36ca:	df 93       	push	r29
    36cc:	cd b7       	in	r28, 0x3d	; 61
    36ce:	de b7       	in	r29, 0x3e	; 62
    36d0:	6e 97       	sbiw	r28, 0x1e	; 30
    36d2:	0f b6       	in	r0, 0x3f	; 63
    36d4:	f8 94       	cli
    36d6:	de bf       	out	0x3e, r29	; 62
    36d8:	0f be       	out	0x3f, r0	; 63
    36da:	cd bf       	out	0x3d, r28	; 61
    36dc:	8c 01       	movw	r16, r24
  String buffer;
    36de:	6f e4       	ldi	r22, 0x4F	; 79
    36e0:	72 e0       	ldi	r23, 0x02	; 2
    36e2:	ce 01       	movw	r24, r28
    36e4:	49 96       	adiw	r24, 0x19	; 25
    36e6:	57 dc       	rcall	.-1874   	; 0x2f96 <_ZN6StringC1EPKc>
  String EOL = String("\n\r");
    36e8:	6d e4       	ldi	r22, 0x4D	; 77
    36ea:	72 e0       	ldi	r23, 0x02	; 2
    36ec:	ce 01       	movw	r24, r28
    36ee:	43 96       	adiw	r24, 0x13	; 19
    36f0:	52 dc       	rcall	.-1884   	; 0x2f96 <_ZN6StringC1EPKc>
  
  knownStart();
    36f2:	c8 01       	movw	r24, r16
    36f4:	57 de       	rcall	.-850    	; 0x33a4 <_ZN8BLEMate210knownStartEv>
  
  // Now issue the reset command.
  _serialPort->print("RST");
    36f6:	6a e9       	ldi	r22, 0x9A	; 154
    36f8:	72 e0       	ldi	r23, 0x02	; 2
    36fa:	d8 01       	movw	r26, r16
    36fc:	91 96       	adiw	r26, 0x21	; 33
    36fe:	8d 91       	ld	r24, X+
    3700:	9c 91       	ld	r25, X
    3702:	92 97       	sbiw	r26, 0x22	; 34
    3704:	0e 94 83 12 	call	0x2506	; 0x2506 <_ZN5Print5printEPKc>
  _serialPort->print("\r");
    3708:	6e e4       	ldi	r22, 0x4E	; 78
    370a:	72 e0       	ldi	r23, 0x02	; 2
    370c:	f8 01       	movw	r30, r16
    370e:	81 a1       	ldd	r24, Z+33	; 0x21
    3710:	92 a1       	ldd	r25, Z+34	; 0x22
    3712:	0e 94 83 12 	call	0x2506	; 0x2506 <_ZN5Print5printEPKc>
  _serialPort->flush();
    3716:	d8 01       	movw	r26, r16
    3718:	91 96       	adiw	r26, 0x21	; 33
    371a:	8d 91       	ld	r24, X+
    371c:	9c 91       	ld	r25, X
    371e:	92 97       	sbiw	r26, 0x22	; 34
    3720:	dc 01       	movw	r26, r24
    3722:	ed 91       	ld	r30, X+
    3724:	fc 91       	ld	r31, X
    3726:	02 84       	ldd	r0, Z+10	; 0x0a
    3728:	f3 85       	ldd	r31, Z+11	; 0x0b
    372a:	e0 2d       	mov	r30, r0
    372c:	19 95       	eicall
  
  // We're going to use the internal timer to track the elapsed time since we
  //  issued the reset. Bog-standard Arduino stuff.
  unsigned long resetStart = millis();
    372e:	31 da       	rcall	.-2974   	; 0x2b92 <millis>
  
  // This is our timeout loop. We'll give the module 6 seconds to reset.
  while ((resetStart + 6000) > millis())
    3730:	6b 01       	movw	r12, r22
    3732:	7c 01       	movw	r14, r24
    3734:	b0 e7       	ldi	r27, 0x70	; 112
    3736:	cb 0e       	add	r12, r27
    3738:	b7 e1       	ldi	r27, 0x17	; 23
    373a:	db 1e       	adc	r13, r27
    373c:	e1 1c       	adc	r14, r1
    373e:	f1 1c       	adc	r15, r1
    3740:	76 c0       	rjmp	.+236    	; 0x382e <_ZN8BLEMate25resetEv+0x174>
  {
    // Grow the current buffered data, until we receive the EOL string.    
    if (_serialPort->available() > 0) 
    3742:	f8 01       	movw	r30, r16
    3744:	81 a1       	ldd	r24, Z+33	; 0x21
    3746:	92 a1       	ldd	r25, Z+34	; 0x22
    3748:	dc 01       	movw	r26, r24
    374a:	ed 91       	ld	r30, X+
    374c:	fc 91       	ld	r31, X
    374e:	04 80       	ldd	r0, Z+4	; 0x04
    3750:	f5 81       	ldd	r31, Z+5	; 0x05
    3752:	e0 2d       	mov	r30, r0
    3754:	19 95       	eicall
    3756:	18 16       	cp	r1, r24
    3758:	19 06       	cpc	r1, r25
    375a:	74 f4       	brge	.+28     	; 0x3778 <_ZN8BLEMate25resetEv+0xbe>
    {
      char temp = _serialPort->read();
    375c:	f8 01       	movw	r30, r16
    375e:	81 a1       	ldd	r24, Z+33	; 0x21
    3760:	92 a1       	ldd	r25, Z+34	; 0x22
    3762:	dc 01       	movw	r26, r24
    3764:	ed 91       	ld	r30, X+
    3766:	fc 91       	ld	r31, X
    3768:	06 80       	ldd	r0, Z+6	; 0x06
    376a:	f7 81       	ldd	r31, Z+7	; 0x07
    376c:	e0 2d       	mov	r30, r0
    376e:	19 95       	eicall
      buffer.concat(temp);
    3770:	68 2f       	mov	r22, r24
    3772:	ce 01       	movw	r24, r28
    3774:	49 96       	adiw	r24, 0x19	; 25
    3776:	93 dc       	rcall	.-1754   	; 0x309e <_ZN6String6concatEc>
    }
    
    if (buffer.endsWith(EOL))
    3778:	be 01       	movw	r22, r28
    377a:	6d 5e       	subi	r22, 0xED	; 237
    377c:	7f 4f       	sbci	r23, 0xFF	; 255
    377e:	ce 01       	movw	r24, r28
    3780:	49 96       	adiw	r24, 0x19	; 25
    3782:	ff dc       	rcall	.-1538   	; 0x3182 <_ZNK6String8endsWithERKS_>
    3784:	88 23       	and	r24, r24
    3786:	09 f4       	brne	.+2      	; 0x378a <_ZN8BLEMate25resetEv+0xd0>
    3788:	52 c0       	rjmp	.+164    	; 0x382e <_ZN8BLEMate25resetEv+0x174>
    {
      // If ERR or READY, we've finished the reset. Otherwise, just discard
      //  the data and wait for the next EOL.
      if (buffer.startsWith("ER")) return MODULE_ERROR;
    378a:	69 e5       	ldi	r22, 0x59	; 89
    378c:	72 e0       	ldi	r23, 0x02	; 2
    378e:	ce 01       	movw	r24, r28
    3790:	0d 96       	adiw	r24, 0x0d	; 13
    3792:	01 dc       	rcall	.-2046   	; 0x2f96 <_ZN6StringC1EPKc>
    3794:	be 01       	movw	r22, r28
    3796:	63 5f       	subi	r22, 0xF3	; 243
    3798:	7f 4f       	sbci	r23, 0xFF	; 255
    379a:	ce 01       	movw	r24, r28
    379c:	49 96       	adiw	r24, 0x19	; 25
    379e:	e2 dc       	rcall	.-1596   	; 0x3164 <_ZNK6String10startsWithERKS_>
    37a0:	b8 2e       	mov	r11, r24
    37a2:	ce 01       	movw	r24, r28
    37a4:	0d 96       	adiw	r24, 0x0d	; 13
    37a6:	87 db       	rcall	.-2290   	; 0x2eb6 <_ZN6StringD1Ev>
    37a8:	b1 10       	cpse	r11, r1
    37aa:	4a c0       	rjmp	.+148    	; 0x3840 <_ZN8BLEMate25resetEv+0x186>
      if (buffer.startsWith("RE")) 
    37ac:	6e e9       	ldi	r22, 0x9E	; 158
    37ae:	72 e0       	ldi	r23, 0x02	; 2
    37b0:	ce 01       	movw	r24, r28
    37b2:	07 96       	adiw	r24, 0x07	; 7
    37b4:	f0 db       	rcall	.-2080   	; 0x2f96 <_ZN6StringC1EPKc>
    37b6:	be 01       	movw	r22, r28
    37b8:	69 5f       	subi	r22, 0xF9	; 249
    37ba:	7f 4f       	sbci	r23, 0xFF	; 255
    37bc:	ce 01       	movw	r24, r28
    37be:	49 96       	adiw	r24, 0x19	; 25
    37c0:	d1 dc       	rcall	.-1630   	; 0x3164 <_ZNK6String10startsWithERKS_>
    37c2:	b8 2e       	mov	r11, r24
    37c4:	ce 01       	movw	r24, r28
    37c6:	07 96       	adiw	r24, 0x07	; 7
    37c8:	76 db       	rcall	.-2324   	; 0x2eb6 <_ZN6StringD1Ev>
    37ca:	bb 20       	and	r11, r11
    37cc:	59 f1       	breq	.+86     	; 0x3824 <_ZN8BLEMate25resetEv+0x16a>
      {
        stdCmd("SCN OFF"); // When we come out of reset, we *could* be
    37ce:	61 ea       	ldi	r22, 0xA1	; 161
    37d0:	72 e0       	ldi	r23, 0x02	; 2
    37d2:	ce 01       	movw	r24, r28
    37d4:	01 96       	adiw	r24, 0x01	; 1
    37d6:	df db       	rcall	.-2114   	; 0x2f96 <_ZN6StringC1EPKc>
    37d8:	be 01       	movw	r22, r28
    37da:	6f 5f       	subi	r22, 0xFF	; 255
    37dc:	7f 4f       	sbci	r23, 0xFF	; 255
    37de:	c8 01       	movw	r24, r16
    37e0:	75 de       	rcall	.-790    	; 0x34cc <_ZN8BLEMate26stdCmdE6String>
    37e2:	ce 01       	movw	r24, r28
    37e4:	01 96       	adiw	r24, 0x01	; 1
    37e6:	67 db       	rcall	.-2354   	; 0x2eb6 <_ZN6StringD1Ev>
                           //  in scan mode. We don't want that; it's too
                           //  random and noisy.
        delay(500);        // Let the scanning noise complete.
    37e8:	64 ef       	ldi	r22, 0xF4	; 244
    37ea:	71 e0       	ldi	r23, 0x01	; 1
    37ec:	80 e0       	ldi	r24, 0x00	; 0
    37ee:	90 e0       	ldi	r25, 0x00	; 0
    37f0:	02 da       	rcall	.-3068   	; 0x2bf6 <delay>
        while(_serialPort->available())
    37f2:	0a c0       	rjmp	.+20     	; 0x3808 <_ZN8BLEMate25resetEv+0x14e>
        {
          _serialPort->read();
    37f4:	f8 01       	movw	r30, r16
    37f6:	81 a1       	ldd	r24, Z+33	; 0x21
    37f8:	92 a1       	ldd	r25, Z+34	; 0x22
    37fa:	dc 01       	movw	r26, r24
    37fc:	ed 91       	ld	r30, X+
    37fe:	fc 91       	ld	r31, X
    3800:	06 80       	ldd	r0, Z+6	; 0x06
    3802:	f7 81       	ldd	r31, Z+7	; 0x07
    3804:	e0 2d       	mov	r30, r0
    3806:	19 95       	eicall
      {
        stdCmd("SCN OFF"); // When we come out of reset, we *could* be
                           //  in scan mode. We don't want that; it's too
                           //  random and noisy.
        delay(500);        // Let the scanning noise complete.
        while(_serialPort->available())
    3808:	f8 01       	movw	r30, r16
    380a:	81 a1       	ldd	r24, Z+33	; 0x21
    380c:	92 a1       	ldd	r25, Z+34	; 0x22
    380e:	dc 01       	movw	r26, r24
    3810:	ed 91       	ld	r30, X+
    3812:	fc 91       	ld	r31, X
    3814:	04 80       	ldd	r0, Z+4	; 0x04
    3816:	f5 81       	ldd	r31, Z+5	; 0x05
    3818:	e0 2d       	mov	r30, r0
    381a:	19 95       	eicall
    381c:	89 2b       	or	r24, r25
    381e:	51 f7       	brne	.-44     	; 0x37f4 <_ZN8BLEMate25resetEv+0x13a>
        {
          _serialPort->read();
        } 
        return SUCCESS;
    3820:	11 e0       	ldi	r17, 0x01	; 1
    3822:	0f c0       	rjmp	.+30     	; 0x3842 <_ZN8BLEMate25resetEv+0x188>
      }
      buffer = "";
    3824:	6f e4       	ldi	r22, 0x4F	; 79
    3826:	72 e0       	ldi	r23, 0x02	; 2
    3828:	ce 01       	movw	r24, r28
    382a:	49 96       	adiw	r24, 0x19	; 25
    382c:	e6 db       	rcall	.-2100   	; 0x2ffa <_ZN6StringaSEPKc>
  // We're going to use the internal timer to track the elapsed time since we
  //  issued the reset. Bog-standard Arduino stuff.
  unsigned long resetStart = millis();
  
  // This is our timeout loop. We'll give the module 6 seconds to reset.
  while ((resetStart + 6000) > millis())
    382e:	b1 d9       	rcall	.-3230   	; 0x2b92 <millis>
    3830:	6c 15       	cp	r22, r12
    3832:	7d 05       	cpc	r23, r13
    3834:	8e 05       	cpc	r24, r14
    3836:	9f 05       	cpc	r25, r15
    3838:	08 f4       	brcc	.+2      	; 0x383c <_ZN8BLEMate25resetEv+0x182>
    383a:	83 cf       	rjmp	.-250    	; 0x3742 <_ZN8BLEMate25resetEv+0x88>
        return SUCCESS;
      }
      buffer = "";
    }    
  }
  return TIMEOUT_ERROR;
    383c:	1e ef       	ldi	r17, 0xFE	; 254
    383e:	01 c0       	rjmp	.+2      	; 0x3842 <_ZN8BLEMate25resetEv+0x188>
    
    if (buffer.endsWith(EOL))
    {
      // If ERR or READY, we've finished the reset. Otherwise, just discard
      //  the data and wait for the next EOL.
      if (buffer.startsWith("ER")) return MODULE_ERROR;
    3840:	1f ef       	ldi	r17, 0xFF	; 255
//    ERR
// We'll buffer characters until we see an EOL (\n\r), then check the string.
BLEMate2::opResult BLEMate2::reset()
{
  String buffer;
  String EOL = String("\n\r");
    3842:	ce 01       	movw	r24, r28
    3844:	43 96       	adiw	r24, 0x13	; 19
    3846:	37 db       	rcall	.-2450   	; 0x2eb6 <_ZN6StringD1Ev>
        return SUCCESS;
      }
      buffer = "";
    }    
  }
  return TIMEOUT_ERROR;
    3848:	ce 01       	movw	r24, r28
    384a:	49 96       	adiw	r24, 0x19	; 25
    384c:	34 db       	rcall	.-2456   	; 0x2eb6 <_ZN6StringD1Ev>
}
    384e:	81 2f       	mov	r24, r17
    3850:	6e 96       	adiw	r28, 0x1e	; 30
    3852:	0f b6       	in	r0, 0x3f	; 63
    3854:	f8 94       	cli
    3856:	de bf       	out	0x3e, r29	; 62
    3858:	0f be       	out	0x3f, r0	; 63
    385a:	cd bf       	out	0x3d, r28	; 61
    385c:	df 91       	pop	r29
    385e:	cf 91       	pop	r28
    3860:	1f 91       	pop	r17
    3862:	0f 91       	pop	r16
    3864:	ff 90       	pop	r15
    3866:	ef 90       	pop	r14
    3868:	df 90       	pop	r13
    386a:	cf 90       	pop	r12
    386c:	bf 90       	pop	r11
    386e:	08 95       	ret

00003870 <_ZN8BLEMate29amCentralERb>:
//  device; that's important information, so we should be able to query
//  the module regarding that. We're not going to store that info, however, 
//  since the whole point is to get it "from the horse's mouth" rather than
//  trusting that our software is in sync with the state of the module.
BLEMate2::opResult BLEMate2::amCentral(boolean &inCentralMode)
{
    3870:	8f 92       	push	r8
    3872:	9f 92       	push	r9
    3874:	af 92       	push	r10
    3876:	bf 92       	push	r11
    3878:	cf 92       	push	r12
    387a:	df 92       	push	r13
    387c:	ef 92       	push	r14
    387e:	ff 92       	push	r15
    3880:	0f 93       	push	r16
    3882:	1f 93       	push	r17
    3884:	cf 93       	push	r28
    3886:	df 93       	push	r29
    3888:	cd b7       	in	r28, 0x3d	; 61
    388a:	de b7       	in	r29, 0x3e	; 62
    388c:	6e 97       	sbiw	r28, 0x1e	; 30
    388e:	0f b6       	in	r0, 0x3f	; 63
    3890:	f8 94       	cli
    3892:	de bf       	out	0x3e, r29	; 62
    3894:	0f be       	out	0x3f, r0	; 63
    3896:	cd bf       	out	0x3d, r28	; 61
    3898:	8c 01       	movw	r16, r24
    389a:	7b 01       	movw	r14, r22
  String buffer;
    389c:	6f e4       	ldi	r22, 0x4F	; 79
    389e:	72 e0       	ldi	r23, 0x02	; 2
    38a0:	ce 01       	movw	r24, r28
    38a2:	49 96       	adiw	r24, 0x19	; 25
    38a4:	78 db       	rcall	.-2320   	; 0x2f96 <_ZN6StringC1EPKc>
  String EOL = String("\n\r");
    38a6:	6d e4       	ldi	r22, 0x4D	; 77
    38a8:	72 e0       	ldi	r23, 0x02	; 2
    38aa:	ce 01       	movw	r24, r28
    38ac:	43 96       	adiw	r24, 0x13	; 19
    38ae:	73 db       	rcall	.-2330   	; 0x2f96 <_ZN6StringC1EPKc>
  
  knownStart(); // Clear the serial buffer in the module and the Arduino.
    38b0:	c8 01       	movw	r24, r16
    38b2:	78 dd       	rcall	.-1296   	; 0x33a4 <_ZN8BLEMate210knownStartEv>
  
  _serialPort->print("STS\r");
    38b4:	69 ea       	ldi	r22, 0xA9	; 169
    38b6:	72 e0       	ldi	r23, 0x02	; 2
    38b8:	d8 01       	movw	r26, r16
    38ba:	91 96       	adiw	r26, 0x21	; 33
    38bc:	8d 91       	ld	r24, X+
    38be:	9c 91       	ld	r25, X
    38c0:	92 97       	sbiw	r26, 0x22	; 34
    38c2:	0e 94 83 12 	call	0x2506	; 0x2506 <_ZN5Print5printEPKc>
  _serialPort->flush();
    38c6:	f8 01       	movw	r30, r16
    38c8:	81 a1       	ldd	r24, Z+33	; 0x21
    38ca:	92 a1       	ldd	r25, Z+34	; 0x22
    38cc:	dc 01       	movw	r26, r24
    38ce:	ed 91       	ld	r30, X+
    38d0:	fc 91       	ld	r31, X
    38d2:	02 84       	ldd	r0, Z+10	; 0x0a
    38d4:	f3 85       	ldd	r31, Z+11	; 0x0b
    38d6:	e0 2d       	mov	r30, r0
    38d8:	19 95       	eicall
  
  // We're going to use the internal timer to track the elapsed time since we
  //  issued the command. Bog-standard Arduino stuff.
  unsigned long startTime = millis();
    38da:	5b d9       	rcall	.-3402   	; 0x2b92 <millis>
    
  // This is our timeout loop. We'll give the module 3 seconds.
  while ((startTime + 3000) > millis())
    38dc:	4b 01       	movw	r8, r22
    38de:	5c 01       	movw	r10, r24
    38e0:	b8 eb       	ldi	r27, 0xB8	; 184
    38e2:	8b 0e       	add	r8, r27
    38e4:	bb e0       	ldi	r27, 0x0B	; 11
    38e6:	9b 1e       	adc	r9, r27
    38e8:	a1 1c       	adc	r10, r1
    38ea:	b1 1c       	adc	r11, r1
      }
      else if (buffer.startsWith("STS")) 
      {
        if (buffer.charAt(4) == 'C')
        {
          inCentralMode = true;
    38ec:	dd 24       	eor	r13, r13
    38ee:	d3 94       	inc	r13
  // We're going to use the internal timer to track the elapsed time since we
  //  issued the command. Bog-standard Arduino stuff.
  unsigned long startTime = millis();
    
  // This is our timeout loop. We'll give the module 3 seconds.
  while ((startTime + 3000) > millis())
    38f0:	68 c0       	rjmp	.+208    	; 0x39c2 <_ZN8BLEMate29amCentralERb+0x152>
  {
    // Grow the current buffered data, until we receive the EOL string.    
    if (_serialPort->available() > 0) 
    38f2:	f8 01       	movw	r30, r16
    38f4:	81 a1       	ldd	r24, Z+33	; 0x21
    38f6:	92 a1       	ldd	r25, Z+34	; 0x22
    38f8:	dc 01       	movw	r26, r24
    38fa:	ed 91       	ld	r30, X+
    38fc:	fc 91       	ld	r31, X
    38fe:	04 80       	ldd	r0, Z+4	; 0x04
    3900:	f5 81       	ldd	r31, Z+5	; 0x05
    3902:	e0 2d       	mov	r30, r0
    3904:	19 95       	eicall
    3906:	18 16       	cp	r1, r24
    3908:	19 06       	cpc	r1, r25
    390a:	74 f4       	brge	.+28     	; 0x3928 <_ZN8BLEMate29amCentralERb+0xb8>
    {
      buffer.concat(char(_serialPort->read()));
    390c:	f8 01       	movw	r30, r16
    390e:	81 a1       	ldd	r24, Z+33	; 0x21
    3910:	92 a1       	ldd	r25, Z+34	; 0x22
    3912:	dc 01       	movw	r26, r24
    3914:	ed 91       	ld	r30, X+
    3916:	fc 91       	ld	r31, X
    3918:	06 80       	ldd	r0, Z+6	; 0x06
    391a:	f7 81       	ldd	r31, Z+7	; 0x07
    391c:	e0 2d       	mov	r30, r0
    391e:	19 95       	eicall
    3920:	68 2f       	mov	r22, r24
    3922:	ce 01       	movw	r24, r28
    3924:	49 96       	adiw	r24, 0x19	; 25
    3926:	bb db       	rcall	.-2186   	; 0x309e <_ZN6String6concatEc>
    }
    if (buffer.endsWith(EOL))
    3928:	be 01       	movw	r22, r28
    392a:	6d 5e       	subi	r22, 0xED	; 237
    392c:	7f 4f       	sbci	r23, 0xFF	; 255
    392e:	ce 01       	movw	r24, r28
    3930:	49 96       	adiw	r24, 0x19	; 25
    3932:	27 dc       	rcall	.-1970   	; 0x3182 <_ZNK6String8endsWithERKS_>
    3934:	88 23       	and	r24, r24
    3936:	09 f4       	brne	.+2      	; 0x393a <_ZN8BLEMate29amCentralERb+0xca>
    3938:	44 c0       	rjmp	.+136    	; 0x39c2 <_ZN8BLEMate29amCentralERb+0x152>
    {
      if (buffer.startsWith("ER")) 
    393a:	69 e5       	ldi	r22, 0x59	; 89
    393c:	72 e0       	ldi	r23, 0x02	; 2
    393e:	ce 01       	movw	r24, r28
    3940:	0d 96       	adiw	r24, 0x0d	; 13
    3942:	29 db       	rcall	.-2478   	; 0x2f96 <_ZN6StringC1EPKc>
    3944:	be 01       	movw	r22, r28
    3946:	63 5f       	subi	r22, 0xF3	; 243
    3948:	7f 4f       	sbci	r23, 0xFF	; 255
    394a:	ce 01       	movw	r24, r28
    394c:	49 96       	adiw	r24, 0x19	; 25
    394e:	0a dc       	rcall	.-2028   	; 0x3164 <_ZNK6String10startsWithERKS_>
    3950:	c8 2e       	mov	r12, r24
    3952:	ce 01       	movw	r24, r28
    3954:	0d 96       	adiw	r24, 0x0d	; 13
    3956:	af da       	rcall	.-2722   	; 0x2eb6 <_ZN6StringD1Ev>
    3958:	c1 10       	cpse	r12, r1
    395a:	3c c0       	rjmp	.+120    	; 0x39d4 <_ZN8BLEMate29amCentralERb+0x164>
      {
        return MODULE_ERROR;
      }
      else if (buffer.startsWith("OK")) 
    395c:	62 e6       	ldi	r22, 0x62	; 98
    395e:	72 e0       	ldi	r23, 0x02	; 2
    3960:	ce 01       	movw	r24, r28
    3962:	07 96       	adiw	r24, 0x07	; 7
    3964:	18 db       	rcall	.-2512   	; 0x2f96 <_ZN6StringC1EPKc>
    3966:	be 01       	movw	r22, r28
    3968:	69 5f       	subi	r22, 0xF9	; 249
    396a:	7f 4f       	sbci	r23, 0xFF	; 255
    396c:	ce 01       	movw	r24, r28
    396e:	49 96       	adiw	r24, 0x19	; 25
    3970:	f9 db       	rcall	.-2062   	; 0x3164 <_ZNK6String10startsWithERKS_>
    3972:	c8 2e       	mov	r12, r24
    3974:	ce 01       	movw	r24, r28
    3976:	07 96       	adiw	r24, 0x07	; 7
    3978:	9e da       	rcall	.-2756   	; 0x2eb6 <_ZN6StringD1Ev>
    397a:	c1 10       	cpse	r12, r1
    397c:	2d c0       	rjmp	.+90     	; 0x39d8 <_ZN8BLEMate29amCentralERb+0x168>
      {
        return SUCCESS;
      }
      else if (buffer.startsWith("STS")) 
    397e:	6e ea       	ldi	r22, 0xAE	; 174
    3980:	72 e0       	ldi	r23, 0x02	; 2
    3982:	ce 01       	movw	r24, r28
    3984:	01 96       	adiw	r24, 0x01	; 1
    3986:	07 db       	rcall	.-2546   	; 0x2f96 <_ZN6StringC1EPKc>
    3988:	be 01       	movw	r22, r28
    398a:	6f 5f       	subi	r22, 0xFF	; 255
    398c:	7f 4f       	sbci	r23, 0xFF	; 255
    398e:	ce 01       	movw	r24, r28
    3990:	49 96       	adiw	r24, 0x19	; 25
    3992:	e8 db       	rcall	.-2096   	; 0x3164 <_ZNK6String10startsWithERKS_>
    3994:	c8 2e       	mov	r12, r24
    3996:	ce 01       	movw	r24, r28
    3998:	01 96       	adiw	r24, 0x01	; 1
    399a:	8d da       	rcall	.-2790   	; 0x2eb6 <_ZN6StringD1Ev>
    399c:	cc 20       	and	r12, r12
    399e:	61 f0       	breq	.+24     	; 0x39b8 <_ZN8BLEMate29amCentralERb+0x148>
      {
        if (buffer.charAt(4) == 'C')
    39a0:	64 e0       	ldi	r22, 0x04	; 4
    39a2:	70 e0       	ldi	r23, 0x00	; 0
    39a4:	ce 01       	movw	r24, r28
    39a6:	49 96       	adiw	r24, 0x19	; 25
    39a8:	25 dc       	rcall	.-1974   	; 0x31f4 <_ZNK6String6charAtEj>
    39aa:	83 34       	cpi	r24, 0x43	; 67
    39ac:	19 f4       	brne	.+6      	; 0x39b4 <_ZN8BLEMate29amCentralERb+0x144>
        {
          inCentralMode = true;
    39ae:	f7 01       	movw	r30, r14
    39b0:	d0 82       	st	Z, r13
    39b2:	02 c0       	rjmp	.+4      	; 0x39b8 <_ZN8BLEMate29amCentralERb+0x148>
        }
        else
        {
          inCentralMode = false;
    39b4:	d7 01       	movw	r26, r14
    39b6:	1c 92       	st	X, r1
        }
      } 
      buffer = "";
    39b8:	6f e4       	ldi	r22, 0x4F	; 79
    39ba:	72 e0       	ldi	r23, 0x02	; 2
    39bc:	ce 01       	movw	r24, r28
    39be:	49 96       	adiw	r24, 0x19	; 25
    39c0:	1c db       	rcall	.-2504   	; 0x2ffa <_ZN6StringaSEPKc>
  // We're going to use the internal timer to track the elapsed time since we
  //  issued the command. Bog-standard Arduino stuff.
  unsigned long startTime = millis();
    
  // This is our timeout loop. We'll give the module 3 seconds.
  while ((startTime + 3000) > millis())
    39c2:	e7 d8       	rcall	.-3634   	; 0x2b92 <millis>
    39c4:	68 15       	cp	r22, r8
    39c6:	79 05       	cpc	r23, r9
    39c8:	8a 05       	cpc	r24, r10
    39ca:	9b 05       	cpc	r25, r11
    39cc:	08 f4       	brcc	.+2      	; 0x39d0 <_ZN8BLEMate29amCentralERb+0x160>
    39ce:	91 cf       	rjmp	.-222    	; 0x38f2 <_ZN8BLEMate29amCentralERb+0x82>
        }
      } 
      buffer = "";
    }    
  }
  return TIMEOUT_ERROR;
    39d0:	1e ef       	ldi	r17, 0xFE	; 254
    39d2:	03 c0       	rjmp	.+6      	; 0x39da <_ZN8BLEMate29amCentralERb+0x16a>
    }
    if (buffer.endsWith(EOL))
    {
      if (buffer.startsWith("ER")) 
      {
        return MODULE_ERROR;
    39d4:	1f ef       	ldi	r17, 0xFF	; 255
    39d6:	01 c0       	rjmp	.+2      	; 0x39da <_ZN8BLEMate29amCentralERb+0x16a>
      }
      else if (buffer.startsWith("OK")) 
      {
        return SUCCESS;
    39d8:	11 e0       	ldi	r17, 0x01	; 1
//  since the whole point is to get it "from the horse's mouth" rather than
//  trusting that our software is in sync with the state of the module.
BLEMate2::opResult BLEMate2::amCentral(boolean &inCentralMode)
{
  String buffer;
  String EOL = String("\n\r");
    39da:	ce 01       	movw	r24, r28
    39dc:	43 96       	adiw	r24, 0x13	; 19
    39de:	6b da       	rcall	.-2858   	; 0x2eb6 <_ZN6StringD1Ev>
        }
      } 
      buffer = "";
    }    
  }
  return TIMEOUT_ERROR;
    39e0:	ce 01       	movw	r24, r28
    39e2:	49 96       	adiw	r24, 0x19	; 25
    39e4:	68 da       	rcall	.-2864   	; 0x2eb6 <_ZN6StringD1Ev>
}
    39e6:	81 2f       	mov	r24, r17
    39e8:	6e 96       	adiw	r28, 0x1e	; 30
    39ea:	0f b6       	in	r0, 0x3f	; 63
    39ec:	f8 94       	cli
    39ee:	de bf       	out	0x3e, r29	; 62
    39f0:	0f be       	out	0x3f, r0	; 63
    39f2:	cd bf       	out	0x3d, r28	; 61
    39f4:	df 91       	pop	r29
    39f6:	cf 91       	pop	r28
    39f8:	1f 91       	pop	r17
    39fa:	0f 91       	pop	r16
    39fc:	ff 90       	pop	r15
    39fe:	ef 90       	pop	r14
    3a00:	df 90       	pop	r13
    3a02:	cf 90       	pop	r12
    3a04:	bf 90       	pop	r11
    3a06:	af 90       	pop	r10
    3a08:	9f 90       	pop	r9
    3a0a:	8f 90       	pop	r8
    3a0c:	08 95       	ret

00003a0e <_ZN8BLEMate28sendDataEPch>:
  return result;
}

// Now, byte array.
BLEMate2::opResult BLEMate2::sendData(char *dataBuffer, byte dataLen)
{
    3a0e:	8f 92       	push	r8
    3a10:	9f 92       	push	r9
    3a12:	af 92       	push	r10
    3a14:	bf 92       	push	r11
    3a16:	cf 92       	push	r12
    3a18:	df 92       	push	r13
    3a1a:	ef 92       	push	r14
    3a1c:	ff 92       	push	r15
    3a1e:	0f 93       	push	r16
    3a20:	1f 93       	push	r17
    3a22:	cf 93       	push	r28
    3a24:	df 93       	push	r29
    3a26:	cd b7       	in	r28, 0x3d	; 61
    3a28:	de b7       	in	r29, 0x3e	; 62
    3a2a:	69 97       	sbiw	r28, 0x19	; 25
    3a2c:	0f b6       	in	r0, 0x3f	; 63
    3a2e:	f8 94       	cli
    3a30:	de bf       	out	0x3e, r29	; 62
    3a32:	0f be       	out	0x3f, r0	; 63
    3a34:	cd bf       	out	0x3d, r28	; 61
    3a36:	7c 01       	movw	r14, r24
    3a38:	8b 01       	movw	r16, r22
    3a3a:	84 2e       	mov	r8, r20
  String EOL = String("\n\r");
    3a3c:	6d e4       	ldi	r22, 0x4D	; 77
    3a3e:	72 e0       	ldi	r23, 0x02	; 2
    3a40:	ce 01       	movw	r24, r28
    3a42:	43 96       	adiw	r24, 0x13	; 19
    3a44:	a8 da       	rcall	.-2736   	; 0x2f96 <_ZN6StringC1EPKc>
  //  I don't want to burden the user with that, unduly, so I'm going to chop
  //  up their data and send it out in smaller blocks.
   
  // Thus, the first quetion is: am I in central mode, or not?
  boolean inCentralMode;
  amCentral(inCentralMode);
    3a46:	be 01       	movw	r22, r28
    3a48:	67 5e       	subi	r22, 0xE7	; 231
    3a4a:	7f 4f       	sbci	r23, 0xFF	; 255
    3a4c:	c7 01       	movw	r24, r14
    3a4e:	10 df       	rcall	.-480    	; 0x3870 <_ZN8BLEMate29amCentralERb>
  // What we're now going to do is to build a String object with our buffer
  //  contents and then hit send on that buffer when it reaches a the length
  //  limited by the mode.

  byte outBufLenLimit = 20;
  if (!inCentralMode)
    3a50:	89 8d       	ldd	r24, Y+25	; 0x19
    3a52:	88 23       	and	r24, r24
    3a54:	29 f0       	breq	.+10     	; 0x3a60 <_ZN8BLEMate28sendDataEPch+0x52>

  // What we're now going to do is to build a String object with our buffer
  //  contents and then hit send on that buffer when it reaches a the length
  //  limited by the mode.

  byte outBufLenLimit = 20;
    3a56:	0f 2e       	mov	r0, r31
    3a58:	f4 e1       	ldi	r31, 0x14	; 20
    3a5a:	af 2e       	mov	r10, r31
    3a5c:	f0 2d       	mov	r31, r0
    3a5e:	04 c0       	rjmp	.+8      	; 0x3a68 <_ZN8BLEMate28sendDataEPch+0x5a>
  if (!inCentralMode)
  {
    outBufLenLimit = 125;
    3a60:	0f 2e       	mov	r0, r31
    3a62:	fd e7       	ldi	r31, 0x7D	; 125
    3a64:	af 2e       	mov	r10, r31
    3a66:	f0 2d       	mov	r31, r0
  byte inBufPtr = 0;
  byte outBufLen = 0;
  byte dataLeft = dataLen;

  opResult result = SUCCESS;
  while (inBufPtr < dataLen)
    3a68:	88 20       	and	r8, r8
    3a6a:	09 f4       	brne	.+2      	; 0x3a6e <_ZN8BLEMate28sendDataEPch+0x60>
    3a6c:	49 c0       	rjmp	.+146    	; 0x3b00 <_ZN8BLEMate28sendDataEPch+0xf2>
    3a6e:	98 2c       	mov	r9, r8
    3a70:	d1 2c       	mov	r13, r1
    3a72:	9a 14       	cp	r9, r10
    3a74:	08 f4       	brcc	.+2      	; 0x3a78 <_ZN8BLEMate28sendDataEPch+0x6a>
    3a76:	a9 2c       	mov	r10, r9
  {
    if (dataLeft < outBufLenLimit)
    {
      outBufLenLimit = dataLeft;
    }
    dataLeft -= outBufLenLimit;
    3a78:	9a 18       	sub	r9, r10
    String outBuf;
    3a7a:	6f e4       	ldi	r22, 0x4F	; 79
    3a7c:	72 e0       	ldi	r23, 0x02	; 2
    3a7e:	ce 01       	movw	r24, r28
    3a80:	0d 96       	adiw	r24, 0x0d	; 13
    3a82:	89 da       	rcall	.-2798   	; 0x2f96 <_ZN6StringC1EPKc>
    while (outBufLen < outBufLenLimit)
    3a84:	aa 20       	and	r10, r10
    3a86:	81 f0       	breq	.+32     	; 0x3aa8 <_ZN8BLEMate28sendDataEPch+0x9a>
    3a88:	ba 2c       	mov	r11, r10
    3a8a:	bd 0c       	add	r11, r13
    {
      outBuf.concat(dataBuffer[inBufPtr++]);
    3a8c:	cc 24       	eor	r12, r12
    3a8e:	c3 94       	inc	r12
    3a90:	cd 0c       	add	r12, r13
    3a92:	f8 01       	movw	r30, r16
    3a94:	ed 0d       	add	r30, r13
    3a96:	f1 1d       	adc	r31, r1
    3a98:	60 81       	ld	r22, Z
    3a9a:	ce 01       	movw	r24, r28
    3a9c:	0d 96       	adiw	r24, 0x0d	; 13
    3a9e:	ff da       	rcall	.-2562   	; 0x309e <_ZN6String6concatEc>
    {
      outBufLenLimit = dataLeft;
    }
    dataLeft -= outBufLenLimit;
    String outBuf;
    while (outBufLen < outBufLenLimit)
    3aa0:	cb 14       	cp	r12, r11
    3aa2:	19 f0       	breq	.+6      	; 0x3aaa <_ZN8BLEMate28sendDataEPch+0x9c>
    {
      outBuf.concat(dataBuffer[inBufPtr++]);
    3aa4:	dc 2c       	mov	r13, r12
    3aa6:	f2 cf       	rjmp	.-28     	; 0x3a8c <_ZN8BLEMate28sendDataEPch+0x7e>
    {
      outBufLenLimit = dataLeft;
    }
    dataLeft -= outBufLenLimit;
    String outBuf;
    while (outBufLen < outBufLenLimit)
    3aa8:	bd 2c       	mov	r11, r13

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    3aaa:	62 eb       	ldi	r22, 0xB2	; 178
    3aac:	72 e0       	ldi	r23, 0x02	; 2
    3aae:	ce 01       	movw	r24, r28
    3ab0:	07 96       	adiw	r24, 0x07	; 7
    3ab2:	71 da       	rcall	.-2846   	; 0x2f96 <_ZN6StringC1EPKc>
    {
      outBuf.concat(dataBuffer[inBufPtr++]);
      outBufLen++;
    }
    outBuf = "SND " + outBuf + "\r";
    3ab4:	be 01       	movw	r22, r28
    3ab6:	63 5f       	subi	r22, 0xF3	; 243
    3ab8:	7f 4f       	sbci	r23, 0xFF	; 255
    3aba:	ce 01       	movw	r24, r28
    3abc:	07 96       	adiw	r24, 0x07	; 7
    3abe:	02 db       	rcall	.-2556   	; 0x30c4 <_ZplRK15StringSumHelperRK6String>
    3ac0:	6e e4       	ldi	r22, 0x4E	; 78
    3ac2:	72 e0       	ldi	r23, 0x02	; 2
    3ac4:	10 db       	rcall	.-2528   	; 0x30e6 <_ZplRK15StringSumHelperPKc>
    3ac6:	bc 01       	movw	r22, r24
    3ac8:	ce 01       	movw	r24, r28
    3aca:	0d 96       	adiw	r24, 0x0d	; 13
    3acc:	78 da       	rcall	.-2832   	; 0x2fbe <_ZN6StringaSERKS_>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    3ace:	ce 01       	movw	r24, r28
    3ad0:	07 96       	adiw	r24, 0x07	; 7
    3ad2:	f1 d9       	rcall	.-3102   	; 0x2eb6 <_ZN6StringD1Ev>
    result = stdCmd(outBuf);
    3ad4:	be 01       	movw	r22, r28
    3ad6:	63 5f       	subi	r22, 0xF3	; 243
    3ad8:	7f 4f       	sbci	r23, 0xFF	; 255
    3ada:	ce 01       	movw	r24, r28
    3adc:	01 96       	adiw	r24, 0x01	; 1
    3ade:	84 da       	rcall	.-2808   	; 0x2fe8 <_ZN6StringC1ERKS_>
    3ae0:	be 01       	movw	r22, r28
    3ae2:	6f 5f       	subi	r22, 0xFF	; 255
    3ae4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ae6:	c7 01       	movw	r24, r14
    3ae8:	f1 dc       	rcall	.-1566   	; 0x34cc <_ZN8BLEMate26stdCmdE6String>
    3aea:	d8 2e       	mov	r13, r24
    3aec:	ce 01       	movw	r24, r28
    3aee:	01 96       	adiw	r24, 0x01	; 1
    3af0:	e2 d9       	rcall	.-3132   	; 0x2eb6 <_ZN6StringD1Ev>
    outBufLen = 0;
  }
    3af2:	ce 01       	movw	r24, r28
    3af4:	0d 96       	adiw	r24, 0x0d	; 13
    3af6:	df d9       	rcall	.-3138   	; 0x2eb6 <_ZN6StringD1Ev>
  byte inBufPtr = 0;
  byte outBufLen = 0;
  byte dataLeft = dataLen;

  opResult result = SUCCESS;
  while (inBufPtr < dataLen)
    3af8:	b8 14       	cp	r11, r8
    3afa:	20 f4       	brcc	.+8      	; 0x3b04 <_ZN8BLEMate28sendDataEPch+0xf6>
    3afc:	db 2c       	mov	r13, r11
    3afe:	b9 cf       	rjmp	.-142    	; 0x3a72 <_ZN8BLEMate28sendDataEPch+0x64>
    3b00:	dd 24       	eor	r13, r13
    3b02:	d3 94       	inc	r13
    }
    outBuf = "SND " + outBuf + "\r";
    result = stdCmd(outBuf);
    outBufLen = 0;
  }
  return result;
    3b04:	ce 01       	movw	r24, r28
    3b06:	43 96       	adiw	r24, 0x13	; 19
    3b08:	d6 d9       	rcall	.-3156   	; 0x2eb6 <_ZN6StringD1Ev>
}
    3b0a:	8d 2d       	mov	r24, r13
    3b0c:	69 96       	adiw	r28, 0x19	; 25
    3b0e:	0f b6       	in	r0, 0x3f	; 63
    3b10:	f8 94       	cli
    3b12:	de bf       	out	0x3e, r29	; 62
    3b14:	0f be       	out	0x3f, r0	; 63
    3b16:	cd bf       	out	0x3d, r28	; 61
    3b18:	df 91       	pop	r29
    3b1a:	cf 91       	pop	r28
    3b1c:	1f 91       	pop	r17
    3b1e:	0f 91       	pop	r16
    3b20:	ff 90       	pop	r15
    3b22:	ef 90       	pop	r14
    3b24:	df 90       	pop	r13
    3b26:	cf 90       	pop	r12
    3b28:	bf 90       	pop	r11
    3b2a:	af 90       	pop	r10
    3b2c:	9f 90       	pop	r9
    3b2e:	8f 90       	pop	r8
    3b30:	08 95       	ret

00003b32 <_ZN8BLEMate28sendDataER6String>:
  String newBuffer = dataBuffer;
  return sendData(newBuffer);
}

BLEMate2::opResult BLEMate2::sendData(String &dataBuffer)
{
    3b32:	cf 92       	push	r12
    3b34:	df 92       	push	r13
    3b36:	ef 92       	push	r14
    3b38:	ff 92       	push	r15
    3b3a:	0f 93       	push	r16
    3b3c:	1f 93       	push	r17
    3b3e:	cf 93       	push	r28
    3b40:	df 93       	push	r29
    3b42:	6c 01       	movw	r12, r24
    3b44:	7b 01       	movw	r14, r22
  // First, we'll need to figure out the length of the string.
  int bufLength = dataBuffer.length()+1;
    3b46:	fb 01       	movw	r30, r22
    3b48:	04 81       	ldd	r16, Z+4	; 0x04
    3b4a:	15 81       	ldd	r17, Z+5	; 0x05
    3b4c:	0f 5f       	subi	r16, 0xFF	; 255
    3b4e:	1f 4f       	sbci	r17, 0xFF	; 255

  // Now dynamically allocate an array of the appropriate size.
  char *charArray = new char [bufLength];
    3b50:	c8 01       	movw	r24, r16
    3b52:	0e 94 40 12 	call	0x2480	; 0x2480 <_Znaj>
    3b56:	ec 01       	movw	r28, r24
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
    3b58:	20 e0       	ldi	r18, 0x00	; 0
    3b5a:	30 e0       	ldi	r19, 0x00	; 0
    3b5c:	a8 01       	movw	r20, r16
    3b5e:	bc 01       	movw	r22, r24
    3b60:	c7 01       	movw	r24, r14
    3b62:	4a db       	rcall	.-2412   	; 0x31f8 <_ZNK6String8getBytesEPhjj>

  // Copy over the data.
  dataBuffer.toCharArray(charArray, bufLength);

  // Call the byte array function
  opResult result = sendData(charArray, bufLength);
    3b64:	40 2f       	mov	r20, r16
    3b66:	be 01       	movw	r22, r28
    3b68:	c6 01       	movw	r24, r12
    3b6a:	51 df       	rcall	.-350    	; 0x3a0e <_ZN8BLEMate28sendDataEPch>
    3b6c:	18 2f       	mov	r17, r24

  // de-allocate the memory.
  delete charArray;
    3b6e:	ce 01       	movw	r24, r28
    3b70:	0e 94 43 12 	call	0x2486	; 0x2486 <_ZdlPv>

  return result;
}
    3b74:	81 2f       	mov	r24, r17
    3b76:	df 91       	pop	r29
    3b78:	cf 91       	pop	r28
    3b7a:	1f 91       	pop	r17
    3b7c:	0f 91       	pop	r16
    3b7e:	ff 90       	pop	r15
    3b80:	ef 90       	pop	r14
    3b82:	df 90       	pop	r13
    3b84:	cf 90       	pop	r12
    3b86:	08 95       	ret

00003b88 <_Z10initMatrixv>:

    BTModu.writeConfig();
    BTModu.reset();

    // We're set up to allow anything to connect to us now.
}
    3b88:	ef 92       	push	r14
    3b8a:	ff 92       	push	r15
    3b8c:	0f 93       	push	r16
    3b8e:	1f 93       	push	r17
    3b90:	cf 93       	push	r28
    3b92:	df 93       	push	r29
    3b94:	8a e2       	ldi	r24, 0x2A	; 42
    3b96:	97 e0       	ldi	r25, 0x07	; 7
    3b98:	0e 94 84 0a 	call	0x1508	; 0x1508 <_ZN14RGBmatrixPanel5beginEv>
    3b9c:	40 e0       	ldi	r20, 0x00	; 0
    3b9e:	50 e0       	ldi	r21, 0x00	; 0
    3ba0:	67 e0       	ldi	r22, 0x07	; 7
    3ba2:	70 e0       	ldi	r23, 0x00	; 0
    3ba4:	8a e2       	ldi	r24, 0x2A	; 42
    3ba6:	97 e0       	ldi	r25, 0x07	; 7
    3ba8:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <_ZN12Adafruit_GFX9setCursorEii>
    3bac:	61 e0       	ldi	r22, 0x01	; 1
    3bae:	8a e2       	ldi	r24, 0x2A	; 42
    3bb0:	97 e0       	ldi	r25, 0x07	; 7
    3bb2:	0e 94 fa 07 	call	0xff4	; 0xff4 <_ZN12Adafruit_GFX11setTextSizeEh>
    3bb6:	27 e0       	ldi	r18, 0x07	; 7
    3bb8:	47 e0       	ldi	r20, 0x07	; 7
    3bba:	67 e0       	ldi	r22, 0x07	; 7
    3bbc:	8a e2       	ldi	r24, 0x2A	; 42
    3bbe:	97 e0       	ldi	r25, 0x07	; 7
    3bc0:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <_ZN14RGBmatrixPanel8Color333Ehhh>
    3bc4:	bc 01       	movw	r22, r24
    3bc6:	8a e2       	ldi	r24, 0x2A	; 42
    3bc8:	97 e0       	ldi	r25, 0x07	; 7
    3bca:	0e 94 00 08 	call	0x1000	; 0x1000 <_ZN12Adafruit_GFX12setTextColorEj>
    3bce:	67 eb       	ldi	r22, 0xB7	; 183
    3bd0:	72 e0       	ldi	r23, 0x02	; 2
    3bd2:	8a e2       	ldi	r24, 0x2A	; 42
    3bd4:	97 e0       	ldi	r25, 0x07	; 7
    3bd6:	0e 94 83 12 	call	0x2506	; 0x2506 <_ZN5Print5printEPKc>
    3bda:	69 eb       	ldi	r22, 0xB9	; 185
    3bdc:	72 e0       	ldi	r23, 0x02	; 2
    3bde:	8a e2       	ldi	r24, 0x2A	; 42
    3be0:	97 e0       	ldi	r25, 0x07	; 7
    3be2:	0e 94 83 12 	call	0x2506	; 0x2506 <_ZN5Print5printEPKc>
    3be6:	63 eb       	ldi	r22, 0xB3	; 179
    3be8:	73 e0       	ldi	r23, 0x03	; 3
    3bea:	8a e2       	ldi	r24, 0x2A	; 42
    3bec:	97 e0       	ldi	r25, 0x07	; 7
    3bee:	0e 94 83 12 	call	0x2506	; 0x2506 <_ZN5Print5printEPKc>
    3bf2:	68 eb       	ldi	r22, 0xB8	; 184
    3bf4:	7b e0       	ldi	r23, 0x0B	; 11
    3bf6:	80 e0       	ldi	r24, 0x00	; 0
    3bf8:	90 e0       	ldi	r25, 0x00	; 0
    3bfa:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <delay>
    3bfe:	e0 91 2a 07 	lds	r30, 0x072A
    3c02:	f0 91 2b 07 	lds	r31, 0x072B
    3c06:	c6 85       	ldd	r28, Z+14	; 0x0e
    3c08:	d7 85       	ldd	r29, Z+15	; 0x0f
    3c0a:	20 e0       	ldi	r18, 0x00	; 0
    3c0c:	40 e0       	ldi	r20, 0x00	; 0
    3c0e:	60 e0       	ldi	r22, 0x00	; 0
    3c10:	8a e2       	ldi	r24, 0x2A	; 42
    3c12:	97 e0       	ldi	r25, 0x07	; 7
    3c14:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <_ZN14RGBmatrixPanel8Color333Ehhh>
    3c18:	7c 01       	movw	r14, r24
    3c1a:	0f e1       	ldi	r16, 0x1F	; 31
    3c1c:	10 e0       	ldi	r17, 0x00	; 0
    3c1e:	2f e1       	ldi	r18, 0x1F	; 31
    3c20:	30 e0       	ldi	r19, 0x00	; 0
    3c22:	40 e0       	ldi	r20, 0x00	; 0
    3c24:	50 e0       	ldi	r21, 0x00	; 0
    3c26:	60 e0       	ldi	r22, 0x00	; 0
    3c28:	70 e0       	ldi	r23, 0x00	; 0
    3c2a:	8a e2       	ldi	r24, 0x2A	; 42
    3c2c:	97 e0       	ldi	r25, 0x07	; 7
    3c2e:	fe 01       	movw	r30, r28
    3c30:	19 95       	eicall
    3c32:	64 ef       	ldi	r22, 0xF4	; 244
    3c34:	71 e0       	ldi	r23, 0x01	; 1
    3c36:	80 e0       	ldi	r24, 0x00	; 0
    3c38:	90 e0       	ldi	r25, 0x00	; 0
    3c3a:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <delay>
    3c3e:	df 91       	pop	r29
    3c40:	cf 91       	pop	r28
    3c42:	1f 91       	pop	r17
    3c44:	0f 91       	pop	r16
    3c46:	ff 90       	pop	r15
    3c48:	ef 90       	pop	r14
    3c4a:	08 95       	ret

00003c4c <_Z13initBluetoothv>:
    3c4c:	df 92       	push	r13
    3c4e:	ef 92       	push	r14
    3c50:	ff 92       	push	r15
    3c52:	0f 93       	push	r16
    3c54:	1f 93       	push	r17
    3c56:	cf 93       	push	r28
    3c58:	df 93       	push	r29
    3c5a:	ca e0       	ldi	r28, 0x0A	; 10
    3c5c:	d0 e0       	ldi	r29, 0x00	; 0
    3c5e:	d1 2c       	mov	r13, r1
    3c60:	e1 2c       	mov	r14, r1
    3c62:	f1 2c       	mov	r15, r1
    3c64:	00 e0       	ldi	r16, 0x00	; 0
    3c66:	11 e0       	ldi	r17, 0x01	; 1
    3c68:	87 e0       	ldi	r24, 0x07	; 7
    3c6a:	97 e0       	ldi	r25, 0x07	; 7
    3c6c:	26 dd       	rcall	.-1460   	; 0x36ba <_ZN8BLEMate25resetEv>
    3c6e:	81 30       	cpi	r24, 0x01	; 1
    3c70:	99 f4       	brne	.+38     	; 0x3c98 <_Z13initBluetoothv+0x4c>
    3c72:	87 e0       	ldi	r24, 0x07	; 7
    3c74:	97 e0       	ldi	r25, 0x07	; 7
    3c76:	db dc       	rcall	.-1610   	; 0x362e <_ZN8BLEMate27restoreEv>
    3c78:	81 30       	cpi	r24, 0x01	; 1
    3c7a:	b9 f4       	brne	.+46     	; 0x3caa <_Z13initBluetoothv+0x5e>
    3c7c:	87 e0       	ldi	r24, 0x07	; 7
    3c7e:	97 e0       	ldi	r25, 0x07	; 7
    3c80:	f9 dc       	rcall	.-1550   	; 0x3674 <_ZN8BLEMate211writeConfigEv>
    3c82:	81 30       	cpi	r24, 0x01	; 1
    3c84:	e1 f4       	brne	.+56     	; 0x3cbe <_Z13initBluetoothv+0x72>
    3c86:	87 e0       	ldi	r24, 0x07	; 7
    3c88:	97 e0       	ldi	r25, 0x07	; 7
    3c8a:	17 dd       	rcall	.-1490   	; 0x36ba <_ZN8BLEMate25resetEv>
    3c8c:	81 30       	cpi	r24, 0x01	; 1
    3c8e:	59 f1       	breq	.+86     	; 0x3ce6 <_Z13initBluetoothv+0x9a>
    3c90:	e1 2e       	mov	r14, r17
    3c92:	f1 2e       	mov	r15, r17
    3c94:	01 2f       	mov	r16, r17
    3c96:	1e c0       	rjmp	.+60     	; 0x3cd4 <_Z13initBluetoothv+0x88>
    3c98:	01 11       	cpse	r16, r1
    3c9a:	08 c0       	rjmp	.+16     	; 0x3cac <_Z13initBluetoothv+0x60>
    3c9c:	6b eb       	ldi	r22, 0xBB	; 187
    3c9e:	72 e0       	ldi	r23, 0x02	; 2
    3ca0:	82 e6       	ldi	r24, 0x62	; 98
    3ca2:	94 e0       	ldi	r25, 0x04	; 4
    3ca4:	0e 94 b3 12 	call	0x2566	; 0x2566 <_ZN5Print7printlnEPKc>
    3ca8:	28 c0       	rjmp	.+80     	; 0x3cfa <_Z13initBluetoothv+0xae>
    3caa:	01 2f       	mov	r16, r17
    3cac:	f1 10       	cpse	r15, r1
    3cae:	09 c0       	rjmp	.+18     	; 0x3cc2 <_Z13initBluetoothv+0x76>
    3cb0:	6f ec       	ldi	r22, 0xCF	; 207
    3cb2:	72 e0       	ldi	r23, 0x02	; 2
    3cb4:	82 e6       	ldi	r24, 0x62	; 98
    3cb6:	94 e0       	ldi	r25, 0x04	; 4
    3cb8:	0e 94 b3 12 	call	0x2566	; 0x2566 <_ZN5Print7printlnEPKc>
    3cbc:	1e c0       	rjmp	.+60     	; 0x3cfa <_Z13initBluetoothv+0xae>
    3cbe:	f1 2e       	mov	r15, r17
    3cc0:	01 2f       	mov	r16, r17
    3cc2:	e1 10       	cpse	r14, r1
    3cc4:	07 c0       	rjmp	.+14     	; 0x3cd4 <_Z13initBluetoothv+0x88>
    3cc6:	65 ee       	ldi	r22, 0xE5	; 229
    3cc8:	72 e0       	ldi	r23, 0x02	; 2
    3cca:	82 e6       	ldi	r24, 0x62	; 98
    3ccc:	94 e0       	ldi	r25, 0x04	; 4
    3cce:	0e 94 b3 12 	call	0x2566	; 0x2566 <_ZN5Print7printlnEPKc>
    3cd2:	13 c0       	rjmp	.+38     	; 0x3cfa <_Z13initBluetoothv+0xae>
    3cd4:	d1 10       	cpse	r13, r1
    3cd6:	0b c0       	rjmp	.+22     	; 0x3cee <_Z13initBluetoothv+0xa2>
    3cd8:	60 e0       	ldi	r22, 0x00	; 0
    3cda:	73 e0       	ldi	r23, 0x03	; 3
    3cdc:	82 e6       	ldi	r24, 0x62	; 98
    3cde:	94 e0       	ldi	r25, 0x04	; 4
    3ce0:	0e 94 b3 12 	call	0x2566	; 0x2566 <_ZN5Print7printlnEPKc>
    3ce4:	0a c0       	rjmp	.+20     	; 0x3cfa <_Z13initBluetoothv+0xae>
    3ce6:	d1 2e       	mov	r13, r17
    3ce8:	e1 2e       	mov	r14, r17
    3cea:	f1 2e       	mov	r15, r17
    3cec:	01 2f       	mov	r16, r17
    3cee:	6b e1       	ldi	r22, 0x1B	; 27
    3cf0:	73 e0       	ldi	r23, 0x03	; 3
    3cf2:	82 e6       	ldi	r24, 0x62	; 98
    3cf4:	94 e0       	ldi	r25, 0x04	; 4
    3cf6:	0e 94 b3 12 	call	0x2566	; 0x2566 <_ZN5Print7printlnEPKc>
    3cfa:	21 97       	sbiw	r28, 0x01	; 1
    3cfc:	20 97       	sbiw	r28, 0x00	; 0
    3cfe:	09 f0       	breq	.+2      	; 0x3d02 <_Z13initBluetoothv+0xb6>
    3d00:	b3 cf       	rjmp	.-154    	; 0x3c68 <_Z13initBluetoothv+0x1c>
    3d02:	00 23       	and	r16, r16
    3d04:	31 f0       	breq	.+12     	; 0x3d12 <_Z13initBluetoothv+0xc6>
    3d06:	ff 20       	and	r15, r15
    3d08:	21 f0       	breq	.+8      	; 0x3d12 <_Z13initBluetoothv+0xc6>
    3d0a:	ee 20       	and	r14, r14
    3d0c:	11 f0       	breq	.+4      	; 0x3d12 <_Z13initBluetoothv+0xc6>
    3d0e:	d1 10       	cpse	r13, r1
    3d10:	07 c0       	rjmp	.+14     	; 0x3d20 <_Z13initBluetoothv+0xd4>
    3d12:	60 e4       	ldi	r22, 0x40	; 64
    3d14:	73 e0       	ldi	r23, 0x03	; 3
    3d16:	82 e6       	ldi	r24, 0x62	; 98
    3d18:	94 e0       	ldi	r25, 0x04	; 4
    3d1a:	0e 94 b3 12 	call	0x2566	; 0x2566 <_ZN5Print7printlnEPKc>
    3d1e:	ff cf       	rjmp	.-2      	; 0x3d1e <_Z13initBluetoothv+0xd2>
    3d20:	df 91       	pop	r29
    3d22:	cf 91       	pop	r28
    3d24:	1f 91       	pop	r17
    3d26:	0f 91       	pop	r16
    3d28:	ff 90       	pop	r15
    3d2a:	ef 90       	pop	r14
    3d2c:	df 90       	pop	r13
    3d2e:	08 95       	ret

00003d30 <_Z5setupv>:
    3d30:	26 e0       	ldi	r18, 0x06	; 6
    3d32:	40 e8       	ldi	r20, 0x80	; 128
    3d34:	55 e2       	ldi	r21, 0x25	; 37
    3d36:	60 e0       	ldi	r22, 0x00	; 0
    3d38:	70 e0       	ldi	r23, 0x00	; 0
    3d3a:	82 e6       	ldi	r24, 0x62	; 98
    3d3c:	94 e0       	ldi	r25, 0x04	; 4
    3d3e:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <_ZN14HardwareSerial5beginEmh>
    3d42:	26 e0       	ldi	r18, 0x06	; 6
    3d44:	40 e8       	ldi	r20, 0x80	; 128
    3d46:	55 e2       	ldi	r21, 0x25	; 37
    3d48:	60 e0       	ldi	r22, 0x00	; 0
    3d4a:	70 e0       	ldi	r23, 0x00	; 0
    3d4c:	8f ef       	ldi	r24, 0xFF	; 255
    3d4e:	94 e0       	ldi	r25, 0x04	; 4
    3d50:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <_ZN14HardwareSerial5beginEmh>
    3d54:	6e e7       	ldi	r22, 0x7E	; 126
    3d56:	73 e0       	ldi	r23, 0x03	; 3
    3d58:	82 e6       	ldi	r24, 0x62	; 98
    3d5a:	94 e0       	ldi	r25, 0x04	; 4
    3d5c:	0e 94 b3 12 	call	0x2566	; 0x2566 <_ZN5Print7printlnEPKc>
    3d60:	68 ee       	ldi	r22, 0xE8	; 232
    3d62:	73 e0       	ldi	r23, 0x03	; 3
    3d64:	80 e0       	ldi	r24, 0x00	; 0
    3d66:	90 e0       	ldi	r25, 0x00	; 0
    3d68:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <delay>
    3d6c:	0d df       	rcall	.-486    	; 0x3b88 <_Z10initMatrixv>
    3d6e:	6e df       	rcall	.-292    	; 0x3c4c <_Z13initBluetoothv>
    3d70:	64 e9       	ldi	r22, 0x94	; 148
    3d72:	73 e0       	ldi	r23, 0x03	; 3
    3d74:	82 e6       	ldi	r24, 0x62	; 98
    3d76:	94 e0       	ldi	r25, 0x04	; 4
    3d78:	0e 94 b3 12 	call	0x2566	; 0x2566 <_ZN5Print7printlnEPKc>
    3d7c:	68 ee       	ldi	r22, 0xE8	; 232
    3d7e:	73 e0       	ldi	r23, 0x03	; 3
    3d80:	80 e0       	ldi	r24, 0x00	; 0
    3d82:	90 e0       	ldi	r25, 0x00	; 0
    3d84:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <delay>
    3d88:	08 95       	ret

00003d8a <_Z10drawMatrixi>:
    3d8a:	cf 92       	push	r12
    3d8c:	df 92       	push	r13
    3d8e:	ef 92       	push	r14
    3d90:	ff 92       	push	r15
    3d92:	0f 93       	push	r16
    3d94:	1f 93       	push	r17
    3d96:	cf 93       	push	r28
    3d98:	df 93       	push	r29
    3d9a:	82 30       	cpi	r24, 0x02	; 2
    3d9c:	91 05       	cpc	r25, r1
    3d9e:	09 f4       	brne	.+2      	; 0x3da2 <_Z10drawMatrixi+0x18>
    3da0:	82 c0       	rjmp	.+260    	; 0x3ea6 <_Z10drawMatrixi+0x11c>
    3da2:	83 30       	cpi	r24, 0x03	; 3
    3da4:	91 05       	cpc	r25, r1
    3da6:	09 f4       	brne	.+2      	; 0x3daa <_Z10drawMatrixi+0x20>
    3da8:	f9 c0       	rjmp	.+498    	; 0x3f9c <_Z10drawMatrixi+0x212>
    3daa:	01 97       	sbiw	r24, 0x01	; 1
    3dac:	09 f0       	breq	.+2      	; 0x3db0 <_Z10drawMatrixi+0x26>
    3dae:	66 c1       	rjmp	.+716    	; 0x407c <_Z10drawMatrixi+0x2f2>
    3db0:	c3 e0       	ldi	r28, 0x03	; 3
    3db2:	d0 e0       	ldi	r29, 0x00	; 0
    3db4:	e0 91 2a 07 	lds	r30, 0x072A
    3db8:	f0 91 2b 07 	lds	r31, 0x072B
    3dbc:	c6 80       	ldd	r12, Z+6	; 0x06
    3dbe:	d7 80       	ldd	r13, Z+7	; 0x07
    3dc0:	25 e0       	ldi	r18, 0x05	; 5
    3dc2:	47 e0       	ldi	r20, 0x07	; 7
    3dc4:	64 e0       	ldi	r22, 0x04	; 4
    3dc6:	8a e2       	ldi	r24, 0x2A	; 42
    3dc8:	97 e0       	ldi	r25, 0x07	; 7
    3dca:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <_ZN14RGBmatrixPanel8Color333Ehhh>
    3dce:	7c 01       	movw	r14, r24
    3dd0:	0f e0       	ldi	r16, 0x0F	; 15
    3dd2:	10 e0       	ldi	r17, 0x00	; 0
    3dd4:	25 e0       	ldi	r18, 0x05	; 5
    3dd6:	30 e0       	ldi	r19, 0x00	; 0
    3dd8:	4f e0       	ldi	r20, 0x0F	; 15
    3dda:	50 e0       	ldi	r21, 0x00	; 0
    3ddc:	6b e1       	ldi	r22, 0x1B	; 27
    3dde:	70 e0       	ldi	r23, 0x00	; 0
    3de0:	8a e2       	ldi	r24, 0x2A	; 42
    3de2:	97 e0       	ldi	r25, 0x07	; 7
    3de4:	f6 01       	movw	r30, r12
    3de6:	19 95       	eicall
    3de8:	e0 91 2a 07 	lds	r30, 0x072A
    3dec:	f0 91 2b 07 	lds	r31, 0x072B
    3df0:	c6 80       	ldd	r12, Z+6	; 0x06
    3df2:	d7 80       	ldd	r13, Z+7	; 0x07
    3df4:	25 e0       	ldi	r18, 0x05	; 5
    3df6:	47 e0       	ldi	r20, 0x07	; 7
    3df8:	64 e0       	ldi	r22, 0x04	; 4
    3dfa:	8a e2       	ldi	r24, 0x2A	; 42
    3dfc:	97 e0       	ldi	r25, 0x07	; 7
    3dfe:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <_ZN14RGBmatrixPanel8Color333Ehhh>
    3e02:	7c 01       	movw	r14, r24
    3e04:	0e e0       	ldi	r16, 0x0E	; 14
    3e06:	10 e0       	ldi	r17, 0x00	; 0
    3e08:	26 e0       	ldi	r18, 0x06	; 6
    3e0a:	30 e0       	ldi	r19, 0x00	; 0
    3e0c:	44 e0       	ldi	r20, 0x04	; 4
    3e0e:	50 e0       	ldi	r21, 0x00	; 0
    3e10:	60 e1       	ldi	r22, 0x10	; 16
    3e12:	70 e0       	ldi	r23, 0x00	; 0
    3e14:	8a e2       	ldi	r24, 0x2A	; 42
    3e16:	97 e0       	ldi	r25, 0x07	; 7
    3e18:	f6 01       	movw	r30, r12
    3e1a:	19 95       	eicall
    3e1c:	e0 91 2a 07 	lds	r30, 0x072A
    3e20:	f0 91 2b 07 	lds	r31, 0x072B
    3e24:	c6 80       	ldd	r12, Z+6	; 0x06
    3e26:	d7 80       	ldd	r13, Z+7	; 0x07
    3e28:	25 e0       	ldi	r18, 0x05	; 5
    3e2a:	47 e0       	ldi	r20, 0x07	; 7
    3e2c:	64 e0       	ldi	r22, 0x04	; 4
    3e2e:	8a e2       	ldi	r24, 0x2A	; 42
    3e30:	97 e0       	ldi	r25, 0x07	; 7
    3e32:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <_ZN14RGBmatrixPanel8Color333Ehhh>
    3e36:	7c 01       	movw	r14, r24
    3e38:	00 e1       	ldi	r16, 0x10	; 16
    3e3a:	10 e0       	ldi	r17, 0x00	; 0
    3e3c:	26 e0       	ldi	r18, 0x06	; 6
    3e3e:	30 e0       	ldi	r19, 0x00	; 0
    3e40:	4a e1       	ldi	r20, 0x1A	; 26
    3e42:	50 e0       	ldi	r21, 0x00	; 0
    3e44:	60 e1       	ldi	r22, 0x10	; 16
    3e46:	70 e0       	ldi	r23, 0x00	; 0
    3e48:	8a e2       	ldi	r24, 0x2A	; 42
    3e4a:	97 e0       	ldi	r25, 0x07	; 7
    3e4c:	f6 01       	movw	r30, r12
    3e4e:	19 95       	eicall
    3e50:	64 ef       	ldi	r22, 0xF4	; 244
    3e52:	71 e0       	ldi	r23, 0x01	; 1
    3e54:	80 e0       	ldi	r24, 0x00	; 0
    3e56:	90 e0       	ldi	r25, 0x00	; 0
    3e58:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <delay>
    3e5c:	e0 91 2a 07 	lds	r30, 0x072A
    3e60:	f0 91 2b 07 	lds	r31, 0x072B
    3e64:	c6 84       	ldd	r12, Z+14	; 0x0e
    3e66:	d7 84       	ldd	r13, Z+15	; 0x0f
    3e68:	20 e0       	ldi	r18, 0x00	; 0
    3e6a:	40 e0       	ldi	r20, 0x00	; 0
    3e6c:	60 e0       	ldi	r22, 0x00	; 0
    3e6e:	8a e2       	ldi	r24, 0x2A	; 42
    3e70:	97 e0       	ldi	r25, 0x07	; 7
    3e72:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <_ZN14RGBmatrixPanel8Color333Ehhh>
    3e76:	7c 01       	movw	r14, r24
    3e78:	0f e1       	ldi	r16, 0x1F	; 31
    3e7a:	10 e0       	ldi	r17, 0x00	; 0
    3e7c:	2f e1       	ldi	r18, 0x1F	; 31
    3e7e:	30 e0       	ldi	r19, 0x00	; 0
    3e80:	40 e0       	ldi	r20, 0x00	; 0
    3e82:	50 e0       	ldi	r21, 0x00	; 0
    3e84:	60 e0       	ldi	r22, 0x00	; 0
    3e86:	70 e0       	ldi	r23, 0x00	; 0
    3e88:	8a e2       	ldi	r24, 0x2A	; 42
    3e8a:	97 e0       	ldi	r25, 0x07	; 7
    3e8c:	f6 01       	movw	r30, r12
    3e8e:	19 95       	eicall
    3e90:	64 ef       	ldi	r22, 0xF4	; 244
    3e92:	71 e0       	ldi	r23, 0x01	; 1
    3e94:	80 e0       	ldi	r24, 0x00	; 0
    3e96:	90 e0       	ldi	r25, 0x00	; 0
    3e98:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <delay>
    3e9c:	21 97       	sbiw	r28, 0x01	; 1
    3e9e:	20 97       	sbiw	r28, 0x00	; 0
    3ea0:	09 f0       	breq	.+2      	; 0x3ea4 <_Z10drawMatrixi+0x11a>
    3ea2:	88 cf       	rjmp	.-240    	; 0x3db4 <_Z10drawMatrixi+0x2a>
    3ea4:	0e c1       	rjmp	.+540    	; 0x40c2 <_Z10drawMatrixi+0x338>
    3ea6:	c3 e0       	ldi	r28, 0x03	; 3
    3ea8:	d0 e0       	ldi	r29, 0x00	; 0
    3eaa:	e0 91 2a 07 	lds	r30, 0x072A
    3eae:	f0 91 2b 07 	lds	r31, 0x072B
    3eb2:	c6 80       	ldd	r12, Z+6	; 0x06
    3eb4:	d7 80       	ldd	r13, Z+7	; 0x07
    3eb6:	25 e0       	ldi	r18, 0x05	; 5
    3eb8:	47 e0       	ldi	r20, 0x07	; 7
    3eba:	64 e0       	ldi	r22, 0x04	; 4
    3ebc:	8a e2       	ldi	r24, 0x2A	; 42
    3ebe:	97 e0       	ldi	r25, 0x07	; 7
    3ec0:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <_ZN14RGBmatrixPanel8Color333Ehhh>
    3ec4:	7c 01       	movw	r14, r24
    3ec6:	0f e0       	ldi	r16, 0x0F	; 15
    3ec8:	10 e0       	ldi	r17, 0x00	; 0
    3eca:	2b e1       	ldi	r18, 0x1B	; 27
    3ecc:	30 e0       	ldi	r19, 0x00	; 0
    3ece:	4f e0       	ldi	r20, 0x0F	; 15
    3ed0:	50 e0       	ldi	r21, 0x00	; 0
    3ed2:	65 e0       	ldi	r22, 0x05	; 5
    3ed4:	70 e0       	ldi	r23, 0x00	; 0
    3ed6:	8a e2       	ldi	r24, 0x2A	; 42
    3ed8:	97 e0       	ldi	r25, 0x07	; 7
    3eda:	f6 01       	movw	r30, r12
    3edc:	19 95       	eicall
    3ede:	e0 91 2a 07 	lds	r30, 0x072A
    3ee2:	f0 91 2b 07 	lds	r31, 0x072B
    3ee6:	c6 80       	ldd	r12, Z+6	; 0x06
    3ee8:	d7 80       	ldd	r13, Z+7	; 0x07
    3eea:	25 e0       	ldi	r18, 0x05	; 5
    3eec:	47 e0       	ldi	r20, 0x07	; 7
    3eee:	64 e0       	ldi	r22, 0x04	; 4
    3ef0:	8a e2       	ldi	r24, 0x2A	; 42
    3ef2:	97 e0       	ldi	r25, 0x07	; 7
    3ef4:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <_ZN14RGBmatrixPanel8Color333Ehhh>
    3ef8:	7c 01       	movw	r14, r24
    3efa:	0e e0       	ldi	r16, 0x0E	; 14
    3efc:	10 e0       	ldi	r17, 0x00	; 0
    3efe:	2a e1       	ldi	r18, 0x1A	; 26
    3f00:	30 e0       	ldi	r19, 0x00	; 0
    3f02:	44 e0       	ldi	r20, 0x04	; 4
    3f04:	50 e0       	ldi	r21, 0x00	; 0
    3f06:	60 e1       	ldi	r22, 0x10	; 16
    3f08:	70 e0       	ldi	r23, 0x00	; 0
    3f0a:	8a e2       	ldi	r24, 0x2A	; 42
    3f0c:	97 e0       	ldi	r25, 0x07	; 7
    3f0e:	f6 01       	movw	r30, r12
    3f10:	19 95       	eicall
    3f12:	e0 91 2a 07 	lds	r30, 0x072A
    3f16:	f0 91 2b 07 	lds	r31, 0x072B
    3f1a:	c6 80       	ldd	r12, Z+6	; 0x06
    3f1c:	d7 80       	ldd	r13, Z+7	; 0x07
    3f1e:	25 e0       	ldi	r18, 0x05	; 5
    3f20:	47 e0       	ldi	r20, 0x07	; 7
    3f22:	64 e0       	ldi	r22, 0x04	; 4
    3f24:	8a e2       	ldi	r24, 0x2A	; 42
    3f26:	97 e0       	ldi	r25, 0x07	; 7
    3f28:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <_ZN14RGBmatrixPanel8Color333Ehhh>
    3f2c:	7c 01       	movw	r14, r24
    3f2e:	00 e1       	ldi	r16, 0x10	; 16
    3f30:	10 e0       	ldi	r17, 0x00	; 0
    3f32:	2a e1       	ldi	r18, 0x1A	; 26
    3f34:	30 e0       	ldi	r19, 0x00	; 0
    3f36:	4a e1       	ldi	r20, 0x1A	; 26
    3f38:	50 e0       	ldi	r21, 0x00	; 0
    3f3a:	60 e1       	ldi	r22, 0x10	; 16
    3f3c:	70 e0       	ldi	r23, 0x00	; 0
    3f3e:	8a e2       	ldi	r24, 0x2A	; 42
    3f40:	97 e0       	ldi	r25, 0x07	; 7
    3f42:	f6 01       	movw	r30, r12
    3f44:	19 95       	eicall
    3f46:	64 ef       	ldi	r22, 0xF4	; 244
    3f48:	71 e0       	ldi	r23, 0x01	; 1
    3f4a:	80 e0       	ldi	r24, 0x00	; 0
    3f4c:	90 e0       	ldi	r25, 0x00	; 0
    3f4e:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <delay>
    3f52:	e0 91 2a 07 	lds	r30, 0x072A
    3f56:	f0 91 2b 07 	lds	r31, 0x072B
    3f5a:	c6 84       	ldd	r12, Z+14	; 0x0e
    3f5c:	d7 84       	ldd	r13, Z+15	; 0x0f
    3f5e:	20 e0       	ldi	r18, 0x00	; 0
    3f60:	40 e0       	ldi	r20, 0x00	; 0
    3f62:	60 e0       	ldi	r22, 0x00	; 0
    3f64:	8a e2       	ldi	r24, 0x2A	; 42
    3f66:	97 e0       	ldi	r25, 0x07	; 7
    3f68:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <_ZN14RGBmatrixPanel8Color333Ehhh>
    3f6c:	7c 01       	movw	r14, r24
    3f6e:	0f e1       	ldi	r16, 0x1F	; 31
    3f70:	10 e0       	ldi	r17, 0x00	; 0
    3f72:	2f e1       	ldi	r18, 0x1F	; 31
    3f74:	30 e0       	ldi	r19, 0x00	; 0
    3f76:	40 e0       	ldi	r20, 0x00	; 0
    3f78:	50 e0       	ldi	r21, 0x00	; 0
    3f7a:	60 e0       	ldi	r22, 0x00	; 0
    3f7c:	70 e0       	ldi	r23, 0x00	; 0
    3f7e:	8a e2       	ldi	r24, 0x2A	; 42
    3f80:	97 e0       	ldi	r25, 0x07	; 7
    3f82:	f6 01       	movw	r30, r12
    3f84:	19 95       	eicall
    3f86:	64 ef       	ldi	r22, 0xF4	; 244
    3f88:	71 e0       	ldi	r23, 0x01	; 1
    3f8a:	80 e0       	ldi	r24, 0x00	; 0
    3f8c:	90 e0       	ldi	r25, 0x00	; 0
    3f8e:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <delay>
    3f92:	21 97       	sbiw	r28, 0x01	; 1
    3f94:	20 97       	sbiw	r28, 0x00	; 0
    3f96:	09 f0       	breq	.+2      	; 0x3f9a <_Z10drawMatrixi+0x210>
    3f98:	88 cf       	rjmp	.-240    	; 0x3eaa <_Z10drawMatrixi+0x120>
    3f9a:	93 c0       	rjmp	.+294    	; 0x40c2 <_Z10drawMatrixi+0x338>
    3f9c:	c3 e0       	ldi	r28, 0x03	; 3
    3f9e:	d0 e0       	ldi	r29, 0x00	; 0
    3fa0:	20 e0       	ldi	r18, 0x00	; 0
    3fa2:	40 e0       	ldi	r20, 0x00	; 0
    3fa4:	67 e0       	ldi	r22, 0x07	; 7
    3fa6:	8a e2       	ldi	r24, 0x2A	; 42
    3fa8:	97 e0       	ldi	r25, 0x07	; 7
    3faa:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <_ZN14RGBmatrixPanel8Color333Ehhh>
    3fae:	8c 01       	movw	r16, r24
    3fb0:	2f e0       	ldi	r18, 0x0F	; 15
    3fb2:	30 e0       	ldi	r19, 0x00	; 0
    3fb4:	4f e0       	ldi	r20, 0x0F	; 15
    3fb6:	50 e0       	ldi	r21, 0x00	; 0
    3fb8:	6f e0       	ldi	r22, 0x0F	; 15
    3fba:	70 e0       	ldi	r23, 0x00	; 0
    3fbc:	8a e2       	ldi	r24, 0x2A	; 42
    3fbe:	97 e0       	ldi	r25, 0x07	; 7
    3fc0:	0e 94 59 06 	call	0xcb2	; 0xcb2 <_ZN12Adafruit_GFX10fillCircleEiiij>
    3fc4:	4c e0       	ldi	r20, 0x0C	; 12
    3fc6:	50 e0       	ldi	r21, 0x00	; 0
    3fc8:	64 e0       	ldi	r22, 0x04	; 4
    3fca:	70 e0       	ldi	r23, 0x00	; 0
    3fcc:	8a e2       	ldi	r24, 0x2A	; 42
    3fce:	97 e0       	ldi	r25, 0x07	; 7
    3fd0:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <_ZN12Adafruit_GFX9setCursorEii>
    3fd4:	61 e0       	ldi	r22, 0x01	; 1
    3fd6:	8a e2       	ldi	r24, 0x2A	; 42
    3fd8:	97 e0       	ldi	r25, 0x07	; 7
    3fda:	0e 94 fa 07 	call	0xff4	; 0xff4 <_ZN12Adafruit_GFX11setTextSizeEh>
    3fde:	20 e0       	ldi	r18, 0x00	; 0
    3fe0:	40 e0       	ldi	r20, 0x00	; 0
    3fe2:	60 e0       	ldi	r22, 0x00	; 0
    3fe4:	8a e2       	ldi	r24, 0x2A	; 42
    3fe6:	97 e0       	ldi	r25, 0x07	; 7
    3fe8:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <_ZN14RGBmatrixPanel8Color333Ehhh>
    3fec:	bc 01       	movw	r22, r24
    3fee:	8a e2       	ldi	r24, 0x2A	; 42
    3ff0:	97 e0       	ldi	r25, 0x07	; 7
    3ff2:	0e 94 00 08 	call	0x1000	; 0x1000 <_ZN12Adafruit_GFX12setTextColorEj>
    3ff6:	60 eb       	ldi	r22, 0xB0	; 176
    3ff8:	72 e0       	ldi	r23, 0x02	; 2
    3ffa:	8a e2       	ldi	r24, 0x2A	; 42
    3ffc:	97 e0       	ldi	r25, 0x07	; 7
    3ffe:	0e 94 83 12 	call	0x2506	; 0x2506 <_ZN5Print5printEPKc>
    4002:	63 e9       	ldi	r22, 0x93	; 147
    4004:	72 e0       	ldi	r23, 0x02	; 2
    4006:	8a e2       	ldi	r24, 0x2A	; 42
    4008:	97 e0       	ldi	r25, 0x07	; 7
    400a:	0e 94 83 12 	call	0x2506	; 0x2506 <_ZN5Print5printEPKc>
    400e:	65 eb       	ldi	r22, 0xB5	; 181
    4010:	73 e0       	ldi	r23, 0x03	; 3
    4012:	8a e2       	ldi	r24, 0x2A	; 42
    4014:	97 e0       	ldi	r25, 0x07	; 7
    4016:	0e 94 83 12 	call	0x2506	; 0x2506 <_ZN5Print5printEPKc>
    401a:	64 ec       	ldi	r22, 0xC4	; 196
    401c:	73 e0       	ldi	r23, 0x03	; 3
    401e:	8a e2       	ldi	r24, 0x2A	; 42
    4020:	97 e0       	ldi	r25, 0x07	; 7
    4022:	0e 94 83 12 	call	0x2506	; 0x2506 <_ZN5Print5printEPKc>
    4026:	68 eb       	ldi	r22, 0xB8	; 184
    4028:	7b e0       	ldi	r23, 0x0B	; 11
    402a:	80 e0       	ldi	r24, 0x00	; 0
    402c:	90 e0       	ldi	r25, 0x00	; 0
    402e:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <delay>
    4032:	e0 91 2a 07 	lds	r30, 0x072A
    4036:	f0 91 2b 07 	lds	r31, 0x072B
    403a:	c6 84       	ldd	r12, Z+14	; 0x0e
    403c:	d7 84       	ldd	r13, Z+15	; 0x0f
    403e:	20 e0       	ldi	r18, 0x00	; 0
    4040:	40 e0       	ldi	r20, 0x00	; 0
    4042:	60 e0       	ldi	r22, 0x00	; 0
    4044:	8a e2       	ldi	r24, 0x2A	; 42
    4046:	97 e0       	ldi	r25, 0x07	; 7
    4048:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <_ZN14RGBmatrixPanel8Color333Ehhh>
    404c:	7c 01       	movw	r14, r24
    404e:	0f e1       	ldi	r16, 0x1F	; 31
    4050:	10 e0       	ldi	r17, 0x00	; 0
    4052:	2f e1       	ldi	r18, 0x1F	; 31
    4054:	30 e0       	ldi	r19, 0x00	; 0
    4056:	40 e0       	ldi	r20, 0x00	; 0
    4058:	50 e0       	ldi	r21, 0x00	; 0
    405a:	60 e0       	ldi	r22, 0x00	; 0
    405c:	70 e0       	ldi	r23, 0x00	; 0
    405e:	8a e2       	ldi	r24, 0x2A	; 42
    4060:	97 e0       	ldi	r25, 0x07	; 7
    4062:	f6 01       	movw	r30, r12
    4064:	19 95       	eicall
    4066:	64 ef       	ldi	r22, 0xF4	; 244
    4068:	71 e0       	ldi	r23, 0x01	; 1
    406a:	80 e0       	ldi	r24, 0x00	; 0
    406c:	90 e0       	ldi	r25, 0x00	; 0
    406e:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <delay>
    4072:	21 97       	sbiw	r28, 0x01	; 1
    4074:	20 97       	sbiw	r28, 0x00	; 0
    4076:	09 f0       	breq	.+2      	; 0x407a <_Z10drawMatrixi+0x2f0>
    4078:	93 cf       	rjmp	.-218    	; 0x3fa0 <_Z10drawMatrixi+0x216>
    407a:	23 c0       	rjmp	.+70     	; 0x40c2 <_Z10drawMatrixi+0x338>
    407c:	8a e2       	ldi	r24, 0x2A	; 42
    407e:	97 e0       	ldi	r25, 0x07	; 7
    4080:	0e 94 84 0a 	call	0x1508	; 0x1508 <_ZN14RGBmatrixPanel5beginEv>
    4084:	40 e0       	ldi	r20, 0x00	; 0
    4086:	50 e0       	ldi	r21, 0x00	; 0
    4088:	67 e0       	ldi	r22, 0x07	; 7
    408a:	70 e0       	ldi	r23, 0x00	; 0
    408c:	8a e2       	ldi	r24, 0x2A	; 42
    408e:	97 e0       	ldi	r25, 0x07	; 7
    4090:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <_ZN12Adafruit_GFX9setCursorEii>
    4094:	61 e0       	ldi	r22, 0x01	; 1
    4096:	8a e2       	ldi	r24, 0x2A	; 42
    4098:	97 e0       	ldi	r25, 0x07	; 7
    409a:	0e 94 fa 07 	call	0xff4	; 0xff4 <_ZN12Adafruit_GFX11setTextSizeEh>
    409e:	27 e0       	ldi	r18, 0x07	; 7
    40a0:	47 e0       	ldi	r20, 0x07	; 7
    40a2:	67 e0       	ldi	r22, 0x07	; 7
    40a4:	8a e2       	ldi	r24, 0x2A	; 42
    40a6:	97 e0       	ldi	r25, 0x07	; 7
    40a8:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <_ZN14RGBmatrixPanel8Color333Ehhh>
    40ac:	bc 01       	movw	r22, r24
    40ae:	8a e2       	ldi	r24, 0x2A	; 42
    40b0:	97 e0       	ldi	r25, 0x07	; 7
    40b2:	0e 94 00 08 	call	0x1000	; 0x1000 <_ZN12Adafruit_GFX12setTextColorEj>
    40b6:	65 eb       	ldi	r22, 0xB5	; 181
    40b8:	72 e0       	ldi	r23, 0x02	; 2
    40ba:	8a e2       	ldi	r24, 0x2A	; 42
    40bc:	97 e0       	ldi	r25, 0x07	; 7
    40be:	0e 94 83 12 	call	0x2506	; 0x2506 <_ZN5Print5printEPKc>
    40c2:	df 91       	pop	r29
    40c4:	cf 91       	pop	r28
    40c6:	1f 91       	pop	r17
    40c8:	0f 91       	pop	r16
    40ca:	ff 90       	pop	r15
    40cc:	ef 90       	pop	r14
    40ce:	df 90       	pop	r13
    40d0:	cf 90       	pop	r12
    40d2:	08 95       	ret

000040d4 <_Z19do_matrix_draw_taskv>:
    40d4:	80 91 fe 06 	lds	r24, 0x06FE
    40d8:	88 23       	and	r24, r24
    40da:	21 f0       	breq	.+8      	; 0x40e4 <_Z19do_matrix_draw_taskv+0x10>
    40dc:	81 e0       	ldi	r24, 0x01	; 1
    40de:	90 e0       	ldi	r25, 0x00	; 0
    40e0:	54 de       	rcall	.-856    	; 0x3d8a <_Z10drawMatrixi>
    40e2:	03 c0       	rjmp	.+6      	; 0x40ea <_Z19do_matrix_draw_taskv+0x16>
    40e4:	8f ef       	ldi	r24, 0xFF	; 255
    40e6:	9f ef       	ldi	r25, 0xFF	; 255
    40e8:	50 de       	rcall	.-864    	; 0x3d8a <_Z10drawMatrixi>
    40ea:	80 91 fd 06 	lds	r24, 0x06FD
    40ee:	88 23       	and	r24, r24
    40f0:	21 f0       	breq	.+8      	; 0x40fa <_Z19do_matrix_draw_taskv+0x26>
    40f2:	82 e0       	ldi	r24, 0x02	; 2
    40f4:	90 e0       	ldi	r25, 0x00	; 0
    40f6:	49 de       	rcall	.-878    	; 0x3d8a <_Z10drawMatrixi>
    40f8:	03 c0       	rjmp	.+6      	; 0x4100 <_Z19do_matrix_draw_taskv+0x2c>
    40fa:	8f ef       	ldi	r24, 0xFF	; 255
    40fc:	9f ef       	ldi	r25, 0xFF	; 255
    40fe:	45 de       	rcall	.-886    	; 0x3d8a <_Z10drawMatrixi>
    4100:	80 91 fc 06 	lds	r24, 0x06FC
    4104:	88 23       	and	r24, r24
    4106:	21 f0       	breq	.+8      	; 0x4110 <_Z19do_matrix_draw_taskv+0x3c>
    4108:	83 e0       	ldi	r24, 0x03	; 3
    410a:	90 e0       	ldi	r25, 0x00	; 0
    410c:	3e ce       	rjmp	.-900    	; 0x3d8a <_Z10drawMatrixi>
    410e:	08 95       	ret
    4110:	8f ef       	ldi	r24, 0xFF	; 255
    4112:	9f ef       	ldi	r25, 0xFF	; 255
    4114:	3a ce       	rjmp	.-908    	; 0x3d8a <_Z10drawMatrixi>
    4116:	08 95       	ret

00004118 <_GLOBAL__sub_I_central>:
    4118:	8f 92       	push	r8
    411a:	af 92       	push	r10
    411c:	cf 92       	push	r12
    411e:	ef 92       	push	r14
    4120:	0f 93       	push	r16
// Private functions
void initMatrix();
void initBluetooth();
void drawMatrix(int msgNum);

static String fullBuffer = "";
    4122:	6f e4       	ldi	r22, 0x4F	; 79
    4124:	72 e0       	ldi	r23, 0x02	; 2
    4126:	82 e7       	ldi	r24, 0x72	; 114
    4128:	97 e0       	ldi	r25, 0x07	; 7
    412a:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <_ZN6StringC1EPKc>
static String inputBuffer;
    412e:	6f e4       	ldi	r22, 0x4F	; 79
    4130:	72 e0       	ldi	r23, 0x02	; 2
    4132:	8c e6       	ldi	r24, 0x6C	; 108
    4134:	97 e0       	ldi	r25, 0x07	; 7
    4136:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <_ZN6StringC1EPKc>
static String sendBuffer;
    413a:	6f e4       	ldi	r22, 0x4F	; 79
    413c:	72 e0       	ldi	r23, 0x02	; 2
    413e:	86 e6       	ldi	r24, 0x66	; 102
    4140:	97 e0       	ldi	r25, 0x07	; 7
    4142:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <_ZN6StringC1EPKc>
boolean central = true;

RGBmatrixPanel matrix(A, B, C, D, CLK, LAT, OE, false);
    4146:	80 e2       	ldi	r24, 0x20	; 32
    4148:	8f 93       	push	r24
    414a:	81 2c       	mov	r8, r1
    414c:	0f 2e       	mov	r0, r31
    414e:	f9 e0       	ldi	r31, 0x09	; 9
    4150:	af 2e       	mov	r10, r31
    4152:	f0 2d       	mov	r31, r0
    4154:	0f 2e       	mov	r0, r31
    4156:	fc e0       	ldi	r31, 0x0C	; 12
    4158:	cf 2e       	mov	r12, r31
    415a:	f0 2d       	mov	r31, r0
    415c:	0f 2e       	mov	r0, r31
    415e:	fb e0       	ldi	r31, 0x0B	; 11
    4160:	ef 2e       	mov	r14, r31
    4162:	f0 2d       	mov	r31, r0
    4164:	09 e3       	ldi	r16, 0x39	; 57
    4166:	28 e3       	ldi	r18, 0x38	; 56
    4168:	47 e3       	ldi	r20, 0x37	; 55
    416a:	66 e3       	ldi	r22, 0x36	; 54
    416c:	8a e2       	ldi	r24, 0x2A	; 42
    416e:	97 e0       	ldi	r25, 0x07	; 7
    4170:	0e 94 35 0a 	call	0x146a	; 0x146a <_ZN14RGBmatrixPanelC1Ehhhhhhhbh>

BLEMate2 BTModu(&Serial1);
    4174:	6f ef       	ldi	r22, 0xFF	; 255
    4176:	74 e0       	ldi	r23, 0x04	; 4
    4178:	87 e0       	ldi	r24, 0x07	; 7
    417a:	97 e0       	ldi	r25, 0x07	; 7
    417c:	ef d8       	rcall	.-3618   	; 0x335c <_ZN8BLEMate2C1EP6Stream>
    417e:	0f 90       	pop	r0

    BTModu.writeConfig();
    BTModu.reset();

    // We're set up to allow anything to connect to us now.
}
    4180:	0f 91       	pop	r16
    4182:	ef 90       	pop	r14
    4184:	cf 90       	pop	r12
    4186:	af 90       	pop	r10
    4188:	8f 90       	pop	r8
    418a:	08 95       	ret

0000418c <_GLOBAL__sub_D_central>:
    418c:	cf 93       	push	r28
    418e:	df 93       	push	r29
#ifndef BLEMate2_h
#define BLEMate2_h

#include "../Arduino/Arduino.h"

class BLEMate2
    4190:	89 e0       	ldi	r24, 0x09	; 9
    4192:	97 e0       	ldi	r25, 0x07	; 7
    4194:	89 2b       	or	r24, r25
    4196:	51 f0       	breq	.+20     	; 0x41ac <_GLOBAL__sub_D_central+0x20>
    4198:	c7 e2       	ldi	r28, 0x27	; 39
    419a:	d7 e0       	ldi	r29, 0x07	; 7
    419c:	26 97       	sbiw	r28, 0x06	; 6
    419e:	ce 01       	movw	r24, r28
    41a0:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <_ZN6StringD1Ev>
    41a4:	87 e0       	ldi	r24, 0x07	; 7
    41a6:	c9 30       	cpi	r28, 0x09	; 9
    41a8:	d8 07       	cpc	r29, r24
    41aa:	c1 f7       	brne	.-16     	; 0x419c <_GLOBAL__sub_D_central+0x10>
void initBluetooth();
void drawMatrix(int msgNum);

static String fullBuffer = "";
static String inputBuffer;
static String sendBuffer;
    41ac:	86 e6       	ldi	r24, 0x66	; 102
    41ae:	97 e0       	ldi	r25, 0x07	; 7
    41b0:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <_ZN6StringD1Ev>
void initMatrix();
void initBluetooth();
void drawMatrix(int msgNum);

static String fullBuffer = "";
static String inputBuffer;
    41b4:	8c e6       	ldi	r24, 0x6C	; 108
    41b6:	97 e0       	ldi	r25, 0x07	; 7
    41b8:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <_ZN6StringD1Ev>
// Private functions
void initMatrix();
void initBluetooth();
void drawMatrix(int msgNum);

static String fullBuffer = "";
    41bc:	82 e7       	ldi	r24, 0x72	; 114
    41be:	97 e0       	ldi	r25, 0x07	; 7
    41c0:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <_ZN6StringD1Ev>

    BTModu.writeConfig();
    BTModu.reset();

    // We're set up to allow anything to connect to us now.
}
    41c4:	df 91       	pop	r29
    41c6:	cf 91       	pop	r28
    41c8:	08 95       	ret

000041ca <_Z14do_serial_taskv>:
        matrix_draw_last_run = millis();
    }
}

void do_serial_task()
{
    41ca:	1f 93       	push	r17
    41cc:	cf 93       	push	r28
    41ce:	df 93       	push	r29
    41d0:	cd b7       	in	r28, 0x3d	; 61
    41d2:	de b7       	in	r29, 0x3e	; 62
    41d4:	6e 97       	sbiw	r28, 0x1e	; 30
    41d6:	0f b6       	in	r0, 0x3f	; 63
    41d8:	f8 94       	cli
    41da:	de bf       	out	0x3e, r29	; 62
    41dc:	0f be       	out	0x3f, r0	; 63
    41de:	cd bf       	out	0x3d, r28	; 61
    while (Serial1.available() > 0)
    41e0:	0f c0       	rjmp	.+30     	; 0x4200 <_Z14do_serial_taskv+0x36>
    {
        inputBuffer.concat((char)Serial1.read());
    41e2:	8f ef       	ldi	r24, 0xFF	; 255
    41e4:	94 e0       	ldi	r25, 0x04	; 4
    41e6:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <_ZN14HardwareSerial4readEv>
    41ea:	68 2f       	mov	r22, r24
    41ec:	8c e6       	ldi	r24, 0x6C	; 108
    41ee:	97 e0       	ldi	r25, 0x07	; 7
    41f0:	0e 94 4f 18 	call	0x309e	; 0x309e <_ZN6String6concatEc>
        delay(50);
    41f4:	62 e3       	ldi	r22, 0x32	; 50
    41f6:	70 e0       	ldi	r23, 0x00	; 0
    41f8:	80 e0       	ldi	r24, 0x00	; 0
    41fa:	90 e0       	ldi	r25, 0x00	; 0
    41fc:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <delay>
    }
}

void do_serial_task()
{
    while (Serial1.available() > 0)
    4200:	8f ef       	ldi	r24, 0xFF	; 255
    4202:	94 e0       	ldi	r25, 0x04	; 4
    4204:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <_ZN14HardwareSerial9availableEv>
    4208:	18 16       	cp	r1, r24
    420a:	19 06       	cpc	r1, r25
    420c:	54 f3       	brlt	.-44     	; 0x41e2 <_Z14do_serial_taskv+0x18>
    // RCV=20 char max msg\n\r

    // The state machine for capturing that can be pretty easy: when we've read
    //  in \n\r, check to see if the string began with "RCV=". If yes, do
    //  something. If no, discard it.
    if (inputBuffer.endsWith("\n\r")) {
    420e:	6d e4       	ldi	r22, 0x4D	; 77
    4210:	72 e0       	ldi	r23, 0x02	; 2
    4212:	ce 01       	movw	r24, r28
    4214:	49 96       	adiw	r24, 0x19	; 25
    4216:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <_ZN6StringC1EPKc>
    421a:	be 01       	movw	r22, r28
    421c:	67 5e       	subi	r22, 0xE7	; 231
    421e:	7f 4f       	sbci	r23, 0xFF	; 255
    4220:	8c e6       	ldi	r24, 0x6C	; 108
    4222:	97 e0       	ldi	r25, 0x07	; 7
    4224:	0e 94 c1 18 	call	0x3182	; 0x3182 <_ZNK6String8endsWithERKS_>
    4228:	18 2f       	mov	r17, r24
    422a:	ce 01       	movw	r24, r28
    422c:	49 96       	adiw	r24, 0x19	; 25
    422e:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <_ZN6StringD1Ev>
    4232:	11 23       	and	r17, r17
    4234:	39 f1       	breq	.+78     	; 0x4284 <_Z14do_serial_taskv+0xba>
        if (inputBuffer.startsWith("RCV=")) {
    4236:	6d ed       	ldi	r22, 0xDD	; 221
    4238:	73 e0       	ldi	r23, 0x03	; 3
    423a:	ce 01       	movw	r24, r28
    423c:	43 96       	adiw	r24, 0x13	; 19
    423e:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <_ZN6StringC1EPKc>
    4242:	be 01       	movw	r22, r28
    4244:	6d 5e       	subi	r22, 0xED	; 237
    4246:	7f 4f       	sbci	r23, 0xFF	; 255
    4248:	8c e6       	ldi	r24, 0x6C	; 108
    424a:	97 e0       	ldi	r25, 0x07	; 7
    424c:	0e 94 b2 18 	call	0x3164	; 0x3164 <_ZNK6String10startsWithERKS_>
    4250:	18 2f       	mov	r17, r24
    4252:	ce 01       	movw	r24, r28
    4254:	43 96       	adiw	r24, 0x13	; 19
    4256:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <_ZN6StringD1Ev>
    425a:	11 23       	and	r17, r17
    425c:	61 f0       	breq	.+24     	; 0x4276 <_Z14do_serial_taskv+0xac>
            inputBuffer.trim();
    425e:	8c e6       	ldi	r24, 0x6C	; 108
    4260:	97 e0       	ldi	r25, 0x07	; 7
    4262:	24 d8       	rcall	.-4024   	; 0x32ac <_ZN6String4trimEv>
            inputBuffer.remove(0, 4);
    4264:	44 e0       	ldi	r20, 0x04	; 4
    4266:	50 e0       	ldi	r21, 0x00	; 0
    4268:	60 e0       	ldi	r22, 0x00	; 0
    426a:	70 e0       	ldi	r23, 0x00	; 0
    426c:	8c e6       	ldi	r24, 0x6C	; 108
    426e:	97 e0       	ldi	r25, 0x07	; 7
    4270:	0e 94 28 19 	call	0x3250	; 0x3250 <_ZN6String6removeEjj>
            //Serial.println(inputBuffer);
            //left_arrow_on = true;
            //inputBuffer = "";
            goto parse_message;
    4274:	0d c0       	rjmp	.+26     	; 0x4290 <_Z14do_serial_taskv+0xc6>
            } else {
            inputBuffer = "";
    4276:	6f e4       	ldi	r22, 0x4F	; 79
    4278:	72 e0       	ldi	r23, 0x02	; 2
    427a:	8c e6       	ldi	r24, 0x6C	; 108
    427c:	97 e0       	ldi	r25, 0x07	; 7
    427e:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <_ZN6StringaSEPKc>
    4282:	06 c0       	rjmp	.+12     	; 0x4290 <_Z14do_serial_taskv+0xc6>
        }
        } else {
        inputBuffer = "";
    4284:	6f e4       	ldi	r22, 0x4F	; 79
    4286:	72 e0       	ldi	r23, 0x02	; 2
    4288:	8c e6       	ldi	r24, 0x6C	; 108
    428a:	97 e0       	ldi	r25, 0x07	; 7
    428c:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <_ZN6StringaSEPKc>
    // check if the message is coming from the phone or backpack
    // then check flex sensors for any special readings for sending to backpack

    //for acknowledgement: if there's already been an acknowledgment for
    
    if (inputBuffer.startsWith("BL1")) {
    4290:	62 ee       	ldi	r22, 0xE2	; 226
    4292:	73 e0       	ldi	r23, 0x03	; 3
    4294:	ce 01       	movw	r24, r28
    4296:	0d 96       	adiw	r24, 0x0d	; 13
    4298:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <_ZN6StringC1EPKc>
    429c:	be 01       	movw	r22, r28
    429e:	63 5f       	subi	r22, 0xF3	; 243
    42a0:	7f 4f       	sbci	r23, 0xFF	; 255
    42a2:	8c e6       	ldi	r24, 0x6C	; 108
    42a4:	97 e0       	ldi	r25, 0x07	; 7
    42a6:	0e 94 b2 18 	call	0x3164	; 0x3164 <_ZNK6String10startsWithERKS_>
    42aa:	18 2f       	mov	r17, r24
    42ac:	ce 01       	movw	r24, r28
    42ae:	0d 96       	adiw	r24, 0x0d	; 13
    42b0:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <_ZN6StringD1Ev>
    42b4:	11 23       	and	r17, r17
    42b6:	19 f1       	breq	.+70     	; 0x42fe <_Z14do_serial_taskv+0x134>
        Serial.println("TO BACKPACK: SHOW LEFT TURN SIGNAL");
    42b8:	66 ee       	ldi	r22, 0xE6	; 230
    42ba:	73 e0       	ldi	r23, 0x03	; 3
    42bc:	82 e6       	ldi	r24, 0x62	; 98
    42be:	94 e0       	ldi	r25, 0x04	; 4
    42c0:	0e 94 b3 12 	call	0x2566	; 0x2566 <_ZN5Print7printlnEPKc>
        show_left_arrow = true;
    42c4:	81 e0       	ldi	r24, 0x01	; 1
    42c6:	80 93 fe 06 	sts	0x06FE, r24
        show_right_arrow = false;
    42ca:	10 92 fd 06 	sts	0x06FD, r1
        show_stop_sign = false;
    42ce:	10 92 fc 06 	sts	0x06FC, r1
        //do some ack stuff here
        Serial.flush();
    42d2:	82 e6       	ldi	r24, 0x62	; 98
    42d4:	94 e0       	ldi	r25, 0x04	; 4
    42d6:	0e 94 55 0e 	call	0x1caa	; 0x1caa <_ZN14HardwareSerial5flushEv>
        sendBuffer.concat("BL1");
    42da:	62 ee       	ldi	r22, 0xE2	; 226
    42dc:	73 e0       	ldi	r23, 0x03	; 3
    42de:	86 e6       	ldi	r24, 0x66	; 102
    42e0:	97 e0       	ldi	r25, 0x07	; 7
    42e2:	0e 94 40 18 	call	0x3080	; 0x3080 <_ZN6String6concatEPKc>
        BTModu.sendData(sendBuffer);
    42e6:	66 e6       	ldi	r22, 0x66	; 102
    42e8:	77 e0       	ldi	r23, 0x07	; 7
    42ea:	87 e0       	ldi	r24, 0x07	; 7
    42ec:	97 e0       	ldi	r25, 0x07	; 7
    42ee:	21 dc       	rcall	.-1982   	; 0x3b32 <_ZN8BLEMate28sendDataER6String>
        sendBuffer = "";
    42f0:	6f e4       	ldi	r22, 0x4F	; 79
    42f2:	72 e0       	ldi	r23, 0x02	; 2
    42f4:	86 e6       	ldi	r24, 0x66	; 102
    42f6:	97 e0       	ldi	r25, 0x07	; 7
    42f8:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <_ZN6StringaSEPKc>
    42fc:	6d c0       	rjmp	.+218    	; 0x43d8 <_Z14do_serial_taskv+0x20e>
        } else if (inputBuffer.startsWith("BR2")) {
    42fe:	69 e0       	ldi	r22, 0x09	; 9
    4300:	74 e0       	ldi	r23, 0x04	; 4
    4302:	ce 01       	movw	r24, r28
    4304:	07 96       	adiw	r24, 0x07	; 7
    4306:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <_ZN6StringC1EPKc>
    430a:	be 01       	movw	r22, r28
    430c:	69 5f       	subi	r22, 0xF9	; 249
    430e:	7f 4f       	sbci	r23, 0xFF	; 255
    4310:	8c e6       	ldi	r24, 0x6C	; 108
    4312:	97 e0       	ldi	r25, 0x07	; 7
    4314:	0e 94 b2 18 	call	0x3164	; 0x3164 <_ZNK6String10startsWithERKS_>
    4318:	18 2f       	mov	r17, r24
    431a:	ce 01       	movw	r24, r28
    431c:	07 96       	adiw	r24, 0x07	; 7
    431e:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <_ZN6StringD1Ev>
    4322:	11 23       	and	r17, r17
    4324:	19 f1       	breq	.+70     	; 0x436c <_Z14do_serial_taskv+0x1a2>
        Serial.println("TO BACKPACK: SHOW RIGHT TURN SIGNAL");
    4326:	6d e0       	ldi	r22, 0x0D	; 13
    4328:	74 e0       	ldi	r23, 0x04	; 4
    432a:	82 e6       	ldi	r24, 0x62	; 98
    432c:	94 e0       	ldi	r25, 0x04	; 4
    432e:	0e 94 b3 12 	call	0x2566	; 0x2566 <_ZN5Print7printlnEPKc>
        show_right_arrow = true;
    4332:	81 e0       	ldi	r24, 0x01	; 1
    4334:	80 93 fd 06 	sts	0x06FD, r24
        show_left_arrow = false;
    4338:	10 92 fe 06 	sts	0x06FE, r1
        show_stop_sign = false;
    433c:	10 92 fc 06 	sts	0x06FC, r1
        //do some ack stuff here
        Serial.flush();
    4340:	82 e6       	ldi	r24, 0x62	; 98
    4342:	94 e0       	ldi	r25, 0x04	; 4
    4344:	0e 94 55 0e 	call	0x1caa	; 0x1caa <_ZN14HardwareSerial5flushEv>
        sendBuffer.concat("BR2");
    4348:	69 e0       	ldi	r22, 0x09	; 9
    434a:	74 e0       	ldi	r23, 0x04	; 4
    434c:	86 e6       	ldi	r24, 0x66	; 102
    434e:	97 e0       	ldi	r25, 0x07	; 7
    4350:	0e 94 40 18 	call	0x3080	; 0x3080 <_ZN6String6concatEPKc>
        BTModu.sendData(sendBuffer);
    4354:	66 e6       	ldi	r22, 0x66	; 102
    4356:	77 e0       	ldi	r23, 0x07	; 7
    4358:	87 e0       	ldi	r24, 0x07	; 7
    435a:	97 e0       	ldi	r25, 0x07	; 7
    435c:	ea db       	rcall	.-2092   	; 0x3b32 <_ZN8BLEMate28sendDataER6String>
        sendBuffer = "";
    435e:	6f e4       	ldi	r22, 0x4F	; 79
    4360:	72 e0       	ldi	r23, 0x02	; 2
    4362:	86 e6       	ldi	r24, 0x66	; 102
    4364:	97 e0       	ldi	r25, 0x07	; 7
    4366:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <_ZN6StringaSEPKc>
    436a:	36 c0       	rjmp	.+108    	; 0x43d8 <_Z14do_serial_taskv+0x20e>
        } else if (inputBuffer.startsWith("BL3")) {
    436c:	61 e3       	ldi	r22, 0x31	; 49
    436e:	74 e0       	ldi	r23, 0x04	; 4
    4370:	ce 01       	movw	r24, r28
    4372:	01 96       	adiw	r24, 0x01	; 1
    4374:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <_ZN6StringC1EPKc>
    4378:	be 01       	movw	r22, r28
    437a:	6f 5f       	subi	r22, 0xFF	; 255
    437c:	7f 4f       	sbci	r23, 0xFF	; 255
    437e:	8c e6       	ldi	r24, 0x6C	; 108
    4380:	97 e0       	ldi	r25, 0x07	; 7
    4382:	0e 94 b2 18 	call	0x3164	; 0x3164 <_ZNK6String10startsWithERKS_>
    4386:	18 2f       	mov	r17, r24
    4388:	ce 01       	movw	r24, r28
    438a:	01 96       	adiw	r24, 0x01	; 1
    438c:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <_ZN6StringD1Ev>
    4390:	11 23       	and	r17, r17
    4392:	11 f1       	breq	.+68     	; 0x43d8 <_Z14do_serial_taskv+0x20e>
        Serial.println("TO BACKPACK: DON'T SHOW RIGHT TURN SIGNAL");
    4394:	65 e3       	ldi	r22, 0x35	; 53
    4396:	74 e0       	ldi	r23, 0x04	; 4
    4398:	82 e6       	ldi	r24, 0x62	; 98
    439a:	94 e0       	ldi	r25, 0x04	; 4
    439c:	0e 94 b3 12 	call	0x2566	; 0x2566 <_ZN5Print7printlnEPKc>
        show_left_arrow = false;
    43a0:	10 92 fe 06 	sts	0x06FE, r1
        show_right_arrow = false;
    43a4:	10 92 fd 06 	sts	0x06FD, r1
        show_stop_sign = true;
    43a8:	81 e0       	ldi	r24, 0x01	; 1
    43aa:	80 93 fc 06 	sts	0x06FC, r24
        //do some ack stuff here
        Serial.flush();
    43ae:	82 e6       	ldi	r24, 0x62	; 98
    43b0:	94 e0       	ldi	r25, 0x04	; 4
    43b2:	0e 94 55 0e 	call	0x1caa	; 0x1caa <_ZN14HardwareSerial5flushEv>
        sendBuffer.concat("BL3");
    43b6:	61 e3       	ldi	r22, 0x31	; 49
    43b8:	74 e0       	ldi	r23, 0x04	; 4
    43ba:	86 e6       	ldi	r24, 0x66	; 102
    43bc:	97 e0       	ldi	r25, 0x07	; 7
    43be:	0e 94 40 18 	call	0x3080	; 0x3080 <_ZN6String6concatEPKc>
        BTModu.sendData(sendBuffer);
    43c2:	66 e6       	ldi	r22, 0x66	; 102
    43c4:	77 e0       	ldi	r23, 0x07	; 7
    43c6:	87 e0       	ldi	r24, 0x07	; 7
    43c8:	97 e0       	ldi	r25, 0x07	; 7
    43ca:	b3 db       	rcall	.-2202   	; 0x3b32 <_ZN8BLEMate28sendDataER6String>
        sendBuffer = "";
    43cc:	6f e4       	ldi	r22, 0x4F	; 79
    43ce:	72 e0       	ldi	r23, 0x02	; 2
    43d0:	86 e6       	ldi	r24, 0x66	; 102
    43d2:	97 e0       	ldi	r25, 0x07	; 7
    43d4:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <_ZN6StringaSEPKc>
    }
}
    43d8:	6e 96       	adiw	r28, 0x1e	; 30
    43da:	0f b6       	in	r0, 0x3f	; 63
    43dc:	f8 94       	cli
    43de:	de bf       	out	0x3e, r29	; 62
    43e0:	0f be       	out	0x3f, r0	; 63
    43e2:	cd bf       	out	0x3d, r28	; 61
    43e4:	df 91       	pop	r29
    43e6:	cf 91       	pop	r28
    43e8:	1f 91       	pop	r17
    43ea:	08 95       	ret

000043ec <_Z4loopv>:
    #endif
    delay(1000);
}

void loop()
{
    43ec:	0f 93       	push	r16
    43ee:	1f 93       	push	r17
    if (millis() > (serial_task_last_run + SERIAL_TASK_PERIOD)) {
    43f0:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <millis>
    43f4:	00 91 03 07 	lds	r16, 0x0703
    43f8:	10 91 04 07 	lds	r17, 0x0704
    43fc:	20 91 05 07 	lds	r18, 0x0705
    4400:	30 91 06 07 	lds	r19, 0x0706
    4404:	08 51       	subi	r16, 0x18	; 24
    4406:	1c 4f       	sbci	r17, 0xFC	; 252
    4408:	2f 4f       	sbci	r18, 0xFF	; 255
    440a:	3f 4f       	sbci	r19, 0xFF	; 255
    440c:	06 17       	cp	r16, r22
    440e:	17 07       	cpc	r17, r23
    4410:	28 07       	cpc	r18, r24
    4412:	39 07       	cpc	r19, r25
    4414:	58 f4       	brcc	.+22     	; 0x442c <_Z4loopv+0x40>
        //Serial.println("Serial runs");
        do_serial_task();
    4416:	d9 de       	rcall	.-590    	; 0x41ca <_Z14do_serial_taskv>
        serial_task_last_run = millis();
    4418:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <millis>
    441c:	60 93 03 07 	sts	0x0703, r22
    4420:	70 93 04 07 	sts	0x0704, r23
    4424:	80 93 05 07 	sts	0x0705, r24
    4428:	90 93 06 07 	sts	0x0706, r25
    }

    if (millis() > (matrix_draw_last_run + MATRIX_DRAW_PERIOD)) {
    442c:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <millis>
    4430:	00 91 ff 06 	lds	r16, 0x06FF
    4434:	10 91 00 07 	lds	r17, 0x0700
    4438:	20 91 01 07 	lds	r18, 0x0701
    443c:	30 91 02 07 	lds	r19, 0x0702
    4440:	08 51       	subi	r16, 0x18	; 24
    4442:	1c 4f       	sbci	r17, 0xFC	; 252
    4444:	2f 4f       	sbci	r18, 0xFF	; 255
    4446:	3f 4f       	sbci	r19, 0xFF	; 255
    4448:	06 17       	cp	r16, r22
    444a:	17 07       	cpc	r17, r23
    444c:	28 07       	cpc	r18, r24
    444e:	39 07       	cpc	r19, r25
    4450:	58 f4       	brcc	.+22     	; 0x4468 <_Z4loopv+0x7c>
        //Serial.println("Flex read runs");
        do_matrix_draw_task();
    4452:	40 de       	rcall	.-896    	; 0x40d4 <_Z19do_matrix_draw_taskv>
        matrix_draw_last_run = millis();
    4454:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <millis>
    4458:	60 93 ff 06 	sts	0x06FF, r22
    445c:	70 93 00 07 	sts	0x0700, r23
    4460:	80 93 01 07 	sts	0x0701, r24
    4464:	90 93 02 07 	sts	0x0702, r25
    }
}
    4468:	1f 91       	pop	r17
    446a:	0f 91       	pop	r16
    446c:	08 95       	ret

0000446e <initVariant>:
int atexit(void (*func)()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    446e:	08 95       	ret

00004470 <main>:

int main(void)
{
	init();
    4470:	0e 94 24 16 	call	0x2c48	; 0x2c48 <init>

	initVariant();
    4474:	fc df       	rcall	.-8      	; 0x446e <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    4476:	5c dc       	rcall	.-1864   	; 0x3d30 <_Z5setupv>
    
	for (;;) {
		loop();
    4478:	b9 df       	rcall	.-142    	; 0x43ec <_Z4loopv>
		if (serialEventRun) serialEventRun();
    447a:	83 e0       	ldi	r24, 0x03	; 3
    447c:	9e e0       	ldi	r25, 0x0E	; 14
    447e:	89 2b       	or	r24, r25
    4480:	21 f0       	breq	.+8      	; 0x448a <main+0x1a>
    4482:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <_Z14serialEventRunv>
#endif
	
	setup();
    
	for (;;) {
		loop();
    4486:	b2 df       	rcall	.-156    	; 0x43ec <_Z4loopv>
    4488:	fc cf       	rjmp	.-8      	; 0x4482 <main+0x12>
    448a:	b0 df       	rcall	.-160    	; 0x43ec <_Z4loopv>
    448c:	fe cf       	rjmp	.-4      	; 0x448a <main+0x1a>

0000448e <__udivmodsi4>:
    448e:	a1 e2       	ldi	r26, 0x21	; 33
    4490:	1a 2e       	mov	r1, r26
    4492:	aa 1b       	sub	r26, r26
    4494:	bb 1b       	sub	r27, r27
    4496:	fd 01       	movw	r30, r26
    4498:	0d c0       	rjmp	.+26     	; 0x44b4 <__udivmodsi4_ep>

0000449a <__udivmodsi4_loop>:
    449a:	aa 1f       	adc	r26, r26
    449c:	bb 1f       	adc	r27, r27
    449e:	ee 1f       	adc	r30, r30
    44a0:	ff 1f       	adc	r31, r31
    44a2:	a2 17       	cp	r26, r18
    44a4:	b3 07       	cpc	r27, r19
    44a6:	e4 07       	cpc	r30, r20
    44a8:	f5 07       	cpc	r31, r21
    44aa:	20 f0       	brcs	.+8      	; 0x44b4 <__udivmodsi4_ep>
    44ac:	a2 1b       	sub	r26, r18
    44ae:	b3 0b       	sbc	r27, r19
    44b0:	e4 0b       	sbc	r30, r20
    44b2:	f5 0b       	sbc	r31, r21

000044b4 <__udivmodsi4_ep>:
    44b4:	66 1f       	adc	r22, r22
    44b6:	77 1f       	adc	r23, r23
    44b8:	88 1f       	adc	r24, r24
    44ba:	99 1f       	adc	r25, r25
    44bc:	1a 94       	dec	r1
    44be:	69 f7       	brne	.-38     	; 0x449a <__udivmodsi4_loop>
    44c0:	60 95       	com	r22
    44c2:	70 95       	com	r23
    44c4:	80 95       	com	r24
    44c6:	90 95       	com	r25
    44c8:	9b 01       	movw	r18, r22
    44ca:	ac 01       	movw	r20, r24
    44cc:	bd 01       	movw	r22, r26
    44ce:	cf 01       	movw	r24, r30
    44d0:	08 95       	ret

000044d2 <__tablejump2__>:
    44d2:	ee 0f       	add	r30, r30
    44d4:	ff 1f       	adc	r31, r31

000044d6 <__tablejump__>:
    44d6:	05 90       	lpm	r0, Z+
    44d8:	f4 91       	lpm	r31, Z
    44da:	e0 2d       	mov	r30, r0
    44dc:	19 94       	eijmp

000044de <__tablejump_elpm__>:
    44de:	07 90       	elpm	r0, Z+
    44e0:	f6 91       	elpm	r31, Z
    44e2:	e0 2d       	mov	r30, r0
    44e4:	19 94       	eijmp

000044e6 <malloc>:
    44e6:	cf 93       	push	r28
    44e8:	df 93       	push	r29
    44ea:	82 30       	cpi	r24, 0x02	; 2
    44ec:	91 05       	cpc	r25, r1
    44ee:	10 f4       	brcc	.+4      	; 0x44f4 <malloc+0xe>
    44f0:	82 e0       	ldi	r24, 0x02	; 2
    44f2:	90 e0       	ldi	r25, 0x00	; 0
    44f4:	e0 91 7a 07 	lds	r30, 0x077A
    44f8:	f0 91 7b 07 	lds	r31, 0x077B
    44fc:	20 e0       	ldi	r18, 0x00	; 0
    44fe:	30 e0       	ldi	r19, 0x00	; 0
    4500:	a0 e0       	ldi	r26, 0x00	; 0
    4502:	b0 e0       	ldi	r27, 0x00	; 0
    4504:	30 97       	sbiw	r30, 0x00	; 0
    4506:	39 f1       	breq	.+78     	; 0x4556 <malloc+0x70>
    4508:	40 81       	ld	r20, Z
    450a:	51 81       	ldd	r21, Z+1	; 0x01
    450c:	48 17       	cp	r20, r24
    450e:	59 07       	cpc	r21, r25
    4510:	b8 f0       	brcs	.+46     	; 0x4540 <malloc+0x5a>
    4512:	48 17       	cp	r20, r24
    4514:	59 07       	cpc	r21, r25
    4516:	71 f4       	brne	.+28     	; 0x4534 <malloc+0x4e>
    4518:	82 81       	ldd	r24, Z+2	; 0x02
    451a:	93 81       	ldd	r25, Z+3	; 0x03
    451c:	10 97       	sbiw	r26, 0x00	; 0
    451e:	29 f0       	breq	.+10     	; 0x452a <malloc+0x44>
    4520:	13 96       	adiw	r26, 0x03	; 3
    4522:	9c 93       	st	X, r25
    4524:	8e 93       	st	-X, r24
    4526:	12 97       	sbiw	r26, 0x02	; 2
    4528:	2c c0       	rjmp	.+88     	; 0x4582 <malloc+0x9c>
    452a:	90 93 7b 07 	sts	0x077B, r25
    452e:	80 93 7a 07 	sts	0x077A, r24
    4532:	27 c0       	rjmp	.+78     	; 0x4582 <malloc+0x9c>
    4534:	21 15       	cp	r18, r1
    4536:	31 05       	cpc	r19, r1
    4538:	31 f0       	breq	.+12     	; 0x4546 <malloc+0x60>
    453a:	42 17       	cp	r20, r18
    453c:	53 07       	cpc	r21, r19
    453e:	18 f0       	brcs	.+6      	; 0x4546 <malloc+0x60>
    4540:	a9 01       	movw	r20, r18
    4542:	db 01       	movw	r26, r22
    4544:	01 c0       	rjmp	.+2      	; 0x4548 <malloc+0x62>
    4546:	ef 01       	movw	r28, r30
    4548:	9a 01       	movw	r18, r20
    454a:	bd 01       	movw	r22, r26
    454c:	df 01       	movw	r26, r30
    454e:	02 80       	ldd	r0, Z+2	; 0x02
    4550:	f3 81       	ldd	r31, Z+3	; 0x03
    4552:	e0 2d       	mov	r30, r0
    4554:	d7 cf       	rjmp	.-82     	; 0x4504 <malloc+0x1e>
    4556:	21 15       	cp	r18, r1
    4558:	31 05       	cpc	r19, r1
    455a:	f9 f0       	breq	.+62     	; 0x459a <malloc+0xb4>
    455c:	28 1b       	sub	r18, r24
    455e:	39 0b       	sbc	r19, r25
    4560:	24 30       	cpi	r18, 0x04	; 4
    4562:	31 05       	cpc	r19, r1
    4564:	80 f4       	brcc	.+32     	; 0x4586 <malloc+0xa0>
    4566:	8a 81       	ldd	r24, Y+2	; 0x02
    4568:	9b 81       	ldd	r25, Y+3	; 0x03
    456a:	61 15       	cp	r22, r1
    456c:	71 05       	cpc	r23, r1
    456e:	21 f0       	breq	.+8      	; 0x4578 <malloc+0x92>
    4570:	fb 01       	movw	r30, r22
    4572:	93 83       	std	Z+3, r25	; 0x03
    4574:	82 83       	std	Z+2, r24	; 0x02
    4576:	04 c0       	rjmp	.+8      	; 0x4580 <malloc+0x9a>
    4578:	90 93 7b 07 	sts	0x077B, r25
    457c:	80 93 7a 07 	sts	0x077A, r24
    4580:	fe 01       	movw	r30, r28
    4582:	32 96       	adiw	r30, 0x02	; 2
    4584:	44 c0       	rjmp	.+136    	; 0x460e <malloc+0x128>
    4586:	fe 01       	movw	r30, r28
    4588:	e2 0f       	add	r30, r18
    458a:	f3 1f       	adc	r31, r19
    458c:	81 93       	st	Z+, r24
    458e:	91 93       	st	Z+, r25
    4590:	22 50       	subi	r18, 0x02	; 2
    4592:	31 09       	sbc	r19, r1
    4594:	39 83       	std	Y+1, r19	; 0x01
    4596:	28 83       	st	Y, r18
    4598:	3a c0       	rjmp	.+116    	; 0x460e <malloc+0x128>
    459a:	20 91 78 07 	lds	r18, 0x0778
    459e:	30 91 79 07 	lds	r19, 0x0779
    45a2:	23 2b       	or	r18, r19
    45a4:	41 f4       	brne	.+16     	; 0x45b6 <malloc+0xd0>
    45a6:	20 91 02 02 	lds	r18, 0x0202
    45aa:	30 91 03 02 	lds	r19, 0x0203
    45ae:	30 93 79 07 	sts	0x0779, r19
    45b2:	20 93 78 07 	sts	0x0778, r18
    45b6:	20 91 00 02 	lds	r18, 0x0200
    45ba:	30 91 01 02 	lds	r19, 0x0201
    45be:	21 15       	cp	r18, r1
    45c0:	31 05       	cpc	r19, r1
    45c2:	41 f4       	brne	.+16     	; 0x45d4 <malloc+0xee>
    45c4:	2d b7       	in	r18, 0x3d	; 61
    45c6:	3e b7       	in	r19, 0x3e	; 62
    45c8:	40 91 04 02 	lds	r20, 0x0204
    45cc:	50 91 05 02 	lds	r21, 0x0205
    45d0:	24 1b       	sub	r18, r20
    45d2:	35 0b       	sbc	r19, r21
    45d4:	e0 91 78 07 	lds	r30, 0x0778
    45d8:	f0 91 79 07 	lds	r31, 0x0779
    45dc:	e2 17       	cp	r30, r18
    45de:	f3 07       	cpc	r31, r19
    45e0:	a0 f4       	brcc	.+40     	; 0x460a <malloc+0x124>
    45e2:	2e 1b       	sub	r18, r30
    45e4:	3f 0b       	sbc	r19, r31
    45e6:	28 17       	cp	r18, r24
    45e8:	39 07       	cpc	r19, r25
    45ea:	78 f0       	brcs	.+30     	; 0x460a <malloc+0x124>
    45ec:	ac 01       	movw	r20, r24
    45ee:	4e 5f       	subi	r20, 0xFE	; 254
    45f0:	5f 4f       	sbci	r21, 0xFF	; 255
    45f2:	24 17       	cp	r18, r20
    45f4:	35 07       	cpc	r19, r21
    45f6:	48 f0       	brcs	.+18     	; 0x460a <malloc+0x124>
    45f8:	4e 0f       	add	r20, r30
    45fa:	5f 1f       	adc	r21, r31
    45fc:	50 93 79 07 	sts	0x0779, r21
    4600:	40 93 78 07 	sts	0x0778, r20
    4604:	81 93       	st	Z+, r24
    4606:	91 93       	st	Z+, r25
    4608:	02 c0       	rjmp	.+4      	; 0x460e <malloc+0x128>
    460a:	e0 e0       	ldi	r30, 0x00	; 0
    460c:	f0 e0       	ldi	r31, 0x00	; 0
    460e:	cf 01       	movw	r24, r30
    4610:	df 91       	pop	r29
    4612:	cf 91       	pop	r28
    4614:	08 95       	ret

00004616 <free>:
    4616:	cf 93       	push	r28
    4618:	df 93       	push	r29
    461a:	00 97       	sbiw	r24, 0x00	; 0
    461c:	09 f4       	brne	.+2      	; 0x4620 <free+0xa>
    461e:	87 c0       	rjmp	.+270    	; 0x472e <free+0x118>
    4620:	fc 01       	movw	r30, r24
    4622:	32 97       	sbiw	r30, 0x02	; 2
    4624:	13 82       	std	Z+3, r1	; 0x03
    4626:	12 82       	std	Z+2, r1	; 0x02
    4628:	c0 91 7a 07 	lds	r28, 0x077A
    462c:	d0 91 7b 07 	lds	r29, 0x077B
    4630:	20 97       	sbiw	r28, 0x00	; 0
    4632:	81 f4       	brne	.+32     	; 0x4654 <free+0x3e>
    4634:	20 81       	ld	r18, Z
    4636:	31 81       	ldd	r19, Z+1	; 0x01
    4638:	28 0f       	add	r18, r24
    463a:	39 1f       	adc	r19, r25
    463c:	80 91 78 07 	lds	r24, 0x0778
    4640:	90 91 79 07 	lds	r25, 0x0779
    4644:	82 17       	cp	r24, r18
    4646:	93 07       	cpc	r25, r19
    4648:	79 f5       	brne	.+94     	; 0x46a8 <free+0x92>
    464a:	f0 93 79 07 	sts	0x0779, r31
    464e:	e0 93 78 07 	sts	0x0778, r30
    4652:	6d c0       	rjmp	.+218    	; 0x472e <free+0x118>
    4654:	de 01       	movw	r26, r28
    4656:	20 e0       	ldi	r18, 0x00	; 0
    4658:	30 e0       	ldi	r19, 0x00	; 0
    465a:	ae 17       	cp	r26, r30
    465c:	bf 07       	cpc	r27, r31
    465e:	50 f4       	brcc	.+20     	; 0x4674 <free+0x5e>
    4660:	12 96       	adiw	r26, 0x02	; 2
    4662:	4d 91       	ld	r20, X+
    4664:	5c 91       	ld	r21, X
    4666:	13 97       	sbiw	r26, 0x03	; 3
    4668:	9d 01       	movw	r18, r26
    466a:	41 15       	cp	r20, r1
    466c:	51 05       	cpc	r21, r1
    466e:	09 f1       	breq	.+66     	; 0x46b2 <free+0x9c>
    4670:	da 01       	movw	r26, r20
    4672:	f3 cf       	rjmp	.-26     	; 0x465a <free+0x44>
    4674:	b3 83       	std	Z+3, r27	; 0x03
    4676:	a2 83       	std	Z+2, r26	; 0x02
    4678:	40 81       	ld	r20, Z
    467a:	51 81       	ldd	r21, Z+1	; 0x01
    467c:	84 0f       	add	r24, r20
    467e:	95 1f       	adc	r25, r21
    4680:	8a 17       	cp	r24, r26
    4682:	9b 07       	cpc	r25, r27
    4684:	71 f4       	brne	.+28     	; 0x46a2 <free+0x8c>
    4686:	8d 91       	ld	r24, X+
    4688:	9c 91       	ld	r25, X
    468a:	11 97       	sbiw	r26, 0x01	; 1
    468c:	84 0f       	add	r24, r20
    468e:	95 1f       	adc	r25, r21
    4690:	02 96       	adiw	r24, 0x02	; 2
    4692:	91 83       	std	Z+1, r25	; 0x01
    4694:	80 83       	st	Z, r24
    4696:	12 96       	adiw	r26, 0x02	; 2
    4698:	8d 91       	ld	r24, X+
    469a:	9c 91       	ld	r25, X
    469c:	13 97       	sbiw	r26, 0x03	; 3
    469e:	93 83       	std	Z+3, r25	; 0x03
    46a0:	82 83       	std	Z+2, r24	; 0x02
    46a2:	21 15       	cp	r18, r1
    46a4:	31 05       	cpc	r19, r1
    46a6:	29 f4       	brne	.+10     	; 0x46b2 <free+0x9c>
    46a8:	f0 93 7b 07 	sts	0x077B, r31
    46ac:	e0 93 7a 07 	sts	0x077A, r30
    46b0:	3e c0       	rjmp	.+124    	; 0x472e <free+0x118>
    46b2:	d9 01       	movw	r26, r18
    46b4:	13 96       	adiw	r26, 0x03	; 3
    46b6:	fc 93       	st	X, r31
    46b8:	ee 93       	st	-X, r30
    46ba:	12 97       	sbiw	r26, 0x02	; 2
    46bc:	4d 91       	ld	r20, X+
    46be:	5d 91       	ld	r21, X+
    46c0:	a4 0f       	add	r26, r20
    46c2:	b5 1f       	adc	r27, r21
    46c4:	ea 17       	cp	r30, r26
    46c6:	fb 07       	cpc	r31, r27
    46c8:	79 f4       	brne	.+30     	; 0x46e8 <free+0xd2>
    46ca:	80 81       	ld	r24, Z
    46cc:	91 81       	ldd	r25, Z+1	; 0x01
    46ce:	84 0f       	add	r24, r20
    46d0:	95 1f       	adc	r25, r21
    46d2:	02 96       	adiw	r24, 0x02	; 2
    46d4:	d9 01       	movw	r26, r18
    46d6:	11 96       	adiw	r26, 0x01	; 1
    46d8:	9c 93       	st	X, r25
    46da:	8e 93       	st	-X, r24
    46dc:	82 81       	ldd	r24, Z+2	; 0x02
    46de:	93 81       	ldd	r25, Z+3	; 0x03
    46e0:	13 96       	adiw	r26, 0x03	; 3
    46e2:	9c 93       	st	X, r25
    46e4:	8e 93       	st	-X, r24
    46e6:	12 97       	sbiw	r26, 0x02	; 2
    46e8:	e0 e0       	ldi	r30, 0x00	; 0
    46ea:	f0 e0       	ldi	r31, 0x00	; 0
    46ec:	8a 81       	ldd	r24, Y+2	; 0x02
    46ee:	9b 81       	ldd	r25, Y+3	; 0x03
    46f0:	00 97       	sbiw	r24, 0x00	; 0
    46f2:	19 f0       	breq	.+6      	; 0x46fa <free+0xe4>
    46f4:	fe 01       	movw	r30, r28
    46f6:	ec 01       	movw	r28, r24
    46f8:	f9 cf       	rjmp	.-14     	; 0x46ec <free+0xd6>
    46fa:	ce 01       	movw	r24, r28
    46fc:	02 96       	adiw	r24, 0x02	; 2
    46fe:	28 81       	ld	r18, Y
    4700:	39 81       	ldd	r19, Y+1	; 0x01
    4702:	82 0f       	add	r24, r18
    4704:	93 1f       	adc	r25, r19
    4706:	20 91 78 07 	lds	r18, 0x0778
    470a:	30 91 79 07 	lds	r19, 0x0779
    470e:	28 17       	cp	r18, r24
    4710:	39 07       	cpc	r19, r25
    4712:	69 f4       	brne	.+26     	; 0x472e <free+0x118>
    4714:	30 97       	sbiw	r30, 0x00	; 0
    4716:	29 f4       	brne	.+10     	; 0x4722 <free+0x10c>
    4718:	10 92 7b 07 	sts	0x077B, r1
    471c:	10 92 7a 07 	sts	0x077A, r1
    4720:	02 c0       	rjmp	.+4      	; 0x4726 <free+0x110>
    4722:	13 82       	std	Z+3, r1	; 0x03
    4724:	12 82       	std	Z+2, r1	; 0x02
    4726:	d0 93 79 07 	sts	0x0779, r29
    472a:	c0 93 78 07 	sts	0x0778, r28
    472e:	df 91       	pop	r29
    4730:	cf 91       	pop	r28
    4732:	08 95       	ret

00004734 <realloc>:
    4734:	6f 92       	push	r6
    4736:	7f 92       	push	r7
    4738:	8f 92       	push	r8
    473a:	9f 92       	push	r9
    473c:	af 92       	push	r10
    473e:	bf 92       	push	r11
    4740:	cf 92       	push	r12
    4742:	df 92       	push	r13
    4744:	ef 92       	push	r14
    4746:	ff 92       	push	r15
    4748:	0f 93       	push	r16
    474a:	1f 93       	push	r17
    474c:	cf 93       	push	r28
    474e:	df 93       	push	r29
    4750:	ec 01       	movw	r28, r24
    4752:	cb 01       	movw	r24, r22
    4754:	20 97       	sbiw	r28, 0x00	; 0
    4756:	79 f4       	brne	.+30     	; 0x4776 <realloc+0x42>
    4758:	df 91       	pop	r29
    475a:	cf 91       	pop	r28
    475c:	1f 91       	pop	r17
    475e:	0f 91       	pop	r16
    4760:	ff 90       	pop	r15
    4762:	ef 90       	pop	r14
    4764:	df 90       	pop	r13
    4766:	cf 90       	pop	r12
    4768:	bf 90       	pop	r11
    476a:	af 90       	pop	r10
    476c:	9f 90       	pop	r9
    476e:	8f 90       	pop	r8
    4770:	7f 90       	pop	r7
    4772:	6f 90       	pop	r6
    4774:	b8 ce       	rjmp	.-656    	; 0x44e6 <malloc>
    4776:	fe 01       	movw	r30, r28
    4778:	e6 0f       	add	r30, r22
    477a:	f7 1f       	adc	r31, r23
    477c:	9e 01       	movw	r18, r28
    477e:	22 50       	subi	r18, 0x02	; 2
    4780:	31 09       	sbc	r19, r1
    4782:	e2 17       	cp	r30, r18
    4784:	f3 07       	cpc	r31, r19
    4786:	08 f4       	brcc	.+2      	; 0x478a <realloc+0x56>
    4788:	a8 c0       	rjmp	.+336    	; 0x48da <realloc+0x1a6>
    478a:	d9 01       	movw	r26, r18
    478c:	0d 91       	ld	r16, X+
    478e:	1c 91       	ld	r17, X
    4790:	11 97       	sbiw	r26, 0x01	; 1
    4792:	06 17       	cp	r16, r22
    4794:	17 07       	cpc	r17, r23
    4796:	b0 f0       	brcs	.+44     	; 0x47c4 <realloc+0x90>
    4798:	05 30       	cpi	r16, 0x05	; 5
    479a:	11 05       	cpc	r17, r1
    479c:	08 f4       	brcc	.+2      	; 0x47a0 <realloc+0x6c>
    479e:	9b c0       	rjmp	.+310    	; 0x48d6 <realloc+0x1a2>
    47a0:	a8 01       	movw	r20, r16
    47a2:	44 50       	subi	r20, 0x04	; 4
    47a4:	51 09       	sbc	r21, r1
    47a6:	46 17       	cp	r20, r22
    47a8:	57 07       	cpc	r21, r23
    47aa:	08 f4       	brcc	.+2      	; 0x47ae <realloc+0x7a>
    47ac:	94 c0       	rjmp	.+296    	; 0x48d6 <realloc+0x1a2>
    47ae:	02 50       	subi	r16, 0x02	; 2
    47b0:	11 09       	sbc	r17, r1
    47b2:	06 1b       	sub	r16, r22
    47b4:	17 0b       	sbc	r17, r23
    47b6:	01 93       	st	Z+, r16
    47b8:	11 93       	st	Z+, r17
    47ba:	6d 93       	st	X+, r22
    47bc:	7c 93       	st	X, r23
    47be:	cf 01       	movw	r24, r30
    47c0:	2a df       	rcall	.-428    	; 0x4616 <free>
    47c2:	89 c0       	rjmp	.+274    	; 0x48d6 <realloc+0x1a2>
    47c4:	5b 01       	movw	r10, r22
    47c6:	a0 1a       	sub	r10, r16
    47c8:	b1 0a       	sbc	r11, r17
    47ca:	4e 01       	movw	r8, r28
    47cc:	80 0e       	add	r8, r16
    47ce:	91 1e       	adc	r9, r17
    47d0:	a0 91 7a 07 	lds	r26, 0x077A
    47d4:	b0 91 7b 07 	lds	r27, 0x077B
    47d8:	61 2c       	mov	r6, r1
    47da:	71 2c       	mov	r7, r1
    47dc:	60 e0       	ldi	r22, 0x00	; 0
    47de:	70 e0       	ldi	r23, 0x00	; 0
    47e0:	10 97       	sbiw	r26, 0x00	; 0
    47e2:	09 f4       	brne	.+2      	; 0x47e6 <realloc+0xb2>
    47e4:	49 c0       	rjmp	.+146    	; 0x4878 <realloc+0x144>
    47e6:	a8 15       	cp	r26, r8
    47e8:	b9 05       	cpc	r27, r9
    47ea:	c9 f5       	brne	.+114    	; 0x485e <realloc+0x12a>
    47ec:	ed 90       	ld	r14, X+
    47ee:	fc 90       	ld	r15, X
    47f0:	11 97       	sbiw	r26, 0x01	; 1
    47f2:	67 01       	movw	r12, r14
    47f4:	42 e0       	ldi	r20, 0x02	; 2
    47f6:	c4 0e       	add	r12, r20
    47f8:	d1 1c       	adc	r13, r1
    47fa:	ca 14       	cp	r12, r10
    47fc:	db 04       	cpc	r13, r11
    47fe:	78 f1       	brcs	.+94     	; 0x485e <realloc+0x12a>
    4800:	47 01       	movw	r8, r14
    4802:	8a 18       	sub	r8, r10
    4804:	9b 08       	sbc	r9, r11
    4806:	64 01       	movw	r12, r8
    4808:	42 e0       	ldi	r20, 0x02	; 2
    480a:	c4 0e       	add	r12, r20
    480c:	d1 1c       	adc	r13, r1
    480e:	12 96       	adiw	r26, 0x02	; 2
    4810:	bc 90       	ld	r11, X
    4812:	12 97       	sbiw	r26, 0x02	; 2
    4814:	13 96       	adiw	r26, 0x03	; 3
    4816:	ac 91       	ld	r26, X
    4818:	b5 e0       	ldi	r27, 0x05	; 5
    481a:	cb 16       	cp	r12, r27
    481c:	d1 04       	cpc	r13, r1
    481e:	40 f0       	brcs	.+16     	; 0x4830 <realloc+0xfc>
    4820:	b2 82       	std	Z+2, r11	; 0x02
    4822:	a3 83       	std	Z+3, r26	; 0x03
    4824:	91 82       	std	Z+1, r9	; 0x01
    4826:	80 82       	st	Z, r8
    4828:	d9 01       	movw	r26, r18
    482a:	8d 93       	st	X+, r24
    482c:	9c 93       	st	X, r25
    482e:	09 c0       	rjmp	.+18     	; 0x4842 <realloc+0x10e>
    4830:	0e 5f       	subi	r16, 0xFE	; 254
    4832:	1f 4f       	sbci	r17, 0xFF	; 255
    4834:	0e 0d       	add	r16, r14
    4836:	1f 1d       	adc	r17, r15
    4838:	f9 01       	movw	r30, r18
    483a:	11 83       	std	Z+1, r17	; 0x01
    483c:	00 83       	st	Z, r16
    483e:	eb 2d       	mov	r30, r11
    4840:	fa 2f       	mov	r31, r26
    4842:	61 15       	cp	r22, r1
    4844:	71 05       	cpc	r23, r1
    4846:	31 f0       	breq	.+12     	; 0x4854 <realloc+0x120>
    4848:	db 01       	movw	r26, r22
    484a:	13 96       	adiw	r26, 0x03	; 3
    484c:	fc 93       	st	X, r31
    484e:	ee 93       	st	-X, r30
    4850:	12 97       	sbiw	r26, 0x02	; 2
    4852:	41 c0       	rjmp	.+130    	; 0x48d6 <realloc+0x1a2>
    4854:	f0 93 7b 07 	sts	0x077B, r31
    4858:	e0 93 7a 07 	sts	0x077A, r30
    485c:	3c c0       	rjmp	.+120    	; 0x48d6 <realloc+0x1a2>
    485e:	6d 91       	ld	r22, X+
    4860:	7c 91       	ld	r23, X
    4862:	11 97       	sbiw	r26, 0x01	; 1
    4864:	66 16       	cp	r6, r22
    4866:	77 06       	cpc	r7, r23
    4868:	08 f4       	brcc	.+2      	; 0x486c <realloc+0x138>
    486a:	3b 01       	movw	r6, r22
    486c:	bd 01       	movw	r22, r26
    486e:	12 96       	adiw	r26, 0x02	; 2
    4870:	0d 90       	ld	r0, X+
    4872:	bc 91       	ld	r27, X
    4874:	a0 2d       	mov	r26, r0
    4876:	b4 cf       	rjmp	.-152    	; 0x47e0 <realloc+0xac>
    4878:	60 91 78 07 	lds	r22, 0x0778
    487c:	70 91 79 07 	lds	r23, 0x0779
    4880:	68 15       	cp	r22, r8
    4882:	79 05       	cpc	r23, r9
    4884:	e9 f4       	brne	.+58     	; 0x48c0 <realloc+0x18c>
    4886:	68 16       	cp	r6, r24
    4888:	79 06       	cpc	r7, r25
    488a:	d0 f4       	brcc	.+52     	; 0x48c0 <realloc+0x18c>
    488c:	40 91 00 02 	lds	r20, 0x0200
    4890:	50 91 01 02 	lds	r21, 0x0201
    4894:	41 15       	cp	r20, r1
    4896:	51 05       	cpc	r21, r1
    4898:	41 f4       	brne	.+16     	; 0x48aa <realloc+0x176>
    489a:	4d b7       	in	r20, 0x3d	; 61
    489c:	5e b7       	in	r21, 0x3e	; 62
    489e:	60 91 04 02 	lds	r22, 0x0204
    48a2:	70 91 05 02 	lds	r23, 0x0205
    48a6:	46 1b       	sub	r20, r22
    48a8:	57 0b       	sbc	r21, r23
    48aa:	e4 17       	cp	r30, r20
    48ac:	f5 07       	cpc	r31, r21
    48ae:	a8 f4       	brcc	.+42     	; 0x48da <realloc+0x1a6>
    48b0:	f0 93 79 07 	sts	0x0779, r31
    48b4:	e0 93 78 07 	sts	0x0778, r30
    48b8:	f9 01       	movw	r30, r18
    48ba:	91 83       	std	Z+1, r25	; 0x01
    48bc:	80 83       	st	Z, r24
    48be:	0b c0       	rjmp	.+22     	; 0x48d6 <realloc+0x1a2>
    48c0:	12 de       	rcall	.-988    	; 0x44e6 <malloc>
    48c2:	7c 01       	movw	r14, r24
    48c4:	00 97       	sbiw	r24, 0x00	; 0
    48c6:	49 f0       	breq	.+18     	; 0x48da <realloc+0x1a6>
    48c8:	a8 01       	movw	r20, r16
    48ca:	be 01       	movw	r22, r28
    48cc:	23 d0       	rcall	.+70     	; 0x4914 <memcpy>
    48ce:	ce 01       	movw	r24, r28
    48d0:	a2 de       	rcall	.-700    	; 0x4616 <free>
    48d2:	c7 01       	movw	r24, r14
    48d4:	04 c0       	rjmp	.+8      	; 0x48de <realloc+0x1aa>
    48d6:	ce 01       	movw	r24, r28
    48d8:	02 c0       	rjmp	.+4      	; 0x48de <realloc+0x1aa>
    48da:	80 e0       	ldi	r24, 0x00	; 0
    48dc:	90 e0       	ldi	r25, 0x00	; 0
    48de:	df 91       	pop	r29
    48e0:	cf 91       	pop	r28
    48e2:	1f 91       	pop	r17
    48e4:	0f 91       	pop	r16
    48e6:	ff 90       	pop	r15
    48e8:	ef 90       	pop	r14
    48ea:	df 90       	pop	r13
    48ec:	cf 90       	pop	r12
    48ee:	bf 90       	pop	r11
    48f0:	af 90       	pop	r10
    48f2:	9f 90       	pop	r9
    48f4:	8f 90       	pop	r8
    48f6:	7f 90       	pop	r7
    48f8:	6f 90       	pop	r6
    48fa:	08 95       	ret

000048fc <abort>:
    48fc:	81 e0       	ldi	r24, 0x01	; 1
    48fe:	90 e0       	ldi	r25, 0x00	; 0
    4900:	f8 94       	cli
    4902:	48 c0       	rjmp	.+144    	; 0x4994 <__do_global_dtors>

00004904 <isspace>:
    4904:	91 11       	cpse	r25, r1
    4906:	43 c0       	rjmp	.+134    	; 0x498e <__ctype_isfalse>
    4908:	80 32       	cpi	r24, 0x20	; 32
    490a:	19 f0       	breq	.+6      	; 0x4912 <isspace+0xe>
    490c:	89 50       	subi	r24, 0x09	; 9
    490e:	85 50       	subi	r24, 0x05	; 5
    4910:	d0 f7       	brcc	.-12     	; 0x4906 <isspace+0x2>
    4912:	08 95       	ret

00004914 <memcpy>:
    4914:	fb 01       	movw	r30, r22
    4916:	dc 01       	movw	r26, r24
    4918:	02 c0       	rjmp	.+4      	; 0x491e <memcpy+0xa>
    491a:	01 90       	ld	r0, Z+
    491c:	0d 92       	st	X+, r0
    491e:	41 50       	subi	r20, 0x01	; 1
    4920:	50 40       	sbci	r21, 0x00	; 0
    4922:	d8 f7       	brcc	.-10     	; 0x491a <memcpy+0x6>
    4924:	08 95       	ret

00004926 <memset>:
    4926:	dc 01       	movw	r26, r24
    4928:	01 c0       	rjmp	.+2      	; 0x492c <memset+0x6>
    492a:	6d 93       	st	X+, r22
    492c:	41 50       	subi	r20, 0x01	; 1
    492e:	50 40       	sbci	r21, 0x00	; 0
    4930:	e0 f7       	brcc	.-8      	; 0x492a <memset+0x4>
    4932:	08 95       	ret

00004934 <strcmp>:
    4934:	fb 01       	movw	r30, r22
    4936:	dc 01       	movw	r26, r24
    4938:	8d 91       	ld	r24, X+
    493a:	01 90       	ld	r0, Z+
    493c:	80 19       	sub	r24, r0
    493e:	01 10       	cpse	r0, r1
    4940:	d9 f3       	breq	.-10     	; 0x4938 <strcmp+0x4>
    4942:	99 0b       	sbc	r25, r25
    4944:	08 95       	ret

00004946 <strcpy>:
    4946:	fb 01       	movw	r30, r22
    4948:	dc 01       	movw	r26, r24
    494a:	01 90       	ld	r0, Z+
    494c:	0d 92       	st	X+, r0
    494e:	00 20       	and	r0, r0
    4950:	e1 f7       	brne	.-8      	; 0x494a <strcpy+0x4>
    4952:	08 95       	ret

00004954 <strncmp>:
    4954:	fb 01       	movw	r30, r22
    4956:	dc 01       	movw	r26, r24
    4958:	41 50       	subi	r20, 0x01	; 1
    495a:	50 40       	sbci	r21, 0x00	; 0
    495c:	30 f0       	brcs	.+12     	; 0x496a <strncmp+0x16>
    495e:	8d 91       	ld	r24, X+
    4960:	01 90       	ld	r0, Z+
    4962:	80 19       	sub	r24, r0
    4964:	19 f4       	brne	.+6      	; 0x496c <strncmp+0x18>
    4966:	00 20       	and	r0, r0
    4968:	b9 f7       	brne	.-18     	; 0x4958 <strncmp+0x4>
    496a:	88 1b       	sub	r24, r24
    496c:	99 0b       	sbc	r25, r25
    496e:	08 95       	ret

00004970 <strncpy>:
    4970:	fb 01       	movw	r30, r22
    4972:	dc 01       	movw	r26, r24
    4974:	41 50       	subi	r20, 0x01	; 1
    4976:	50 40       	sbci	r21, 0x00	; 0
    4978:	48 f0       	brcs	.+18     	; 0x498c <strncpy+0x1c>
    497a:	01 90       	ld	r0, Z+
    497c:	0d 92       	st	X+, r0
    497e:	00 20       	and	r0, r0
    4980:	c9 f7       	brne	.-14     	; 0x4974 <strncpy+0x4>
    4982:	01 c0       	rjmp	.+2      	; 0x4986 <strncpy+0x16>
    4984:	1d 92       	st	X+, r1
    4986:	41 50       	subi	r20, 0x01	; 1
    4988:	50 40       	sbci	r21, 0x00	; 0
    498a:	e0 f7       	brcc	.-8      	; 0x4984 <strncpy+0x14>
    498c:	08 95       	ret

0000498e <__ctype_isfalse>:
    498e:	99 27       	eor	r25, r25
    4990:	88 27       	eor	r24, r24

00004992 <__ctype_istrue>:
    4992:	08 95       	ret

00004994 <__do_global_dtors>:
    4994:	17 e0       	ldi	r17, 0x07	; 7
    4996:	c6 e1       	ldi	r28, 0x16	; 22
    4998:	d7 e0       	ldi	r29, 0x07	; 7
    499a:	00 e0       	ldi	r16, 0x00	; 0
    499c:	05 c0       	rjmp	.+10     	; 0x49a8 <__do_global_dtors+0x14>
    499e:	22 97       	sbiw	r28, 0x02	; 2
    49a0:	01 09       	sbc	r16, r1
    49a2:	fe 01       	movw	r30, r28
    49a4:	0b bf       	out	0x3b, r16	; 59
    49a6:	9b dd       	rcall	.-1226   	; 0x44de <__tablejump_elpm__>
    49a8:	c8 31       	cpi	r28, 0x18	; 24
    49aa:	d1 07       	cpc	r29, r17
    49ac:	80 e0       	ldi	r24, 0x00	; 0
    49ae:	08 07       	cpc	r16, r24
    49b0:	b1 f7       	brne	.-20     	; 0x499e <__do_global_dtors+0xa>
    49b2:	f8 94       	cli

000049b4 <__stop_program>:
    49b4:	ff cf       	rjmp	.-2      	; 0x49b4 <__stop_program>
